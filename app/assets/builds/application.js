(() => {
  var __create = Object.create;
  var __defProp = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __getProtoOf = Object.getPrototypeOf;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __commonJS = (cb, mod) => function __require() {
    return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames(from))
        if (!__hasOwnProp.call(to, key) && key !== except)
          __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
    // If the importer is in node compatibility mode or this is not an ESM
    // file that has been converted to a CommonJS file using a Babel-
    // compatible transform (i.e. "__esModule" has not been set), then set
    // "default" to the CommonJS "module.exports" for node compatibility.
    isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
    mod
  ));

  // node_modules/jquery/dist/jquery.js
  var require_jquery = __commonJS({
    "node_modules/jquery/dist/jquery.js"(exports, module) {
      (function(global2, factory) {
        "use strict";
        if (typeof module === "object" && typeof module.exports === "object") {
          module.exports = global2.document ? factory(global2, true) : function(w) {
            if (!w.document) {
              throw new Error("jQuery requires a window with a document");
            }
            return factory(w);
          };
        } else {
          factory(global2);
        }
      })(typeof window !== "undefined" ? window : exports, function(window2, noGlobal) {
        "use strict";
        var arr = [];
        var getProto = Object.getPrototypeOf;
        var slice = arr.slice;
        var flat = arr.flat ? function(array) {
          return arr.flat.call(array);
        } : function(array) {
          return arr.concat.apply([], array);
        };
        var push = arr.push;
        var indexOf = arr.indexOf;
        var class2type = {};
        var toString = class2type.toString;
        var hasOwn = class2type.hasOwnProperty;
        var fnToString = hasOwn.toString;
        var ObjectFunctionString = fnToString.call(Object);
        var support = {};
        var isFunction = function isFunction2(obj) {
          return typeof obj === "function" && typeof obj.nodeType !== "number" && typeof obj.item !== "function";
        };
        var isWindow = function isWindow2(obj) {
          return obj != null && obj === obj.window;
        };
        var document2 = window2.document;
        var preservedScriptAttributes = {
          type: true,
          src: true,
          nonce: true,
          noModule: true
        };
        function DOMEval(code, node, doc) {
          doc = doc || document2;
          var i, val, script = doc.createElement("script");
          script.text = code;
          if (node) {
            for (i in preservedScriptAttributes) {
              val = node[i] || node.getAttribute && node.getAttribute(i);
              if (val) {
                script.setAttribute(i, val);
              }
            }
          }
          doc.head.appendChild(script).parentNode.removeChild(script);
        }
        function toType(obj) {
          if (obj == null) {
            return obj + "";
          }
          return typeof obj === "object" || typeof obj === "function" ? class2type[toString.call(obj)] || "object" : typeof obj;
        }
        var version = "3.7.1", rhtmlSuffix = /HTML$/i, jQuery2 = function(selector, context) {
          return new jQuery2.fn.init(selector, context);
        };
        jQuery2.fn = jQuery2.prototype = {
          // The current version of jQuery being used
          jquery: version,
          constructor: jQuery2,
          // The default length of a jQuery object is 0
          length: 0,
          toArray: function() {
            return slice.call(this);
          },
          // Get the Nth element in the matched element set OR
          // Get the whole matched element set as a clean array
          get: function(num) {
            if (num == null) {
              return slice.call(this);
            }
            return num < 0 ? this[num + this.length] : this[num];
          },
          // Take an array of elements and push it onto the stack
          // (returning the new matched element set)
          pushStack: function(elems) {
            var ret = jQuery2.merge(this.constructor(), elems);
            ret.prevObject = this;
            return ret;
          },
          // Execute a callback for every element in the matched set.
          each: function(callback) {
            return jQuery2.each(this, callback);
          },
          map: function(callback) {
            return this.pushStack(jQuery2.map(this, function(elem, i) {
              return callback.call(elem, i, elem);
            }));
          },
          slice: function() {
            return this.pushStack(slice.apply(this, arguments));
          },
          first: function() {
            return this.eq(0);
          },
          last: function() {
            return this.eq(-1);
          },
          even: function() {
            return this.pushStack(jQuery2.grep(this, function(_elem, i) {
              return (i + 1) % 2;
            }));
          },
          odd: function() {
            return this.pushStack(jQuery2.grep(this, function(_elem, i) {
              return i % 2;
            }));
          },
          eq: function(i) {
            var len = this.length, j = +i + (i < 0 ? len : 0);
            return this.pushStack(j >= 0 && j < len ? [this[j]] : []);
          },
          end: function() {
            return this.prevObject || this.constructor();
          },
          // For internal use only.
          // Behaves like an Array's method, not like a jQuery method.
          push,
          sort: arr.sort,
          splice: arr.splice
        };
        jQuery2.extend = jQuery2.fn.extend = function() {
          var options, name, src, copy, copyIsArray, clone, target = arguments[0] || {}, i = 1, length = arguments.length, deep = false;
          if (typeof target === "boolean") {
            deep = target;
            target = arguments[i] || {};
            i++;
          }
          if (typeof target !== "object" && !isFunction(target)) {
            target = {};
          }
          if (i === length) {
            target = this;
            i--;
          }
          for (; i < length; i++) {
            if ((options = arguments[i]) != null) {
              for (name in options) {
                copy = options[name];
                if (name === "__proto__" || target === copy) {
                  continue;
                }
                if (deep && copy && (jQuery2.isPlainObject(copy) || (copyIsArray = Array.isArray(copy)))) {
                  src = target[name];
                  if (copyIsArray && !Array.isArray(src)) {
                    clone = [];
                  } else if (!copyIsArray && !jQuery2.isPlainObject(src)) {
                    clone = {};
                  } else {
                    clone = src;
                  }
                  copyIsArray = false;
                  target[name] = jQuery2.extend(deep, clone, copy);
                } else if (copy !== void 0) {
                  target[name] = copy;
                }
              }
            }
          }
          return target;
        };
        jQuery2.extend({
          // Unique for each copy of jQuery on the page
          expando: "jQuery" + (version + Math.random()).replace(/\D/g, ""),
          // Assume jQuery is ready without the ready module
          isReady: true,
          error: function(msg) {
            throw new Error(msg);
          },
          noop: function() {
          },
          isPlainObject: function(obj) {
            var proto, Ctor;
            if (!obj || toString.call(obj) !== "[object Object]") {
              return false;
            }
            proto = getProto(obj);
            if (!proto) {
              return true;
            }
            Ctor = hasOwn.call(proto, "constructor") && proto.constructor;
            return typeof Ctor === "function" && fnToString.call(Ctor) === ObjectFunctionString;
          },
          isEmptyObject: function(obj) {
            var name;
            for (name in obj) {
              return false;
            }
            return true;
          },
          // Evaluates a script in a provided context; falls back to the global one
          // if not specified.
          globalEval: function(code, options, doc) {
            DOMEval(code, { nonce: options && options.nonce }, doc);
          },
          each: function(obj, callback) {
            var length, i = 0;
            if (isArrayLike(obj)) {
              length = obj.length;
              for (; i < length; i++) {
                if (callback.call(obj[i], i, obj[i]) === false) {
                  break;
                }
              }
            } else {
              for (i in obj) {
                if (callback.call(obj[i], i, obj[i]) === false) {
                  break;
                }
              }
            }
            return obj;
          },
          // Retrieve the text value of an array of DOM nodes
          text: function(elem) {
            var node, ret = "", i = 0, nodeType = elem.nodeType;
            if (!nodeType) {
              while (node = elem[i++]) {
                ret += jQuery2.text(node);
              }
            }
            if (nodeType === 1 || nodeType === 11) {
              return elem.textContent;
            }
            if (nodeType === 9) {
              return elem.documentElement.textContent;
            }
            if (nodeType === 3 || nodeType === 4) {
              return elem.nodeValue;
            }
            return ret;
          },
          // results is for internal usage only
          makeArray: function(arr2, results) {
            var ret = results || [];
            if (arr2 != null) {
              if (isArrayLike(Object(arr2))) {
                jQuery2.merge(
                  ret,
                  typeof arr2 === "string" ? [arr2] : arr2
                );
              } else {
                push.call(ret, arr2);
              }
            }
            return ret;
          },
          inArray: function(elem, arr2, i) {
            return arr2 == null ? -1 : indexOf.call(arr2, elem, i);
          },
          isXMLDoc: function(elem) {
            var namespace = elem && elem.namespaceURI, docElem = elem && (elem.ownerDocument || elem).documentElement;
            return !rhtmlSuffix.test(namespace || docElem && docElem.nodeName || "HTML");
          },
          // Support: Android <=4.0 only, PhantomJS 1 only
          // push.apply(_, arraylike) throws on ancient WebKit
          merge: function(first, second) {
            var len = +second.length, j = 0, i = first.length;
            for (; j < len; j++) {
              first[i++] = second[j];
            }
            first.length = i;
            return first;
          },
          grep: function(elems, callback, invert) {
            var callbackInverse, matches = [], i = 0, length = elems.length, callbackExpect = !invert;
            for (; i < length; i++) {
              callbackInverse = !callback(elems[i], i);
              if (callbackInverse !== callbackExpect) {
                matches.push(elems[i]);
              }
            }
            return matches;
          },
          // arg is for internal usage only
          map: function(elems, callback, arg) {
            var length, value, i = 0, ret = [];
            if (isArrayLike(elems)) {
              length = elems.length;
              for (; i < length; i++) {
                value = callback(elems[i], i, arg);
                if (value != null) {
                  ret.push(value);
                }
              }
            } else {
              for (i in elems) {
                value = callback(elems[i], i, arg);
                if (value != null) {
                  ret.push(value);
                }
              }
            }
            return flat(ret);
          },
          // A global GUID counter for objects
          guid: 1,
          // jQuery.support is not used in Core but other projects attach their
          // properties to it so it needs to exist.
          support
        });
        if (typeof Symbol === "function") {
          jQuery2.fn[Symbol.iterator] = arr[Symbol.iterator];
        }
        jQuery2.each(
          "Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),
          function(_i, name) {
            class2type["[object " + name + "]"] = name.toLowerCase();
          }
        );
        function isArrayLike(obj) {
          var length = !!obj && "length" in obj && obj.length, type = toType(obj);
          if (isFunction(obj) || isWindow(obj)) {
            return false;
          }
          return type === "array" || length === 0 || typeof length === "number" && length > 0 && length - 1 in obj;
        }
        function nodeName(elem, name) {
          return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
        }
        var pop = arr.pop;
        var sort = arr.sort;
        var splice = arr.splice;
        var whitespace = "[\\x20\\t\\r\\n\\f]";
        var rtrimCSS = new RegExp(
          "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$",
          "g"
        );
        jQuery2.contains = function(a, b) {
          var bup = b && b.parentNode;
          return a === bup || !!(bup && bup.nodeType === 1 && // Support: IE 9 - 11+
          // IE doesn't have `contains` on SVG.
          (a.contains ? a.contains(bup) : a.compareDocumentPosition && a.compareDocumentPosition(bup) & 16));
        };
        var rcssescape = /([\0-\x1f\x7f]|^-?\d)|^-$|[^\x80-\uFFFF\w-]/g;
        function fcssescape(ch, asCodePoint) {
          if (asCodePoint) {
            if (ch === "\0") {
              return "\uFFFD";
            }
            return ch.slice(0, -1) + "\\" + ch.charCodeAt(ch.length - 1).toString(16) + " ";
          }
          return "\\" + ch;
        }
        jQuery2.escapeSelector = function(sel) {
          return (sel + "").replace(rcssescape, fcssescape);
        };
        var preferredDoc = document2, pushNative = push;
        (function() {
          var i, Expr, outermostContext, sortInput, hasDuplicate, push2 = pushNative, document3, documentElement2, documentIsHTML, rbuggyQSA, matches, expando = jQuery2.expando, dirruns = 0, done = 0, classCache = createCache(), tokenCache = createCache(), compilerCache = createCache(), nonnativeSelectorCache = createCache(), sortOrder = function(a, b) {
            if (a === b) {
              hasDuplicate = true;
            }
            return 0;
          }, booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped", identifier = "(?:\\\\[\\da-fA-F]{1,6}" + whitespace + "?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+", attributes = "\\[" + whitespace + "*(" + identifier + ")(?:" + whitespace + // Operator (capture 2)
          "*([*^$|!~]?=)" + whitespace + // "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"
          `*(?:'((?:\\\\.|[^\\\\'])*)'|"((?:\\\\.|[^\\\\"])*)"|(` + identifier + "))|)" + whitespace + "*\\]", pseudos = ":(" + identifier + `)(?:\\((('((?:\\\\.|[^\\\\'])*)'|"((?:\\\\.|[^\\\\"])*)")|((?:\\\\.|[^\\\\()[\\]]|` + attributes + ")*)|.*)\\)|)", rwhitespace = new RegExp(whitespace + "+", "g"), rcomma = new RegExp("^" + whitespace + "*," + whitespace + "*"), rleadingCombinator = new RegExp("^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*"), rdescend = new RegExp(whitespace + "|>"), rpseudo = new RegExp(pseudos), ridentifier = new RegExp("^" + identifier + "$"), matchExpr = {
            ID: new RegExp("^#(" + identifier + ")"),
            CLASS: new RegExp("^\\.(" + identifier + ")"),
            TAG: new RegExp("^(" + identifier + "|[*])"),
            ATTR: new RegExp("^" + attributes),
            PSEUDO: new RegExp("^" + pseudos),
            CHILD: new RegExp(
              "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace + "*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace + "*(\\d+)|))" + whitespace + "*\\)|)",
              "i"
            ),
            bool: new RegExp("^(?:" + booleans + ")$", "i"),
            // For use in libraries implementing .is()
            // We use this for POS matching in `select`
            needsContext: new RegExp("^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" + whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i")
          }, rinputs = /^(?:input|select|textarea|button)$/i, rheader = /^h\d$/i, rquickExpr2 = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/, rsibling = /[+~]/, runescape = new RegExp("\\\\[\\da-fA-F]{1,6}" + whitespace + "?|\\\\([^\\r\\n\\f])", "g"), funescape = function(escape, nonHex) {
            var high = "0x" + escape.slice(1) - 65536;
            if (nonHex) {
              return nonHex;
            }
            return high < 0 ? String.fromCharCode(high + 65536) : String.fromCharCode(high >> 10 | 55296, high & 1023 | 56320);
          }, unloadHandler = function() {
            setDocument();
          }, inDisabledFieldset = addCombinator(
            function(elem) {
              return elem.disabled === true && nodeName(elem, "fieldset");
            },
            { dir: "parentNode", next: "legend" }
          );
          function safeActiveElement() {
            try {
              return document3.activeElement;
            } catch (err) {
            }
          }
          try {
            push2.apply(
              arr = slice.call(preferredDoc.childNodes),
              preferredDoc.childNodes
            );
            arr[preferredDoc.childNodes.length].nodeType;
          } catch (e) {
            push2 = {
              apply: function(target, els) {
                pushNative.apply(target, slice.call(els));
              },
              call: function(target) {
                pushNative.apply(target, slice.call(arguments, 1));
              }
            };
          }
          function find(selector, context, results, seed) {
            var m, i2, elem, nid, match, groups, newSelector, newContext = context && context.ownerDocument, nodeType = context ? context.nodeType : 9;
            results = results || [];
            if (typeof selector !== "string" || !selector || nodeType !== 1 && nodeType !== 9 && nodeType !== 11) {
              return results;
            }
            if (!seed) {
              setDocument(context);
              context = context || document3;
              if (documentIsHTML) {
                if (nodeType !== 11 && (match = rquickExpr2.exec(selector))) {
                  if (m = match[1]) {
                    if (nodeType === 9) {
                      if (elem = context.getElementById(m)) {
                        if (elem.id === m) {
                          push2.call(results, elem);
                          return results;
                        }
                      } else {
                        return results;
                      }
                    } else {
                      if (newContext && (elem = newContext.getElementById(m)) && find.contains(context, elem) && elem.id === m) {
                        push2.call(results, elem);
                        return results;
                      }
                    }
                  } else if (match[2]) {
                    push2.apply(results, context.getElementsByTagName(selector));
                    return results;
                  } else if ((m = match[3]) && context.getElementsByClassName) {
                    push2.apply(results, context.getElementsByClassName(m));
                    return results;
                  }
                }
                if (!nonnativeSelectorCache[selector + " "] && (!rbuggyQSA || !rbuggyQSA.test(selector))) {
                  newSelector = selector;
                  newContext = context;
                  if (nodeType === 1 && (rdescend.test(selector) || rleadingCombinator.test(selector))) {
                    newContext = rsibling.test(selector) && testContext(context.parentNode) || context;
                    if (newContext != context || !support.scope) {
                      if (nid = context.getAttribute("id")) {
                        nid = jQuery2.escapeSelector(nid);
                      } else {
                        context.setAttribute("id", nid = expando);
                      }
                    }
                    groups = tokenize(selector);
                    i2 = groups.length;
                    while (i2--) {
                      groups[i2] = (nid ? "#" + nid : ":scope") + " " + toSelector(groups[i2]);
                    }
                    newSelector = groups.join(",");
                  }
                  try {
                    push2.apply(
                      results,
                      newContext.querySelectorAll(newSelector)
                    );
                    return results;
                  } catch (qsaError) {
                    nonnativeSelectorCache(selector, true);
                  } finally {
                    if (nid === expando) {
                      context.removeAttribute("id");
                    }
                  }
                }
              }
            }
            return select(selector.replace(rtrimCSS, "$1"), context, results, seed);
          }
          function createCache() {
            var keys = [];
            function cache(key, value) {
              if (keys.push(key + " ") > Expr.cacheLength) {
                delete cache[keys.shift()];
              }
              return cache[key + " "] = value;
            }
            return cache;
          }
          function markFunction(fn) {
            fn[expando] = true;
            return fn;
          }
          function assert(fn) {
            var el = document3.createElement("fieldset");
            try {
              return !!fn(el);
            } catch (e) {
              return false;
            } finally {
              if (el.parentNode) {
                el.parentNode.removeChild(el);
              }
              el = null;
            }
          }
          function createInputPseudo(type) {
            return function(elem) {
              return nodeName(elem, "input") && elem.type === type;
            };
          }
          function createButtonPseudo(type) {
            return function(elem) {
              return (nodeName(elem, "input") || nodeName(elem, "button")) && elem.type === type;
            };
          }
          function createDisabledPseudo(disabled) {
            return function(elem) {
              if ("form" in elem) {
                if (elem.parentNode && elem.disabled === false) {
                  if ("label" in elem) {
                    if ("label" in elem.parentNode) {
                      return elem.parentNode.disabled === disabled;
                    } else {
                      return elem.disabled === disabled;
                    }
                  }
                  return elem.isDisabled === disabled || // Where there is no isDisabled, check manually
                  elem.isDisabled !== !disabled && inDisabledFieldset(elem) === disabled;
                }
                return elem.disabled === disabled;
              } else if ("label" in elem) {
                return elem.disabled === disabled;
              }
              return false;
            };
          }
          function createPositionalPseudo(fn) {
            return markFunction(function(argument) {
              argument = +argument;
              return markFunction(function(seed, matches2) {
                var j, matchIndexes = fn([], seed.length, argument), i2 = matchIndexes.length;
                while (i2--) {
                  if (seed[j = matchIndexes[i2]]) {
                    seed[j] = !(matches2[j] = seed[j]);
                  }
                }
              });
            });
          }
          function testContext(context) {
            return context && typeof context.getElementsByTagName !== "undefined" && context;
          }
          function setDocument(node) {
            var subWindow, doc = node ? node.ownerDocument || node : preferredDoc;
            if (doc == document3 || doc.nodeType !== 9 || !doc.documentElement) {
              return document3;
            }
            document3 = doc;
            documentElement2 = document3.documentElement;
            documentIsHTML = !jQuery2.isXMLDoc(document3);
            matches = documentElement2.matches || documentElement2.webkitMatchesSelector || documentElement2.msMatchesSelector;
            if (documentElement2.msMatchesSelector && // Support: IE 11+, Edge 17 - 18+
            // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
            // two documents; shallow comparisons work.
            // eslint-disable-next-line eqeqeq
            preferredDoc != document3 && (subWindow = document3.defaultView) && subWindow.top !== subWindow) {
              subWindow.addEventListener("unload", unloadHandler);
            }
            support.getById = assert(function(el) {
              documentElement2.appendChild(el).id = jQuery2.expando;
              return !document3.getElementsByName || !document3.getElementsByName(jQuery2.expando).length;
            });
            support.disconnectedMatch = assert(function(el) {
              return matches.call(el, "*");
            });
            support.scope = assert(function() {
              return document3.querySelectorAll(":scope");
            });
            support.cssHas = assert(function() {
              try {
                document3.querySelector(":has(*,:jqfake)");
                return false;
              } catch (e) {
                return true;
              }
            });
            if (support.getById) {
              Expr.filter.ID = function(id) {
                var attrId = id.replace(runescape, funescape);
                return function(elem) {
                  return elem.getAttribute("id") === attrId;
                };
              };
              Expr.find.ID = function(id, context) {
                if (typeof context.getElementById !== "undefined" && documentIsHTML) {
                  var elem = context.getElementById(id);
                  return elem ? [elem] : [];
                }
              };
            } else {
              Expr.filter.ID = function(id) {
                var attrId = id.replace(runescape, funescape);
                return function(elem) {
                  var node2 = typeof elem.getAttributeNode !== "undefined" && elem.getAttributeNode("id");
                  return node2 && node2.value === attrId;
                };
              };
              Expr.find.ID = function(id, context) {
                if (typeof context.getElementById !== "undefined" && documentIsHTML) {
                  var node2, i2, elems, elem = context.getElementById(id);
                  if (elem) {
                    node2 = elem.getAttributeNode("id");
                    if (node2 && node2.value === id) {
                      return [elem];
                    }
                    elems = context.getElementsByName(id);
                    i2 = 0;
                    while (elem = elems[i2++]) {
                      node2 = elem.getAttributeNode("id");
                      if (node2 && node2.value === id) {
                        return [elem];
                      }
                    }
                  }
                  return [];
                }
              };
            }
            Expr.find.TAG = function(tag, context) {
              if (typeof context.getElementsByTagName !== "undefined") {
                return context.getElementsByTagName(tag);
              } else {
                return context.querySelectorAll(tag);
              }
            };
            Expr.find.CLASS = function(className, context) {
              if (typeof context.getElementsByClassName !== "undefined" && documentIsHTML) {
                return context.getElementsByClassName(className);
              }
            };
            rbuggyQSA = [];
            assert(function(el) {
              var input;
              documentElement2.appendChild(el).innerHTML = "<a id='" + expando + "' href='' disabled='disabled'></a><select id='" + expando + "-\r\\' disabled='disabled'><option selected=''></option></select>";
              if (!el.querySelectorAll("[selected]").length) {
                rbuggyQSA.push("\\[" + whitespace + "*(?:value|" + booleans + ")");
              }
              if (!el.querySelectorAll("[id~=" + expando + "-]").length) {
                rbuggyQSA.push("~=");
              }
              if (!el.querySelectorAll("a#" + expando + "+*").length) {
                rbuggyQSA.push(".#.+[+~]");
              }
              if (!el.querySelectorAll(":checked").length) {
                rbuggyQSA.push(":checked");
              }
              input = document3.createElement("input");
              input.setAttribute("type", "hidden");
              el.appendChild(input).setAttribute("name", "D");
              documentElement2.appendChild(el).disabled = true;
              if (el.querySelectorAll(":disabled").length !== 2) {
                rbuggyQSA.push(":enabled", ":disabled");
              }
              input = document3.createElement("input");
              input.setAttribute("name", "");
              el.appendChild(input);
              if (!el.querySelectorAll("[name='']").length) {
                rbuggyQSA.push("\\[" + whitespace + "*name" + whitespace + "*=" + whitespace + `*(?:''|"")`);
              }
            });
            if (!support.cssHas) {
              rbuggyQSA.push(":has");
            }
            rbuggyQSA = rbuggyQSA.length && new RegExp(rbuggyQSA.join("|"));
            sortOrder = function(a, b) {
              if (a === b) {
                hasDuplicate = true;
                return 0;
              }
              var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
              if (compare) {
                return compare;
              }
              compare = (a.ownerDocument || a) == (b.ownerDocument || b) ? a.compareDocumentPosition(b) : (
                // Otherwise we know they are disconnected
                1
              );
              if (compare & 1 || !support.sortDetached && b.compareDocumentPosition(a) === compare) {
                if (a === document3 || a.ownerDocument == preferredDoc && find.contains(preferredDoc, a)) {
                  return -1;
                }
                if (b === document3 || b.ownerDocument == preferredDoc && find.contains(preferredDoc, b)) {
                  return 1;
                }
                return sortInput ? indexOf.call(sortInput, a) - indexOf.call(sortInput, b) : 0;
              }
              return compare & 4 ? -1 : 1;
            };
            return document3;
          }
          find.matches = function(expr, elements) {
            return find(expr, null, null, elements);
          };
          find.matchesSelector = function(elem, expr) {
            setDocument(elem);
            if (documentIsHTML && !nonnativeSelectorCache[expr + " "] && (!rbuggyQSA || !rbuggyQSA.test(expr))) {
              try {
                var ret = matches.call(elem, expr);
                if (ret || support.disconnectedMatch || // As well, disconnected nodes are said to be in a document
                // fragment in IE 9
                elem.document && elem.document.nodeType !== 11) {
                  return ret;
                }
              } catch (e) {
                nonnativeSelectorCache(expr, true);
              }
            }
            return find(expr, document3, null, [elem]).length > 0;
          };
          find.contains = function(context, elem) {
            if ((context.ownerDocument || context) != document3) {
              setDocument(context);
            }
            return jQuery2.contains(context, elem);
          };
          find.attr = function(elem, name) {
            if ((elem.ownerDocument || elem) != document3) {
              setDocument(elem);
            }
            var fn = Expr.attrHandle[name.toLowerCase()], val = fn && hasOwn.call(Expr.attrHandle, name.toLowerCase()) ? fn(elem, name, !documentIsHTML) : void 0;
            if (val !== void 0) {
              return val;
            }
            return elem.getAttribute(name);
          };
          find.error = function(msg) {
            throw new Error("Syntax error, unrecognized expression: " + msg);
          };
          jQuery2.uniqueSort = function(results) {
            var elem, duplicates = [], j = 0, i2 = 0;
            hasDuplicate = !support.sortStable;
            sortInput = !support.sortStable && slice.call(results, 0);
            sort.call(results, sortOrder);
            if (hasDuplicate) {
              while (elem = results[i2++]) {
                if (elem === results[i2]) {
                  j = duplicates.push(i2);
                }
              }
              while (j--) {
                splice.call(results, duplicates[j], 1);
              }
            }
            sortInput = null;
            return results;
          };
          jQuery2.fn.uniqueSort = function() {
            return this.pushStack(jQuery2.uniqueSort(slice.apply(this)));
          };
          Expr = jQuery2.expr = {
            // Can be adjusted by the user
            cacheLength: 50,
            createPseudo: markFunction,
            match: matchExpr,
            attrHandle: {},
            find: {},
            relative: {
              ">": { dir: "parentNode", first: true },
              " ": { dir: "parentNode" },
              "+": { dir: "previousSibling", first: true },
              "~": { dir: "previousSibling" }
            },
            preFilter: {
              ATTR: function(match) {
                match[1] = match[1].replace(runescape, funescape);
                match[3] = (match[3] || match[4] || match[5] || "").replace(runescape, funescape);
                if (match[2] === "~=") {
                  match[3] = " " + match[3] + " ";
                }
                return match.slice(0, 4);
              },
              CHILD: function(match) {
                match[1] = match[1].toLowerCase();
                if (match[1].slice(0, 3) === "nth") {
                  if (!match[3]) {
                    find.error(match[0]);
                  }
                  match[4] = +(match[4] ? match[5] + (match[6] || 1) : 2 * (match[3] === "even" || match[3] === "odd"));
                  match[5] = +(match[7] + match[8] || match[3] === "odd");
                } else if (match[3]) {
                  find.error(match[0]);
                }
                return match;
              },
              PSEUDO: function(match) {
                var excess, unquoted = !match[6] && match[2];
                if (matchExpr.CHILD.test(match[0])) {
                  return null;
                }
                if (match[3]) {
                  match[2] = match[4] || match[5] || "";
                } else if (unquoted && rpseudo.test(unquoted) && // Get excess from tokenize (recursively)
                (excess = tokenize(unquoted, true)) && // advance to the next closing parenthesis
                (excess = unquoted.indexOf(")", unquoted.length - excess) - unquoted.length)) {
                  match[0] = match[0].slice(0, excess);
                  match[2] = unquoted.slice(0, excess);
                }
                return match.slice(0, 3);
              }
            },
            filter: {
              TAG: function(nodeNameSelector) {
                var expectedNodeName = nodeNameSelector.replace(runescape, funescape).toLowerCase();
                return nodeNameSelector === "*" ? function() {
                  return true;
                } : function(elem) {
                  return nodeName(elem, expectedNodeName);
                };
              },
              CLASS: function(className) {
                var pattern = classCache[className + " "];
                return pattern || (pattern = new RegExp("(^|" + whitespace + ")" + className + "(" + whitespace + "|$)")) && classCache(className, function(elem) {
                  return pattern.test(
                    typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || ""
                  );
                });
              },
              ATTR: function(name, operator, check) {
                return function(elem) {
                  var result = find.attr(elem, name);
                  if (result == null) {
                    return operator === "!=";
                  }
                  if (!operator) {
                    return true;
                  }
                  result += "";
                  if (operator === "=") {
                    return result === check;
                  }
                  if (operator === "!=") {
                    return result !== check;
                  }
                  if (operator === "^=") {
                    return check && result.indexOf(check) === 0;
                  }
                  if (operator === "*=") {
                    return check && result.indexOf(check) > -1;
                  }
                  if (operator === "$=") {
                    return check && result.slice(-check.length) === check;
                  }
                  if (operator === "~=") {
                    return (" " + result.replace(rwhitespace, " ") + " ").indexOf(check) > -1;
                  }
                  if (operator === "|=") {
                    return result === check || result.slice(0, check.length + 1) === check + "-";
                  }
                  return false;
                };
              },
              CHILD: function(type, what, _argument, first, last) {
                var simple = type.slice(0, 3) !== "nth", forward = type.slice(-4) !== "last", ofType = what === "of-type";
                return first === 1 && last === 0 ? (
                  // Shortcut for :nth-*(n)
                  function(elem) {
                    return !!elem.parentNode;
                  }
                ) : function(elem, _context, xml) {
                  var cache, outerCache, node, nodeIndex, start2, dir2 = simple !== forward ? "nextSibling" : "previousSibling", parent = elem.parentNode, name = ofType && elem.nodeName.toLowerCase(), useCache = !xml && !ofType, diff = false;
                  if (parent) {
                    if (simple) {
                      while (dir2) {
                        node = elem;
                        while (node = node[dir2]) {
                          if (ofType ? nodeName(node, name) : node.nodeType === 1) {
                            return false;
                          }
                        }
                        start2 = dir2 = type === "only" && !start2 && "nextSibling";
                      }
                      return true;
                    }
                    start2 = [forward ? parent.firstChild : parent.lastChild];
                    if (forward && useCache) {
                      outerCache = parent[expando] || (parent[expando] = {});
                      cache = outerCache[type] || [];
                      nodeIndex = cache[0] === dirruns && cache[1];
                      diff = nodeIndex && cache[2];
                      node = nodeIndex && parent.childNodes[nodeIndex];
                      while (node = ++nodeIndex && node && node[dir2] || // Fallback to seeking `elem` from the start
                      (diff = nodeIndex = 0) || start2.pop()) {
                        if (node.nodeType === 1 && ++diff && node === elem) {
                          outerCache[type] = [dirruns, nodeIndex, diff];
                          break;
                        }
                      }
                    } else {
                      if (useCache) {
                        outerCache = elem[expando] || (elem[expando] = {});
                        cache = outerCache[type] || [];
                        nodeIndex = cache[0] === dirruns && cache[1];
                        diff = nodeIndex;
                      }
                      if (diff === false) {
                        while (node = ++nodeIndex && node && node[dir2] || (diff = nodeIndex = 0) || start2.pop()) {
                          if ((ofType ? nodeName(node, name) : node.nodeType === 1) && ++diff) {
                            if (useCache) {
                              outerCache = node[expando] || (node[expando] = {});
                              outerCache[type] = [dirruns, diff];
                            }
                            if (node === elem) {
                              break;
                            }
                          }
                        }
                      }
                    }
                    diff -= last;
                    return diff === first || diff % first === 0 && diff / first >= 0;
                  }
                };
              },
              PSEUDO: function(pseudo, argument) {
                var args, fn = Expr.pseudos[pseudo] || Expr.setFilters[pseudo.toLowerCase()] || find.error("unsupported pseudo: " + pseudo);
                if (fn[expando]) {
                  return fn(argument);
                }
                if (fn.length > 1) {
                  args = [pseudo, pseudo, "", argument];
                  return Expr.setFilters.hasOwnProperty(pseudo.toLowerCase()) ? markFunction(function(seed, matches2) {
                    var idx, matched = fn(seed, argument), i2 = matched.length;
                    while (i2--) {
                      idx = indexOf.call(seed, matched[i2]);
                      seed[idx] = !(matches2[idx] = matched[i2]);
                    }
                  }) : function(elem) {
                    return fn(elem, 0, args);
                  };
                }
                return fn;
              }
            },
            pseudos: {
              // Potentially complex pseudos
              not: markFunction(function(selector) {
                var input = [], results = [], matcher = compile(selector.replace(rtrimCSS, "$1"));
                return matcher[expando] ? markFunction(function(seed, matches2, _context, xml) {
                  var elem, unmatched = matcher(seed, null, xml, []), i2 = seed.length;
                  while (i2--) {
                    if (elem = unmatched[i2]) {
                      seed[i2] = !(matches2[i2] = elem);
                    }
                  }
                }) : function(elem, _context, xml) {
                  input[0] = elem;
                  matcher(input, null, xml, results);
                  input[0] = null;
                  return !results.pop();
                };
              }),
              has: markFunction(function(selector) {
                return function(elem) {
                  return find(selector, elem).length > 0;
                };
              }),
              contains: markFunction(function(text) {
                text = text.replace(runescape, funescape);
                return function(elem) {
                  return (elem.textContent || jQuery2.text(elem)).indexOf(text) > -1;
                };
              }),
              // "Whether an element is represented by a :lang() selector
              // is based solely on the element's language value
              // being equal to the identifier C,
              // or beginning with the identifier C immediately followed by "-".
              // The matching of C against the element's language value is performed case-insensitively.
              // The identifier C does not have to be a valid language name."
              // https://www.w3.org/TR/selectors/#lang-pseudo
              lang: markFunction(function(lang) {
                if (!ridentifier.test(lang || "")) {
                  find.error("unsupported lang: " + lang);
                }
                lang = lang.replace(runescape, funescape).toLowerCase();
                return function(elem) {
                  var elemLang;
                  do {
                    if (elemLang = documentIsHTML ? elem.lang : elem.getAttribute("xml:lang") || elem.getAttribute("lang")) {
                      elemLang = elemLang.toLowerCase();
                      return elemLang === lang || elemLang.indexOf(lang + "-") === 0;
                    }
                  } while ((elem = elem.parentNode) && elem.nodeType === 1);
                  return false;
                };
              }),
              // Miscellaneous
              target: function(elem) {
                var hash = window2.location && window2.location.hash;
                return hash && hash.slice(1) === elem.id;
              },
              root: function(elem) {
                return elem === documentElement2;
              },
              focus: function(elem) {
                return elem === safeActiveElement() && document3.hasFocus() && !!(elem.type || elem.href || ~elem.tabIndex);
              },
              // Boolean properties
              enabled: createDisabledPseudo(false),
              disabled: createDisabledPseudo(true),
              checked: function(elem) {
                return nodeName(elem, "input") && !!elem.checked || nodeName(elem, "option") && !!elem.selected;
              },
              selected: function(elem) {
                if (elem.parentNode) {
                  elem.parentNode.selectedIndex;
                }
                return elem.selected === true;
              },
              // Contents
              empty: function(elem) {
                for (elem = elem.firstChild; elem; elem = elem.nextSibling) {
                  if (elem.nodeType < 6) {
                    return false;
                  }
                }
                return true;
              },
              parent: function(elem) {
                return !Expr.pseudos.empty(elem);
              },
              // Element/input types
              header: function(elem) {
                return rheader.test(elem.nodeName);
              },
              input: function(elem) {
                return rinputs.test(elem.nodeName);
              },
              button: function(elem) {
                return nodeName(elem, "input") && elem.type === "button" || nodeName(elem, "button");
              },
              text: function(elem) {
                var attr;
                return nodeName(elem, "input") && elem.type === "text" && // Support: IE <10 only
                // New HTML5 attribute values (e.g., "search") appear
                // with elem.type === "text"
                ((attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text");
              },
              // Position-in-collection
              first: createPositionalPseudo(function() {
                return [0];
              }),
              last: createPositionalPseudo(function(_matchIndexes, length) {
                return [length - 1];
              }),
              eq: createPositionalPseudo(function(_matchIndexes, length, argument) {
                return [argument < 0 ? argument + length : argument];
              }),
              even: createPositionalPseudo(function(matchIndexes, length) {
                var i2 = 0;
                for (; i2 < length; i2 += 2) {
                  matchIndexes.push(i2);
                }
                return matchIndexes;
              }),
              odd: createPositionalPseudo(function(matchIndexes, length) {
                var i2 = 1;
                for (; i2 < length; i2 += 2) {
                  matchIndexes.push(i2);
                }
                return matchIndexes;
              }),
              lt: createPositionalPseudo(function(matchIndexes, length, argument) {
                var i2;
                if (argument < 0) {
                  i2 = argument + length;
                } else if (argument > length) {
                  i2 = length;
                } else {
                  i2 = argument;
                }
                for (; --i2 >= 0; ) {
                  matchIndexes.push(i2);
                }
                return matchIndexes;
              }),
              gt: createPositionalPseudo(function(matchIndexes, length, argument) {
                var i2 = argument < 0 ? argument + length : argument;
                for (; ++i2 < length; ) {
                  matchIndexes.push(i2);
                }
                return matchIndexes;
              })
            }
          };
          Expr.pseudos.nth = Expr.pseudos.eq;
          for (i in { radio: true, checkbox: true, file: true, password: true, image: true }) {
            Expr.pseudos[i] = createInputPseudo(i);
          }
          for (i in { submit: true, reset: true }) {
            Expr.pseudos[i] = createButtonPseudo(i);
          }
          function setFilters() {
          }
          setFilters.prototype = Expr.filters = Expr.pseudos;
          Expr.setFilters = new setFilters();
          function tokenize(selector, parseOnly) {
            var matched, match, tokens, type, soFar, groups, preFilters, cached = tokenCache[selector + " "];
            if (cached) {
              return parseOnly ? 0 : cached.slice(0);
            }
            soFar = selector;
            groups = [];
            preFilters = Expr.preFilter;
            while (soFar) {
              if (!matched || (match = rcomma.exec(soFar))) {
                if (match) {
                  soFar = soFar.slice(match[0].length) || soFar;
                }
                groups.push(tokens = []);
              }
              matched = false;
              if (match = rleadingCombinator.exec(soFar)) {
                matched = match.shift();
                tokens.push({
                  value: matched,
                  // Cast descendant combinators to space
                  type: match[0].replace(rtrimCSS, " ")
                });
                soFar = soFar.slice(matched.length);
              }
              for (type in Expr.filter) {
                if ((match = matchExpr[type].exec(soFar)) && (!preFilters[type] || (match = preFilters[type](match)))) {
                  matched = match.shift();
                  tokens.push({
                    value: matched,
                    type,
                    matches: match
                  });
                  soFar = soFar.slice(matched.length);
                }
              }
              if (!matched) {
                break;
              }
            }
            if (parseOnly) {
              return soFar.length;
            }
            return soFar ? find.error(selector) : (
              // Cache the tokens
              tokenCache(selector, groups).slice(0)
            );
          }
          function toSelector(tokens) {
            var i2 = 0, len = tokens.length, selector = "";
            for (; i2 < len; i2++) {
              selector += tokens[i2].value;
            }
            return selector;
          }
          function addCombinator(matcher, combinator, base) {
            var dir2 = combinator.dir, skip = combinator.next, key = skip || dir2, checkNonElements = base && key === "parentNode", doneName = done++;
            return combinator.first ? (
              // Check against closest ancestor/preceding element
              function(elem, context, xml) {
                while (elem = elem[dir2]) {
                  if (elem.nodeType === 1 || checkNonElements) {
                    return matcher(elem, context, xml);
                  }
                }
                return false;
              }
            ) : (
              // Check against all ancestor/preceding elements
              function(elem, context, xml) {
                var oldCache, outerCache, newCache = [dirruns, doneName];
                if (xml) {
                  while (elem = elem[dir2]) {
                    if (elem.nodeType === 1 || checkNonElements) {
                      if (matcher(elem, context, xml)) {
                        return true;
                      }
                    }
                  }
                } else {
                  while (elem = elem[dir2]) {
                    if (elem.nodeType === 1 || checkNonElements) {
                      outerCache = elem[expando] || (elem[expando] = {});
                      if (skip && nodeName(elem, skip)) {
                        elem = elem[dir2] || elem;
                      } else if ((oldCache = outerCache[key]) && oldCache[0] === dirruns && oldCache[1] === doneName) {
                        return newCache[2] = oldCache[2];
                      } else {
                        outerCache[key] = newCache;
                        if (newCache[2] = matcher(elem, context, xml)) {
                          return true;
                        }
                      }
                    }
                  }
                }
                return false;
              }
            );
          }
          function elementMatcher(matchers) {
            return matchers.length > 1 ? function(elem, context, xml) {
              var i2 = matchers.length;
              while (i2--) {
                if (!matchers[i2](elem, context, xml)) {
                  return false;
                }
              }
              return true;
            } : matchers[0];
          }
          function multipleContexts(selector, contexts, results) {
            var i2 = 0, len = contexts.length;
            for (; i2 < len; i2++) {
              find(selector, contexts[i2], results);
            }
            return results;
          }
          function condense(unmatched, map, filter, context, xml) {
            var elem, newUnmatched = [], i2 = 0, len = unmatched.length, mapped = map != null;
            for (; i2 < len; i2++) {
              if (elem = unmatched[i2]) {
                if (!filter || filter(elem, context, xml)) {
                  newUnmatched.push(elem);
                  if (mapped) {
                    map.push(i2);
                  }
                }
              }
            }
            return newUnmatched;
          }
          function setMatcher(preFilter, selector, matcher, postFilter, postFinder, postSelector) {
            if (postFilter && !postFilter[expando]) {
              postFilter = setMatcher(postFilter);
            }
            if (postFinder && !postFinder[expando]) {
              postFinder = setMatcher(postFinder, postSelector);
            }
            return markFunction(function(seed, results, context, xml) {
              var temp, i2, elem, matcherOut, preMap = [], postMap = [], preexisting = results.length, elems = seed || multipleContexts(
                selector || "*",
                context.nodeType ? [context] : context,
                []
              ), matcherIn = preFilter && (seed || !selector) ? condense(elems, preMap, preFilter, context, xml) : elems;
              if (matcher) {
                matcherOut = postFinder || (seed ? preFilter : preexisting || postFilter) ? (
                  // ...intermediate processing is necessary
                  []
                ) : (
                  // ...otherwise use results directly
                  results
                );
                matcher(matcherIn, matcherOut, context, xml);
              } else {
                matcherOut = matcherIn;
              }
              if (postFilter) {
                temp = condense(matcherOut, postMap);
                postFilter(temp, [], context, xml);
                i2 = temp.length;
                while (i2--) {
                  if (elem = temp[i2]) {
                    matcherOut[postMap[i2]] = !(matcherIn[postMap[i2]] = elem);
                  }
                }
              }
              if (seed) {
                if (postFinder || preFilter) {
                  if (postFinder) {
                    temp = [];
                    i2 = matcherOut.length;
                    while (i2--) {
                      if (elem = matcherOut[i2]) {
                        temp.push(matcherIn[i2] = elem);
                      }
                    }
                    postFinder(null, matcherOut = [], temp, xml);
                  }
                  i2 = matcherOut.length;
                  while (i2--) {
                    if ((elem = matcherOut[i2]) && (temp = postFinder ? indexOf.call(seed, elem) : preMap[i2]) > -1) {
                      seed[temp] = !(results[temp] = elem);
                    }
                  }
                }
              } else {
                matcherOut = condense(
                  matcherOut === results ? matcherOut.splice(preexisting, matcherOut.length) : matcherOut
                );
                if (postFinder) {
                  postFinder(null, results, matcherOut, xml);
                } else {
                  push2.apply(results, matcherOut);
                }
              }
            });
          }
          function matcherFromTokens(tokens) {
            var checkContext, matcher, j, len = tokens.length, leadingRelative = Expr.relative[tokens[0].type], implicitRelative = leadingRelative || Expr.relative[" "], i2 = leadingRelative ? 1 : 0, matchContext = addCombinator(function(elem) {
              return elem === checkContext;
            }, implicitRelative, true), matchAnyContext = addCombinator(function(elem) {
              return indexOf.call(checkContext, elem) > -1;
            }, implicitRelative, true), matchers = [function(elem, context, xml) {
              var ret = !leadingRelative && (xml || context != outermostContext) || ((checkContext = context).nodeType ? matchContext(elem, context, xml) : matchAnyContext(elem, context, xml));
              checkContext = null;
              return ret;
            }];
            for (; i2 < len; i2++) {
              if (matcher = Expr.relative[tokens[i2].type]) {
                matchers = [addCombinator(elementMatcher(matchers), matcher)];
              } else {
                matcher = Expr.filter[tokens[i2].type].apply(null, tokens[i2].matches);
                if (matcher[expando]) {
                  j = ++i2;
                  for (; j < len; j++) {
                    if (Expr.relative[tokens[j].type]) {
                      break;
                    }
                  }
                  return setMatcher(
                    i2 > 1 && elementMatcher(matchers),
                    i2 > 1 && toSelector(
                      // If the preceding token was a descendant combinator, insert an implicit any-element `*`
                      tokens.slice(0, i2 - 1).concat({ value: tokens[i2 - 2].type === " " ? "*" : "" })
                    ).replace(rtrimCSS, "$1"),
                    matcher,
                    i2 < j && matcherFromTokens(tokens.slice(i2, j)),
                    j < len && matcherFromTokens(tokens = tokens.slice(j)),
                    j < len && toSelector(tokens)
                  );
                }
                matchers.push(matcher);
              }
            }
            return elementMatcher(matchers);
          }
          function matcherFromGroupMatchers(elementMatchers, setMatchers) {
            var bySet = setMatchers.length > 0, byElement = elementMatchers.length > 0, superMatcher = function(seed, context, xml, results, outermost) {
              var elem, j, matcher, matchedCount = 0, i2 = "0", unmatched = seed && [], setMatched = [], contextBackup = outermostContext, elems = seed || byElement && Expr.find.TAG("*", outermost), dirrunsUnique = dirruns += contextBackup == null ? 1 : Math.random() || 0.1, len = elems.length;
              if (outermost) {
                outermostContext = context == document3 || context || outermost;
              }
              for (; i2 !== len && (elem = elems[i2]) != null; i2++) {
                if (byElement && elem) {
                  j = 0;
                  if (!context && elem.ownerDocument != document3) {
                    setDocument(elem);
                    xml = !documentIsHTML;
                  }
                  while (matcher = elementMatchers[j++]) {
                    if (matcher(elem, context || document3, xml)) {
                      push2.call(results, elem);
                      break;
                    }
                  }
                  if (outermost) {
                    dirruns = dirrunsUnique;
                  }
                }
                if (bySet) {
                  if (elem = !matcher && elem) {
                    matchedCount--;
                  }
                  if (seed) {
                    unmatched.push(elem);
                  }
                }
              }
              matchedCount += i2;
              if (bySet && i2 !== matchedCount) {
                j = 0;
                while (matcher = setMatchers[j++]) {
                  matcher(unmatched, setMatched, context, xml);
                }
                if (seed) {
                  if (matchedCount > 0) {
                    while (i2--) {
                      if (!(unmatched[i2] || setMatched[i2])) {
                        setMatched[i2] = pop.call(results);
                      }
                    }
                  }
                  setMatched = condense(setMatched);
                }
                push2.apply(results, setMatched);
                if (outermost && !seed && setMatched.length > 0 && matchedCount + setMatchers.length > 1) {
                  jQuery2.uniqueSort(results);
                }
              }
              if (outermost) {
                dirruns = dirrunsUnique;
                outermostContext = contextBackup;
              }
              return unmatched;
            };
            return bySet ? markFunction(superMatcher) : superMatcher;
          }
          function compile(selector, match) {
            var i2, setMatchers = [], elementMatchers = [], cached = compilerCache[selector + " "];
            if (!cached) {
              if (!match) {
                match = tokenize(selector);
              }
              i2 = match.length;
              while (i2--) {
                cached = matcherFromTokens(match[i2]);
                if (cached[expando]) {
                  setMatchers.push(cached);
                } else {
                  elementMatchers.push(cached);
                }
              }
              cached = compilerCache(
                selector,
                matcherFromGroupMatchers(elementMatchers, setMatchers)
              );
              cached.selector = selector;
            }
            return cached;
          }
          function select(selector, context, results, seed) {
            var i2, tokens, token, type, find2, compiled = typeof selector === "function" && selector, match = !seed && tokenize(selector = compiled.selector || selector);
            results = results || [];
            if (match.length === 1) {
              tokens = match[0] = match[0].slice(0);
              if (tokens.length > 2 && (token = tokens[0]).type === "ID" && context.nodeType === 9 && documentIsHTML && Expr.relative[tokens[1].type]) {
                context = (Expr.find.ID(
                  token.matches[0].replace(runescape, funescape),
                  context
                ) || [])[0];
                if (!context) {
                  return results;
                } else if (compiled) {
                  context = context.parentNode;
                }
                selector = selector.slice(tokens.shift().value.length);
              }
              i2 = matchExpr.needsContext.test(selector) ? 0 : tokens.length;
              while (i2--) {
                token = tokens[i2];
                if (Expr.relative[type = token.type]) {
                  break;
                }
                if (find2 = Expr.find[type]) {
                  if (seed = find2(
                    token.matches[0].replace(runescape, funescape),
                    rsibling.test(tokens[0].type) && testContext(context.parentNode) || context
                  )) {
                    tokens.splice(i2, 1);
                    selector = seed.length && toSelector(tokens);
                    if (!selector) {
                      push2.apply(results, seed);
                      return results;
                    }
                    break;
                  }
                }
              }
            }
            (compiled || compile(selector, match))(
              seed,
              context,
              !documentIsHTML,
              results,
              !context || rsibling.test(selector) && testContext(context.parentNode) || context
            );
            return results;
          }
          support.sortStable = expando.split("").sort(sortOrder).join("") === expando;
          setDocument();
          support.sortDetached = assert(function(el) {
            return el.compareDocumentPosition(document3.createElement("fieldset")) & 1;
          });
          jQuery2.find = find;
          jQuery2.expr[":"] = jQuery2.expr.pseudos;
          jQuery2.unique = jQuery2.uniqueSort;
          find.compile = compile;
          find.select = select;
          find.setDocument = setDocument;
          find.tokenize = tokenize;
          find.escape = jQuery2.escapeSelector;
          find.getText = jQuery2.text;
          find.isXML = jQuery2.isXMLDoc;
          find.selectors = jQuery2.expr;
          find.support = jQuery2.support;
          find.uniqueSort = jQuery2.uniqueSort;
        })();
        var dir = function(elem, dir2, until) {
          var matched = [], truncate = until !== void 0;
          while ((elem = elem[dir2]) && elem.nodeType !== 9) {
            if (elem.nodeType === 1) {
              if (truncate && jQuery2(elem).is(until)) {
                break;
              }
              matched.push(elem);
            }
          }
          return matched;
        };
        var siblings = function(n, elem) {
          var matched = [];
          for (; n; n = n.nextSibling) {
            if (n.nodeType === 1 && n !== elem) {
              matched.push(n);
            }
          }
          return matched;
        };
        var rneedsContext = jQuery2.expr.match.needsContext;
        var rsingleTag = /^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;
        function winnow(elements, qualifier, not) {
          if (isFunction(qualifier)) {
            return jQuery2.grep(elements, function(elem, i) {
              return !!qualifier.call(elem, i, elem) !== not;
            });
          }
          if (qualifier.nodeType) {
            return jQuery2.grep(elements, function(elem) {
              return elem === qualifier !== not;
            });
          }
          if (typeof qualifier !== "string") {
            return jQuery2.grep(elements, function(elem) {
              return indexOf.call(qualifier, elem) > -1 !== not;
            });
          }
          return jQuery2.filter(qualifier, elements, not);
        }
        jQuery2.filter = function(expr, elems, not) {
          var elem = elems[0];
          if (not) {
            expr = ":not(" + expr + ")";
          }
          if (elems.length === 1 && elem.nodeType === 1) {
            return jQuery2.find.matchesSelector(elem, expr) ? [elem] : [];
          }
          return jQuery2.find.matches(expr, jQuery2.grep(elems, function(elem2) {
            return elem2.nodeType === 1;
          }));
        };
        jQuery2.fn.extend({
          find: function(selector) {
            var i, ret, len = this.length, self2 = this;
            if (typeof selector !== "string") {
              return this.pushStack(jQuery2(selector).filter(function() {
                for (i = 0; i < len; i++) {
                  if (jQuery2.contains(self2[i], this)) {
                    return true;
                  }
                }
              }));
            }
            ret = this.pushStack([]);
            for (i = 0; i < len; i++) {
              jQuery2.find(selector, self2[i], ret);
            }
            return len > 1 ? jQuery2.uniqueSort(ret) : ret;
          },
          filter: function(selector) {
            return this.pushStack(winnow(this, selector || [], false));
          },
          not: function(selector) {
            return this.pushStack(winnow(this, selector || [], true));
          },
          is: function(selector) {
            return !!winnow(
              this,
              // If this is a positional/relative selector, check membership in the returned set
              // so $("p:first").is("p:last") won't return true for a doc with two "p".
              typeof selector === "string" && rneedsContext.test(selector) ? jQuery2(selector) : selector || [],
              false
            ).length;
          }
        });
        var rootjQuery, rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/, init = jQuery2.fn.init = function(selector, context, root) {
          var match, elem;
          if (!selector) {
            return this;
          }
          root = root || rootjQuery;
          if (typeof selector === "string") {
            if (selector[0] === "<" && selector[selector.length - 1] === ">" && selector.length >= 3) {
              match = [null, selector, null];
            } else {
              match = rquickExpr.exec(selector);
            }
            if (match && (match[1] || !context)) {
              if (match[1]) {
                context = context instanceof jQuery2 ? context[0] : context;
                jQuery2.merge(this, jQuery2.parseHTML(
                  match[1],
                  context && context.nodeType ? context.ownerDocument || context : document2,
                  true
                ));
                if (rsingleTag.test(match[1]) && jQuery2.isPlainObject(context)) {
                  for (match in context) {
                    if (isFunction(this[match])) {
                      this[match](context[match]);
                    } else {
                      this.attr(match, context[match]);
                    }
                  }
                }
                return this;
              } else {
                elem = document2.getElementById(match[2]);
                if (elem) {
                  this[0] = elem;
                  this.length = 1;
                }
                return this;
              }
            } else if (!context || context.jquery) {
              return (context || root).find(selector);
            } else {
              return this.constructor(context).find(selector);
            }
          } else if (selector.nodeType) {
            this[0] = selector;
            this.length = 1;
            return this;
          } else if (isFunction(selector)) {
            return root.ready !== void 0 ? root.ready(selector) : (
              // Execute immediately if ready is not present
              selector(jQuery2)
            );
          }
          return jQuery2.makeArray(selector, this);
        };
        init.prototype = jQuery2.fn;
        rootjQuery = jQuery2(document2);
        var rparentsprev = /^(?:parents|prev(?:Until|All))/, guaranteedUnique = {
          children: true,
          contents: true,
          next: true,
          prev: true
        };
        jQuery2.fn.extend({
          has: function(target) {
            var targets = jQuery2(target, this), l = targets.length;
            return this.filter(function() {
              var i = 0;
              for (; i < l; i++) {
                if (jQuery2.contains(this, targets[i])) {
                  return true;
                }
              }
            });
          },
          closest: function(selectors, context) {
            var cur, i = 0, l = this.length, matched = [], targets = typeof selectors !== "string" && jQuery2(selectors);
            if (!rneedsContext.test(selectors)) {
              for (; i < l; i++) {
                for (cur = this[i]; cur && cur !== context; cur = cur.parentNode) {
                  if (cur.nodeType < 11 && (targets ? targets.index(cur) > -1 : (
                    // Don't pass non-elements to jQuery#find
                    cur.nodeType === 1 && jQuery2.find.matchesSelector(cur, selectors)
                  ))) {
                    matched.push(cur);
                    break;
                  }
                }
              }
            }
            return this.pushStack(matched.length > 1 ? jQuery2.uniqueSort(matched) : matched);
          },
          // Determine the position of an element within the set
          index: function(elem) {
            if (!elem) {
              return this[0] && this[0].parentNode ? this.first().prevAll().length : -1;
            }
            if (typeof elem === "string") {
              return indexOf.call(jQuery2(elem), this[0]);
            }
            return indexOf.call(
              this,
              // If it receives a jQuery object, the first element is used
              elem.jquery ? elem[0] : elem
            );
          },
          add: function(selector, context) {
            return this.pushStack(
              jQuery2.uniqueSort(
                jQuery2.merge(this.get(), jQuery2(selector, context))
              )
            );
          },
          addBack: function(selector) {
            return this.add(
              selector == null ? this.prevObject : this.prevObject.filter(selector)
            );
          }
        });
        function sibling(cur, dir2) {
          while ((cur = cur[dir2]) && cur.nodeType !== 1) {
          }
          return cur;
        }
        jQuery2.each({
          parent: function(elem) {
            var parent = elem.parentNode;
            return parent && parent.nodeType !== 11 ? parent : null;
          },
          parents: function(elem) {
            return dir(elem, "parentNode");
          },
          parentsUntil: function(elem, _i, until) {
            return dir(elem, "parentNode", until);
          },
          next: function(elem) {
            return sibling(elem, "nextSibling");
          },
          prev: function(elem) {
            return sibling(elem, "previousSibling");
          },
          nextAll: function(elem) {
            return dir(elem, "nextSibling");
          },
          prevAll: function(elem) {
            return dir(elem, "previousSibling");
          },
          nextUntil: function(elem, _i, until) {
            return dir(elem, "nextSibling", until);
          },
          prevUntil: function(elem, _i, until) {
            return dir(elem, "previousSibling", until);
          },
          siblings: function(elem) {
            return siblings((elem.parentNode || {}).firstChild, elem);
          },
          children: function(elem) {
            return siblings(elem.firstChild);
          },
          contents: function(elem) {
            if (elem.contentDocument != null && // Support: IE 11+
            // <object> elements with no `data` attribute has an object
            // `contentDocument` with a `null` prototype.
            getProto(elem.contentDocument)) {
              return elem.contentDocument;
            }
            if (nodeName(elem, "template")) {
              elem = elem.content || elem;
            }
            return jQuery2.merge([], elem.childNodes);
          }
        }, function(name, fn) {
          jQuery2.fn[name] = function(until, selector) {
            var matched = jQuery2.map(this, fn, until);
            if (name.slice(-5) !== "Until") {
              selector = until;
            }
            if (selector && typeof selector === "string") {
              matched = jQuery2.filter(selector, matched);
            }
            if (this.length > 1) {
              if (!guaranteedUnique[name]) {
                jQuery2.uniqueSort(matched);
              }
              if (rparentsprev.test(name)) {
                matched.reverse();
              }
            }
            return this.pushStack(matched);
          };
        });
        var rnothtmlwhite = /[^\x20\t\r\n\f]+/g;
        function createOptions(options) {
          var object = {};
          jQuery2.each(options.match(rnothtmlwhite) || [], function(_, flag) {
            object[flag] = true;
          });
          return object;
        }
        jQuery2.Callbacks = function(options) {
          options = typeof options === "string" ? createOptions(options) : jQuery2.extend({}, options);
          var firing, memory, fired, locked, list = [], queue = [], firingIndex = -1, fire = function() {
            locked = locked || options.once;
            fired = firing = true;
            for (; queue.length; firingIndex = -1) {
              memory = queue.shift();
              while (++firingIndex < list.length) {
                if (list[firingIndex].apply(memory[0], memory[1]) === false && options.stopOnFalse) {
                  firingIndex = list.length;
                  memory = false;
                }
              }
            }
            if (!options.memory) {
              memory = false;
            }
            firing = false;
            if (locked) {
              if (memory) {
                list = [];
              } else {
                list = "";
              }
            }
          }, self2 = {
            // Add a callback or a collection of callbacks to the list
            add: function() {
              if (list) {
                if (memory && !firing) {
                  firingIndex = list.length - 1;
                  queue.push(memory);
                }
                (function add(args) {
                  jQuery2.each(args, function(_, arg) {
                    if (isFunction(arg)) {
                      if (!options.unique || !self2.has(arg)) {
                        list.push(arg);
                      }
                    } else if (arg && arg.length && toType(arg) !== "string") {
                      add(arg);
                    }
                  });
                })(arguments);
                if (memory && !firing) {
                  fire();
                }
              }
              return this;
            },
            // Remove a callback from the list
            remove: function() {
              jQuery2.each(arguments, function(_, arg) {
                var index;
                while ((index = jQuery2.inArray(arg, list, index)) > -1) {
                  list.splice(index, 1);
                  if (index <= firingIndex) {
                    firingIndex--;
                  }
                }
              });
              return this;
            },
            // Check if a given callback is in the list.
            // If no argument is given, return whether or not list has callbacks attached.
            has: function(fn) {
              return fn ? jQuery2.inArray(fn, list) > -1 : list.length > 0;
            },
            // Remove all callbacks from the list
            empty: function() {
              if (list) {
                list = [];
              }
              return this;
            },
            // Disable .fire and .add
            // Abort any current/pending executions
            // Clear all callbacks and values
            disable: function() {
              locked = queue = [];
              list = memory = "";
              return this;
            },
            disabled: function() {
              return !list;
            },
            // Disable .fire
            // Also disable .add unless we have memory (since it would have no effect)
            // Abort any pending executions
            lock: function() {
              locked = queue = [];
              if (!memory && !firing) {
                list = memory = "";
              }
              return this;
            },
            locked: function() {
              return !!locked;
            },
            // Call all callbacks with the given context and arguments
            fireWith: function(context, args) {
              if (!locked) {
                args = args || [];
                args = [context, args.slice ? args.slice() : args];
                queue.push(args);
                if (!firing) {
                  fire();
                }
              }
              return this;
            },
            // Call all the callbacks with the given arguments
            fire: function() {
              self2.fireWith(this, arguments);
              return this;
            },
            // To know if the callbacks have already been called at least once
            fired: function() {
              return !!fired;
            }
          };
          return self2;
        };
        function Identity(v) {
          return v;
        }
        function Thrower(ex) {
          throw ex;
        }
        function adoptValue(value, resolve, reject, noValue) {
          var method;
          try {
            if (value && isFunction(method = value.promise)) {
              method.call(value).done(resolve).fail(reject);
            } else if (value && isFunction(method = value.then)) {
              method.call(value, resolve, reject);
            } else {
              resolve.apply(void 0, [value].slice(noValue));
            }
          } catch (value2) {
            reject.apply(void 0, [value2]);
          }
        }
        jQuery2.extend({
          Deferred: function(func) {
            var tuples = [
              // action, add listener, callbacks,
              // ... .then handlers, argument index, [final state]
              [
                "notify",
                "progress",
                jQuery2.Callbacks("memory"),
                jQuery2.Callbacks("memory"),
                2
              ],
              [
                "resolve",
                "done",
                jQuery2.Callbacks("once memory"),
                jQuery2.Callbacks("once memory"),
                0,
                "resolved"
              ],
              [
                "reject",
                "fail",
                jQuery2.Callbacks("once memory"),
                jQuery2.Callbacks("once memory"),
                1,
                "rejected"
              ]
            ], state = "pending", promise = {
              state: function() {
                return state;
              },
              always: function() {
                deferred.done(arguments).fail(arguments);
                return this;
              },
              "catch": function(fn) {
                return promise.then(null, fn);
              },
              // Keep pipe for back-compat
              pipe: function() {
                var fns = arguments;
                return jQuery2.Deferred(function(newDefer) {
                  jQuery2.each(tuples, function(_i, tuple) {
                    var fn = isFunction(fns[tuple[4]]) && fns[tuple[4]];
                    deferred[tuple[1]](function() {
                      var returned = fn && fn.apply(this, arguments);
                      if (returned && isFunction(returned.promise)) {
                        returned.promise().progress(newDefer.notify).done(newDefer.resolve).fail(newDefer.reject);
                      } else {
                        newDefer[tuple[0] + "With"](
                          this,
                          fn ? [returned] : arguments
                        );
                      }
                    });
                  });
                  fns = null;
                }).promise();
              },
              then: function(onFulfilled, onRejected, onProgress) {
                var maxDepth = 0;
                function resolve(depth, deferred2, handler, special) {
                  return function() {
                    var that = this, args = arguments, mightThrow = function() {
                      var returned, then;
                      if (depth < maxDepth) {
                        return;
                      }
                      returned = handler.apply(that, args);
                      if (returned === deferred2.promise()) {
                        throw new TypeError("Thenable self-resolution");
                      }
                      then = returned && // Support: Promises/A+ section 2.3.4
                      // https://promisesaplus.com/#point-64
                      // Only check objects and functions for thenability
                      (typeof returned === "object" || typeof returned === "function") && returned.then;
                      if (isFunction(then)) {
                        if (special) {
                          then.call(
                            returned,
                            resolve(maxDepth, deferred2, Identity, special),
                            resolve(maxDepth, deferred2, Thrower, special)
                          );
                        } else {
                          maxDepth++;
                          then.call(
                            returned,
                            resolve(maxDepth, deferred2, Identity, special),
                            resolve(maxDepth, deferred2, Thrower, special),
                            resolve(
                              maxDepth,
                              deferred2,
                              Identity,
                              deferred2.notifyWith
                            )
                          );
                        }
                      } else {
                        if (handler !== Identity) {
                          that = void 0;
                          args = [returned];
                        }
                        (special || deferred2.resolveWith)(that, args);
                      }
                    }, process = special ? mightThrow : function() {
                      try {
                        mightThrow();
                      } catch (e) {
                        if (jQuery2.Deferred.exceptionHook) {
                          jQuery2.Deferred.exceptionHook(
                            e,
                            process.error
                          );
                        }
                        if (depth + 1 >= maxDepth) {
                          if (handler !== Thrower) {
                            that = void 0;
                            args = [e];
                          }
                          deferred2.rejectWith(that, args);
                        }
                      }
                    };
                    if (depth) {
                      process();
                    } else {
                      if (jQuery2.Deferred.getErrorHook) {
                        process.error = jQuery2.Deferred.getErrorHook();
                      } else if (jQuery2.Deferred.getStackHook) {
                        process.error = jQuery2.Deferred.getStackHook();
                      }
                      window2.setTimeout(process);
                    }
                  };
                }
                return jQuery2.Deferred(function(newDefer) {
                  tuples[0][3].add(
                    resolve(
                      0,
                      newDefer,
                      isFunction(onProgress) ? onProgress : Identity,
                      newDefer.notifyWith
                    )
                  );
                  tuples[1][3].add(
                    resolve(
                      0,
                      newDefer,
                      isFunction(onFulfilled) ? onFulfilled : Identity
                    )
                  );
                  tuples[2][3].add(
                    resolve(
                      0,
                      newDefer,
                      isFunction(onRejected) ? onRejected : Thrower
                    )
                  );
                }).promise();
              },
              // Get a promise for this deferred
              // If obj is provided, the promise aspect is added to the object
              promise: function(obj) {
                return obj != null ? jQuery2.extend(obj, promise) : promise;
              }
            }, deferred = {};
            jQuery2.each(tuples, function(i, tuple) {
              var list = tuple[2], stateString = tuple[5];
              promise[tuple[1]] = list.add;
              if (stateString) {
                list.add(
                  function() {
                    state = stateString;
                  },
                  // rejected_callbacks.disable
                  // fulfilled_callbacks.disable
                  tuples[3 - i][2].disable,
                  // rejected_handlers.disable
                  // fulfilled_handlers.disable
                  tuples[3 - i][3].disable,
                  // progress_callbacks.lock
                  tuples[0][2].lock,
                  // progress_handlers.lock
                  tuples[0][3].lock
                );
              }
              list.add(tuple[3].fire);
              deferred[tuple[0]] = function() {
                deferred[tuple[0] + "With"](this === deferred ? void 0 : this, arguments);
                return this;
              };
              deferred[tuple[0] + "With"] = list.fireWith;
            });
            promise.promise(deferred);
            if (func) {
              func.call(deferred, deferred);
            }
            return deferred;
          },
          // Deferred helper
          when: function(singleValue) {
            var remaining = arguments.length, i = remaining, resolveContexts = Array(i), resolveValues = slice.call(arguments), primary = jQuery2.Deferred(), updateFunc = function(i2) {
              return function(value) {
                resolveContexts[i2] = this;
                resolveValues[i2] = arguments.length > 1 ? slice.call(arguments) : value;
                if (!--remaining) {
                  primary.resolveWith(resolveContexts, resolveValues);
                }
              };
            };
            if (remaining <= 1) {
              adoptValue(
                singleValue,
                primary.done(updateFunc(i)).resolve,
                primary.reject,
                !remaining
              );
              if (primary.state() === "pending" || isFunction(resolveValues[i] && resolveValues[i].then)) {
                return primary.then();
              }
            }
            while (i--) {
              adoptValue(resolveValues[i], updateFunc(i), primary.reject);
            }
            return primary.promise();
          }
        });
        var rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;
        jQuery2.Deferred.exceptionHook = function(error, asyncError) {
          if (window2.console && window2.console.warn && error && rerrorNames.test(error.name)) {
            window2.console.warn(
              "jQuery.Deferred exception: " + error.message,
              error.stack,
              asyncError
            );
          }
        };
        jQuery2.readyException = function(error) {
          window2.setTimeout(function() {
            throw error;
          });
        };
        var readyList = jQuery2.Deferred();
        jQuery2.fn.ready = function(fn) {
          readyList.then(fn).catch(function(error) {
            jQuery2.readyException(error);
          });
          return this;
        };
        jQuery2.extend({
          // Is the DOM ready to be used? Set to true once it occurs.
          isReady: false,
          // A counter to track how many items to wait for before
          // the ready event fires. See trac-6781
          readyWait: 1,
          // Handle when the DOM is ready
          ready: function(wait) {
            if (wait === true ? --jQuery2.readyWait : jQuery2.isReady) {
              return;
            }
            jQuery2.isReady = true;
            if (wait !== true && --jQuery2.readyWait > 0) {
              return;
            }
            readyList.resolveWith(document2, [jQuery2]);
          }
        });
        jQuery2.ready.then = readyList.then;
        function completed() {
          document2.removeEventListener("DOMContentLoaded", completed);
          window2.removeEventListener("load", completed);
          jQuery2.ready();
        }
        if (document2.readyState === "complete" || document2.readyState !== "loading" && !document2.documentElement.doScroll) {
          window2.setTimeout(jQuery2.ready);
        } else {
          document2.addEventListener("DOMContentLoaded", completed);
          window2.addEventListener("load", completed);
        }
        var access = function(elems, fn, key, value, chainable, emptyGet, raw) {
          var i = 0, len = elems.length, bulk = key == null;
          if (toType(key) === "object") {
            chainable = true;
            for (i in key) {
              access(elems, fn, i, key[i], true, emptyGet, raw);
            }
          } else if (value !== void 0) {
            chainable = true;
            if (!isFunction(value)) {
              raw = true;
            }
            if (bulk) {
              if (raw) {
                fn.call(elems, value);
                fn = null;
              } else {
                bulk = fn;
                fn = function(elem, _key, value2) {
                  return bulk.call(jQuery2(elem), value2);
                };
              }
            }
            if (fn) {
              for (; i < len; i++) {
                fn(
                  elems[i],
                  key,
                  raw ? value : value.call(elems[i], i, fn(elems[i], key))
                );
              }
            }
          }
          if (chainable) {
            return elems;
          }
          if (bulk) {
            return fn.call(elems);
          }
          return len ? fn(elems[0], key) : emptyGet;
        };
        var rmsPrefix = /^-ms-/, rdashAlpha = /-([a-z])/g;
        function fcamelCase(_all, letter) {
          return letter.toUpperCase();
        }
        function camelCase(string) {
          return string.replace(rmsPrefix, "ms-").replace(rdashAlpha, fcamelCase);
        }
        var acceptData = function(owner) {
          return owner.nodeType === 1 || owner.nodeType === 9 || !+owner.nodeType;
        };
        function Data() {
          this.expando = jQuery2.expando + Data.uid++;
        }
        Data.uid = 1;
        Data.prototype = {
          cache: function(owner) {
            var value = owner[this.expando];
            if (!value) {
              value = {};
              if (acceptData(owner)) {
                if (owner.nodeType) {
                  owner[this.expando] = value;
                } else {
                  Object.defineProperty(owner, this.expando, {
                    value,
                    configurable: true
                  });
                }
              }
            }
            return value;
          },
          set: function(owner, data, value) {
            var prop, cache = this.cache(owner);
            if (typeof data === "string") {
              cache[camelCase(data)] = value;
            } else {
              for (prop in data) {
                cache[camelCase(prop)] = data[prop];
              }
            }
            return cache;
          },
          get: function(owner, key) {
            return key === void 0 ? this.cache(owner) : (
              // Always use camelCase key (gh-2257)
              owner[this.expando] && owner[this.expando][camelCase(key)]
            );
          },
          access: function(owner, key, value) {
            if (key === void 0 || key && typeof key === "string" && value === void 0) {
              return this.get(owner, key);
            }
            this.set(owner, key, value);
            return value !== void 0 ? value : key;
          },
          remove: function(owner, key) {
            var i, cache = owner[this.expando];
            if (cache === void 0) {
              return;
            }
            if (key !== void 0) {
              if (Array.isArray(key)) {
                key = key.map(camelCase);
              } else {
                key = camelCase(key);
                key = key in cache ? [key] : key.match(rnothtmlwhite) || [];
              }
              i = key.length;
              while (i--) {
                delete cache[key[i]];
              }
            }
            if (key === void 0 || jQuery2.isEmptyObject(cache)) {
              if (owner.nodeType) {
                owner[this.expando] = void 0;
              } else {
                delete owner[this.expando];
              }
            }
          },
          hasData: function(owner) {
            var cache = owner[this.expando];
            return cache !== void 0 && !jQuery2.isEmptyObject(cache);
          }
        };
        var dataPriv = new Data();
        var dataUser = new Data();
        var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/, rmultiDash = /[A-Z]/g;
        function getData(data) {
          if (data === "true") {
            return true;
          }
          if (data === "false") {
            return false;
          }
          if (data === "null") {
            return null;
          }
          if (data === +data + "") {
            return +data;
          }
          if (rbrace.test(data)) {
            return JSON.parse(data);
          }
          return data;
        }
        function dataAttr(elem, key, data) {
          var name;
          if (data === void 0 && elem.nodeType === 1) {
            name = "data-" + key.replace(rmultiDash, "-$&").toLowerCase();
            data = elem.getAttribute(name);
            if (typeof data === "string") {
              try {
                data = getData(data);
              } catch (e) {
              }
              dataUser.set(elem, key, data);
            } else {
              data = void 0;
            }
          }
          return data;
        }
        jQuery2.extend({
          hasData: function(elem) {
            return dataUser.hasData(elem) || dataPriv.hasData(elem);
          },
          data: function(elem, name, data) {
            return dataUser.access(elem, name, data);
          },
          removeData: function(elem, name) {
            dataUser.remove(elem, name);
          },
          // TODO: Now that all calls to _data and _removeData have been replaced
          // with direct calls to dataPriv methods, these can be deprecated.
          _data: function(elem, name, data) {
            return dataPriv.access(elem, name, data);
          },
          _removeData: function(elem, name) {
            dataPriv.remove(elem, name);
          }
        });
        jQuery2.fn.extend({
          data: function(key, value) {
            var i, name, data, elem = this[0], attrs = elem && elem.attributes;
            if (key === void 0) {
              if (this.length) {
                data = dataUser.get(elem);
                if (elem.nodeType === 1 && !dataPriv.get(elem, "hasDataAttrs")) {
                  i = attrs.length;
                  while (i--) {
                    if (attrs[i]) {
                      name = attrs[i].name;
                      if (name.indexOf("data-") === 0) {
                        name = camelCase(name.slice(5));
                        dataAttr(elem, name, data[name]);
                      }
                    }
                  }
                  dataPriv.set(elem, "hasDataAttrs", true);
                }
              }
              return data;
            }
            if (typeof key === "object") {
              return this.each(function() {
                dataUser.set(this, key);
              });
            }
            return access(this, function(value2) {
              var data2;
              if (elem && value2 === void 0) {
                data2 = dataUser.get(elem, key);
                if (data2 !== void 0) {
                  return data2;
                }
                data2 = dataAttr(elem, key);
                if (data2 !== void 0) {
                  return data2;
                }
                return;
              }
              this.each(function() {
                dataUser.set(this, key, value2);
              });
            }, null, value, arguments.length > 1, null, true);
          },
          removeData: function(key) {
            return this.each(function() {
              dataUser.remove(this, key);
            });
          }
        });
        jQuery2.extend({
          queue: function(elem, type, data) {
            var queue;
            if (elem) {
              type = (type || "fx") + "queue";
              queue = dataPriv.get(elem, type);
              if (data) {
                if (!queue || Array.isArray(data)) {
                  queue = dataPriv.access(elem, type, jQuery2.makeArray(data));
                } else {
                  queue.push(data);
                }
              }
              return queue || [];
            }
          },
          dequeue: function(elem, type) {
            type = type || "fx";
            var queue = jQuery2.queue(elem, type), startLength = queue.length, fn = queue.shift(), hooks = jQuery2._queueHooks(elem, type), next = function() {
              jQuery2.dequeue(elem, type);
            };
            if (fn === "inprogress") {
              fn = queue.shift();
              startLength--;
            }
            if (fn) {
              if (type === "fx") {
                queue.unshift("inprogress");
              }
              delete hooks.stop;
              fn.call(elem, next, hooks);
            }
            if (!startLength && hooks) {
              hooks.empty.fire();
            }
          },
          // Not public - generate a queueHooks object, or return the current one
          _queueHooks: function(elem, type) {
            var key = type + "queueHooks";
            return dataPriv.get(elem, key) || dataPriv.access(elem, key, {
              empty: jQuery2.Callbacks("once memory").add(function() {
                dataPriv.remove(elem, [type + "queue", key]);
              })
            });
          }
        });
        jQuery2.fn.extend({
          queue: function(type, data) {
            var setter = 2;
            if (typeof type !== "string") {
              data = type;
              type = "fx";
              setter--;
            }
            if (arguments.length < setter) {
              return jQuery2.queue(this[0], type);
            }
            return data === void 0 ? this : this.each(function() {
              var queue = jQuery2.queue(this, type, data);
              jQuery2._queueHooks(this, type);
              if (type === "fx" && queue[0] !== "inprogress") {
                jQuery2.dequeue(this, type);
              }
            });
          },
          dequeue: function(type) {
            return this.each(function() {
              jQuery2.dequeue(this, type);
            });
          },
          clearQueue: function(type) {
            return this.queue(type || "fx", []);
          },
          // Get a promise resolved when queues of a certain type
          // are emptied (fx is the type by default)
          promise: function(type, obj) {
            var tmp, count = 1, defer = jQuery2.Deferred(), elements = this, i = this.length, resolve = function() {
              if (!--count) {
                defer.resolveWith(elements, [elements]);
              }
            };
            if (typeof type !== "string") {
              obj = type;
              type = void 0;
            }
            type = type || "fx";
            while (i--) {
              tmp = dataPriv.get(elements[i], type + "queueHooks");
              if (tmp && tmp.empty) {
                count++;
                tmp.empty.add(resolve);
              }
            }
            resolve();
            return defer.promise(obj);
          }
        });
        var pnum = /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source;
        var rcssNum = new RegExp("^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i");
        var cssExpand = ["Top", "Right", "Bottom", "Left"];
        var documentElement = document2.documentElement;
        var isAttached = function(elem) {
          return jQuery2.contains(elem.ownerDocument, elem);
        }, composed = { composed: true };
        if (documentElement.getRootNode) {
          isAttached = function(elem) {
            return jQuery2.contains(elem.ownerDocument, elem) || elem.getRootNode(composed) === elem.ownerDocument;
          };
        }
        var isHiddenWithinTree = function(elem, el) {
          elem = el || elem;
          return elem.style.display === "none" || elem.style.display === "" && // Otherwise, check computed style
          // Support: Firefox <=43 - 45
          // Disconnected elements can have computed display: none, so first confirm that elem is
          // in the document.
          isAttached(elem) && jQuery2.css(elem, "display") === "none";
        };
        function adjustCSS(elem, prop, valueParts, tween) {
          var adjusted, scale, maxIterations = 20, currentValue = tween ? function() {
            return tween.cur();
          } : function() {
            return jQuery2.css(elem, prop, "");
          }, initial = currentValue(), unit = valueParts && valueParts[3] || (jQuery2.cssNumber[prop] ? "" : "px"), initialInUnit = elem.nodeType && (jQuery2.cssNumber[prop] || unit !== "px" && +initial) && rcssNum.exec(jQuery2.css(elem, prop));
          if (initialInUnit && initialInUnit[3] !== unit) {
            initial = initial / 2;
            unit = unit || initialInUnit[3];
            initialInUnit = +initial || 1;
            while (maxIterations--) {
              jQuery2.style(elem, prop, initialInUnit + unit);
              if ((1 - scale) * (1 - (scale = currentValue() / initial || 0.5)) <= 0) {
                maxIterations = 0;
              }
              initialInUnit = initialInUnit / scale;
            }
            initialInUnit = initialInUnit * 2;
            jQuery2.style(elem, prop, initialInUnit + unit);
            valueParts = valueParts || [];
          }
          if (valueParts) {
            initialInUnit = +initialInUnit || +initial || 0;
            adjusted = valueParts[1] ? initialInUnit + (valueParts[1] + 1) * valueParts[2] : +valueParts[2];
            if (tween) {
              tween.unit = unit;
              tween.start = initialInUnit;
              tween.end = adjusted;
            }
          }
          return adjusted;
        }
        var defaultDisplayMap = {};
        function getDefaultDisplay(elem) {
          var temp, doc = elem.ownerDocument, nodeName2 = elem.nodeName, display = defaultDisplayMap[nodeName2];
          if (display) {
            return display;
          }
          temp = doc.body.appendChild(doc.createElement(nodeName2));
          display = jQuery2.css(temp, "display");
          temp.parentNode.removeChild(temp);
          if (display === "none") {
            display = "block";
          }
          defaultDisplayMap[nodeName2] = display;
          return display;
        }
        function showHide(elements, show) {
          var display, elem, values = [], index = 0, length = elements.length;
          for (; index < length; index++) {
            elem = elements[index];
            if (!elem.style) {
              continue;
            }
            display = elem.style.display;
            if (show) {
              if (display === "none") {
                values[index] = dataPriv.get(elem, "display") || null;
                if (!values[index]) {
                  elem.style.display = "";
                }
              }
              if (elem.style.display === "" && isHiddenWithinTree(elem)) {
                values[index] = getDefaultDisplay(elem);
              }
            } else {
              if (display !== "none") {
                values[index] = "none";
                dataPriv.set(elem, "display", display);
              }
            }
          }
          for (index = 0; index < length; index++) {
            if (values[index] != null) {
              elements[index].style.display = values[index];
            }
          }
          return elements;
        }
        jQuery2.fn.extend({
          show: function() {
            return showHide(this, true);
          },
          hide: function() {
            return showHide(this);
          },
          toggle: function(state) {
            if (typeof state === "boolean") {
              return state ? this.show() : this.hide();
            }
            return this.each(function() {
              if (isHiddenWithinTree(this)) {
                jQuery2(this).show();
              } else {
                jQuery2(this).hide();
              }
            });
          }
        });
        var rcheckableType = /^(?:checkbox|radio)$/i;
        var rtagName = /<([a-z][^\/\0>\x20\t\r\n\f]*)/i;
        var rscriptType = /^$|^module$|\/(?:java|ecma)script/i;
        (function() {
          var fragment = document2.createDocumentFragment(), div = fragment.appendChild(document2.createElement("div")), input = document2.createElement("input");
          input.setAttribute("type", "radio");
          input.setAttribute("checked", "checked");
          input.setAttribute("name", "t");
          div.appendChild(input);
          support.checkClone = div.cloneNode(true).cloneNode(true).lastChild.checked;
          div.innerHTML = "<textarea>x</textarea>";
          support.noCloneChecked = !!div.cloneNode(true).lastChild.defaultValue;
          div.innerHTML = "<option></option>";
          support.option = !!div.lastChild;
        })();
        var wrapMap = {
          // XHTML parsers do not magically insert elements in the
          // same way that tag soup parsers do. So we cannot shorten
          // this by omitting <tbody> or other required elements.
          thead: [1, "<table>", "</table>"],
          col: [2, "<table><colgroup>", "</colgroup></table>"],
          tr: [2, "<table><tbody>", "</tbody></table>"],
          td: [3, "<table><tbody><tr>", "</tr></tbody></table>"],
          _default: [0, "", ""]
        };
        wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
        wrapMap.th = wrapMap.td;
        if (!support.option) {
          wrapMap.optgroup = wrapMap.option = [1, "<select multiple='multiple'>", "</select>"];
        }
        function getAll(context, tag) {
          var ret;
          if (typeof context.getElementsByTagName !== "undefined") {
            ret = context.getElementsByTagName(tag || "*");
          } else if (typeof context.querySelectorAll !== "undefined") {
            ret = context.querySelectorAll(tag || "*");
          } else {
            ret = [];
          }
          if (tag === void 0 || tag && nodeName(context, tag)) {
            return jQuery2.merge([context], ret);
          }
          return ret;
        }
        function setGlobalEval(elems, refElements) {
          var i = 0, l = elems.length;
          for (; i < l; i++) {
            dataPriv.set(
              elems[i],
              "globalEval",
              !refElements || dataPriv.get(refElements[i], "globalEval")
            );
          }
        }
        var rhtml = /<|&#?\w+;/;
        function buildFragment(elems, context, scripts, selection, ignored) {
          var elem, tmp, tag, wrap2, attached, j, fragment = context.createDocumentFragment(), nodes = [], i = 0, l = elems.length;
          for (; i < l; i++) {
            elem = elems[i];
            if (elem || elem === 0) {
              if (toType(elem) === "object") {
                jQuery2.merge(nodes, elem.nodeType ? [elem] : elem);
              } else if (!rhtml.test(elem)) {
                nodes.push(context.createTextNode(elem));
              } else {
                tmp = tmp || fragment.appendChild(context.createElement("div"));
                tag = (rtagName.exec(elem) || ["", ""])[1].toLowerCase();
                wrap2 = wrapMap[tag] || wrapMap._default;
                tmp.innerHTML = wrap2[1] + jQuery2.htmlPrefilter(elem) + wrap2[2];
                j = wrap2[0];
                while (j--) {
                  tmp = tmp.lastChild;
                }
                jQuery2.merge(nodes, tmp.childNodes);
                tmp = fragment.firstChild;
                tmp.textContent = "";
              }
            }
          }
          fragment.textContent = "";
          i = 0;
          while (elem = nodes[i++]) {
            if (selection && jQuery2.inArray(elem, selection) > -1) {
              if (ignored) {
                ignored.push(elem);
              }
              continue;
            }
            attached = isAttached(elem);
            tmp = getAll(fragment.appendChild(elem), "script");
            if (attached) {
              setGlobalEval(tmp);
            }
            if (scripts) {
              j = 0;
              while (elem = tmp[j++]) {
                if (rscriptType.test(elem.type || "")) {
                  scripts.push(elem);
                }
              }
            }
          }
          return fragment;
        }
        var rtypenamespace = /^([^.]*)(?:\.(.+)|)/;
        function returnTrue() {
          return true;
        }
        function returnFalse() {
          return false;
        }
        function on(elem, types, selector, data, fn, one) {
          var origFn, type;
          if (typeof types === "object") {
            if (typeof selector !== "string") {
              data = data || selector;
              selector = void 0;
            }
            for (type in types) {
              on(elem, type, selector, data, types[type], one);
            }
            return elem;
          }
          if (data == null && fn == null) {
            fn = selector;
            data = selector = void 0;
          } else if (fn == null) {
            if (typeof selector === "string") {
              fn = data;
              data = void 0;
            } else {
              fn = data;
              data = selector;
              selector = void 0;
            }
          }
          if (fn === false) {
            fn = returnFalse;
          } else if (!fn) {
            return elem;
          }
          if (one === 1) {
            origFn = fn;
            fn = function(event) {
              jQuery2().off(event);
              return origFn.apply(this, arguments);
            };
            fn.guid = origFn.guid || (origFn.guid = jQuery2.guid++);
          }
          return elem.each(function() {
            jQuery2.event.add(this, types, fn, data, selector);
          });
        }
        jQuery2.event = {
          global: {},
          add: function(elem, types, handler, data, selector) {
            var handleObjIn, eventHandle, tmp, events, t, handleObj, special, handlers, type, namespaces, origType, elemData = dataPriv.get(elem);
            if (!acceptData(elem)) {
              return;
            }
            if (handler.handler) {
              handleObjIn = handler;
              handler = handleObjIn.handler;
              selector = handleObjIn.selector;
            }
            if (selector) {
              jQuery2.find.matchesSelector(documentElement, selector);
            }
            if (!handler.guid) {
              handler.guid = jQuery2.guid++;
            }
            if (!(events = elemData.events)) {
              events = elemData.events = /* @__PURE__ */ Object.create(null);
            }
            if (!(eventHandle = elemData.handle)) {
              eventHandle = elemData.handle = function(e) {
                return typeof jQuery2 !== "undefined" && jQuery2.event.triggered !== e.type ? jQuery2.event.dispatch.apply(elem, arguments) : void 0;
              };
            }
            types = (types || "").match(rnothtmlwhite) || [""];
            t = types.length;
            while (t--) {
              tmp = rtypenamespace.exec(types[t]) || [];
              type = origType = tmp[1];
              namespaces = (tmp[2] || "").split(".").sort();
              if (!type) {
                continue;
              }
              special = jQuery2.event.special[type] || {};
              type = (selector ? special.delegateType : special.bindType) || type;
              special = jQuery2.event.special[type] || {};
              handleObj = jQuery2.extend({
                type,
                origType,
                data,
                handler,
                guid: handler.guid,
                selector,
                needsContext: selector && jQuery2.expr.match.needsContext.test(selector),
                namespace: namespaces.join(".")
              }, handleObjIn);
              if (!(handlers = events[type])) {
                handlers = events[type] = [];
                handlers.delegateCount = 0;
                if (!special.setup || special.setup.call(elem, data, namespaces, eventHandle) === false) {
                  if (elem.addEventListener) {
                    elem.addEventListener(type, eventHandle);
                  }
                }
              }
              if (special.add) {
                special.add.call(elem, handleObj);
                if (!handleObj.handler.guid) {
                  handleObj.handler.guid = handler.guid;
                }
              }
              if (selector) {
                handlers.splice(handlers.delegateCount++, 0, handleObj);
              } else {
                handlers.push(handleObj);
              }
              jQuery2.event.global[type] = true;
            }
          },
          // Detach an event or set of events from an element
          remove: function(elem, types, handler, selector, mappedTypes) {
            var j, origCount, tmp, events, t, handleObj, special, handlers, type, namespaces, origType, elemData = dataPriv.hasData(elem) && dataPriv.get(elem);
            if (!elemData || !(events = elemData.events)) {
              return;
            }
            types = (types || "").match(rnothtmlwhite) || [""];
            t = types.length;
            while (t--) {
              tmp = rtypenamespace.exec(types[t]) || [];
              type = origType = tmp[1];
              namespaces = (tmp[2] || "").split(".").sort();
              if (!type) {
                for (type in events) {
                  jQuery2.event.remove(elem, type + types[t], handler, selector, true);
                }
                continue;
              }
              special = jQuery2.event.special[type] || {};
              type = (selector ? special.delegateType : special.bindType) || type;
              handlers = events[type] || [];
              tmp = tmp[2] && new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)");
              origCount = j = handlers.length;
              while (j--) {
                handleObj = handlers[j];
                if ((mappedTypes || origType === handleObj.origType) && (!handler || handler.guid === handleObj.guid) && (!tmp || tmp.test(handleObj.namespace)) && (!selector || selector === handleObj.selector || selector === "**" && handleObj.selector)) {
                  handlers.splice(j, 1);
                  if (handleObj.selector) {
                    handlers.delegateCount--;
                  }
                  if (special.remove) {
                    special.remove.call(elem, handleObj);
                  }
                }
              }
              if (origCount && !handlers.length) {
                if (!special.teardown || special.teardown.call(elem, namespaces, elemData.handle) === false) {
                  jQuery2.removeEvent(elem, type, elemData.handle);
                }
                delete events[type];
              }
            }
            if (jQuery2.isEmptyObject(events)) {
              dataPriv.remove(elem, "handle events");
            }
          },
          dispatch: function(nativeEvent) {
            var i, j, ret, matched, handleObj, handlerQueue, args = new Array(arguments.length), event = jQuery2.event.fix(nativeEvent), handlers = (dataPriv.get(this, "events") || /* @__PURE__ */ Object.create(null))[event.type] || [], special = jQuery2.event.special[event.type] || {};
            args[0] = event;
            for (i = 1; i < arguments.length; i++) {
              args[i] = arguments[i];
            }
            event.delegateTarget = this;
            if (special.preDispatch && special.preDispatch.call(this, event) === false) {
              return;
            }
            handlerQueue = jQuery2.event.handlers.call(this, event, handlers);
            i = 0;
            while ((matched = handlerQueue[i++]) && !event.isPropagationStopped()) {
              event.currentTarget = matched.elem;
              j = 0;
              while ((handleObj = matched.handlers[j++]) && !event.isImmediatePropagationStopped()) {
                if (!event.rnamespace || handleObj.namespace === false || event.rnamespace.test(handleObj.namespace)) {
                  event.handleObj = handleObj;
                  event.data = handleObj.data;
                  ret = ((jQuery2.event.special[handleObj.origType] || {}).handle || handleObj.handler).apply(matched.elem, args);
                  if (ret !== void 0) {
                    if ((event.result = ret) === false) {
                      event.preventDefault();
                      event.stopPropagation();
                    }
                  }
                }
              }
            }
            if (special.postDispatch) {
              special.postDispatch.call(this, event);
            }
            return event.result;
          },
          handlers: function(event, handlers) {
            var i, handleObj, sel, matchedHandlers, matchedSelectors, handlerQueue = [], delegateCount = handlers.delegateCount, cur = event.target;
            if (delegateCount && // Support: IE <=9
            // Black-hole SVG <use> instance trees (trac-13180)
            cur.nodeType && // Support: Firefox <=42
            // Suppress spec-violating clicks indicating a non-primary pointer button (trac-3861)
            // https://www.w3.org/TR/DOM-Level-3-Events/#event-type-click
            // Support: IE 11 only
            // ...but not arrow key "clicks" of radio inputs, which can have `button` -1 (gh-2343)
            !(event.type === "click" && event.button >= 1)) {
              for (; cur !== this; cur = cur.parentNode || this) {
                if (cur.nodeType === 1 && !(event.type === "click" && cur.disabled === true)) {
                  matchedHandlers = [];
                  matchedSelectors = {};
                  for (i = 0; i < delegateCount; i++) {
                    handleObj = handlers[i];
                    sel = handleObj.selector + " ";
                    if (matchedSelectors[sel] === void 0) {
                      matchedSelectors[sel] = handleObj.needsContext ? jQuery2(sel, this).index(cur) > -1 : jQuery2.find(sel, this, null, [cur]).length;
                    }
                    if (matchedSelectors[sel]) {
                      matchedHandlers.push(handleObj);
                    }
                  }
                  if (matchedHandlers.length) {
                    handlerQueue.push({ elem: cur, handlers: matchedHandlers });
                  }
                }
              }
            }
            cur = this;
            if (delegateCount < handlers.length) {
              handlerQueue.push({ elem: cur, handlers: handlers.slice(delegateCount) });
            }
            return handlerQueue;
          },
          addProp: function(name, hook) {
            Object.defineProperty(jQuery2.Event.prototype, name, {
              enumerable: true,
              configurable: true,
              get: isFunction(hook) ? function() {
                if (this.originalEvent) {
                  return hook(this.originalEvent);
                }
              } : function() {
                if (this.originalEvent) {
                  return this.originalEvent[name];
                }
              },
              set: function(value) {
                Object.defineProperty(this, name, {
                  enumerable: true,
                  configurable: true,
                  writable: true,
                  value
                });
              }
            });
          },
          fix: function(originalEvent) {
            return originalEvent[jQuery2.expando] ? originalEvent : new jQuery2.Event(originalEvent);
          },
          special: {
            load: {
              // Prevent triggered image.load events from bubbling to window.load
              noBubble: true
            },
            click: {
              // Utilize native event to ensure correct state for checkable inputs
              setup: function(data) {
                var el = this || data;
                if (rcheckableType.test(el.type) && el.click && nodeName(el, "input")) {
                  leverageNative(el, "click", true);
                }
                return false;
              },
              trigger: function(data) {
                var el = this || data;
                if (rcheckableType.test(el.type) && el.click && nodeName(el, "input")) {
                  leverageNative(el, "click");
                }
                return true;
              },
              // For cross-browser consistency, suppress native .click() on links
              // Also prevent it if we're currently inside a leveraged native-event stack
              _default: function(event) {
                var target = event.target;
                return rcheckableType.test(target.type) && target.click && nodeName(target, "input") && dataPriv.get(target, "click") || nodeName(target, "a");
              }
            },
            beforeunload: {
              postDispatch: function(event) {
                if (event.result !== void 0 && event.originalEvent) {
                  event.originalEvent.returnValue = event.result;
                }
              }
            }
          }
        };
        function leverageNative(el, type, isSetup) {
          if (!isSetup) {
            if (dataPriv.get(el, type) === void 0) {
              jQuery2.event.add(el, type, returnTrue);
            }
            return;
          }
          dataPriv.set(el, type, false);
          jQuery2.event.add(el, type, {
            namespace: false,
            handler: function(event) {
              var result, saved = dataPriv.get(this, type);
              if (event.isTrigger & 1 && this[type]) {
                if (!saved) {
                  saved = slice.call(arguments);
                  dataPriv.set(this, type, saved);
                  this[type]();
                  result = dataPriv.get(this, type);
                  dataPriv.set(this, type, false);
                  if (saved !== result) {
                    event.stopImmediatePropagation();
                    event.preventDefault();
                    return result;
                  }
                } else if ((jQuery2.event.special[type] || {}).delegateType) {
                  event.stopPropagation();
                }
              } else if (saved) {
                dataPriv.set(this, type, jQuery2.event.trigger(
                  saved[0],
                  saved.slice(1),
                  this
                ));
                event.stopPropagation();
                event.isImmediatePropagationStopped = returnTrue;
              }
            }
          });
        }
        jQuery2.removeEvent = function(elem, type, handle) {
          if (elem.removeEventListener) {
            elem.removeEventListener(type, handle);
          }
        };
        jQuery2.Event = function(src, props) {
          if (!(this instanceof jQuery2.Event)) {
            return new jQuery2.Event(src, props);
          }
          if (src && src.type) {
            this.originalEvent = src;
            this.type = src.type;
            this.isDefaultPrevented = src.defaultPrevented || src.defaultPrevented === void 0 && // Support: Android <=2.3 only
            src.returnValue === false ? returnTrue : returnFalse;
            this.target = src.target && src.target.nodeType === 3 ? src.target.parentNode : src.target;
            this.currentTarget = src.currentTarget;
            this.relatedTarget = src.relatedTarget;
          } else {
            this.type = src;
          }
          if (props) {
            jQuery2.extend(this, props);
          }
          this.timeStamp = src && src.timeStamp || Date.now();
          this[jQuery2.expando] = true;
        };
        jQuery2.Event.prototype = {
          constructor: jQuery2.Event,
          isDefaultPrevented: returnFalse,
          isPropagationStopped: returnFalse,
          isImmediatePropagationStopped: returnFalse,
          isSimulated: false,
          preventDefault: function() {
            var e = this.originalEvent;
            this.isDefaultPrevented = returnTrue;
            if (e && !this.isSimulated) {
              e.preventDefault();
            }
          },
          stopPropagation: function() {
            var e = this.originalEvent;
            this.isPropagationStopped = returnTrue;
            if (e && !this.isSimulated) {
              e.stopPropagation();
            }
          },
          stopImmediatePropagation: function() {
            var e = this.originalEvent;
            this.isImmediatePropagationStopped = returnTrue;
            if (e && !this.isSimulated) {
              e.stopImmediatePropagation();
            }
            this.stopPropagation();
          }
        };
        jQuery2.each({
          altKey: true,
          bubbles: true,
          cancelable: true,
          changedTouches: true,
          ctrlKey: true,
          detail: true,
          eventPhase: true,
          metaKey: true,
          pageX: true,
          pageY: true,
          shiftKey: true,
          view: true,
          "char": true,
          code: true,
          charCode: true,
          key: true,
          keyCode: true,
          button: true,
          buttons: true,
          clientX: true,
          clientY: true,
          offsetX: true,
          offsetY: true,
          pointerId: true,
          pointerType: true,
          screenX: true,
          screenY: true,
          targetTouches: true,
          toElement: true,
          touches: true,
          which: true
        }, jQuery2.event.addProp);
        jQuery2.each({ focus: "focusin", blur: "focusout" }, function(type, delegateType) {
          function focusMappedHandler(nativeEvent) {
            if (document2.documentMode) {
              var handle = dataPriv.get(this, "handle"), event = jQuery2.event.fix(nativeEvent);
              event.type = nativeEvent.type === "focusin" ? "focus" : "blur";
              event.isSimulated = true;
              handle(nativeEvent);
              if (event.target === event.currentTarget) {
                handle(event);
              }
            } else {
              jQuery2.event.simulate(
                delegateType,
                nativeEvent.target,
                jQuery2.event.fix(nativeEvent)
              );
            }
          }
          jQuery2.event.special[type] = {
            // Utilize native event if possible so blur/focus sequence is correct
            setup: function() {
              var attaches;
              leverageNative(this, type, true);
              if (document2.documentMode) {
                attaches = dataPriv.get(this, delegateType);
                if (!attaches) {
                  this.addEventListener(delegateType, focusMappedHandler);
                }
                dataPriv.set(this, delegateType, (attaches || 0) + 1);
              } else {
                return false;
              }
            },
            trigger: function() {
              leverageNative(this, type);
              return true;
            },
            teardown: function() {
              var attaches;
              if (document2.documentMode) {
                attaches = dataPriv.get(this, delegateType) - 1;
                if (!attaches) {
                  this.removeEventListener(delegateType, focusMappedHandler);
                  dataPriv.remove(this, delegateType);
                } else {
                  dataPriv.set(this, delegateType, attaches);
                }
              } else {
                return false;
              }
            },
            // Suppress native focus or blur if we're currently inside
            // a leveraged native-event stack
            _default: function(event) {
              return dataPriv.get(event.target, type);
            },
            delegateType
          };
          jQuery2.event.special[delegateType] = {
            setup: function() {
              var doc = this.ownerDocument || this.document || this, dataHolder = document2.documentMode ? this : doc, attaches = dataPriv.get(dataHolder, delegateType);
              if (!attaches) {
                if (document2.documentMode) {
                  this.addEventListener(delegateType, focusMappedHandler);
                } else {
                  doc.addEventListener(type, focusMappedHandler, true);
                }
              }
              dataPriv.set(dataHolder, delegateType, (attaches || 0) + 1);
            },
            teardown: function() {
              var doc = this.ownerDocument || this.document || this, dataHolder = document2.documentMode ? this : doc, attaches = dataPriv.get(dataHolder, delegateType) - 1;
              if (!attaches) {
                if (document2.documentMode) {
                  this.removeEventListener(delegateType, focusMappedHandler);
                } else {
                  doc.removeEventListener(type, focusMappedHandler, true);
                }
                dataPriv.remove(dataHolder, delegateType);
              } else {
                dataPriv.set(dataHolder, delegateType, attaches);
              }
            }
          };
        });
        jQuery2.each({
          mouseenter: "mouseover",
          mouseleave: "mouseout",
          pointerenter: "pointerover",
          pointerleave: "pointerout"
        }, function(orig, fix) {
          jQuery2.event.special[orig] = {
            delegateType: fix,
            bindType: fix,
            handle: function(event) {
              var ret, target = this, related = event.relatedTarget, handleObj = event.handleObj;
              if (!related || related !== target && !jQuery2.contains(target, related)) {
                event.type = handleObj.origType;
                ret = handleObj.handler.apply(this, arguments);
                event.type = fix;
              }
              return ret;
            }
          };
        });
        jQuery2.fn.extend({
          on: function(types, selector, data, fn) {
            return on(this, types, selector, data, fn);
          },
          one: function(types, selector, data, fn) {
            return on(this, types, selector, data, fn, 1);
          },
          off: function(types, selector, fn) {
            var handleObj, type;
            if (types && types.preventDefault && types.handleObj) {
              handleObj = types.handleObj;
              jQuery2(types.delegateTarget).off(
                handleObj.namespace ? handleObj.origType + "." + handleObj.namespace : handleObj.origType,
                handleObj.selector,
                handleObj.handler
              );
              return this;
            }
            if (typeof types === "object") {
              for (type in types) {
                this.off(type, selector, types[type]);
              }
              return this;
            }
            if (selector === false || typeof selector === "function") {
              fn = selector;
              selector = void 0;
            }
            if (fn === false) {
              fn = returnFalse;
            }
            return this.each(function() {
              jQuery2.event.remove(this, types, fn, selector);
            });
          }
        });
        var rnoInnerhtml = /<script|<style|<link/i, rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i, rcleanScript = /^\s*<!\[CDATA\[|\]\]>\s*$/g;
        function manipulationTarget(elem, content) {
          if (nodeName(elem, "table") && nodeName(content.nodeType !== 11 ? content : content.firstChild, "tr")) {
            return jQuery2(elem).children("tbody")[0] || elem;
          }
          return elem;
        }
        function disableScript(elem) {
          elem.type = (elem.getAttribute("type") !== null) + "/" + elem.type;
          return elem;
        }
        function restoreScript(elem) {
          if ((elem.type || "").slice(0, 5) === "true/") {
            elem.type = elem.type.slice(5);
          } else {
            elem.removeAttribute("type");
          }
          return elem;
        }
        function cloneCopyEvent(src, dest) {
          var i, l, type, pdataOld, udataOld, udataCur, events;
          if (dest.nodeType !== 1) {
            return;
          }
          if (dataPriv.hasData(src)) {
            pdataOld = dataPriv.get(src);
            events = pdataOld.events;
            if (events) {
              dataPriv.remove(dest, "handle events");
              for (type in events) {
                for (i = 0, l = events[type].length; i < l; i++) {
                  jQuery2.event.add(dest, type, events[type][i]);
                }
              }
            }
          }
          if (dataUser.hasData(src)) {
            udataOld = dataUser.access(src);
            udataCur = jQuery2.extend({}, udataOld);
            dataUser.set(dest, udataCur);
          }
        }
        function fixInput(src, dest) {
          var nodeName2 = dest.nodeName.toLowerCase();
          if (nodeName2 === "input" && rcheckableType.test(src.type)) {
            dest.checked = src.checked;
          } else if (nodeName2 === "input" || nodeName2 === "textarea") {
            dest.defaultValue = src.defaultValue;
          }
        }
        function domManip(collection, args, callback, ignored) {
          args = flat(args);
          var fragment, first, scripts, hasScripts, node, doc, i = 0, l = collection.length, iNoClone = l - 1, value = args[0], valueIsFunction = isFunction(value);
          if (valueIsFunction || l > 1 && typeof value === "string" && !support.checkClone && rchecked.test(value)) {
            return collection.each(function(index) {
              var self2 = collection.eq(index);
              if (valueIsFunction) {
                args[0] = value.call(this, index, self2.html());
              }
              domManip(self2, args, callback, ignored);
            });
          }
          if (l) {
            fragment = buildFragment(args, collection[0].ownerDocument, false, collection, ignored);
            first = fragment.firstChild;
            if (fragment.childNodes.length === 1) {
              fragment = first;
            }
            if (first || ignored) {
              scripts = jQuery2.map(getAll(fragment, "script"), disableScript);
              hasScripts = scripts.length;
              for (; i < l; i++) {
                node = fragment;
                if (i !== iNoClone) {
                  node = jQuery2.clone(node, true, true);
                  if (hasScripts) {
                    jQuery2.merge(scripts, getAll(node, "script"));
                  }
                }
                callback.call(collection[i], node, i);
              }
              if (hasScripts) {
                doc = scripts[scripts.length - 1].ownerDocument;
                jQuery2.map(scripts, restoreScript);
                for (i = 0; i < hasScripts; i++) {
                  node = scripts[i];
                  if (rscriptType.test(node.type || "") && !dataPriv.access(node, "globalEval") && jQuery2.contains(doc, node)) {
                    if (node.src && (node.type || "").toLowerCase() !== "module") {
                      if (jQuery2._evalUrl && !node.noModule) {
                        jQuery2._evalUrl(node.src, {
                          nonce: node.nonce || node.getAttribute("nonce")
                        }, doc);
                      }
                    } else {
                      DOMEval(node.textContent.replace(rcleanScript, ""), node, doc);
                    }
                  }
                }
              }
            }
          }
          return collection;
        }
        function remove(elem, selector, keepData) {
          var node, nodes = selector ? jQuery2.filter(selector, elem) : elem, i = 0;
          for (; (node = nodes[i]) != null; i++) {
            if (!keepData && node.nodeType === 1) {
              jQuery2.cleanData(getAll(node));
            }
            if (node.parentNode) {
              if (keepData && isAttached(node)) {
                setGlobalEval(getAll(node, "script"));
              }
              node.parentNode.removeChild(node);
            }
          }
          return elem;
        }
        jQuery2.extend({
          htmlPrefilter: function(html) {
            return html;
          },
          clone: function(elem, dataAndEvents, deepDataAndEvents) {
            var i, l, srcElements, destElements, clone = elem.cloneNode(true), inPage = isAttached(elem);
            if (!support.noCloneChecked && (elem.nodeType === 1 || elem.nodeType === 11) && !jQuery2.isXMLDoc(elem)) {
              destElements = getAll(clone);
              srcElements = getAll(elem);
              for (i = 0, l = srcElements.length; i < l; i++) {
                fixInput(srcElements[i], destElements[i]);
              }
            }
            if (dataAndEvents) {
              if (deepDataAndEvents) {
                srcElements = srcElements || getAll(elem);
                destElements = destElements || getAll(clone);
                for (i = 0, l = srcElements.length; i < l; i++) {
                  cloneCopyEvent(srcElements[i], destElements[i]);
                }
              } else {
                cloneCopyEvent(elem, clone);
              }
            }
            destElements = getAll(clone, "script");
            if (destElements.length > 0) {
              setGlobalEval(destElements, !inPage && getAll(elem, "script"));
            }
            return clone;
          },
          cleanData: function(elems) {
            var data, elem, type, special = jQuery2.event.special, i = 0;
            for (; (elem = elems[i]) !== void 0; i++) {
              if (acceptData(elem)) {
                if (data = elem[dataPriv.expando]) {
                  if (data.events) {
                    for (type in data.events) {
                      if (special[type]) {
                        jQuery2.event.remove(elem, type);
                      } else {
                        jQuery2.removeEvent(elem, type, data.handle);
                      }
                    }
                  }
                  elem[dataPriv.expando] = void 0;
                }
                if (elem[dataUser.expando]) {
                  elem[dataUser.expando] = void 0;
                }
              }
            }
          }
        });
        jQuery2.fn.extend({
          detach: function(selector) {
            return remove(this, selector, true);
          },
          remove: function(selector) {
            return remove(this, selector);
          },
          text: function(value) {
            return access(this, function(value2) {
              return value2 === void 0 ? jQuery2.text(this) : this.empty().each(function() {
                if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
                  this.textContent = value2;
                }
              });
            }, null, value, arguments.length);
          },
          append: function() {
            return domManip(this, arguments, function(elem) {
              if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
                var target = manipulationTarget(this, elem);
                target.appendChild(elem);
              }
            });
          },
          prepend: function() {
            return domManip(this, arguments, function(elem) {
              if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
                var target = manipulationTarget(this, elem);
                target.insertBefore(elem, target.firstChild);
              }
            });
          },
          before: function() {
            return domManip(this, arguments, function(elem) {
              if (this.parentNode) {
                this.parentNode.insertBefore(elem, this);
              }
            });
          },
          after: function() {
            return domManip(this, arguments, function(elem) {
              if (this.parentNode) {
                this.parentNode.insertBefore(elem, this.nextSibling);
              }
            });
          },
          empty: function() {
            var elem, i = 0;
            for (; (elem = this[i]) != null; i++) {
              if (elem.nodeType === 1) {
                jQuery2.cleanData(getAll(elem, false));
                elem.textContent = "";
              }
            }
            return this;
          },
          clone: function(dataAndEvents, deepDataAndEvents) {
            dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
            deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;
            return this.map(function() {
              return jQuery2.clone(this, dataAndEvents, deepDataAndEvents);
            });
          },
          html: function(value) {
            return access(this, function(value2) {
              var elem = this[0] || {}, i = 0, l = this.length;
              if (value2 === void 0 && elem.nodeType === 1) {
                return elem.innerHTML;
              }
              if (typeof value2 === "string" && !rnoInnerhtml.test(value2) && !wrapMap[(rtagName.exec(value2) || ["", ""])[1].toLowerCase()]) {
                value2 = jQuery2.htmlPrefilter(value2);
                try {
                  for (; i < l; i++) {
                    elem = this[i] || {};
                    if (elem.nodeType === 1) {
                      jQuery2.cleanData(getAll(elem, false));
                      elem.innerHTML = value2;
                    }
                  }
                  elem = 0;
                } catch (e) {
                }
              }
              if (elem) {
                this.empty().append(value2);
              }
            }, null, value, arguments.length);
          },
          replaceWith: function() {
            var ignored = [];
            return domManip(this, arguments, function(elem) {
              var parent = this.parentNode;
              if (jQuery2.inArray(this, ignored) < 0) {
                jQuery2.cleanData(getAll(this));
                if (parent) {
                  parent.replaceChild(elem, this);
                }
              }
            }, ignored);
          }
        });
        jQuery2.each({
          appendTo: "append",
          prependTo: "prepend",
          insertBefore: "before",
          insertAfter: "after",
          replaceAll: "replaceWith"
        }, function(name, original) {
          jQuery2.fn[name] = function(selector) {
            var elems, ret = [], insert = jQuery2(selector), last = insert.length - 1, i = 0;
            for (; i <= last; i++) {
              elems = i === last ? this : this.clone(true);
              jQuery2(insert[i])[original](elems);
              push.apply(ret, elems.get());
            }
            return this.pushStack(ret);
          };
        });
        var rnumnonpx = new RegExp("^(" + pnum + ")(?!px)[a-z%]+$", "i");
        var rcustomProp = /^--/;
        var getStyles = function(elem) {
          var view = elem.ownerDocument.defaultView;
          if (!view || !view.opener) {
            view = window2;
          }
          return view.getComputedStyle(elem);
        };
        var swap = function(elem, options, callback) {
          var ret, name, old = {};
          for (name in options) {
            old[name] = elem.style[name];
            elem.style[name] = options[name];
          }
          ret = callback.call(elem);
          for (name in options) {
            elem.style[name] = old[name];
          }
          return ret;
        };
        var rboxStyle = new RegExp(cssExpand.join("|"), "i");
        (function() {
          function computeStyleTests() {
            if (!div) {
              return;
            }
            container.style.cssText = "position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0";
            div.style.cssText = "position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%";
            documentElement.appendChild(container).appendChild(div);
            var divStyle = window2.getComputedStyle(div);
            pixelPositionVal = divStyle.top !== "1%";
            reliableMarginLeftVal = roundPixelMeasures(divStyle.marginLeft) === 12;
            div.style.right = "60%";
            pixelBoxStylesVal = roundPixelMeasures(divStyle.right) === 36;
            boxSizingReliableVal = roundPixelMeasures(divStyle.width) === 36;
            div.style.position = "absolute";
            scrollboxSizeVal = roundPixelMeasures(div.offsetWidth / 3) === 12;
            documentElement.removeChild(container);
            div = null;
          }
          function roundPixelMeasures(measure) {
            return Math.round(parseFloat(measure));
          }
          var pixelPositionVal, boxSizingReliableVal, scrollboxSizeVal, pixelBoxStylesVal, reliableTrDimensionsVal, reliableMarginLeftVal, container = document2.createElement("div"), div = document2.createElement("div");
          if (!div.style) {
            return;
          }
          div.style.backgroundClip = "content-box";
          div.cloneNode(true).style.backgroundClip = "";
          support.clearCloneStyle = div.style.backgroundClip === "content-box";
          jQuery2.extend(support, {
            boxSizingReliable: function() {
              computeStyleTests();
              return boxSizingReliableVal;
            },
            pixelBoxStyles: function() {
              computeStyleTests();
              return pixelBoxStylesVal;
            },
            pixelPosition: function() {
              computeStyleTests();
              return pixelPositionVal;
            },
            reliableMarginLeft: function() {
              computeStyleTests();
              return reliableMarginLeftVal;
            },
            scrollboxSize: function() {
              computeStyleTests();
              return scrollboxSizeVal;
            },
            // Support: IE 9 - 11+, Edge 15 - 18+
            // IE/Edge misreport `getComputedStyle` of table rows with width/height
            // set in CSS while `offset*` properties report correct values.
            // Behavior in IE 9 is more subtle than in newer versions & it passes
            // some versions of this test; make sure not to make it pass there!
            //
            // Support: Firefox 70+
            // Only Firefox includes border widths
            // in computed dimensions. (gh-4529)
            reliableTrDimensions: function() {
              var table, tr, trChild, trStyle;
              if (reliableTrDimensionsVal == null) {
                table = document2.createElement("table");
                tr = document2.createElement("tr");
                trChild = document2.createElement("div");
                table.style.cssText = "position:absolute;left:-11111px;border-collapse:separate";
                tr.style.cssText = "box-sizing:content-box;border:1px solid";
                tr.style.height = "1px";
                trChild.style.height = "9px";
                trChild.style.display = "block";
                documentElement.appendChild(table).appendChild(tr).appendChild(trChild);
                trStyle = window2.getComputedStyle(tr);
                reliableTrDimensionsVal = parseInt(trStyle.height, 10) + parseInt(trStyle.borderTopWidth, 10) + parseInt(trStyle.borderBottomWidth, 10) === tr.offsetHeight;
                documentElement.removeChild(table);
              }
              return reliableTrDimensionsVal;
            }
          });
        })();
        function curCSS(elem, name, computed) {
          var width, minWidth, maxWidth, ret, isCustomProp = rcustomProp.test(name), style = elem.style;
          computed = computed || getStyles(elem);
          if (computed) {
            ret = computed.getPropertyValue(name) || computed[name];
            if (isCustomProp && ret) {
              ret = ret.replace(rtrimCSS, "$1") || void 0;
            }
            if (ret === "" && !isAttached(elem)) {
              ret = jQuery2.style(elem, name);
            }
            if (!support.pixelBoxStyles() && rnumnonpx.test(ret) && rboxStyle.test(name)) {
              width = style.width;
              minWidth = style.minWidth;
              maxWidth = style.maxWidth;
              style.minWidth = style.maxWidth = style.width = ret;
              ret = computed.width;
              style.width = width;
              style.minWidth = minWidth;
              style.maxWidth = maxWidth;
            }
          }
          return ret !== void 0 ? (
            // Support: IE <=9 - 11 only
            // IE returns zIndex value as an integer.
            ret + ""
          ) : ret;
        }
        function addGetHookIf(conditionFn, hookFn) {
          return {
            get: function() {
              if (conditionFn()) {
                delete this.get;
                return;
              }
              return (this.get = hookFn).apply(this, arguments);
            }
          };
        }
        var cssPrefixes = ["Webkit", "Moz", "ms"], emptyStyle = document2.createElement("div").style, vendorProps = {};
        function vendorPropName(name) {
          var capName = name[0].toUpperCase() + name.slice(1), i = cssPrefixes.length;
          while (i--) {
            name = cssPrefixes[i] + capName;
            if (name in emptyStyle) {
              return name;
            }
          }
        }
        function finalPropName(name) {
          var final = jQuery2.cssProps[name] || vendorProps[name];
          if (final) {
            return final;
          }
          if (name in emptyStyle) {
            return name;
          }
          return vendorProps[name] = vendorPropName(name) || name;
        }
        var rdisplayswap = /^(none|table(?!-c[ea]).+)/, cssShow = { position: "absolute", visibility: "hidden", display: "block" }, cssNormalTransform = {
          letterSpacing: "0",
          fontWeight: "400"
        };
        function setPositiveNumber(_elem, value, subtract) {
          var matches = rcssNum.exec(value);
          return matches ? (
            // Guard against undefined "subtract", e.g., when used as in cssHooks
            Math.max(0, matches[2] - (subtract || 0)) + (matches[3] || "px")
          ) : value;
        }
        function boxModelAdjustment(elem, dimension, box, isBorderBox, styles, computedVal) {
          var i = dimension === "width" ? 1 : 0, extra = 0, delta = 0, marginDelta = 0;
          if (box === (isBorderBox ? "border" : "content")) {
            return 0;
          }
          for (; i < 4; i += 2) {
            if (box === "margin") {
              marginDelta += jQuery2.css(elem, box + cssExpand[i], true, styles);
            }
            if (!isBorderBox) {
              delta += jQuery2.css(elem, "padding" + cssExpand[i], true, styles);
              if (box !== "padding") {
                delta += jQuery2.css(elem, "border" + cssExpand[i] + "Width", true, styles);
              } else {
                extra += jQuery2.css(elem, "border" + cssExpand[i] + "Width", true, styles);
              }
            } else {
              if (box === "content") {
                delta -= jQuery2.css(elem, "padding" + cssExpand[i], true, styles);
              }
              if (box !== "margin") {
                delta -= jQuery2.css(elem, "border" + cssExpand[i] + "Width", true, styles);
              }
            }
          }
          if (!isBorderBox && computedVal >= 0) {
            delta += Math.max(0, Math.ceil(
              elem["offset" + dimension[0].toUpperCase() + dimension.slice(1)] - computedVal - delta - extra - 0.5
              // If offsetWidth/offsetHeight is unknown, then we can't determine content-box scroll gutter
              // Use an explicit zero to avoid NaN (gh-3964)
            )) || 0;
          }
          return delta + marginDelta;
        }
        function getWidthOrHeight(elem, dimension, extra) {
          var styles = getStyles(elem), boxSizingNeeded = !support.boxSizingReliable() || extra, isBorderBox = boxSizingNeeded && jQuery2.css(elem, "boxSizing", false, styles) === "border-box", valueIsBorderBox = isBorderBox, val = curCSS(elem, dimension, styles), offsetProp = "offset" + dimension[0].toUpperCase() + dimension.slice(1);
          if (rnumnonpx.test(val)) {
            if (!extra) {
              return val;
            }
            val = "auto";
          }
          if ((!support.boxSizingReliable() && isBorderBox || // Support: IE 10 - 11+, Edge 15 - 18+
          // IE/Edge misreport `getComputedStyle` of table rows with width/height
          // set in CSS while `offset*` properties report correct values.
          // Interestingly, in some cases IE 9 doesn't suffer from this issue.
          !support.reliableTrDimensions() && nodeName(elem, "tr") || // Fall back to offsetWidth/offsetHeight when value is "auto"
          // This happens for inline elements with no explicit setting (gh-3571)
          val === "auto" || // Support: Android <=4.1 - 4.3 only
          // Also use offsetWidth/offsetHeight for misreported inline dimensions (gh-3602)
          !parseFloat(val) && jQuery2.css(elem, "display", false, styles) === "inline") && // Make sure the element is visible & connected
          elem.getClientRects().length) {
            isBorderBox = jQuery2.css(elem, "boxSizing", false, styles) === "border-box";
            valueIsBorderBox = offsetProp in elem;
            if (valueIsBorderBox) {
              val = elem[offsetProp];
            }
          }
          val = parseFloat(val) || 0;
          return val + boxModelAdjustment(
            elem,
            dimension,
            extra || (isBorderBox ? "border" : "content"),
            valueIsBorderBox,
            styles,
            // Provide the current computed size to request scroll gutter calculation (gh-3589)
            val
          ) + "px";
        }
        jQuery2.extend({
          // Add in style property hooks for overriding the default
          // behavior of getting and setting a style property
          cssHooks: {
            opacity: {
              get: function(elem, computed) {
                if (computed) {
                  var ret = curCSS(elem, "opacity");
                  return ret === "" ? "1" : ret;
                }
              }
            }
          },
          // Don't automatically add "px" to these possibly-unitless properties
          cssNumber: {
            animationIterationCount: true,
            aspectRatio: true,
            borderImageSlice: true,
            columnCount: true,
            flexGrow: true,
            flexShrink: true,
            fontWeight: true,
            gridArea: true,
            gridColumn: true,
            gridColumnEnd: true,
            gridColumnStart: true,
            gridRow: true,
            gridRowEnd: true,
            gridRowStart: true,
            lineHeight: true,
            opacity: true,
            order: true,
            orphans: true,
            scale: true,
            widows: true,
            zIndex: true,
            zoom: true,
            // SVG-related
            fillOpacity: true,
            floodOpacity: true,
            stopOpacity: true,
            strokeMiterlimit: true,
            strokeOpacity: true
          },
          // Add in properties whose names you wish to fix before
          // setting or getting the value
          cssProps: {},
          // Get and set the style property on a DOM Node
          style: function(elem, name, value, extra) {
            if (!elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style) {
              return;
            }
            var ret, type, hooks, origName = camelCase(name), isCustomProp = rcustomProp.test(name), style = elem.style;
            if (!isCustomProp) {
              name = finalPropName(origName);
            }
            hooks = jQuery2.cssHooks[name] || jQuery2.cssHooks[origName];
            if (value !== void 0) {
              type = typeof value;
              if (type === "string" && (ret = rcssNum.exec(value)) && ret[1]) {
                value = adjustCSS(elem, name, ret);
                type = "number";
              }
              if (value == null || value !== value) {
                return;
              }
              if (type === "number" && !isCustomProp) {
                value += ret && ret[3] || (jQuery2.cssNumber[origName] ? "" : "px");
              }
              if (!support.clearCloneStyle && value === "" && name.indexOf("background") === 0) {
                style[name] = "inherit";
              }
              if (!hooks || !("set" in hooks) || (value = hooks.set(elem, value, extra)) !== void 0) {
                if (isCustomProp) {
                  style.setProperty(name, value);
                } else {
                  style[name] = value;
                }
              }
            } else {
              if (hooks && "get" in hooks && (ret = hooks.get(elem, false, extra)) !== void 0) {
                return ret;
              }
              return style[name];
            }
          },
          css: function(elem, name, extra, styles) {
            var val, num, hooks, origName = camelCase(name), isCustomProp = rcustomProp.test(name);
            if (!isCustomProp) {
              name = finalPropName(origName);
            }
            hooks = jQuery2.cssHooks[name] || jQuery2.cssHooks[origName];
            if (hooks && "get" in hooks) {
              val = hooks.get(elem, true, extra);
            }
            if (val === void 0) {
              val = curCSS(elem, name, styles);
            }
            if (val === "normal" && name in cssNormalTransform) {
              val = cssNormalTransform[name];
            }
            if (extra === "" || extra) {
              num = parseFloat(val);
              return extra === true || isFinite(num) ? num || 0 : val;
            }
            return val;
          }
        });
        jQuery2.each(["height", "width"], function(_i, dimension) {
          jQuery2.cssHooks[dimension] = {
            get: function(elem, computed, extra) {
              if (computed) {
                return rdisplayswap.test(jQuery2.css(elem, "display")) && // Support: Safari 8+
                // Table columns in Safari have non-zero offsetWidth & zero
                // getBoundingClientRect().width unless display is changed.
                // Support: IE <=11 only
                // Running getBoundingClientRect on a disconnected node
                // in IE throws an error.
                (!elem.getClientRects().length || !elem.getBoundingClientRect().width) ? swap(elem, cssShow, function() {
                  return getWidthOrHeight(elem, dimension, extra);
                }) : getWidthOrHeight(elem, dimension, extra);
              }
            },
            set: function(elem, value, extra) {
              var matches, styles = getStyles(elem), scrollboxSizeBuggy = !support.scrollboxSize() && styles.position === "absolute", boxSizingNeeded = scrollboxSizeBuggy || extra, isBorderBox = boxSizingNeeded && jQuery2.css(elem, "boxSizing", false, styles) === "border-box", subtract = extra ? boxModelAdjustment(
                elem,
                dimension,
                extra,
                isBorderBox,
                styles
              ) : 0;
              if (isBorderBox && scrollboxSizeBuggy) {
                subtract -= Math.ceil(
                  elem["offset" + dimension[0].toUpperCase() + dimension.slice(1)] - parseFloat(styles[dimension]) - boxModelAdjustment(elem, dimension, "border", false, styles) - 0.5
                );
              }
              if (subtract && (matches = rcssNum.exec(value)) && (matches[3] || "px") !== "px") {
                elem.style[dimension] = value;
                value = jQuery2.css(elem, dimension);
              }
              return setPositiveNumber(elem, value, subtract);
            }
          };
        });
        jQuery2.cssHooks.marginLeft = addGetHookIf(
          support.reliableMarginLeft,
          function(elem, computed) {
            if (computed) {
              return (parseFloat(curCSS(elem, "marginLeft")) || elem.getBoundingClientRect().left - swap(elem, { marginLeft: 0 }, function() {
                return elem.getBoundingClientRect().left;
              })) + "px";
            }
          }
        );
        jQuery2.each({
          margin: "",
          padding: "",
          border: "Width"
        }, function(prefix, suffix) {
          jQuery2.cssHooks[prefix + suffix] = {
            expand: function(value) {
              var i = 0, expanded = {}, parts = typeof value === "string" ? value.split(" ") : [value];
              for (; i < 4; i++) {
                expanded[prefix + cssExpand[i] + suffix] = parts[i] || parts[i - 2] || parts[0];
              }
              return expanded;
            }
          };
          if (prefix !== "margin") {
            jQuery2.cssHooks[prefix + suffix].set = setPositiveNumber;
          }
        });
        jQuery2.fn.extend({
          css: function(name, value) {
            return access(this, function(elem, name2, value2) {
              var styles, len, map = {}, i = 0;
              if (Array.isArray(name2)) {
                styles = getStyles(elem);
                len = name2.length;
                for (; i < len; i++) {
                  map[name2[i]] = jQuery2.css(elem, name2[i], false, styles);
                }
                return map;
              }
              return value2 !== void 0 ? jQuery2.style(elem, name2, value2) : jQuery2.css(elem, name2);
            }, name, value, arguments.length > 1);
          }
        });
        function Tween(elem, options, prop, end, easing) {
          return new Tween.prototype.init(elem, options, prop, end, easing);
        }
        jQuery2.Tween = Tween;
        Tween.prototype = {
          constructor: Tween,
          init: function(elem, options, prop, end, easing, unit) {
            this.elem = elem;
            this.prop = prop;
            this.easing = easing || jQuery2.easing._default;
            this.options = options;
            this.start = this.now = this.cur();
            this.end = end;
            this.unit = unit || (jQuery2.cssNumber[prop] ? "" : "px");
          },
          cur: function() {
            var hooks = Tween.propHooks[this.prop];
            return hooks && hooks.get ? hooks.get(this) : Tween.propHooks._default.get(this);
          },
          run: function(percent) {
            var eased, hooks = Tween.propHooks[this.prop];
            if (this.options.duration) {
              this.pos = eased = jQuery2.easing[this.easing](
                percent,
                this.options.duration * percent,
                0,
                1,
                this.options.duration
              );
            } else {
              this.pos = eased = percent;
            }
            this.now = (this.end - this.start) * eased + this.start;
            if (this.options.step) {
              this.options.step.call(this.elem, this.now, this);
            }
            if (hooks && hooks.set) {
              hooks.set(this);
            } else {
              Tween.propHooks._default.set(this);
            }
            return this;
          }
        };
        Tween.prototype.init.prototype = Tween.prototype;
        Tween.propHooks = {
          _default: {
            get: function(tween) {
              var result;
              if (tween.elem.nodeType !== 1 || tween.elem[tween.prop] != null && tween.elem.style[tween.prop] == null) {
                return tween.elem[tween.prop];
              }
              result = jQuery2.css(tween.elem, tween.prop, "");
              return !result || result === "auto" ? 0 : result;
            },
            set: function(tween) {
              if (jQuery2.fx.step[tween.prop]) {
                jQuery2.fx.step[tween.prop](tween);
              } else if (tween.elem.nodeType === 1 && (jQuery2.cssHooks[tween.prop] || tween.elem.style[finalPropName(tween.prop)] != null)) {
                jQuery2.style(tween.elem, tween.prop, tween.now + tween.unit);
              } else {
                tween.elem[tween.prop] = tween.now;
              }
            }
          }
        };
        Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
          set: function(tween) {
            if (tween.elem.nodeType && tween.elem.parentNode) {
              tween.elem[tween.prop] = tween.now;
            }
          }
        };
        jQuery2.easing = {
          linear: function(p) {
            return p;
          },
          swing: function(p) {
            return 0.5 - Math.cos(p * Math.PI) / 2;
          },
          _default: "swing"
        };
        jQuery2.fx = Tween.prototype.init;
        jQuery2.fx.step = {};
        var fxNow, inProgress, rfxtypes = /^(?:toggle|show|hide)$/, rrun = /queueHooks$/;
        function schedule() {
          if (inProgress) {
            if (document2.hidden === false && window2.requestAnimationFrame) {
              window2.requestAnimationFrame(schedule);
            } else {
              window2.setTimeout(schedule, jQuery2.fx.interval);
            }
            jQuery2.fx.tick();
          }
        }
        function createFxNow() {
          window2.setTimeout(function() {
            fxNow = void 0;
          });
          return fxNow = Date.now();
        }
        function genFx(type, includeWidth) {
          var which, i = 0, attrs = { height: type };
          includeWidth = includeWidth ? 1 : 0;
          for (; i < 4; i += 2 - includeWidth) {
            which = cssExpand[i];
            attrs["margin" + which] = attrs["padding" + which] = type;
          }
          if (includeWidth) {
            attrs.opacity = attrs.width = type;
          }
          return attrs;
        }
        function createTween(value, prop, animation) {
          var tween, collection = (Animation.tweeners[prop] || []).concat(Animation.tweeners["*"]), index = 0, length = collection.length;
          for (; index < length; index++) {
            if (tween = collection[index].call(animation, prop, value)) {
              return tween;
            }
          }
        }
        function defaultPrefilter(elem, props, opts) {
          var prop, value, toggle, hooks, oldfire, propTween, restoreDisplay, display, isBox = "width" in props || "height" in props, anim = this, orig = {}, style = elem.style, hidden = elem.nodeType && isHiddenWithinTree(elem), dataShow = dataPriv.get(elem, "fxshow");
          if (!opts.queue) {
            hooks = jQuery2._queueHooks(elem, "fx");
            if (hooks.unqueued == null) {
              hooks.unqueued = 0;
              oldfire = hooks.empty.fire;
              hooks.empty.fire = function() {
                if (!hooks.unqueued) {
                  oldfire();
                }
              };
            }
            hooks.unqueued++;
            anim.always(function() {
              anim.always(function() {
                hooks.unqueued--;
                if (!jQuery2.queue(elem, "fx").length) {
                  hooks.empty.fire();
                }
              });
            });
          }
          for (prop in props) {
            value = props[prop];
            if (rfxtypes.test(value)) {
              delete props[prop];
              toggle = toggle || value === "toggle";
              if (value === (hidden ? "hide" : "show")) {
                if (value === "show" && dataShow && dataShow[prop] !== void 0) {
                  hidden = true;
                } else {
                  continue;
                }
              }
              orig[prop] = dataShow && dataShow[prop] || jQuery2.style(elem, prop);
            }
          }
          propTween = !jQuery2.isEmptyObject(props);
          if (!propTween && jQuery2.isEmptyObject(orig)) {
            return;
          }
          if (isBox && elem.nodeType === 1) {
            opts.overflow = [style.overflow, style.overflowX, style.overflowY];
            restoreDisplay = dataShow && dataShow.display;
            if (restoreDisplay == null) {
              restoreDisplay = dataPriv.get(elem, "display");
            }
            display = jQuery2.css(elem, "display");
            if (display === "none") {
              if (restoreDisplay) {
                display = restoreDisplay;
              } else {
                showHide([elem], true);
                restoreDisplay = elem.style.display || restoreDisplay;
                display = jQuery2.css(elem, "display");
                showHide([elem]);
              }
            }
            if (display === "inline" || display === "inline-block" && restoreDisplay != null) {
              if (jQuery2.css(elem, "float") === "none") {
                if (!propTween) {
                  anim.done(function() {
                    style.display = restoreDisplay;
                  });
                  if (restoreDisplay == null) {
                    display = style.display;
                    restoreDisplay = display === "none" ? "" : display;
                  }
                }
                style.display = "inline-block";
              }
            }
          }
          if (opts.overflow) {
            style.overflow = "hidden";
            anim.always(function() {
              style.overflow = opts.overflow[0];
              style.overflowX = opts.overflow[1];
              style.overflowY = opts.overflow[2];
            });
          }
          propTween = false;
          for (prop in orig) {
            if (!propTween) {
              if (dataShow) {
                if ("hidden" in dataShow) {
                  hidden = dataShow.hidden;
                }
              } else {
                dataShow = dataPriv.access(elem, "fxshow", { display: restoreDisplay });
              }
              if (toggle) {
                dataShow.hidden = !hidden;
              }
              if (hidden) {
                showHide([elem], true);
              }
              anim.done(function() {
                if (!hidden) {
                  showHide([elem]);
                }
                dataPriv.remove(elem, "fxshow");
                for (prop in orig) {
                  jQuery2.style(elem, prop, orig[prop]);
                }
              });
            }
            propTween = createTween(hidden ? dataShow[prop] : 0, prop, anim);
            if (!(prop in dataShow)) {
              dataShow[prop] = propTween.start;
              if (hidden) {
                propTween.end = propTween.start;
                propTween.start = 0;
              }
            }
          }
        }
        function propFilter(props, specialEasing) {
          var index, name, easing, value, hooks;
          for (index in props) {
            name = camelCase(index);
            easing = specialEasing[name];
            value = props[index];
            if (Array.isArray(value)) {
              easing = value[1];
              value = props[index] = value[0];
            }
            if (index !== name) {
              props[name] = value;
              delete props[index];
            }
            hooks = jQuery2.cssHooks[name];
            if (hooks && "expand" in hooks) {
              value = hooks.expand(value);
              delete props[name];
              for (index in value) {
                if (!(index in props)) {
                  props[index] = value[index];
                  specialEasing[index] = easing;
                }
              }
            } else {
              specialEasing[name] = easing;
            }
          }
        }
        function Animation(elem, properties, options) {
          var result, stopped, index = 0, length = Animation.prefilters.length, deferred = jQuery2.Deferred().always(function() {
            delete tick.elem;
          }), tick = function() {
            if (stopped) {
              return false;
            }
            var currentTime = fxNow || createFxNow(), remaining = Math.max(0, animation.startTime + animation.duration - currentTime), temp = remaining / animation.duration || 0, percent = 1 - temp, index2 = 0, length2 = animation.tweens.length;
            for (; index2 < length2; index2++) {
              animation.tweens[index2].run(percent);
            }
            deferred.notifyWith(elem, [animation, percent, remaining]);
            if (percent < 1 && length2) {
              return remaining;
            }
            if (!length2) {
              deferred.notifyWith(elem, [animation, 1, 0]);
            }
            deferred.resolveWith(elem, [animation]);
            return false;
          }, animation = deferred.promise({
            elem,
            props: jQuery2.extend({}, properties),
            opts: jQuery2.extend(true, {
              specialEasing: {},
              easing: jQuery2.easing._default
            }, options),
            originalProperties: properties,
            originalOptions: options,
            startTime: fxNow || createFxNow(),
            duration: options.duration,
            tweens: [],
            createTween: function(prop, end) {
              var tween = jQuery2.Tween(
                elem,
                animation.opts,
                prop,
                end,
                animation.opts.specialEasing[prop] || animation.opts.easing
              );
              animation.tweens.push(tween);
              return tween;
            },
            stop: function(gotoEnd) {
              var index2 = 0, length2 = gotoEnd ? animation.tweens.length : 0;
              if (stopped) {
                return this;
              }
              stopped = true;
              for (; index2 < length2; index2++) {
                animation.tweens[index2].run(1);
              }
              if (gotoEnd) {
                deferred.notifyWith(elem, [animation, 1, 0]);
                deferred.resolveWith(elem, [animation, gotoEnd]);
              } else {
                deferred.rejectWith(elem, [animation, gotoEnd]);
              }
              return this;
            }
          }), props = animation.props;
          propFilter(props, animation.opts.specialEasing);
          for (; index < length; index++) {
            result = Animation.prefilters[index].call(animation, elem, props, animation.opts);
            if (result) {
              if (isFunction(result.stop)) {
                jQuery2._queueHooks(animation.elem, animation.opts.queue).stop = result.stop.bind(result);
              }
              return result;
            }
          }
          jQuery2.map(props, createTween, animation);
          if (isFunction(animation.opts.start)) {
            animation.opts.start.call(elem, animation);
          }
          animation.progress(animation.opts.progress).done(animation.opts.done, animation.opts.complete).fail(animation.opts.fail).always(animation.opts.always);
          jQuery2.fx.timer(
            jQuery2.extend(tick, {
              elem,
              anim: animation,
              queue: animation.opts.queue
            })
          );
          return animation;
        }
        jQuery2.Animation = jQuery2.extend(Animation, {
          tweeners: {
            "*": [function(prop, value) {
              var tween = this.createTween(prop, value);
              adjustCSS(tween.elem, prop, rcssNum.exec(value), tween);
              return tween;
            }]
          },
          tweener: function(props, callback) {
            if (isFunction(props)) {
              callback = props;
              props = ["*"];
            } else {
              props = props.match(rnothtmlwhite);
            }
            var prop, index = 0, length = props.length;
            for (; index < length; index++) {
              prop = props[index];
              Animation.tweeners[prop] = Animation.tweeners[prop] || [];
              Animation.tweeners[prop].unshift(callback);
            }
          },
          prefilters: [defaultPrefilter],
          prefilter: function(callback, prepend) {
            if (prepend) {
              Animation.prefilters.unshift(callback);
            } else {
              Animation.prefilters.push(callback);
            }
          }
        });
        jQuery2.speed = function(speed, easing, fn) {
          var opt = speed && typeof speed === "object" ? jQuery2.extend({}, speed) : {
            complete: fn || !fn && easing || isFunction(speed) && speed,
            duration: speed,
            easing: fn && easing || easing && !isFunction(easing) && easing
          };
          if (jQuery2.fx.off) {
            opt.duration = 0;
          } else {
            if (typeof opt.duration !== "number") {
              if (opt.duration in jQuery2.fx.speeds) {
                opt.duration = jQuery2.fx.speeds[opt.duration];
              } else {
                opt.duration = jQuery2.fx.speeds._default;
              }
            }
          }
          if (opt.queue == null || opt.queue === true) {
            opt.queue = "fx";
          }
          opt.old = opt.complete;
          opt.complete = function() {
            if (isFunction(opt.old)) {
              opt.old.call(this);
            }
            if (opt.queue) {
              jQuery2.dequeue(this, opt.queue);
            }
          };
          return opt;
        };
        jQuery2.fn.extend({
          fadeTo: function(speed, to, easing, callback) {
            return this.filter(isHiddenWithinTree).css("opacity", 0).show().end().animate({ opacity: to }, speed, easing, callback);
          },
          animate: function(prop, speed, easing, callback) {
            var empty = jQuery2.isEmptyObject(prop), optall = jQuery2.speed(speed, easing, callback), doAnimation = function() {
              var anim = Animation(this, jQuery2.extend({}, prop), optall);
              if (empty || dataPriv.get(this, "finish")) {
                anim.stop(true);
              }
            };
            doAnimation.finish = doAnimation;
            return empty || optall.queue === false ? this.each(doAnimation) : this.queue(optall.queue, doAnimation);
          },
          stop: function(type, clearQueue, gotoEnd) {
            var stopQueue = function(hooks) {
              var stop = hooks.stop;
              delete hooks.stop;
              stop(gotoEnd);
            };
            if (typeof type !== "string") {
              gotoEnd = clearQueue;
              clearQueue = type;
              type = void 0;
            }
            if (clearQueue) {
              this.queue(type || "fx", []);
            }
            return this.each(function() {
              var dequeue = true, index = type != null && type + "queueHooks", timers = jQuery2.timers, data = dataPriv.get(this);
              if (index) {
                if (data[index] && data[index].stop) {
                  stopQueue(data[index]);
                }
              } else {
                for (index in data) {
                  if (data[index] && data[index].stop && rrun.test(index)) {
                    stopQueue(data[index]);
                  }
                }
              }
              for (index = timers.length; index--; ) {
                if (timers[index].elem === this && (type == null || timers[index].queue === type)) {
                  timers[index].anim.stop(gotoEnd);
                  dequeue = false;
                  timers.splice(index, 1);
                }
              }
              if (dequeue || !gotoEnd) {
                jQuery2.dequeue(this, type);
              }
            });
          },
          finish: function(type) {
            if (type !== false) {
              type = type || "fx";
            }
            return this.each(function() {
              var index, data = dataPriv.get(this), queue = data[type + "queue"], hooks = data[type + "queueHooks"], timers = jQuery2.timers, length = queue ? queue.length : 0;
              data.finish = true;
              jQuery2.queue(this, type, []);
              if (hooks && hooks.stop) {
                hooks.stop.call(this, true);
              }
              for (index = timers.length; index--; ) {
                if (timers[index].elem === this && timers[index].queue === type) {
                  timers[index].anim.stop(true);
                  timers.splice(index, 1);
                }
              }
              for (index = 0; index < length; index++) {
                if (queue[index] && queue[index].finish) {
                  queue[index].finish.call(this);
                }
              }
              delete data.finish;
            });
          }
        });
        jQuery2.each(["toggle", "show", "hide"], function(_i, name) {
          var cssFn = jQuery2.fn[name];
          jQuery2.fn[name] = function(speed, easing, callback) {
            return speed == null || typeof speed === "boolean" ? cssFn.apply(this, arguments) : this.animate(genFx(name, true), speed, easing, callback);
          };
        });
        jQuery2.each({
          slideDown: genFx("show"),
          slideUp: genFx("hide"),
          slideToggle: genFx("toggle"),
          fadeIn: { opacity: "show" },
          fadeOut: { opacity: "hide" },
          fadeToggle: { opacity: "toggle" }
        }, function(name, props) {
          jQuery2.fn[name] = function(speed, easing, callback) {
            return this.animate(props, speed, easing, callback);
          };
        });
        jQuery2.timers = [];
        jQuery2.fx.tick = function() {
          var timer, i = 0, timers = jQuery2.timers;
          fxNow = Date.now();
          for (; i < timers.length; i++) {
            timer = timers[i];
            if (!timer() && timers[i] === timer) {
              timers.splice(i--, 1);
            }
          }
          if (!timers.length) {
            jQuery2.fx.stop();
          }
          fxNow = void 0;
        };
        jQuery2.fx.timer = function(timer) {
          jQuery2.timers.push(timer);
          jQuery2.fx.start();
        };
        jQuery2.fx.interval = 13;
        jQuery2.fx.start = function() {
          if (inProgress) {
            return;
          }
          inProgress = true;
          schedule();
        };
        jQuery2.fx.stop = function() {
          inProgress = null;
        };
        jQuery2.fx.speeds = {
          slow: 600,
          fast: 200,
          // Default speed
          _default: 400
        };
        jQuery2.fn.delay = function(time, type) {
          time = jQuery2.fx ? jQuery2.fx.speeds[time] || time : time;
          type = type || "fx";
          return this.queue(type, function(next, hooks) {
            var timeout = window2.setTimeout(next, time);
            hooks.stop = function() {
              window2.clearTimeout(timeout);
            };
          });
        };
        (function() {
          var input = document2.createElement("input"), select = document2.createElement("select"), opt = select.appendChild(document2.createElement("option"));
          input.type = "checkbox";
          support.checkOn = input.value !== "";
          support.optSelected = opt.selected;
          input = document2.createElement("input");
          input.value = "t";
          input.type = "radio";
          support.radioValue = input.value === "t";
        })();
        var boolHook, attrHandle = jQuery2.expr.attrHandle;
        jQuery2.fn.extend({
          attr: function(name, value) {
            return access(this, jQuery2.attr, name, value, arguments.length > 1);
          },
          removeAttr: function(name) {
            return this.each(function() {
              jQuery2.removeAttr(this, name);
            });
          }
        });
        jQuery2.extend({
          attr: function(elem, name, value) {
            var ret, hooks, nType = elem.nodeType;
            if (nType === 3 || nType === 8 || nType === 2) {
              return;
            }
            if (typeof elem.getAttribute === "undefined") {
              return jQuery2.prop(elem, name, value);
            }
            if (nType !== 1 || !jQuery2.isXMLDoc(elem)) {
              hooks = jQuery2.attrHooks[name.toLowerCase()] || (jQuery2.expr.match.bool.test(name) ? boolHook : void 0);
            }
            if (value !== void 0) {
              if (value === null) {
                jQuery2.removeAttr(elem, name);
                return;
              }
              if (hooks && "set" in hooks && (ret = hooks.set(elem, value, name)) !== void 0) {
                return ret;
              }
              elem.setAttribute(name, value + "");
              return value;
            }
            if (hooks && "get" in hooks && (ret = hooks.get(elem, name)) !== null) {
              return ret;
            }
            ret = jQuery2.find.attr(elem, name);
            return ret == null ? void 0 : ret;
          },
          attrHooks: {
            type: {
              set: function(elem, value) {
                if (!support.radioValue && value === "radio" && nodeName(elem, "input")) {
                  var val = elem.value;
                  elem.setAttribute("type", value);
                  if (val) {
                    elem.value = val;
                  }
                  return value;
                }
              }
            }
          },
          removeAttr: function(elem, value) {
            var name, i = 0, attrNames = value && value.match(rnothtmlwhite);
            if (attrNames && elem.nodeType === 1) {
              while (name = attrNames[i++]) {
                elem.removeAttribute(name);
              }
            }
          }
        });
        boolHook = {
          set: function(elem, value, name) {
            if (value === false) {
              jQuery2.removeAttr(elem, name);
            } else {
              elem.setAttribute(name, name);
            }
            return name;
          }
        };
        jQuery2.each(jQuery2.expr.match.bool.source.match(/\w+/g), function(_i, name) {
          var getter = attrHandle[name] || jQuery2.find.attr;
          attrHandle[name] = function(elem, name2, isXML) {
            var ret, handle, lowercaseName = name2.toLowerCase();
            if (!isXML) {
              handle = attrHandle[lowercaseName];
              attrHandle[lowercaseName] = ret;
              ret = getter(elem, name2, isXML) != null ? lowercaseName : null;
              attrHandle[lowercaseName] = handle;
            }
            return ret;
          };
        });
        var rfocusable = /^(?:input|select|textarea|button)$/i, rclickable = /^(?:a|area)$/i;
        jQuery2.fn.extend({
          prop: function(name, value) {
            return access(this, jQuery2.prop, name, value, arguments.length > 1);
          },
          removeProp: function(name) {
            return this.each(function() {
              delete this[jQuery2.propFix[name] || name];
            });
          }
        });
        jQuery2.extend({
          prop: function(elem, name, value) {
            var ret, hooks, nType = elem.nodeType;
            if (nType === 3 || nType === 8 || nType === 2) {
              return;
            }
            if (nType !== 1 || !jQuery2.isXMLDoc(elem)) {
              name = jQuery2.propFix[name] || name;
              hooks = jQuery2.propHooks[name];
            }
            if (value !== void 0) {
              if (hooks && "set" in hooks && (ret = hooks.set(elem, value, name)) !== void 0) {
                return ret;
              }
              return elem[name] = value;
            }
            if (hooks && "get" in hooks && (ret = hooks.get(elem, name)) !== null) {
              return ret;
            }
            return elem[name];
          },
          propHooks: {
            tabIndex: {
              get: function(elem) {
                var tabindex = jQuery2.find.attr(elem, "tabindex");
                if (tabindex) {
                  return parseInt(tabindex, 10);
                }
                if (rfocusable.test(elem.nodeName) || rclickable.test(elem.nodeName) && elem.href) {
                  return 0;
                }
                return -1;
              }
            }
          },
          propFix: {
            "for": "htmlFor",
            "class": "className"
          }
        });
        if (!support.optSelected) {
          jQuery2.propHooks.selected = {
            get: function(elem) {
              var parent = elem.parentNode;
              if (parent && parent.parentNode) {
                parent.parentNode.selectedIndex;
              }
              return null;
            },
            set: function(elem) {
              var parent = elem.parentNode;
              if (parent) {
                parent.selectedIndex;
                if (parent.parentNode) {
                  parent.parentNode.selectedIndex;
                }
              }
            }
          };
        }
        jQuery2.each([
          "tabIndex",
          "readOnly",
          "maxLength",
          "cellSpacing",
          "cellPadding",
          "rowSpan",
          "colSpan",
          "useMap",
          "frameBorder",
          "contentEditable"
        ], function() {
          jQuery2.propFix[this.toLowerCase()] = this;
        });
        function stripAndCollapse(value) {
          var tokens = value.match(rnothtmlwhite) || [];
          return tokens.join(" ");
        }
        function getClass(elem) {
          return elem.getAttribute && elem.getAttribute("class") || "";
        }
        function classesToArray(value) {
          if (Array.isArray(value)) {
            return value;
          }
          if (typeof value === "string") {
            return value.match(rnothtmlwhite) || [];
          }
          return [];
        }
        jQuery2.fn.extend({
          addClass: function(value) {
            var classNames, cur, curValue, className, i, finalValue;
            if (isFunction(value)) {
              return this.each(function(j) {
                jQuery2(this).addClass(value.call(this, j, getClass(this)));
              });
            }
            classNames = classesToArray(value);
            if (classNames.length) {
              return this.each(function() {
                curValue = getClass(this);
                cur = this.nodeType === 1 && " " + stripAndCollapse(curValue) + " ";
                if (cur) {
                  for (i = 0; i < classNames.length; i++) {
                    className = classNames[i];
                    if (cur.indexOf(" " + className + " ") < 0) {
                      cur += className + " ";
                    }
                  }
                  finalValue = stripAndCollapse(cur);
                  if (curValue !== finalValue) {
                    this.setAttribute("class", finalValue);
                  }
                }
              });
            }
            return this;
          },
          removeClass: function(value) {
            var classNames, cur, curValue, className, i, finalValue;
            if (isFunction(value)) {
              return this.each(function(j) {
                jQuery2(this).removeClass(value.call(this, j, getClass(this)));
              });
            }
            if (!arguments.length) {
              return this.attr("class", "");
            }
            classNames = classesToArray(value);
            if (classNames.length) {
              return this.each(function() {
                curValue = getClass(this);
                cur = this.nodeType === 1 && " " + stripAndCollapse(curValue) + " ";
                if (cur) {
                  for (i = 0; i < classNames.length; i++) {
                    className = classNames[i];
                    while (cur.indexOf(" " + className + " ") > -1) {
                      cur = cur.replace(" " + className + " ", " ");
                    }
                  }
                  finalValue = stripAndCollapse(cur);
                  if (curValue !== finalValue) {
                    this.setAttribute("class", finalValue);
                  }
                }
              });
            }
            return this;
          },
          toggleClass: function(value, stateVal) {
            var classNames, className, i, self2, type = typeof value, isValidValue = type === "string" || Array.isArray(value);
            if (isFunction(value)) {
              return this.each(function(i2) {
                jQuery2(this).toggleClass(
                  value.call(this, i2, getClass(this), stateVal),
                  stateVal
                );
              });
            }
            if (typeof stateVal === "boolean" && isValidValue) {
              return stateVal ? this.addClass(value) : this.removeClass(value);
            }
            classNames = classesToArray(value);
            return this.each(function() {
              if (isValidValue) {
                self2 = jQuery2(this);
                for (i = 0; i < classNames.length; i++) {
                  className = classNames[i];
                  if (self2.hasClass(className)) {
                    self2.removeClass(className);
                  } else {
                    self2.addClass(className);
                  }
                }
              } else if (value === void 0 || type === "boolean") {
                className = getClass(this);
                if (className) {
                  dataPriv.set(this, "__className__", className);
                }
                if (this.setAttribute) {
                  this.setAttribute(
                    "class",
                    className || value === false ? "" : dataPriv.get(this, "__className__") || ""
                  );
                }
              }
            });
          },
          hasClass: function(selector) {
            var className, elem, i = 0;
            className = " " + selector + " ";
            while (elem = this[i++]) {
              if (elem.nodeType === 1 && (" " + stripAndCollapse(getClass(elem)) + " ").indexOf(className) > -1) {
                return true;
              }
            }
            return false;
          }
        });
        var rreturn = /\r/g;
        jQuery2.fn.extend({
          val: function(value) {
            var hooks, ret, valueIsFunction, elem = this[0];
            if (!arguments.length) {
              if (elem) {
                hooks = jQuery2.valHooks[elem.type] || jQuery2.valHooks[elem.nodeName.toLowerCase()];
                if (hooks && "get" in hooks && (ret = hooks.get(elem, "value")) !== void 0) {
                  return ret;
                }
                ret = elem.value;
                if (typeof ret === "string") {
                  return ret.replace(rreturn, "");
                }
                return ret == null ? "" : ret;
              }
              return;
            }
            valueIsFunction = isFunction(value);
            return this.each(function(i) {
              var val;
              if (this.nodeType !== 1) {
                return;
              }
              if (valueIsFunction) {
                val = value.call(this, i, jQuery2(this).val());
              } else {
                val = value;
              }
              if (val == null) {
                val = "";
              } else if (typeof val === "number") {
                val += "";
              } else if (Array.isArray(val)) {
                val = jQuery2.map(val, function(value2) {
                  return value2 == null ? "" : value2 + "";
                });
              }
              hooks = jQuery2.valHooks[this.type] || jQuery2.valHooks[this.nodeName.toLowerCase()];
              if (!hooks || !("set" in hooks) || hooks.set(this, val, "value") === void 0) {
                this.value = val;
              }
            });
          }
        });
        jQuery2.extend({
          valHooks: {
            option: {
              get: function(elem) {
                var val = jQuery2.find.attr(elem, "value");
                return val != null ? val : (
                  // Support: IE <=10 - 11 only
                  // option.text throws exceptions (trac-14686, trac-14858)
                  // Strip and collapse whitespace
                  // https://html.spec.whatwg.org/#strip-and-collapse-whitespace
                  stripAndCollapse(jQuery2.text(elem))
                );
              }
            },
            select: {
              get: function(elem) {
                var value, option, i, options = elem.options, index = elem.selectedIndex, one = elem.type === "select-one", values = one ? null : [], max = one ? index + 1 : options.length;
                if (index < 0) {
                  i = max;
                } else {
                  i = one ? index : 0;
                }
                for (; i < max; i++) {
                  option = options[i];
                  if ((option.selected || i === index) && // Don't return options that are disabled or in a disabled optgroup
                  !option.disabled && (!option.parentNode.disabled || !nodeName(option.parentNode, "optgroup"))) {
                    value = jQuery2(option).val();
                    if (one) {
                      return value;
                    }
                    values.push(value);
                  }
                }
                return values;
              },
              set: function(elem, value) {
                var optionSet, option, options = elem.options, values = jQuery2.makeArray(value), i = options.length;
                while (i--) {
                  option = options[i];
                  if (option.selected = jQuery2.inArray(jQuery2.valHooks.option.get(option), values) > -1) {
                    optionSet = true;
                  }
                }
                if (!optionSet) {
                  elem.selectedIndex = -1;
                }
                return values;
              }
            }
          }
        });
        jQuery2.each(["radio", "checkbox"], function() {
          jQuery2.valHooks[this] = {
            set: function(elem, value) {
              if (Array.isArray(value)) {
                return elem.checked = jQuery2.inArray(jQuery2(elem).val(), value) > -1;
              }
            }
          };
          if (!support.checkOn) {
            jQuery2.valHooks[this].get = function(elem) {
              return elem.getAttribute("value") === null ? "on" : elem.value;
            };
          }
        });
        var location2 = window2.location;
        var nonce = { guid: Date.now() };
        var rquery = /\?/;
        jQuery2.parseXML = function(data) {
          var xml, parserErrorElem;
          if (!data || typeof data !== "string") {
            return null;
          }
          try {
            xml = new window2.DOMParser().parseFromString(data, "text/xml");
          } catch (e) {
          }
          parserErrorElem = xml && xml.getElementsByTagName("parsererror")[0];
          if (!xml || parserErrorElem) {
            jQuery2.error("Invalid XML: " + (parserErrorElem ? jQuery2.map(parserErrorElem.childNodes, function(el) {
              return el.textContent;
            }).join("\n") : data));
          }
          return xml;
        };
        var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/, stopPropagationCallback = function(e) {
          e.stopPropagation();
        };
        jQuery2.extend(jQuery2.event, {
          trigger: function(event, data, elem, onlyHandlers) {
            var i, cur, tmp, bubbleType, ontype, handle, special, lastElement, eventPath = [elem || document2], type = hasOwn.call(event, "type") ? event.type : event, namespaces = hasOwn.call(event, "namespace") ? event.namespace.split(".") : [];
            cur = lastElement = tmp = elem = elem || document2;
            if (elem.nodeType === 3 || elem.nodeType === 8) {
              return;
            }
            if (rfocusMorph.test(type + jQuery2.event.triggered)) {
              return;
            }
            if (type.indexOf(".") > -1) {
              namespaces = type.split(".");
              type = namespaces.shift();
              namespaces.sort();
            }
            ontype = type.indexOf(":") < 0 && "on" + type;
            event = event[jQuery2.expando] ? event : new jQuery2.Event(type, typeof event === "object" && event);
            event.isTrigger = onlyHandlers ? 2 : 3;
            event.namespace = namespaces.join(".");
            event.rnamespace = event.namespace ? new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)") : null;
            event.result = void 0;
            if (!event.target) {
              event.target = elem;
            }
            data = data == null ? [event] : jQuery2.makeArray(data, [event]);
            special = jQuery2.event.special[type] || {};
            if (!onlyHandlers && special.trigger && special.trigger.apply(elem, data) === false) {
              return;
            }
            if (!onlyHandlers && !special.noBubble && !isWindow(elem)) {
              bubbleType = special.delegateType || type;
              if (!rfocusMorph.test(bubbleType + type)) {
                cur = cur.parentNode;
              }
              for (; cur; cur = cur.parentNode) {
                eventPath.push(cur);
                tmp = cur;
              }
              if (tmp === (elem.ownerDocument || document2)) {
                eventPath.push(tmp.defaultView || tmp.parentWindow || window2);
              }
            }
            i = 0;
            while ((cur = eventPath[i++]) && !event.isPropagationStopped()) {
              lastElement = cur;
              event.type = i > 1 ? bubbleType : special.bindType || type;
              handle = (dataPriv.get(cur, "events") || /* @__PURE__ */ Object.create(null))[event.type] && dataPriv.get(cur, "handle");
              if (handle) {
                handle.apply(cur, data);
              }
              handle = ontype && cur[ontype];
              if (handle && handle.apply && acceptData(cur)) {
                event.result = handle.apply(cur, data);
                if (event.result === false) {
                  event.preventDefault();
                }
              }
            }
            event.type = type;
            if (!onlyHandlers && !event.isDefaultPrevented()) {
              if ((!special._default || special._default.apply(eventPath.pop(), data) === false) && acceptData(elem)) {
                if (ontype && isFunction(elem[type]) && !isWindow(elem)) {
                  tmp = elem[ontype];
                  if (tmp) {
                    elem[ontype] = null;
                  }
                  jQuery2.event.triggered = type;
                  if (event.isPropagationStopped()) {
                    lastElement.addEventListener(type, stopPropagationCallback);
                  }
                  elem[type]();
                  if (event.isPropagationStopped()) {
                    lastElement.removeEventListener(type, stopPropagationCallback);
                  }
                  jQuery2.event.triggered = void 0;
                  if (tmp) {
                    elem[ontype] = tmp;
                  }
                }
              }
            }
            return event.result;
          },
          // Piggyback on a donor event to simulate a different one
          // Used only for `focus(in | out)` events
          simulate: function(type, elem, event) {
            var e = jQuery2.extend(
              new jQuery2.Event(),
              event,
              {
                type,
                isSimulated: true
              }
            );
            jQuery2.event.trigger(e, null, elem);
          }
        });
        jQuery2.fn.extend({
          trigger: function(type, data) {
            return this.each(function() {
              jQuery2.event.trigger(type, data, this);
            });
          },
          triggerHandler: function(type, data) {
            var elem = this[0];
            if (elem) {
              return jQuery2.event.trigger(type, data, elem, true);
            }
          }
        });
        var rbracket = /\[\]$/, rCRLF = /\r?\n/g, rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i, rsubmittable = /^(?:input|select|textarea|keygen)/i;
        function buildParams(prefix, obj, traditional, add) {
          var name;
          if (Array.isArray(obj)) {
            jQuery2.each(obj, function(i, v) {
              if (traditional || rbracket.test(prefix)) {
                add(prefix, v);
              } else {
                buildParams(
                  prefix + "[" + (typeof v === "object" && v != null ? i : "") + "]",
                  v,
                  traditional,
                  add
                );
              }
            });
          } else if (!traditional && toType(obj) === "object") {
            for (name in obj) {
              buildParams(prefix + "[" + name + "]", obj[name], traditional, add);
            }
          } else {
            add(prefix, obj);
          }
        }
        jQuery2.param = function(a, traditional) {
          var prefix, s = [], add = function(key, valueOrFunction) {
            var value = isFunction(valueOrFunction) ? valueOrFunction() : valueOrFunction;
            s[s.length] = encodeURIComponent(key) + "=" + encodeURIComponent(value == null ? "" : value);
          };
          if (a == null) {
            return "";
          }
          if (Array.isArray(a) || a.jquery && !jQuery2.isPlainObject(a)) {
            jQuery2.each(a, function() {
              add(this.name, this.value);
            });
          } else {
            for (prefix in a) {
              buildParams(prefix, a[prefix], traditional, add);
            }
          }
          return s.join("&");
        };
        jQuery2.fn.extend({
          serialize: function() {
            return jQuery2.param(this.serializeArray());
          },
          serializeArray: function() {
            return this.map(function() {
              var elements = jQuery2.prop(this, "elements");
              return elements ? jQuery2.makeArray(elements) : this;
            }).filter(function() {
              var type = this.type;
              return this.name && !jQuery2(this).is(":disabled") && rsubmittable.test(this.nodeName) && !rsubmitterTypes.test(type) && (this.checked || !rcheckableType.test(type));
            }).map(function(_i, elem) {
              var val = jQuery2(this).val();
              if (val == null) {
                return null;
              }
              if (Array.isArray(val)) {
                return jQuery2.map(val, function(val2) {
                  return { name: elem.name, value: val2.replace(rCRLF, "\r\n") };
                });
              }
              return { name: elem.name, value: val.replace(rCRLF, "\r\n") };
            }).get();
          }
        });
        var r20 = /%20/g, rhash = /#.*$/, rantiCache = /([?&])_=[^&]*/, rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg, rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/, rnoContent = /^(?:GET|HEAD)$/, rprotocol = /^\/\//, prefilters = {}, transports = {}, allTypes = "*/".concat("*"), originAnchor = document2.createElement("a");
        originAnchor.href = location2.href;
        function addToPrefiltersOrTransports(structure) {
          return function(dataTypeExpression, func) {
            if (typeof dataTypeExpression !== "string") {
              func = dataTypeExpression;
              dataTypeExpression = "*";
            }
            var dataType, i = 0, dataTypes = dataTypeExpression.toLowerCase().match(rnothtmlwhite) || [];
            if (isFunction(func)) {
              while (dataType = dataTypes[i++]) {
                if (dataType[0] === "+") {
                  dataType = dataType.slice(1) || "*";
                  (structure[dataType] = structure[dataType] || []).unshift(func);
                } else {
                  (structure[dataType] = structure[dataType] || []).push(func);
                }
              }
            }
          };
        }
        function inspectPrefiltersOrTransports(structure, options, originalOptions, jqXHR) {
          var inspected = {}, seekingTransport = structure === transports;
          function inspect(dataType) {
            var selected;
            inspected[dataType] = true;
            jQuery2.each(structure[dataType] || [], function(_, prefilterOrFactory) {
              var dataTypeOrTransport = prefilterOrFactory(options, originalOptions, jqXHR);
              if (typeof dataTypeOrTransport === "string" && !seekingTransport && !inspected[dataTypeOrTransport]) {
                options.dataTypes.unshift(dataTypeOrTransport);
                inspect(dataTypeOrTransport);
                return false;
              } else if (seekingTransport) {
                return !(selected = dataTypeOrTransport);
              }
            });
            return selected;
          }
          return inspect(options.dataTypes[0]) || !inspected["*"] && inspect("*");
        }
        function ajaxExtend(target, src) {
          var key, deep, flatOptions = jQuery2.ajaxSettings.flatOptions || {};
          for (key in src) {
            if (src[key] !== void 0) {
              (flatOptions[key] ? target : deep || (deep = {}))[key] = src[key];
            }
          }
          if (deep) {
            jQuery2.extend(true, target, deep);
          }
          return target;
        }
        function ajaxHandleResponses(s, jqXHR, responses) {
          var ct, type, finalDataType, firstDataType, contents = s.contents, dataTypes = s.dataTypes;
          while (dataTypes[0] === "*") {
            dataTypes.shift();
            if (ct === void 0) {
              ct = s.mimeType || jqXHR.getResponseHeader("Content-Type");
            }
          }
          if (ct) {
            for (type in contents) {
              if (contents[type] && contents[type].test(ct)) {
                dataTypes.unshift(type);
                break;
              }
            }
          }
          if (dataTypes[0] in responses) {
            finalDataType = dataTypes[0];
          } else {
            for (type in responses) {
              if (!dataTypes[0] || s.converters[type + " " + dataTypes[0]]) {
                finalDataType = type;
                break;
              }
              if (!firstDataType) {
                firstDataType = type;
              }
            }
            finalDataType = finalDataType || firstDataType;
          }
          if (finalDataType) {
            if (finalDataType !== dataTypes[0]) {
              dataTypes.unshift(finalDataType);
            }
            return responses[finalDataType];
          }
        }
        function ajaxConvert(s, response, jqXHR, isSuccess) {
          var conv2, current, conv, tmp, prev, converters = {}, dataTypes = s.dataTypes.slice();
          if (dataTypes[1]) {
            for (conv in s.converters) {
              converters[conv.toLowerCase()] = s.converters[conv];
            }
          }
          current = dataTypes.shift();
          while (current) {
            if (s.responseFields[current]) {
              jqXHR[s.responseFields[current]] = response;
            }
            if (!prev && isSuccess && s.dataFilter) {
              response = s.dataFilter(response, s.dataType);
            }
            prev = current;
            current = dataTypes.shift();
            if (current) {
              if (current === "*") {
                current = prev;
              } else if (prev !== "*" && prev !== current) {
                conv = converters[prev + " " + current] || converters["* " + current];
                if (!conv) {
                  for (conv2 in converters) {
                    tmp = conv2.split(" ");
                    if (tmp[1] === current) {
                      conv = converters[prev + " " + tmp[0]] || converters["* " + tmp[0]];
                      if (conv) {
                        if (conv === true) {
                          conv = converters[conv2];
                        } else if (converters[conv2] !== true) {
                          current = tmp[0];
                          dataTypes.unshift(tmp[1]);
                        }
                        break;
                      }
                    }
                  }
                }
                if (conv !== true) {
                  if (conv && s.throws) {
                    response = conv(response);
                  } else {
                    try {
                      response = conv(response);
                    } catch (e) {
                      return {
                        state: "parsererror",
                        error: conv ? e : "No conversion from " + prev + " to " + current
                      };
                    }
                  }
                }
              }
            }
          }
          return { state: "success", data: response };
        }
        jQuery2.extend({
          // Counter for holding the number of active queries
          active: 0,
          // Last-Modified header cache for next request
          lastModified: {},
          etag: {},
          ajaxSettings: {
            url: location2.href,
            type: "GET",
            isLocal: rlocalProtocol.test(location2.protocol),
            global: true,
            processData: true,
            async: true,
            contentType: "application/x-www-form-urlencoded; charset=UTF-8",
            /*
            timeout: 0,
            data: null,
            dataType: null,
            username: null,
            password: null,
            cache: null,
            throws: false,
            traditional: false,
            headers: {},
            */
            accepts: {
              "*": allTypes,
              text: "text/plain",
              html: "text/html",
              xml: "application/xml, text/xml",
              json: "application/json, text/javascript"
            },
            contents: {
              xml: /\bxml\b/,
              html: /\bhtml/,
              json: /\bjson\b/
            },
            responseFields: {
              xml: "responseXML",
              text: "responseText",
              json: "responseJSON"
            },
            // Data converters
            // Keys separate source (or catchall "*") and destination types with a single space
            converters: {
              // Convert anything to text
              "* text": String,
              // Text to html (true = no transformation)
              "text html": true,
              // Evaluate text as a json expression
              "text json": JSON.parse,
              // Parse text as xml
              "text xml": jQuery2.parseXML
            },
            // For options that shouldn't be deep extended:
            // you can add your own custom options here if
            // and when you create one that shouldn't be
            // deep extended (see ajaxExtend)
            flatOptions: {
              url: true,
              context: true
            }
          },
          // Creates a full fledged settings object into target
          // with both ajaxSettings and settings fields.
          // If target is omitted, writes into ajaxSettings.
          ajaxSetup: function(target, settings) {
            return settings ? (
              // Building a settings object
              ajaxExtend(ajaxExtend(target, jQuery2.ajaxSettings), settings)
            ) : (
              // Extending ajaxSettings
              ajaxExtend(jQuery2.ajaxSettings, target)
            );
          },
          ajaxPrefilter: addToPrefiltersOrTransports(prefilters),
          ajaxTransport: addToPrefiltersOrTransports(transports),
          // Main method
          ajax: function(url, options) {
            if (typeof url === "object") {
              options = url;
              url = void 0;
            }
            options = options || {};
            var transport, cacheURL, responseHeadersString, responseHeaders, timeoutTimer, urlAnchor, completed2, fireGlobals, i, uncached, s = jQuery2.ajaxSetup({}, options), callbackContext = s.context || s, globalEventContext = s.context && (callbackContext.nodeType || callbackContext.jquery) ? jQuery2(callbackContext) : jQuery2.event, deferred = jQuery2.Deferred(), completeDeferred = jQuery2.Callbacks("once memory"), statusCode = s.statusCode || {}, requestHeaders = {}, requestHeadersNames = {}, strAbort = "canceled", jqXHR = {
              readyState: 0,
              // Builds headers hashtable if needed
              getResponseHeader: function(key) {
                var match;
                if (completed2) {
                  if (!responseHeaders) {
                    responseHeaders = {};
                    while (match = rheaders.exec(responseHeadersString)) {
                      responseHeaders[match[1].toLowerCase() + " "] = (responseHeaders[match[1].toLowerCase() + " "] || []).concat(match[2]);
                    }
                  }
                  match = responseHeaders[key.toLowerCase() + " "];
                }
                return match == null ? null : match.join(", ");
              },
              // Raw string
              getAllResponseHeaders: function() {
                return completed2 ? responseHeadersString : null;
              },
              // Caches the header
              setRequestHeader: function(name, value) {
                if (completed2 == null) {
                  name = requestHeadersNames[name.toLowerCase()] = requestHeadersNames[name.toLowerCase()] || name;
                  requestHeaders[name] = value;
                }
                return this;
              },
              // Overrides response content-type header
              overrideMimeType: function(type) {
                if (completed2 == null) {
                  s.mimeType = type;
                }
                return this;
              },
              // Status-dependent callbacks
              statusCode: function(map) {
                var code;
                if (map) {
                  if (completed2) {
                    jqXHR.always(map[jqXHR.status]);
                  } else {
                    for (code in map) {
                      statusCode[code] = [statusCode[code], map[code]];
                    }
                  }
                }
                return this;
              },
              // Cancel the request
              abort: function(statusText) {
                var finalText = statusText || strAbort;
                if (transport) {
                  transport.abort(finalText);
                }
                done(0, finalText);
                return this;
              }
            };
            deferred.promise(jqXHR);
            s.url = ((url || s.url || location2.href) + "").replace(rprotocol, location2.protocol + "//");
            s.type = options.method || options.type || s.method || s.type;
            s.dataTypes = (s.dataType || "*").toLowerCase().match(rnothtmlwhite) || [""];
            if (s.crossDomain == null) {
              urlAnchor = document2.createElement("a");
              try {
                urlAnchor.href = s.url;
                urlAnchor.href = urlAnchor.href;
                s.crossDomain = originAnchor.protocol + "//" + originAnchor.host !== urlAnchor.protocol + "//" + urlAnchor.host;
              } catch (e) {
                s.crossDomain = true;
              }
            }
            if (s.data && s.processData && typeof s.data !== "string") {
              s.data = jQuery2.param(s.data, s.traditional);
            }
            inspectPrefiltersOrTransports(prefilters, s, options, jqXHR);
            if (completed2) {
              return jqXHR;
            }
            fireGlobals = jQuery2.event && s.global;
            if (fireGlobals && jQuery2.active++ === 0) {
              jQuery2.event.trigger("ajaxStart");
            }
            s.type = s.type.toUpperCase();
            s.hasContent = !rnoContent.test(s.type);
            cacheURL = s.url.replace(rhash, "");
            if (!s.hasContent) {
              uncached = s.url.slice(cacheURL.length);
              if (s.data && (s.processData || typeof s.data === "string")) {
                cacheURL += (rquery.test(cacheURL) ? "&" : "?") + s.data;
                delete s.data;
              }
              if (s.cache === false) {
                cacheURL = cacheURL.replace(rantiCache, "$1");
                uncached = (rquery.test(cacheURL) ? "&" : "?") + "_=" + nonce.guid++ + uncached;
              }
              s.url = cacheURL + uncached;
            } else if (s.data && s.processData && (s.contentType || "").indexOf("application/x-www-form-urlencoded") === 0) {
              s.data = s.data.replace(r20, "+");
            }
            if (s.ifModified) {
              if (jQuery2.lastModified[cacheURL]) {
                jqXHR.setRequestHeader("If-Modified-Since", jQuery2.lastModified[cacheURL]);
              }
              if (jQuery2.etag[cacheURL]) {
                jqXHR.setRequestHeader("If-None-Match", jQuery2.etag[cacheURL]);
              }
            }
            if (s.data && s.hasContent && s.contentType !== false || options.contentType) {
              jqXHR.setRequestHeader("Content-Type", s.contentType);
            }
            jqXHR.setRequestHeader(
              "Accept",
              s.dataTypes[0] && s.accepts[s.dataTypes[0]] ? s.accepts[s.dataTypes[0]] + (s.dataTypes[0] !== "*" ? ", " + allTypes + "; q=0.01" : "") : s.accepts["*"]
            );
            for (i in s.headers) {
              jqXHR.setRequestHeader(i, s.headers[i]);
            }
            if (s.beforeSend && (s.beforeSend.call(callbackContext, jqXHR, s) === false || completed2)) {
              return jqXHR.abort();
            }
            strAbort = "abort";
            completeDeferred.add(s.complete);
            jqXHR.done(s.success);
            jqXHR.fail(s.error);
            transport = inspectPrefiltersOrTransports(transports, s, options, jqXHR);
            if (!transport) {
              done(-1, "No Transport");
            } else {
              jqXHR.readyState = 1;
              if (fireGlobals) {
                globalEventContext.trigger("ajaxSend", [jqXHR, s]);
              }
              if (completed2) {
                return jqXHR;
              }
              if (s.async && s.timeout > 0) {
                timeoutTimer = window2.setTimeout(function() {
                  jqXHR.abort("timeout");
                }, s.timeout);
              }
              try {
                completed2 = false;
                transport.send(requestHeaders, done);
              } catch (e) {
                if (completed2) {
                  throw e;
                }
                done(-1, e);
              }
            }
            function done(status, nativeStatusText, responses, headers) {
              var isSuccess, success, error, response, modified, statusText = nativeStatusText;
              if (completed2) {
                return;
              }
              completed2 = true;
              if (timeoutTimer) {
                window2.clearTimeout(timeoutTimer);
              }
              transport = void 0;
              responseHeadersString = headers || "";
              jqXHR.readyState = status > 0 ? 4 : 0;
              isSuccess = status >= 200 && status < 300 || status === 304;
              if (responses) {
                response = ajaxHandleResponses(s, jqXHR, responses);
              }
              if (!isSuccess && jQuery2.inArray("script", s.dataTypes) > -1 && jQuery2.inArray("json", s.dataTypes) < 0) {
                s.converters["text script"] = function() {
                };
              }
              response = ajaxConvert(s, response, jqXHR, isSuccess);
              if (isSuccess) {
                if (s.ifModified) {
                  modified = jqXHR.getResponseHeader("Last-Modified");
                  if (modified) {
                    jQuery2.lastModified[cacheURL] = modified;
                  }
                  modified = jqXHR.getResponseHeader("etag");
                  if (modified) {
                    jQuery2.etag[cacheURL] = modified;
                  }
                }
                if (status === 204 || s.type === "HEAD") {
                  statusText = "nocontent";
                } else if (status === 304) {
                  statusText = "notmodified";
                } else {
                  statusText = response.state;
                  success = response.data;
                  error = response.error;
                  isSuccess = !error;
                }
              } else {
                error = statusText;
                if (status || !statusText) {
                  statusText = "error";
                  if (status < 0) {
                    status = 0;
                  }
                }
              }
              jqXHR.status = status;
              jqXHR.statusText = (nativeStatusText || statusText) + "";
              if (isSuccess) {
                deferred.resolveWith(callbackContext, [success, statusText, jqXHR]);
              } else {
                deferred.rejectWith(callbackContext, [jqXHR, statusText, error]);
              }
              jqXHR.statusCode(statusCode);
              statusCode = void 0;
              if (fireGlobals) {
                globalEventContext.trigger(
                  isSuccess ? "ajaxSuccess" : "ajaxError",
                  [jqXHR, s, isSuccess ? success : error]
                );
              }
              completeDeferred.fireWith(callbackContext, [jqXHR, statusText]);
              if (fireGlobals) {
                globalEventContext.trigger("ajaxComplete", [jqXHR, s]);
                if (!--jQuery2.active) {
                  jQuery2.event.trigger("ajaxStop");
                }
              }
            }
            return jqXHR;
          },
          getJSON: function(url, data, callback) {
            return jQuery2.get(url, data, callback, "json");
          },
          getScript: function(url, callback) {
            return jQuery2.get(url, void 0, callback, "script");
          }
        });
        jQuery2.each(["get", "post"], function(_i, method) {
          jQuery2[method] = function(url, data, callback, type) {
            if (isFunction(data)) {
              type = type || callback;
              callback = data;
              data = void 0;
            }
            return jQuery2.ajax(jQuery2.extend({
              url,
              type: method,
              dataType: type,
              data,
              success: callback
            }, jQuery2.isPlainObject(url) && url));
          };
        });
        jQuery2.ajaxPrefilter(function(s) {
          var i;
          for (i in s.headers) {
            if (i.toLowerCase() === "content-type") {
              s.contentType = s.headers[i] || "";
            }
          }
        });
        jQuery2._evalUrl = function(url, options, doc) {
          return jQuery2.ajax({
            url,
            // Make this explicit, since user can override this through ajaxSetup (trac-11264)
            type: "GET",
            dataType: "script",
            cache: true,
            async: false,
            global: false,
            // Only evaluate the response if it is successful (gh-4126)
            // dataFilter is not invoked for failure responses, so using it instead
            // of the default converter is kludgy but it works.
            converters: {
              "text script": function() {
              }
            },
            dataFilter: function(response) {
              jQuery2.globalEval(response, options, doc);
            }
          });
        };
        jQuery2.fn.extend({
          wrapAll: function(html) {
            var wrap2;
            if (this[0]) {
              if (isFunction(html)) {
                html = html.call(this[0]);
              }
              wrap2 = jQuery2(html, this[0].ownerDocument).eq(0).clone(true);
              if (this[0].parentNode) {
                wrap2.insertBefore(this[0]);
              }
              wrap2.map(function() {
                var elem = this;
                while (elem.firstElementChild) {
                  elem = elem.firstElementChild;
                }
                return elem;
              }).append(this);
            }
            return this;
          },
          wrapInner: function(html) {
            if (isFunction(html)) {
              return this.each(function(i) {
                jQuery2(this).wrapInner(html.call(this, i));
              });
            }
            return this.each(function() {
              var self2 = jQuery2(this), contents = self2.contents();
              if (contents.length) {
                contents.wrapAll(html);
              } else {
                self2.append(html);
              }
            });
          },
          wrap: function(html) {
            var htmlIsFunction = isFunction(html);
            return this.each(function(i) {
              jQuery2(this).wrapAll(htmlIsFunction ? html.call(this, i) : html);
            });
          },
          unwrap: function(selector) {
            this.parent(selector).not("body").each(function() {
              jQuery2(this).replaceWith(this.childNodes);
            });
            return this;
          }
        });
        jQuery2.expr.pseudos.hidden = function(elem) {
          return !jQuery2.expr.pseudos.visible(elem);
        };
        jQuery2.expr.pseudos.visible = function(elem) {
          return !!(elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length);
        };
        jQuery2.ajaxSettings.xhr = function() {
          try {
            return new window2.XMLHttpRequest();
          } catch (e) {
          }
        };
        var xhrSuccessStatus = {
          // File protocol always yields status code 0, assume 200
          0: 200,
          // Support: IE <=9 only
          // trac-1450: sometimes IE returns 1223 when it should be 204
          1223: 204
        }, xhrSupported = jQuery2.ajaxSettings.xhr();
        support.cors = !!xhrSupported && "withCredentials" in xhrSupported;
        support.ajax = xhrSupported = !!xhrSupported;
        jQuery2.ajaxTransport(function(options) {
          var callback, errorCallback;
          if (support.cors || xhrSupported && !options.crossDomain) {
            return {
              send: function(headers, complete) {
                var i, xhr = options.xhr();
                xhr.open(
                  options.type,
                  options.url,
                  options.async,
                  options.username,
                  options.password
                );
                if (options.xhrFields) {
                  for (i in options.xhrFields) {
                    xhr[i] = options.xhrFields[i];
                  }
                }
                if (options.mimeType && xhr.overrideMimeType) {
                  xhr.overrideMimeType(options.mimeType);
                }
                if (!options.crossDomain && !headers["X-Requested-With"]) {
                  headers["X-Requested-With"] = "XMLHttpRequest";
                }
                for (i in headers) {
                  xhr.setRequestHeader(i, headers[i]);
                }
                callback = function(type) {
                  return function() {
                    if (callback) {
                      callback = errorCallback = xhr.onload = xhr.onerror = xhr.onabort = xhr.ontimeout = xhr.onreadystatechange = null;
                      if (type === "abort") {
                        xhr.abort();
                      } else if (type === "error") {
                        if (typeof xhr.status !== "number") {
                          complete(0, "error");
                        } else {
                          complete(
                            // File: protocol always yields status 0; see trac-8605, trac-14207
                            xhr.status,
                            xhr.statusText
                          );
                        }
                      } else {
                        complete(
                          xhrSuccessStatus[xhr.status] || xhr.status,
                          xhr.statusText,
                          // Support: IE <=9 only
                          // IE9 has no XHR2 but throws on binary (trac-11426)
                          // For XHR2 non-text, let the caller handle it (gh-2498)
                          (xhr.responseType || "text") !== "text" || typeof xhr.responseText !== "string" ? { binary: xhr.response } : { text: xhr.responseText },
                          xhr.getAllResponseHeaders()
                        );
                      }
                    }
                  };
                };
                xhr.onload = callback();
                errorCallback = xhr.onerror = xhr.ontimeout = callback("error");
                if (xhr.onabort !== void 0) {
                  xhr.onabort = errorCallback;
                } else {
                  xhr.onreadystatechange = function() {
                    if (xhr.readyState === 4) {
                      window2.setTimeout(function() {
                        if (callback) {
                          errorCallback();
                        }
                      });
                    }
                  };
                }
                callback = callback("abort");
                try {
                  xhr.send(options.hasContent && options.data || null);
                } catch (e) {
                  if (callback) {
                    throw e;
                  }
                }
              },
              abort: function() {
                if (callback) {
                  callback();
                }
              }
            };
          }
        });
        jQuery2.ajaxPrefilter(function(s) {
          if (s.crossDomain) {
            s.contents.script = false;
          }
        });
        jQuery2.ajaxSetup({
          accepts: {
            script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"
          },
          contents: {
            script: /\b(?:java|ecma)script\b/
          },
          converters: {
            "text script": function(text) {
              jQuery2.globalEval(text);
              return text;
            }
          }
        });
        jQuery2.ajaxPrefilter("script", function(s) {
          if (s.cache === void 0) {
            s.cache = false;
          }
          if (s.crossDomain) {
            s.type = "GET";
          }
        });
        jQuery2.ajaxTransport("script", function(s) {
          if (s.crossDomain || s.scriptAttrs) {
            var script, callback;
            return {
              send: function(_, complete) {
                script = jQuery2("<script>").attr(s.scriptAttrs || {}).prop({ charset: s.scriptCharset, src: s.url }).on("load error", callback = function(evt) {
                  script.remove();
                  callback = null;
                  if (evt) {
                    complete(evt.type === "error" ? 404 : 200, evt.type);
                  }
                });
                document2.head.appendChild(script[0]);
              },
              abort: function() {
                if (callback) {
                  callback();
                }
              }
            };
          }
        });
        var oldCallbacks = [], rjsonp = /(=)\?(?=&|$)|\?\?/;
        jQuery2.ajaxSetup({
          jsonp: "callback",
          jsonpCallback: function() {
            var callback = oldCallbacks.pop() || jQuery2.expando + "_" + nonce.guid++;
            this[callback] = true;
            return callback;
          }
        });
        jQuery2.ajaxPrefilter("json jsonp", function(s, originalSettings, jqXHR) {
          var callbackName, overwritten, responseContainer, jsonProp = s.jsonp !== false && (rjsonp.test(s.url) ? "url" : typeof s.data === "string" && (s.contentType || "").indexOf("application/x-www-form-urlencoded") === 0 && rjsonp.test(s.data) && "data");
          if (jsonProp || s.dataTypes[0] === "jsonp") {
            callbackName = s.jsonpCallback = isFunction(s.jsonpCallback) ? s.jsonpCallback() : s.jsonpCallback;
            if (jsonProp) {
              s[jsonProp] = s[jsonProp].replace(rjsonp, "$1" + callbackName);
            } else if (s.jsonp !== false) {
              s.url += (rquery.test(s.url) ? "&" : "?") + s.jsonp + "=" + callbackName;
            }
            s.converters["script json"] = function() {
              if (!responseContainer) {
                jQuery2.error(callbackName + " was not called");
              }
              return responseContainer[0];
            };
            s.dataTypes[0] = "json";
            overwritten = window2[callbackName];
            window2[callbackName] = function() {
              responseContainer = arguments;
            };
            jqXHR.always(function() {
              if (overwritten === void 0) {
                jQuery2(window2).removeProp(callbackName);
              } else {
                window2[callbackName] = overwritten;
              }
              if (s[callbackName]) {
                s.jsonpCallback = originalSettings.jsonpCallback;
                oldCallbacks.push(callbackName);
              }
              if (responseContainer && isFunction(overwritten)) {
                overwritten(responseContainer[0]);
              }
              responseContainer = overwritten = void 0;
            });
            return "script";
          }
        });
        support.createHTMLDocument = function() {
          var body = document2.implementation.createHTMLDocument("").body;
          body.innerHTML = "<form></form><form></form>";
          return body.childNodes.length === 2;
        }();
        jQuery2.parseHTML = function(data, context, keepScripts) {
          if (typeof data !== "string") {
            return [];
          }
          if (typeof context === "boolean") {
            keepScripts = context;
            context = false;
          }
          var base, parsed, scripts;
          if (!context) {
            if (support.createHTMLDocument) {
              context = document2.implementation.createHTMLDocument("");
              base = context.createElement("base");
              base.href = document2.location.href;
              context.head.appendChild(base);
            } else {
              context = document2;
            }
          }
          parsed = rsingleTag.exec(data);
          scripts = !keepScripts && [];
          if (parsed) {
            return [context.createElement(parsed[1])];
          }
          parsed = buildFragment([data], context, scripts);
          if (scripts && scripts.length) {
            jQuery2(scripts).remove();
          }
          return jQuery2.merge([], parsed.childNodes);
        };
        jQuery2.fn.load = function(url, params, callback) {
          var selector, type, response, self2 = this, off = url.indexOf(" ");
          if (off > -1) {
            selector = stripAndCollapse(url.slice(off));
            url = url.slice(0, off);
          }
          if (isFunction(params)) {
            callback = params;
            params = void 0;
          } else if (params && typeof params === "object") {
            type = "POST";
          }
          if (self2.length > 0) {
            jQuery2.ajax({
              url,
              // If "type" variable is undefined, then "GET" method will be used.
              // Make value of this field explicit since
              // user can override it through ajaxSetup method
              type: type || "GET",
              dataType: "html",
              data: params
            }).done(function(responseText) {
              response = arguments;
              self2.html(selector ? (
                // If a selector was specified, locate the right elements in a dummy div
                // Exclude scripts to avoid IE 'Permission Denied' errors
                jQuery2("<div>").append(jQuery2.parseHTML(responseText)).find(selector)
              ) : (
                // Otherwise use the full result
                responseText
              ));
            }).always(callback && function(jqXHR, status) {
              self2.each(function() {
                callback.apply(this, response || [jqXHR.responseText, status, jqXHR]);
              });
            });
          }
          return this;
        };
        jQuery2.expr.pseudos.animated = function(elem) {
          return jQuery2.grep(jQuery2.timers, function(fn) {
            return elem === fn.elem;
          }).length;
        };
        jQuery2.offset = {
          setOffset: function(elem, options, i) {
            var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition, position = jQuery2.css(elem, "position"), curElem = jQuery2(elem), props = {};
            if (position === "static") {
              elem.style.position = "relative";
            }
            curOffset = curElem.offset();
            curCSSTop = jQuery2.css(elem, "top");
            curCSSLeft = jQuery2.css(elem, "left");
            calculatePosition = (position === "absolute" || position === "fixed") && (curCSSTop + curCSSLeft).indexOf("auto") > -1;
            if (calculatePosition) {
              curPosition = curElem.position();
              curTop = curPosition.top;
              curLeft = curPosition.left;
            } else {
              curTop = parseFloat(curCSSTop) || 0;
              curLeft = parseFloat(curCSSLeft) || 0;
            }
            if (isFunction(options)) {
              options = options.call(elem, i, jQuery2.extend({}, curOffset));
            }
            if (options.top != null) {
              props.top = options.top - curOffset.top + curTop;
            }
            if (options.left != null) {
              props.left = options.left - curOffset.left + curLeft;
            }
            if ("using" in options) {
              options.using.call(elem, props);
            } else {
              curElem.css(props);
            }
          }
        };
        jQuery2.fn.extend({
          // offset() relates an element's border box to the document origin
          offset: function(options) {
            if (arguments.length) {
              return options === void 0 ? this : this.each(function(i) {
                jQuery2.offset.setOffset(this, options, i);
              });
            }
            var rect, win, elem = this[0];
            if (!elem) {
              return;
            }
            if (!elem.getClientRects().length) {
              return { top: 0, left: 0 };
            }
            rect = elem.getBoundingClientRect();
            win = elem.ownerDocument.defaultView;
            return {
              top: rect.top + win.pageYOffset,
              left: rect.left + win.pageXOffset
            };
          },
          // position() relates an element's margin box to its offset parent's padding box
          // This corresponds to the behavior of CSS absolute positioning
          position: function() {
            if (!this[0]) {
              return;
            }
            var offsetParent, offset, doc, elem = this[0], parentOffset = { top: 0, left: 0 };
            if (jQuery2.css(elem, "position") === "fixed") {
              offset = elem.getBoundingClientRect();
            } else {
              offset = this.offset();
              doc = elem.ownerDocument;
              offsetParent = elem.offsetParent || doc.documentElement;
              while (offsetParent && (offsetParent === doc.body || offsetParent === doc.documentElement) && jQuery2.css(offsetParent, "position") === "static") {
                offsetParent = offsetParent.parentNode;
              }
              if (offsetParent && offsetParent !== elem && offsetParent.nodeType === 1) {
                parentOffset = jQuery2(offsetParent).offset();
                parentOffset.top += jQuery2.css(offsetParent, "borderTopWidth", true);
                parentOffset.left += jQuery2.css(offsetParent, "borderLeftWidth", true);
              }
            }
            return {
              top: offset.top - parentOffset.top - jQuery2.css(elem, "marginTop", true),
              left: offset.left - parentOffset.left - jQuery2.css(elem, "marginLeft", true)
            };
          },
          // This method will return documentElement in the following cases:
          // 1) For the element inside the iframe without offsetParent, this method will return
          //    documentElement of the parent window
          // 2) For the hidden or detached element
          // 3) For body or html element, i.e. in case of the html node - it will return itself
          //
          // but those exceptions were never presented as a real life use-cases
          // and might be considered as more preferable results.
          //
          // This logic, however, is not guaranteed and can change at any point in the future
          offsetParent: function() {
            return this.map(function() {
              var offsetParent = this.offsetParent;
              while (offsetParent && jQuery2.css(offsetParent, "position") === "static") {
                offsetParent = offsetParent.offsetParent;
              }
              return offsetParent || documentElement;
            });
          }
        });
        jQuery2.each({ scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function(method, prop) {
          var top = "pageYOffset" === prop;
          jQuery2.fn[method] = function(val) {
            return access(this, function(elem, method2, val2) {
              var win;
              if (isWindow(elem)) {
                win = elem;
              } else if (elem.nodeType === 9) {
                win = elem.defaultView;
              }
              if (val2 === void 0) {
                return win ? win[prop] : elem[method2];
              }
              if (win) {
                win.scrollTo(
                  !top ? val2 : win.pageXOffset,
                  top ? val2 : win.pageYOffset
                );
              } else {
                elem[method2] = val2;
              }
            }, method, val, arguments.length);
          };
        });
        jQuery2.each(["top", "left"], function(_i, prop) {
          jQuery2.cssHooks[prop] = addGetHookIf(
            support.pixelPosition,
            function(elem, computed) {
              if (computed) {
                computed = curCSS(elem, prop);
                return rnumnonpx.test(computed) ? jQuery2(elem).position()[prop] + "px" : computed;
              }
            }
          );
        });
        jQuery2.each({ Height: "height", Width: "width" }, function(name, type) {
          jQuery2.each({
            padding: "inner" + name,
            content: type,
            "": "outer" + name
          }, function(defaultExtra, funcName) {
            jQuery2.fn[funcName] = function(margin, value) {
              var chainable = arguments.length && (defaultExtra || typeof margin !== "boolean"), extra = defaultExtra || (margin === true || value === true ? "margin" : "border");
              return access(this, function(elem, type2, value2) {
                var doc;
                if (isWindow(elem)) {
                  return funcName.indexOf("outer") === 0 ? elem["inner" + name] : elem.document.documentElement["client" + name];
                }
                if (elem.nodeType === 9) {
                  doc = elem.documentElement;
                  return Math.max(
                    elem.body["scroll" + name],
                    doc["scroll" + name],
                    elem.body["offset" + name],
                    doc["offset" + name],
                    doc["client" + name]
                  );
                }
                return value2 === void 0 ? (
                  // Get width or height on the element, requesting but not forcing parseFloat
                  jQuery2.css(elem, type2, extra)
                ) : (
                  // Set width or height on the element
                  jQuery2.style(elem, type2, value2, extra)
                );
              }, type, chainable ? margin : void 0, chainable);
            };
          });
        });
        jQuery2.each([
          "ajaxStart",
          "ajaxStop",
          "ajaxComplete",
          "ajaxError",
          "ajaxSuccess",
          "ajaxSend"
        ], function(_i, type) {
          jQuery2.fn[type] = function(fn) {
            return this.on(type, fn);
          };
        });
        jQuery2.fn.extend({
          bind: function(types, data, fn) {
            return this.on(types, null, data, fn);
          },
          unbind: function(types, fn) {
            return this.off(types, null, fn);
          },
          delegate: function(selector, types, data, fn) {
            return this.on(types, selector, data, fn);
          },
          undelegate: function(selector, types, fn) {
            return arguments.length === 1 ? this.off(selector, "**") : this.off(types, selector || "**", fn);
          },
          hover: function(fnOver, fnOut) {
            return this.on("mouseenter", fnOver).on("mouseleave", fnOut || fnOver);
          }
        });
        jQuery2.each(
          "blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),
          function(_i, name) {
            jQuery2.fn[name] = function(data, fn) {
              return arguments.length > 0 ? this.on(name, null, data, fn) : this.trigger(name);
            };
          }
        );
        var rtrim = /^[\s\uFEFF\xA0]+|([^\s\uFEFF\xA0])[\s\uFEFF\xA0]+$/g;
        jQuery2.proxy = function(fn, context) {
          var tmp, args, proxy;
          if (typeof context === "string") {
            tmp = fn[context];
            context = fn;
            fn = tmp;
          }
          if (!isFunction(fn)) {
            return void 0;
          }
          args = slice.call(arguments, 2);
          proxy = function() {
            return fn.apply(context || this, args.concat(slice.call(arguments)));
          };
          proxy.guid = fn.guid = fn.guid || jQuery2.guid++;
          return proxy;
        };
        jQuery2.holdReady = function(hold) {
          if (hold) {
            jQuery2.readyWait++;
          } else {
            jQuery2.ready(true);
          }
        };
        jQuery2.isArray = Array.isArray;
        jQuery2.parseJSON = JSON.parse;
        jQuery2.nodeName = nodeName;
        jQuery2.isFunction = isFunction;
        jQuery2.isWindow = isWindow;
        jQuery2.camelCase = camelCase;
        jQuery2.type = toType;
        jQuery2.now = Date.now;
        jQuery2.isNumeric = function(obj) {
          var type = jQuery2.type(obj);
          return (type === "number" || type === "string") && // parseFloat NaNs numeric-cast false positives ("")
          // ...but misinterprets leading-number strings, particularly hex literals ("0x...")
          // subtraction forces infinities to NaN
          !isNaN(obj - parseFloat(obj));
        };
        jQuery2.trim = function(text) {
          return text == null ? "" : (text + "").replace(rtrim, "$1");
        };
        if (typeof define === "function" && define.amd) {
          define("jquery", [], function() {
            return jQuery2;
          });
        }
        var _jQuery = window2.jQuery, _$ = window2.$;
        jQuery2.noConflict = function(deep) {
          if (window2.$ === jQuery2) {
            window2.$ = _$;
          }
          if (deep && window2.jQuery === jQuery2) {
            window2.jQuery = _jQuery;
          }
          return jQuery2;
        };
        if (typeof noGlobal === "undefined") {
          window2.jQuery = window2.$ = jQuery2;
        }
        return jQuery2;
      });
    }
  });

  // node_modules/@rails/ujs/lib/assets/compiled/rails-ujs.js
  var require_rails_ujs = __commonJS({
    "node_modules/@rails/ujs/lib/assets/compiled/rails-ujs.js"(exports, module) {
      (function() {
        var context = this;
        (function() {
          (function() {
            this.Rails = {
              linkClickSelector: "a[data-confirm], a[data-method], a[data-remote]:not([disabled]), a[data-disable-with], a[data-disable]",
              buttonClickSelector: {
                selector: "button[data-remote]:not([form]), button[data-confirm]:not([form])",
                exclude: "form button"
              },
              inputChangeSelector: "select[data-remote], input[data-remote], textarea[data-remote]",
              formSubmitSelector: "form:not([data-turbo=true])",
              formInputClickSelector: "form:not([data-turbo=true]) input[type=submit], form:not([data-turbo=true]) input[type=image], form:not([data-turbo=true]) button[type=submit], form:not([data-turbo=true]) button:not([type]), input[type=submit][form], input[type=image][form], button[type=submit][form], button[form]:not([type])",
              formDisableSelector: "input[data-disable-with]:enabled, button[data-disable-with]:enabled, textarea[data-disable-with]:enabled, input[data-disable]:enabled, button[data-disable]:enabled, textarea[data-disable]:enabled",
              formEnableSelector: "input[data-disable-with]:disabled, button[data-disable-with]:disabled, textarea[data-disable-with]:disabled, input[data-disable]:disabled, button[data-disable]:disabled, textarea[data-disable]:disabled",
              fileInputSelector: "input[name][type=file]:not([disabled])",
              linkDisableSelector: "a[data-disable-with], a[data-disable]",
              buttonDisableSelector: "button[data-remote][data-disable-with], button[data-remote][data-disable]"
            };
          }).call(this);
        }).call(context);
        var Rails2 = context.Rails;
        (function() {
          (function() {
            var nonce;
            nonce = null;
            Rails2.loadCSPNonce = function() {
              var ref;
              return nonce = (ref = document.querySelector("meta[name=csp-nonce]")) != null ? ref.content : void 0;
            };
            Rails2.cspNonce = function() {
              return nonce != null ? nonce : Rails2.loadCSPNonce();
            };
          }).call(this);
          (function() {
            var expando, m;
            m = Element.prototype.matches || Element.prototype.matchesSelector || Element.prototype.mozMatchesSelector || Element.prototype.msMatchesSelector || Element.prototype.oMatchesSelector || Element.prototype.webkitMatchesSelector;
            Rails2.matches = function(element, selector) {
              if (selector.exclude != null) {
                return m.call(element, selector.selector) && !m.call(element, selector.exclude);
              } else {
                return m.call(element, selector);
              }
            };
            expando = "_ujsData";
            Rails2.getData = function(element, key) {
              var ref;
              return (ref = element[expando]) != null ? ref[key] : void 0;
            };
            Rails2.setData = function(element, key, value) {
              if (element[expando] == null) {
                element[expando] = {};
              }
              return element[expando][key] = value;
            };
            Rails2.$ = function(selector) {
              return Array.prototype.slice.call(document.querySelectorAll(selector));
            };
          }).call(this);
          (function() {
            var $2, csrfParam, csrfToken;
            $2 = Rails2.$;
            csrfToken = Rails2.csrfToken = function() {
              var meta;
              meta = document.querySelector("meta[name=csrf-token]");
              return meta && meta.content;
            };
            csrfParam = Rails2.csrfParam = function() {
              var meta;
              meta = document.querySelector("meta[name=csrf-param]");
              return meta && meta.content;
            };
            Rails2.CSRFProtection = function(xhr) {
              var token;
              token = csrfToken();
              if (token != null) {
                return xhr.setRequestHeader("X-CSRF-Token", token);
              }
            };
            Rails2.refreshCSRFTokens = function() {
              var param, token;
              token = csrfToken();
              param = csrfParam();
              if (token != null && param != null) {
                return $2('form input[name="' + param + '"]').forEach(function(input) {
                  return input.value = token;
                });
              }
            };
          }).call(this);
          (function() {
            var CustomEvent2, fire, matches, preventDefault;
            matches = Rails2.matches;
            CustomEvent2 = window.CustomEvent;
            if (typeof CustomEvent2 !== "function") {
              CustomEvent2 = function(event, params) {
                var evt;
                evt = document.createEvent("CustomEvent");
                evt.initCustomEvent(event, params.bubbles, params.cancelable, params.detail);
                return evt;
              };
              CustomEvent2.prototype = window.Event.prototype;
              preventDefault = CustomEvent2.prototype.preventDefault;
              CustomEvent2.prototype.preventDefault = function() {
                var result;
                result = preventDefault.call(this);
                if (this.cancelable && !this.defaultPrevented) {
                  Object.defineProperty(this, "defaultPrevented", {
                    get: function() {
                      return true;
                    }
                  });
                }
                return result;
              };
            }
            fire = Rails2.fire = function(obj, name, data) {
              var event;
              event = new CustomEvent2(name, {
                bubbles: true,
                cancelable: true,
                detail: data
              });
              obj.dispatchEvent(event);
              return !event.defaultPrevented;
            };
            Rails2.stopEverything = function(e) {
              fire(e.target, "ujs:everythingStopped");
              e.preventDefault();
              e.stopPropagation();
              return e.stopImmediatePropagation();
            };
            Rails2.delegate = function(element, selector, eventType, handler) {
              return element.addEventListener(eventType, function(e) {
                var target;
                target = e.target;
                while (!(!(target instanceof Element) || matches(target, selector))) {
                  target = target.parentNode;
                }
                if (target instanceof Element && handler.call(target, e) === false) {
                  e.preventDefault();
                  return e.stopPropagation();
                }
              });
            };
          }).call(this);
          (function() {
            var AcceptHeaders, CSRFProtection, createXHR, cspNonce, fire, prepareOptions, processResponse;
            cspNonce = Rails2.cspNonce, CSRFProtection = Rails2.CSRFProtection, fire = Rails2.fire;
            AcceptHeaders = {
              "*": "*/*",
              text: "text/plain",
              html: "text/html",
              xml: "application/xml, text/xml",
              json: "application/json, text/javascript",
              script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"
            };
            Rails2.ajax = function(options) {
              var xhr;
              options = prepareOptions(options);
              xhr = createXHR(options, function() {
                var ref, response;
                response = processResponse((ref = xhr.response) != null ? ref : xhr.responseText, xhr.getResponseHeader("Content-Type"));
                if (Math.floor(xhr.status / 100) === 2) {
                  if (typeof options.success === "function") {
                    options.success(response, xhr.statusText, xhr);
                  }
                } else {
                  if (typeof options.error === "function") {
                    options.error(response, xhr.statusText, xhr);
                  }
                }
                return typeof options.complete === "function" ? options.complete(xhr, xhr.statusText) : void 0;
              });
              if (options.beforeSend != null && !options.beforeSend(xhr, options)) {
                return false;
              }
              if (xhr.readyState === XMLHttpRequest.OPENED) {
                return xhr.send(options.data);
              }
            };
            prepareOptions = function(options) {
              options.url = options.url || location.href;
              options.type = options.type.toUpperCase();
              if (options.type === "GET" && options.data) {
                if (options.url.indexOf("?") < 0) {
                  options.url += "?" + options.data;
                } else {
                  options.url += "&" + options.data;
                }
              }
              if (AcceptHeaders[options.dataType] == null) {
                options.dataType = "*";
              }
              options.accept = AcceptHeaders[options.dataType];
              if (options.dataType !== "*") {
                options.accept += ", */*; q=0.01";
              }
              return options;
            };
            createXHR = function(options, done) {
              var xhr;
              xhr = new XMLHttpRequest();
              xhr.open(options.type, options.url, true);
              xhr.setRequestHeader("Accept", options.accept);
              if (typeof options.data === "string") {
                xhr.setRequestHeader("Content-Type", "application/x-www-form-urlencoded; charset=UTF-8");
              }
              if (!options.crossDomain) {
                xhr.setRequestHeader("X-Requested-With", "XMLHttpRequest");
                CSRFProtection(xhr);
              }
              xhr.withCredentials = !!options.withCredentials;
              xhr.onreadystatechange = function() {
                if (xhr.readyState === XMLHttpRequest.DONE) {
                  return done(xhr);
                }
              };
              return xhr;
            };
            processResponse = function(response, type) {
              var parser, script;
              if (typeof response === "string" && typeof type === "string") {
                if (type.match(/\bjson\b/)) {
                  try {
                    response = JSON.parse(response);
                  } catch (error) {
                  }
                } else if (type.match(/\b(?:java|ecma)script\b/)) {
                  script = document.createElement("script");
                  script.setAttribute("nonce", cspNonce());
                  script.text = response;
                  document.head.appendChild(script).parentNode.removeChild(script);
                } else if (type.match(/\b(xml|html|svg)\b/)) {
                  parser = new DOMParser();
                  type = type.replace(/;.+/, "");
                  try {
                    response = parser.parseFromString(response, type);
                  } catch (error) {
                  }
                }
              }
              return response;
            };
            Rails2.href = function(element) {
              return element.href;
            };
            Rails2.isCrossDomain = function(url) {
              var e, originAnchor, urlAnchor;
              originAnchor = document.createElement("a");
              originAnchor.href = location.href;
              urlAnchor = document.createElement("a");
              try {
                urlAnchor.href = url;
                return !((!urlAnchor.protocol || urlAnchor.protocol === ":") && !urlAnchor.host || originAnchor.protocol + "//" + originAnchor.host === urlAnchor.protocol + "//" + urlAnchor.host);
              } catch (error) {
                e = error;
                return true;
              }
            };
          }).call(this);
          (function() {
            var matches, toArray;
            matches = Rails2.matches;
            toArray = function(e) {
              return Array.prototype.slice.call(e);
            };
            Rails2.serializeElement = function(element, additionalParam) {
              var inputs, params;
              inputs = [element];
              if (matches(element, "form")) {
                inputs = toArray(element.elements);
              }
              params = [];
              inputs.forEach(function(input) {
                if (!input.name || input.disabled) {
                  return;
                }
                if (matches(input, "fieldset[disabled] *")) {
                  return;
                }
                if (matches(input, "select")) {
                  return toArray(input.options).forEach(function(option) {
                    if (option.selected) {
                      return params.push({
                        name: input.name,
                        value: option.value
                      });
                    }
                  });
                } else if (input.checked || ["radio", "checkbox", "submit"].indexOf(input.type) === -1) {
                  return params.push({
                    name: input.name,
                    value: input.value
                  });
                }
              });
              if (additionalParam) {
                params.push(additionalParam);
              }
              return params.map(function(param) {
                if (param.name != null) {
                  return encodeURIComponent(param.name) + "=" + encodeURIComponent(param.value);
                } else {
                  return param;
                }
              }).join("&");
            };
            Rails2.formElements = function(form, selector) {
              if (matches(form, "form")) {
                return toArray(form.elements).filter(function(el) {
                  return matches(el, selector);
                });
              } else {
                return toArray(form.querySelectorAll(selector));
              }
            };
          }).call(this);
          (function() {
            var allowAction, fire, stopEverything;
            fire = Rails2.fire, stopEverything = Rails2.stopEverything;
            Rails2.handleConfirm = function(e) {
              if (!allowAction(this)) {
                return stopEverything(e);
              }
            };
            Rails2.confirm = function(message, element) {
              return confirm(message);
            };
            allowAction = function(element) {
              var answer, callback, message;
              message = element.getAttribute("data-confirm");
              if (!message) {
                return true;
              }
              answer = false;
              if (fire(element, "confirm")) {
                try {
                  answer = Rails2.confirm(message, element);
                } catch (error) {
                }
                callback = fire(element, "confirm:complete", [answer]);
              }
              return answer && callback;
            };
          }).call(this);
          (function() {
            var disableFormElement, disableFormElements, disableLinkElement, enableFormElement, enableFormElements, enableLinkElement, formElements, getData, isXhrRedirect, matches, setData, stopEverything;
            matches = Rails2.matches, getData = Rails2.getData, setData = Rails2.setData, stopEverything = Rails2.stopEverything, formElements = Rails2.formElements;
            Rails2.handleDisabledElement = function(e) {
              var element;
              element = this;
              if (element.disabled) {
                return stopEverything(e);
              }
            };
            Rails2.enableElement = function(e) {
              var element;
              if (e instanceof Event) {
                if (isXhrRedirect(e)) {
                  return;
                }
                element = e.target;
              } else {
                element = e;
              }
              if (matches(element, Rails2.linkDisableSelector)) {
                return enableLinkElement(element);
              } else if (matches(element, Rails2.buttonDisableSelector) || matches(element, Rails2.formEnableSelector)) {
                return enableFormElement(element);
              } else if (matches(element, Rails2.formSubmitSelector)) {
                return enableFormElements(element);
              }
            };
            Rails2.disableElement = function(e) {
              var element;
              element = e instanceof Event ? e.target : e;
              if (matches(element, Rails2.linkDisableSelector)) {
                return disableLinkElement(element);
              } else if (matches(element, Rails2.buttonDisableSelector) || matches(element, Rails2.formDisableSelector)) {
                return disableFormElement(element);
              } else if (matches(element, Rails2.formSubmitSelector)) {
                return disableFormElements(element);
              }
            };
            disableLinkElement = function(element) {
              var replacement;
              if (getData(element, "ujs:disabled")) {
                return;
              }
              replacement = element.getAttribute("data-disable-with");
              if (replacement != null) {
                setData(element, "ujs:enable-with", element.innerHTML);
                element.innerHTML = replacement;
              }
              element.addEventListener("click", stopEverything);
              return setData(element, "ujs:disabled", true);
            };
            enableLinkElement = function(element) {
              var originalText;
              originalText = getData(element, "ujs:enable-with");
              if (originalText != null) {
                element.innerHTML = originalText;
                setData(element, "ujs:enable-with", null);
              }
              element.removeEventListener("click", stopEverything);
              return setData(element, "ujs:disabled", null);
            };
            disableFormElements = function(form) {
              return formElements(form, Rails2.formDisableSelector).forEach(disableFormElement);
            };
            disableFormElement = function(element) {
              var replacement;
              if (getData(element, "ujs:disabled")) {
                return;
              }
              replacement = element.getAttribute("data-disable-with");
              if (replacement != null) {
                if (matches(element, "button")) {
                  setData(element, "ujs:enable-with", element.innerHTML);
                  element.innerHTML = replacement;
                } else {
                  setData(element, "ujs:enable-with", element.value);
                  element.value = replacement;
                }
              }
              element.disabled = true;
              return setData(element, "ujs:disabled", true);
            };
            enableFormElements = function(form) {
              return formElements(form, Rails2.formEnableSelector).forEach(enableFormElement);
            };
            enableFormElement = function(element) {
              var originalText;
              originalText = getData(element, "ujs:enable-with");
              if (originalText != null) {
                if (matches(element, "button")) {
                  element.innerHTML = originalText;
                } else {
                  element.value = originalText;
                }
                setData(element, "ujs:enable-with", null);
              }
              element.disabled = false;
              return setData(element, "ujs:disabled", null);
            };
            isXhrRedirect = function(event) {
              var ref, xhr;
              xhr = (ref = event.detail) != null ? ref[0] : void 0;
              return (xhr != null ? xhr.getResponseHeader("X-Xhr-Redirect") : void 0) != null;
            };
          }).call(this);
          (function() {
            var stopEverything;
            stopEverything = Rails2.stopEverything;
            Rails2.handleMethod = function(e) {
              var csrfParam, csrfToken, form, formContent, href, link, method;
              link = this;
              method = link.getAttribute("data-method");
              if (!method) {
                return;
              }
              href = Rails2.href(link);
              csrfToken = Rails2.csrfToken();
              csrfParam = Rails2.csrfParam();
              form = document.createElement("form");
              formContent = "<input name='_method' value='" + method + "' type='hidden' />";
              if (csrfParam != null && csrfToken != null && !Rails2.isCrossDomain(href)) {
                formContent += "<input name='" + csrfParam + "' value='" + csrfToken + "' type='hidden' />";
              }
              formContent += '<input type="submit" />';
              form.method = "post";
              form.action = href;
              form.target = link.target;
              form.innerHTML = formContent;
              form.style.display = "none";
              document.body.appendChild(form);
              form.querySelector('[type="submit"]').click();
              return stopEverything(e);
            };
          }).call(this);
          (function() {
            var ajax, fire, getData, isCrossDomain, isRemote, matches, serializeElement, setData, stopEverything, slice = [].slice;
            matches = Rails2.matches, getData = Rails2.getData, setData = Rails2.setData, fire = Rails2.fire, stopEverything = Rails2.stopEverything, ajax = Rails2.ajax, isCrossDomain = Rails2.isCrossDomain, serializeElement = Rails2.serializeElement;
            isRemote = function(element) {
              var value;
              value = element.getAttribute("data-remote");
              return value != null && value !== "false";
            };
            Rails2.handleRemote = function(e) {
              var button, data, dataType, element, method, url, withCredentials;
              element = this;
              if (!isRemote(element)) {
                return true;
              }
              if (!fire(element, "ajax:before")) {
                fire(element, "ajax:stopped");
                return false;
              }
              withCredentials = element.getAttribute("data-with-credentials");
              dataType = element.getAttribute("data-type") || "script";
              if (matches(element, Rails2.formSubmitSelector)) {
                button = getData(element, "ujs:submit-button");
                method = getData(element, "ujs:submit-button-formmethod") || element.method;
                url = getData(element, "ujs:submit-button-formaction") || element.getAttribute("action") || location.href;
                if (method.toUpperCase() === "GET") {
                  url = url.replace(/\?.*$/, "");
                }
                if (element.enctype === "multipart/form-data") {
                  data = new FormData(element);
                  if (button != null) {
                    data.append(button.name, button.value);
                  }
                } else {
                  data = serializeElement(element, button);
                }
                setData(element, "ujs:submit-button", null);
                setData(element, "ujs:submit-button-formmethod", null);
                setData(element, "ujs:submit-button-formaction", null);
              } else if (matches(element, Rails2.buttonClickSelector) || matches(element, Rails2.inputChangeSelector)) {
                method = element.getAttribute("data-method");
                url = element.getAttribute("data-url");
                data = serializeElement(element, element.getAttribute("data-params"));
              } else {
                method = element.getAttribute("data-method");
                url = Rails2.href(element);
                data = element.getAttribute("data-params");
              }
              ajax({
                type: method || "GET",
                url,
                data,
                dataType,
                beforeSend: function(xhr, options) {
                  if (fire(element, "ajax:beforeSend", [xhr, options])) {
                    return fire(element, "ajax:send", [xhr]);
                  } else {
                    fire(element, "ajax:stopped");
                    return false;
                  }
                },
                success: function() {
                  var args;
                  args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
                  return fire(element, "ajax:success", args);
                },
                error: function() {
                  var args;
                  args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
                  return fire(element, "ajax:error", args);
                },
                complete: function() {
                  var args;
                  args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
                  return fire(element, "ajax:complete", args);
                },
                crossDomain: isCrossDomain(url),
                withCredentials: withCredentials != null && withCredentials !== "false"
              });
              return stopEverything(e);
            };
            Rails2.formSubmitButtonClick = function(e) {
              var button, form;
              button = this;
              form = button.form;
              if (!form) {
                return;
              }
              if (button.name) {
                setData(form, "ujs:submit-button", {
                  name: button.name,
                  value: button.value
                });
              }
              setData(form, "ujs:formnovalidate-button", button.formNoValidate);
              setData(form, "ujs:submit-button-formaction", button.getAttribute("formaction"));
              return setData(form, "ujs:submit-button-formmethod", button.getAttribute("formmethod"));
            };
            Rails2.preventInsignificantClick = function(e) {
              var data, insignificantMetaClick, link, metaClick, method, nonPrimaryMouseClick;
              link = this;
              method = (link.getAttribute("data-method") || "GET").toUpperCase();
              data = link.getAttribute("data-params");
              metaClick = e.metaKey || e.ctrlKey;
              insignificantMetaClick = metaClick && method === "GET" && !data;
              nonPrimaryMouseClick = e.button != null && e.button !== 0;
              if (nonPrimaryMouseClick || insignificantMetaClick) {
                return e.stopImmediatePropagation();
              }
            };
          }).call(this);
          (function() {
            var $2, CSRFProtection, delegate, disableElement, enableElement, fire, formSubmitButtonClick, getData, handleConfirm, handleDisabledElement, handleMethod, handleRemote, loadCSPNonce, preventInsignificantClick, refreshCSRFTokens;
            fire = Rails2.fire, delegate = Rails2.delegate, getData = Rails2.getData, $2 = Rails2.$, refreshCSRFTokens = Rails2.refreshCSRFTokens, CSRFProtection = Rails2.CSRFProtection, loadCSPNonce = Rails2.loadCSPNonce, enableElement = Rails2.enableElement, disableElement = Rails2.disableElement, handleDisabledElement = Rails2.handleDisabledElement, handleConfirm = Rails2.handleConfirm, preventInsignificantClick = Rails2.preventInsignificantClick, handleRemote = Rails2.handleRemote, formSubmitButtonClick = Rails2.formSubmitButtonClick, handleMethod = Rails2.handleMethod;
            if (typeof jQuery !== "undefined" && jQuery !== null && jQuery.ajax != null) {
              if (jQuery.rails) {
                throw new Error("If you load both jquery_ujs and rails-ujs, use rails-ujs only.");
              }
              jQuery.rails = Rails2;
              jQuery.ajaxPrefilter(function(options, originalOptions, xhr) {
                if (!options.crossDomain) {
                  return CSRFProtection(xhr);
                }
              });
            }
            Rails2.start = function() {
              if (window._rails_loaded) {
                throw new Error("rails-ujs has already been loaded!");
              }
              window.addEventListener("pageshow", function() {
                $2(Rails2.formEnableSelector).forEach(function(el) {
                  if (getData(el, "ujs:disabled")) {
                    return enableElement(el);
                  }
                });
                return $2(Rails2.linkDisableSelector).forEach(function(el) {
                  if (getData(el, "ujs:disabled")) {
                    return enableElement(el);
                  }
                });
              });
              delegate(document, Rails2.linkDisableSelector, "ajax:complete", enableElement);
              delegate(document, Rails2.linkDisableSelector, "ajax:stopped", enableElement);
              delegate(document, Rails2.buttonDisableSelector, "ajax:complete", enableElement);
              delegate(document, Rails2.buttonDisableSelector, "ajax:stopped", enableElement);
              delegate(document, Rails2.linkClickSelector, "click", preventInsignificantClick);
              delegate(document, Rails2.linkClickSelector, "click", handleDisabledElement);
              delegate(document, Rails2.linkClickSelector, "click", handleConfirm);
              delegate(document, Rails2.linkClickSelector, "click", disableElement);
              delegate(document, Rails2.linkClickSelector, "click", handleRemote);
              delegate(document, Rails2.linkClickSelector, "click", handleMethod);
              delegate(document, Rails2.buttonClickSelector, "click", preventInsignificantClick);
              delegate(document, Rails2.buttonClickSelector, "click", handleDisabledElement);
              delegate(document, Rails2.buttonClickSelector, "click", handleConfirm);
              delegate(document, Rails2.buttonClickSelector, "click", disableElement);
              delegate(document, Rails2.buttonClickSelector, "click", handleRemote);
              delegate(document, Rails2.inputChangeSelector, "change", handleDisabledElement);
              delegate(document, Rails2.inputChangeSelector, "change", handleConfirm);
              delegate(document, Rails2.inputChangeSelector, "change", handleRemote);
              delegate(document, Rails2.formSubmitSelector, "submit", handleDisabledElement);
              delegate(document, Rails2.formSubmitSelector, "submit", handleConfirm);
              delegate(document, Rails2.formSubmitSelector, "submit", handleRemote);
              delegate(document, Rails2.formSubmitSelector, "submit", function(e) {
                return setTimeout(function() {
                  return disableElement(e);
                }, 13);
              });
              delegate(document, Rails2.formSubmitSelector, "ajax:send", disableElement);
              delegate(document, Rails2.formSubmitSelector, "ajax:complete", enableElement);
              delegate(document, Rails2.formInputClickSelector, "click", preventInsignificantClick);
              delegate(document, Rails2.formInputClickSelector, "click", handleDisabledElement);
              delegate(document, Rails2.formInputClickSelector, "click", handleConfirm);
              delegate(document, Rails2.formInputClickSelector, "click", formSubmitButtonClick);
              document.addEventListener("DOMContentLoaded", refreshCSRFTokens);
              document.addEventListener("DOMContentLoaded", loadCSPNonce);
              return window._rails_loaded = true;
            };
            if (window.Rails === Rails2 && fire(document, "rails:attachBindings")) {
              Rails2.start();
            }
          }).call(this);
        }).call(this);
        if (typeof module === "object" && module.exports) {
          module.exports = Rails2;
        } else if (typeof define === "function" && define.amd) {
          define(Rails2);
        }
      }).call(exports);
    }
  });

  // node_modules/turbolinks/dist/turbolinks.js
  var require_turbolinks = __commonJS({
    "node_modules/turbolinks/dist/turbolinks.js"(exports, module) {
      (function() {
        var t = this;
        (function() {
          (function() {
            this.Turbolinks = { supported: function() {
              return null != window.history.pushState && null != window.requestAnimationFrame && null != window.addEventListener;
            }(), visit: function(t2, r) {
              return e.controller.visit(t2, r);
            }, clearCache: function() {
              return e.controller.clearCache();
            }, setProgressBarDelay: function(t2) {
              return e.controller.setProgressBarDelay(t2);
            } };
          }).call(this);
        }).call(t);
        var e = t.Turbolinks;
        (function() {
          (function() {
            var t2, r, n, o = [].slice;
            e.copyObject = function(t3) {
              var e2, r2, n2;
              r2 = {};
              for (e2 in t3)
                n2 = t3[e2], r2[e2] = n2;
              return r2;
            }, e.closest = function(e2, r2) {
              return t2.call(e2, r2);
            }, t2 = function() {
              var t3, e2;
              return t3 = document.documentElement, null != (e2 = t3.closest) ? e2 : function(t4) {
                var e3;
                for (e3 = this; e3; ) {
                  if (e3.nodeType === Node.ELEMENT_NODE && r.call(e3, t4))
                    return e3;
                  e3 = e3.parentNode;
                }
              };
            }(), e.defer = function(t3) {
              return setTimeout(t3, 1);
            }, e.throttle = function(t3) {
              var e2;
              return e2 = null, function() {
                var r2;
                return r2 = 1 <= arguments.length ? o.call(arguments, 0) : [], null != e2 ? e2 : e2 = requestAnimationFrame(/* @__PURE__ */ function(n2) {
                  return function() {
                    return e2 = null, t3.apply(n2, r2);
                  };
                }(this));
              };
            }, e.dispatch = function(t3, e2) {
              var r2, o2, i, s, a, u;
              return a = null != e2 ? e2 : {}, u = a.target, r2 = a.cancelable, o2 = a.data, i = document.createEvent("Events"), i.initEvent(t3, true, r2 === true), i.data = null != o2 ? o2 : {}, i.cancelable && !n && (s = i.preventDefault, i.preventDefault = function() {
                return this.defaultPrevented || Object.defineProperty(this, "defaultPrevented", { get: function() {
                  return true;
                } }), s.call(this);
              }), (null != u ? u : document).dispatchEvent(i), i;
            }, n = function() {
              var t3;
              return t3 = document.createEvent("Events"), t3.initEvent("test", true, true), t3.preventDefault(), t3.defaultPrevented;
            }(), e.match = function(t3, e2) {
              return r.call(t3, e2);
            }, r = function() {
              var t3, e2, r2, n2;
              return t3 = document.documentElement, null != (e2 = null != (r2 = null != (n2 = t3.matchesSelector) ? n2 : t3.webkitMatchesSelector) ? r2 : t3.msMatchesSelector) ? e2 : t3.mozMatchesSelector;
            }(), e.uuid = function() {
              var t3, e2, r2;
              for (r2 = "", t3 = e2 = 1; 36 >= e2; t3 = ++e2)
                r2 += 9 === t3 || 14 === t3 || 19 === t3 || 24 === t3 ? "-" : 15 === t3 ? "4" : 20 === t3 ? (Math.floor(4 * Math.random()) + 8).toString(16) : Math.floor(15 * Math.random()).toString(16);
              return r2;
            };
          }).call(this), function() {
            e.Location = function() {
              function t2(t3) {
                var e3, r2;
                null == t3 && (t3 = ""), r2 = document.createElement("a"), r2.href = t3.toString(), this.absoluteURL = r2.href, e3 = r2.hash.length, 2 > e3 ? this.requestURL = this.absoluteURL : (this.requestURL = this.absoluteURL.slice(0, -e3), this.anchor = r2.hash.slice(1));
              }
              var e2, r, n, o;
              return t2.wrap = function(t3) {
                return t3 instanceof this ? t3 : new this(t3);
              }, t2.prototype.getOrigin = function() {
                return this.absoluteURL.split("/", 3).join("/");
              }, t2.prototype.getPath = function() {
                var t3, e3;
                return null != (t3 = null != (e3 = this.requestURL.match(/\/\/[^\/]*(\/[^?;]*)/)) ? e3[1] : void 0) ? t3 : "/";
              }, t2.prototype.getPathComponents = function() {
                return this.getPath().split("/").slice(1);
              }, t2.prototype.getLastPathComponent = function() {
                return this.getPathComponents().slice(-1)[0];
              }, t2.prototype.getExtension = function() {
                var t3, e3;
                return null != (t3 = null != (e3 = this.getLastPathComponent().match(/\.[^.]*$/)) ? e3[0] : void 0) ? t3 : "";
              }, t2.prototype.isHTML = function() {
                return this.getExtension().match(/^(?:|\.(?:htm|html|xhtml))$/);
              }, t2.prototype.isPrefixedBy = function(t3) {
                var e3;
                return e3 = r(t3), this.isEqualTo(t3) || o(this.absoluteURL, e3);
              }, t2.prototype.isEqualTo = function(t3) {
                return this.absoluteURL === (null != t3 ? t3.absoluteURL : void 0);
              }, t2.prototype.toCacheKey = function() {
                return this.requestURL;
              }, t2.prototype.toJSON = function() {
                return this.absoluteURL;
              }, t2.prototype.toString = function() {
                return this.absoluteURL;
              }, t2.prototype.valueOf = function() {
                return this.absoluteURL;
              }, r = function(t3) {
                return e2(t3.getOrigin() + t3.getPath());
              }, e2 = function(t3) {
                return n(t3, "/") ? t3 : t3 + "/";
              }, o = function(t3, e3) {
                return t3.slice(0, e3.length) === e3;
              }, n = function(t3, e3) {
                return t3.slice(-e3.length) === e3;
              }, t2;
            }();
          }.call(this), function() {
            var t2 = function(t3, e2) {
              return function() {
                return t3.apply(e2, arguments);
              };
            };
            e.HttpRequest = function() {
              function r(r2, n, o) {
                this.delegate = r2, this.requestCanceled = t2(this.requestCanceled, this), this.requestTimedOut = t2(this.requestTimedOut, this), this.requestFailed = t2(this.requestFailed, this), this.requestLoaded = t2(this.requestLoaded, this), this.requestProgressed = t2(this.requestProgressed, this), this.url = e.Location.wrap(n).requestURL, this.referrer = e.Location.wrap(o).absoluteURL, this.createXHR();
              }
              return r.NETWORK_FAILURE = 0, r.TIMEOUT_FAILURE = -1, r.timeout = 60, r.prototype.send = function() {
                var t3;
                return this.xhr && !this.sent ? (this.notifyApplicationBeforeRequestStart(), this.setProgress(0), this.xhr.send(), this.sent = true, "function" == typeof (t3 = this.delegate).requestStarted ? t3.requestStarted() : void 0) : void 0;
              }, r.prototype.cancel = function() {
                return this.xhr && this.sent ? this.xhr.abort() : void 0;
              }, r.prototype.requestProgressed = function(t3) {
                return t3.lengthComputable ? this.setProgress(t3.loaded / t3.total) : void 0;
              }, r.prototype.requestLoaded = function() {
                return this.endRequest(/* @__PURE__ */ function(t3) {
                  return function() {
                    var e2;
                    return 200 <= (e2 = t3.xhr.status) && 300 > e2 ? t3.delegate.requestCompletedWithResponse(t3.xhr.responseText, t3.xhr.getResponseHeader("Turbolinks-Location")) : (t3.failed = true, t3.delegate.requestFailedWithStatusCode(t3.xhr.status, t3.xhr.responseText));
                  };
                }(this));
              }, r.prototype.requestFailed = function() {
                return this.endRequest(/* @__PURE__ */ function(t3) {
                  return function() {
                    return t3.failed = true, t3.delegate.requestFailedWithStatusCode(t3.constructor.NETWORK_FAILURE);
                  };
                }(this));
              }, r.prototype.requestTimedOut = function() {
                return this.endRequest(/* @__PURE__ */ function(t3) {
                  return function() {
                    return t3.failed = true, t3.delegate.requestFailedWithStatusCode(t3.constructor.TIMEOUT_FAILURE);
                  };
                }(this));
              }, r.prototype.requestCanceled = function() {
                return this.endRequest();
              }, r.prototype.notifyApplicationBeforeRequestStart = function() {
                return e.dispatch("turbolinks:request-start", { data: { url: this.url, xhr: this.xhr } });
              }, r.prototype.notifyApplicationAfterRequestEnd = function() {
                return e.dispatch("turbolinks:request-end", { data: { url: this.url, xhr: this.xhr } });
              }, r.prototype.createXHR = function() {
                return this.xhr = new XMLHttpRequest(), this.xhr.open("GET", this.url, true), this.xhr.timeout = 1e3 * this.constructor.timeout, this.xhr.setRequestHeader("Accept", "text/html, application/xhtml+xml"), this.xhr.setRequestHeader("Turbolinks-Referrer", this.referrer), this.xhr.onprogress = this.requestProgressed, this.xhr.onload = this.requestLoaded, this.xhr.onerror = this.requestFailed, this.xhr.ontimeout = this.requestTimedOut, this.xhr.onabort = this.requestCanceled;
              }, r.prototype.endRequest = function(t3) {
                return this.xhr ? (this.notifyApplicationAfterRequestEnd(), null != t3 && t3.call(this), this.destroy()) : void 0;
              }, r.prototype.setProgress = function(t3) {
                var e2;
                return this.progress = t3, "function" == typeof (e2 = this.delegate).requestProgressed ? e2.requestProgressed(this.progress) : void 0;
              }, r.prototype.destroy = function() {
                var t3;
                return this.setProgress(1), "function" == typeof (t3 = this.delegate).requestFinished && t3.requestFinished(), this.delegate = null, this.xhr = null;
              }, r;
            }();
          }.call(this), function() {
            var t2 = function(t3, e2) {
              return function() {
                return t3.apply(e2, arguments);
              };
            };
            e.ProgressBar = function() {
              function e2() {
                this.trickle = t2(this.trickle, this), this.stylesheetElement = this.createStylesheetElement(), this.progressElement = this.createProgressElement();
              }
              var r;
              return r = 300, e2.defaultCSS = ".turbolinks-progress-bar {\n  position: fixed;\n  display: block;\n  top: 0;\n  left: 0;\n  height: 3px;\n  background: #0076ff;\n  z-index: 9999;\n  transition: width " + r + "ms ease-out, opacity " + r / 2 + "ms " + r / 2 + "ms ease-in;\n  transform: translate3d(0, 0, 0);\n}", e2.prototype.show = function() {
                return this.visible ? void 0 : (this.visible = true, this.installStylesheetElement(), this.installProgressElement(), this.startTrickling());
              }, e2.prototype.hide = function() {
                return this.visible && !this.hiding ? (this.hiding = true, this.fadeProgressElement(/* @__PURE__ */ function(t3) {
                  return function() {
                    return t3.uninstallProgressElement(), t3.stopTrickling(), t3.visible = false, t3.hiding = false;
                  };
                }(this))) : void 0;
              }, e2.prototype.setValue = function(t3) {
                return this.value = t3, this.refresh();
              }, e2.prototype.installStylesheetElement = function() {
                return document.head.insertBefore(this.stylesheetElement, document.head.firstChild);
              }, e2.prototype.installProgressElement = function() {
                return this.progressElement.style.width = 0, this.progressElement.style.opacity = 1, document.documentElement.insertBefore(this.progressElement, document.body), this.refresh();
              }, e2.prototype.fadeProgressElement = function(t3) {
                return this.progressElement.style.opacity = 0, setTimeout(t3, 1.5 * r);
              }, e2.prototype.uninstallProgressElement = function() {
                return this.progressElement.parentNode ? document.documentElement.removeChild(this.progressElement) : void 0;
              }, e2.prototype.startTrickling = function() {
                return null != this.trickleInterval ? this.trickleInterval : this.trickleInterval = setInterval(this.trickle, r);
              }, e2.prototype.stopTrickling = function() {
                return clearInterval(this.trickleInterval), this.trickleInterval = null;
              }, e2.prototype.trickle = function() {
                return this.setValue(this.value + Math.random() / 100);
              }, e2.prototype.refresh = function() {
                return requestAnimationFrame(/* @__PURE__ */ function(t3) {
                  return function() {
                    return t3.progressElement.style.width = 10 + 90 * t3.value + "%";
                  };
                }(this));
              }, e2.prototype.createStylesheetElement = function() {
                var t3;
                return t3 = document.createElement("style"), t3.type = "text/css", t3.textContent = this.constructor.defaultCSS, t3;
              }, e2.prototype.createProgressElement = function() {
                var t3;
                return t3 = document.createElement("div"), t3.className = "turbolinks-progress-bar", t3;
              }, e2;
            }();
          }.call(this), function() {
            var t2 = function(t3, e2) {
              return function() {
                return t3.apply(e2, arguments);
              };
            };
            e.BrowserAdapter = function() {
              function r(r2) {
                this.controller = r2, this.showProgressBar = t2(this.showProgressBar, this), this.progressBar = new e.ProgressBar();
              }
              var n, o, i;
              return i = e.HttpRequest, n = i.NETWORK_FAILURE, o = i.TIMEOUT_FAILURE, r.prototype.visitProposedToLocationWithAction = function(t3, e2) {
                return this.controller.startVisitToLocationWithAction(t3, e2);
              }, r.prototype.visitStarted = function(t3) {
                return t3.issueRequest(), t3.changeHistory(), t3.loadCachedSnapshot();
              }, r.prototype.visitRequestStarted = function(t3) {
                return this.progressBar.setValue(0), t3.hasCachedSnapshot() || "restore" !== t3.action ? this.showProgressBarAfterDelay() : this.showProgressBar();
              }, r.prototype.visitRequestProgressed = function(t3) {
                return this.progressBar.setValue(t3.progress);
              }, r.prototype.visitRequestCompleted = function(t3) {
                return t3.loadResponse();
              }, r.prototype.visitRequestFailedWithStatusCode = function(t3, e2) {
                switch (e2) {
                  case n:
                  case o:
                    return this.reload();
                  default:
                    return t3.loadResponse();
                }
              }, r.prototype.visitRequestFinished = function(t3) {
                return this.hideProgressBar();
              }, r.prototype.visitCompleted = function(t3) {
                return t3.followRedirect();
              }, r.prototype.pageInvalidated = function() {
                return this.reload();
              }, r.prototype.showProgressBarAfterDelay = function() {
                return this.progressBarTimeout = setTimeout(this.showProgressBar, this.controller.progressBarDelay);
              }, r.prototype.showProgressBar = function() {
                return this.progressBar.show();
              }, r.prototype.hideProgressBar = function() {
                return this.progressBar.hide(), clearTimeout(this.progressBarTimeout);
              }, r.prototype.reload = function() {
                return window.location.reload();
              }, r;
            }();
          }.call(this), function() {
            var t2 = function(t3, e2) {
              return function() {
                return t3.apply(e2, arguments);
              };
            };
            e.History = function() {
              function r(e2) {
                this.delegate = e2, this.onPageLoad = t2(this.onPageLoad, this), this.onPopState = t2(this.onPopState, this);
              }
              return r.prototype.start = function() {
                return this.started ? void 0 : (addEventListener("popstate", this.onPopState, false), addEventListener("load", this.onPageLoad, false), this.started = true);
              }, r.prototype.stop = function() {
                return this.started ? (removeEventListener("popstate", this.onPopState, false), removeEventListener("load", this.onPageLoad, false), this.started = false) : void 0;
              }, r.prototype.push = function(t3, r2) {
                return t3 = e.Location.wrap(t3), this.update("push", t3, r2);
              }, r.prototype.replace = function(t3, r2) {
                return t3 = e.Location.wrap(t3), this.update("replace", t3, r2);
              }, r.prototype.onPopState = function(t3) {
                var r2, n, o, i;
                return this.shouldHandlePopState() && (i = null != (n = t3.state) ? n.turbolinks : void 0) ? (r2 = e.Location.wrap(window.location), o = i.restorationIdentifier, this.delegate.historyPoppedToLocationWithRestorationIdentifier(r2, o)) : void 0;
              }, r.prototype.onPageLoad = function(t3) {
                return e.defer(/* @__PURE__ */ function(t4) {
                  return function() {
                    return t4.pageLoaded = true;
                  };
                }(this));
              }, r.prototype.shouldHandlePopState = function() {
                return this.pageIsLoaded();
              }, r.prototype.pageIsLoaded = function() {
                return this.pageLoaded || "complete" === document.readyState;
              }, r.prototype.update = function(t3, e2, r2) {
                var n;
                return n = { turbolinks: { restorationIdentifier: r2 } }, history[t3 + "State"](n, null, e2);
              }, r;
            }();
          }.call(this), function() {
            e.HeadDetails = function() {
              function t2(t3) {
                var e3, r2, n2, s, a, u;
                for (this.elements = {}, n2 = 0, a = t3.length; a > n2; n2++)
                  u = t3[n2], u.nodeType === Node.ELEMENT_NODE && (s = u.outerHTML, r2 = null != (e3 = this.elements)[s] ? e3[s] : e3[s] = { type: i(u), tracked: o(u), elements: [] }, r2.elements.push(u));
              }
              var e2, r, n, o, i;
              return t2.fromHeadElement = function(t3) {
                var e3;
                return new this(null != (e3 = null != t3 ? t3.childNodes : void 0) ? e3 : []);
              }, t2.prototype.hasElementWithKey = function(t3) {
                return t3 in this.elements;
              }, t2.prototype.getTrackedElementSignature = function() {
                var t3, e3;
                return function() {
                  var r2, n2;
                  r2 = this.elements, n2 = [];
                  for (t3 in r2)
                    e3 = r2[t3].tracked, e3 && n2.push(t3);
                  return n2;
                }.call(this).join("");
              }, t2.prototype.getScriptElementsNotInDetails = function(t3) {
                return this.getElementsMatchingTypeNotInDetails("script", t3);
              }, t2.prototype.getStylesheetElementsNotInDetails = function(t3) {
                return this.getElementsMatchingTypeNotInDetails("stylesheet", t3);
              }, t2.prototype.getElementsMatchingTypeNotInDetails = function(t3, e3) {
                var r2, n2, o2, i2, s, a;
                o2 = this.elements, s = [];
                for (n2 in o2)
                  i2 = o2[n2], a = i2.type, r2 = i2.elements, a !== t3 || e3.hasElementWithKey(n2) || s.push(r2[0]);
                return s;
              }, t2.prototype.getProvisionalElements = function() {
                var t3, e3, r2, n2, o2, i2, s;
                r2 = [], n2 = this.elements;
                for (e3 in n2)
                  o2 = n2[e3], s = o2.type, i2 = o2.tracked, t3 = o2.elements, null != s || i2 ? t3.length > 1 && r2.push.apply(r2, t3.slice(1)) : r2.push.apply(r2, t3);
                return r2;
              }, t2.prototype.getMetaValue = function(t3) {
                var e3;
                return null != (e3 = this.findMetaElementByName(t3)) ? e3.getAttribute("content") : void 0;
              }, t2.prototype.findMetaElementByName = function(t3) {
                var r2, n2, o2, i2;
                r2 = void 0, i2 = this.elements;
                for (o2 in i2)
                  n2 = i2[o2].elements, e2(n2[0], t3) && (r2 = n2[0]);
                return r2;
              }, i = function(t3) {
                return r(t3) ? "script" : n(t3) ? "stylesheet" : void 0;
              }, o = function(t3) {
                return "reload" === t3.getAttribute("data-turbolinks-track");
              }, r = function(t3) {
                var e3;
                return e3 = t3.tagName.toLowerCase(), "script" === e3;
              }, n = function(t3) {
                var e3;
                return e3 = t3.tagName.toLowerCase(), "style" === e3 || "link" === e3 && "stylesheet" === t3.getAttribute("rel");
              }, e2 = function(t3, e3) {
                var r2;
                return r2 = t3.tagName.toLowerCase(), "meta" === r2 && t3.getAttribute("name") === e3;
              }, t2;
            }();
          }.call(this), function() {
            e.Snapshot = function() {
              function t2(t3, e2) {
                this.headDetails = t3, this.bodyElement = e2;
              }
              return t2.wrap = function(t3) {
                return t3 instanceof this ? t3 : "string" == typeof t3 ? this.fromHTMLString(t3) : this.fromHTMLElement(t3);
              }, t2.fromHTMLString = function(t3) {
                var e2;
                return e2 = document.createElement("html"), e2.innerHTML = t3, this.fromHTMLElement(e2);
              }, t2.fromHTMLElement = function(t3) {
                var r, n, o, i;
                return o = t3.querySelector("head"), r = null != (i = t3.querySelector("body")) ? i : document.createElement("body"), n = e.HeadDetails.fromHeadElement(o), new this(n, r);
              }, t2.prototype.clone = function() {
                return new this.constructor(this.headDetails, this.bodyElement.cloneNode(true));
              }, t2.prototype.getRootLocation = function() {
                var t3, r;
                return r = null != (t3 = this.getSetting("root")) ? t3 : "/", new e.Location(r);
              }, t2.prototype.getCacheControlValue = function() {
                return this.getSetting("cache-control");
              }, t2.prototype.getElementForAnchor = function(t3) {
                try {
                  return this.bodyElement.querySelector("[id='" + t3 + "'], a[name='" + t3 + "']");
                } catch (e2) {
                }
              }, t2.prototype.getPermanentElements = function() {
                return this.bodyElement.querySelectorAll("[id][data-turbolinks-permanent]");
              }, t2.prototype.getPermanentElementById = function(t3) {
                return this.bodyElement.querySelector("#" + t3 + "[data-turbolinks-permanent]");
              }, t2.prototype.getPermanentElementsPresentInSnapshot = function(t3) {
                var e2, r, n, o, i;
                for (o = this.getPermanentElements(), i = [], r = 0, n = o.length; n > r; r++)
                  e2 = o[r], t3.getPermanentElementById(e2.id) && i.push(e2);
                return i;
              }, t2.prototype.findFirstAutofocusableElement = function() {
                return this.bodyElement.querySelector("[autofocus]");
              }, t2.prototype.hasAnchor = function(t3) {
                return null != this.getElementForAnchor(t3);
              }, t2.prototype.isPreviewable = function() {
                return "no-preview" !== this.getCacheControlValue();
              }, t2.prototype.isCacheable = function() {
                return "no-cache" !== this.getCacheControlValue();
              }, t2.prototype.isVisitable = function() {
                return "reload" !== this.getSetting("visit-control");
              }, t2.prototype.getSetting = function(t3) {
                return this.headDetails.getMetaValue("turbolinks-" + t3);
              }, t2;
            }();
          }.call(this), function() {
            var t2 = [].slice;
            e.Renderer = function() {
              function e2() {
              }
              var r;
              return e2.render = function() {
                var e3, r2, n, o;
                return n = arguments[0], r2 = arguments[1], e3 = 3 <= arguments.length ? t2.call(arguments, 2) : [], o = function(t3, e4, r3) {
                  r3.prototype = t3.prototype;
                  var n2 = new r3(), o2 = t3.apply(n2, e4);
                  return Object(o2) === o2 ? o2 : n2;
                }(this, e3, function() {
                }), o.delegate = n, o.render(r2), o;
              }, e2.prototype.renderView = function(t3) {
                return this.delegate.viewWillRender(this.newBody), t3(), this.delegate.viewRendered(this.newBody);
              }, e2.prototype.invalidateView = function() {
                return this.delegate.viewInvalidated();
              }, e2.prototype.createScriptElement = function(t3) {
                var e3;
                return "false" === t3.getAttribute("data-turbolinks-eval") ? t3 : (e3 = document.createElement("script"), e3.textContent = t3.textContent, e3.async = false, r(e3, t3), e3);
              }, r = function(t3, e3) {
                var r2, n, o, i, s, a, u;
                for (i = e3.attributes, a = [], r2 = 0, n = i.length; n > r2; r2++)
                  s = i[r2], o = s.name, u = s.value, a.push(t3.setAttribute(o, u));
                return a;
              }, e2;
            }();
          }.call(this), function() {
            var t2, r, n = function(t3, e2) {
              function r2() {
                this.constructor = t3;
              }
              for (var n2 in e2)
                o.call(e2, n2) && (t3[n2] = e2[n2]);
              return r2.prototype = e2.prototype, t3.prototype = new r2(), t3.__super__ = e2.prototype, t3;
            }, o = {}.hasOwnProperty;
            e.SnapshotRenderer = function(e2) {
              function o2(t3, e3, r2) {
                this.currentSnapshot = t3, this.newSnapshot = e3, this.isPreview = r2, this.currentHeadDetails = this.currentSnapshot.headDetails, this.newHeadDetails = this.newSnapshot.headDetails, this.currentBody = this.currentSnapshot.bodyElement, this.newBody = this.newSnapshot.bodyElement;
              }
              return n(o2, e2), o2.prototype.render = function(t3) {
                return this.shouldRender() ? (this.mergeHead(), this.renderView(/* @__PURE__ */ function(e3) {
                  return function() {
                    return e3.replaceBody(), e3.isPreview || e3.focusFirstAutofocusableElement(), t3();
                  };
                }(this))) : this.invalidateView();
              }, o2.prototype.mergeHead = function() {
                return this.copyNewHeadStylesheetElements(), this.copyNewHeadScriptElements(), this.removeCurrentHeadProvisionalElements(), this.copyNewHeadProvisionalElements();
              }, o2.prototype.replaceBody = function() {
                var t3;
                return t3 = this.relocateCurrentBodyPermanentElements(), this.activateNewBodyScriptElements(), this.assignNewBody(), this.replacePlaceholderElementsWithClonedPermanentElements(t3);
              }, o2.prototype.shouldRender = function() {
                return this.newSnapshot.isVisitable() && this.trackedElementsAreIdentical();
              }, o2.prototype.trackedElementsAreIdentical = function() {
                return this.currentHeadDetails.getTrackedElementSignature() === this.newHeadDetails.getTrackedElementSignature();
              }, o2.prototype.copyNewHeadStylesheetElements = function() {
                var t3, e3, r2, n2, o3;
                for (n2 = this.getNewHeadStylesheetElements(), o3 = [], e3 = 0, r2 = n2.length; r2 > e3; e3++)
                  t3 = n2[e3], o3.push(document.head.appendChild(t3));
                return o3;
              }, o2.prototype.copyNewHeadScriptElements = function() {
                var t3, e3, r2, n2, o3;
                for (n2 = this.getNewHeadScriptElements(), o3 = [], e3 = 0, r2 = n2.length; r2 > e3; e3++)
                  t3 = n2[e3], o3.push(document.head.appendChild(this.createScriptElement(t3)));
                return o3;
              }, o2.prototype.removeCurrentHeadProvisionalElements = function() {
                var t3, e3, r2, n2, o3;
                for (n2 = this.getCurrentHeadProvisionalElements(), o3 = [], e3 = 0, r2 = n2.length; r2 > e3; e3++)
                  t3 = n2[e3], o3.push(document.head.removeChild(t3));
                return o3;
              }, o2.prototype.copyNewHeadProvisionalElements = function() {
                var t3, e3, r2, n2, o3;
                for (n2 = this.getNewHeadProvisionalElements(), o3 = [], e3 = 0, r2 = n2.length; r2 > e3; e3++)
                  t3 = n2[e3], o3.push(document.head.appendChild(t3));
                return o3;
              }, o2.prototype.relocateCurrentBodyPermanentElements = function() {
                var e3, n2, o3, i, s, a, u;
                for (a = this.getCurrentBodyPermanentElements(), u = [], e3 = 0, n2 = a.length; n2 > e3; e3++)
                  i = a[e3], s = t2(i), o3 = this.newSnapshot.getPermanentElementById(i.id), r(i, s.element), r(o3, i), u.push(s);
                return u;
              }, o2.prototype.replacePlaceholderElementsWithClonedPermanentElements = function(t3) {
                var e3, n2, o3, i, s, a, u;
                for (u = [], o3 = 0, i = t3.length; i > o3; o3++)
                  a = t3[o3], n2 = a.element, s = a.permanentElement, e3 = s.cloneNode(true), u.push(r(n2, e3));
                return u;
              }, o2.prototype.activateNewBodyScriptElements = function() {
                var t3, e3, n2, o3, i, s;
                for (i = this.getNewBodyScriptElements(), s = [], e3 = 0, o3 = i.length; o3 > e3; e3++)
                  n2 = i[e3], t3 = this.createScriptElement(n2), s.push(r(n2, t3));
                return s;
              }, o2.prototype.assignNewBody = function() {
                return document.body = this.newBody;
              }, o2.prototype.focusFirstAutofocusableElement = function() {
                var t3;
                return null != (t3 = this.newSnapshot.findFirstAutofocusableElement()) ? t3.focus() : void 0;
              }, o2.prototype.getNewHeadStylesheetElements = function() {
                return this.newHeadDetails.getStylesheetElementsNotInDetails(this.currentHeadDetails);
              }, o2.prototype.getNewHeadScriptElements = function() {
                return this.newHeadDetails.getScriptElementsNotInDetails(this.currentHeadDetails);
              }, o2.prototype.getCurrentHeadProvisionalElements = function() {
                return this.currentHeadDetails.getProvisionalElements();
              }, o2.prototype.getNewHeadProvisionalElements = function() {
                return this.newHeadDetails.getProvisionalElements();
              }, o2.prototype.getCurrentBodyPermanentElements = function() {
                return this.currentSnapshot.getPermanentElementsPresentInSnapshot(this.newSnapshot);
              }, o2.prototype.getNewBodyScriptElements = function() {
                return this.newBody.querySelectorAll("script");
              }, o2;
            }(e.Renderer), t2 = function(t3) {
              var e2;
              return e2 = document.createElement("meta"), e2.setAttribute("name", "turbolinks-permanent-placeholder"), e2.setAttribute("content", t3.id), { element: e2, permanentElement: t3 };
            }, r = function(t3, e2) {
              var r2;
              return (r2 = t3.parentNode) ? r2.replaceChild(e2, t3) : void 0;
            };
          }.call(this), function() {
            var t2 = function(t3, e2) {
              function n() {
                this.constructor = t3;
              }
              for (var o in e2)
                r.call(e2, o) && (t3[o] = e2[o]);
              return n.prototype = e2.prototype, t3.prototype = new n(), t3.__super__ = e2.prototype, t3;
            }, r = {}.hasOwnProperty;
            e.ErrorRenderer = function(e2) {
              function r2(t3) {
                var e3;
                e3 = document.createElement("html"), e3.innerHTML = t3, this.newHead = e3.querySelector("head"), this.newBody = e3.querySelector("body");
              }
              return t2(r2, e2), r2.prototype.render = function(t3) {
                return this.renderView(/* @__PURE__ */ function(e3) {
                  return function() {
                    return e3.replaceHeadAndBody(), e3.activateBodyScriptElements(), t3();
                  };
                }(this));
              }, r2.prototype.replaceHeadAndBody = function() {
                var t3, e3;
                return e3 = document.head, t3 = document.body, e3.parentNode.replaceChild(this.newHead, e3), t3.parentNode.replaceChild(this.newBody, t3);
              }, r2.prototype.activateBodyScriptElements = function() {
                var t3, e3, r3, n, o, i;
                for (n = this.getScriptElements(), i = [], e3 = 0, r3 = n.length; r3 > e3; e3++)
                  o = n[e3], t3 = this.createScriptElement(o), i.push(o.parentNode.replaceChild(t3, o));
                return i;
              }, r2.prototype.getScriptElements = function() {
                return document.documentElement.querySelectorAll("script");
              }, r2;
            }(e.Renderer);
          }.call(this), function() {
            e.View = function() {
              function t2(t3) {
                this.delegate = t3, this.htmlElement = document.documentElement;
              }
              return t2.prototype.getRootLocation = function() {
                return this.getSnapshot().getRootLocation();
              }, t2.prototype.getElementForAnchor = function(t3) {
                return this.getSnapshot().getElementForAnchor(t3);
              }, t2.prototype.getSnapshot = function() {
                return e.Snapshot.fromHTMLElement(this.htmlElement);
              }, t2.prototype.render = function(t3, e2) {
                var r, n, o;
                return o = t3.snapshot, r = t3.error, n = t3.isPreview, this.markAsPreview(n), null != o ? this.renderSnapshot(o, n, e2) : this.renderError(r, e2);
              }, t2.prototype.markAsPreview = function(t3) {
                return t3 ? this.htmlElement.setAttribute("data-turbolinks-preview", "") : this.htmlElement.removeAttribute("data-turbolinks-preview");
              }, t2.prototype.renderSnapshot = function(t3, r, n) {
                return e.SnapshotRenderer.render(this.delegate, n, this.getSnapshot(), e.Snapshot.wrap(t3), r);
              }, t2.prototype.renderError = function(t3, r) {
                return e.ErrorRenderer.render(this.delegate, r, t3);
              }, t2;
            }();
          }.call(this), function() {
            var t2 = function(t3, e2) {
              return function() {
                return t3.apply(e2, arguments);
              };
            };
            e.ScrollManager = function() {
              function r(r2) {
                this.delegate = r2, this.onScroll = t2(this.onScroll, this), this.onScroll = e.throttle(this.onScroll);
              }
              return r.prototype.start = function() {
                return this.started ? void 0 : (addEventListener("scroll", this.onScroll, false), this.onScroll(), this.started = true);
              }, r.prototype.stop = function() {
                return this.started ? (removeEventListener("scroll", this.onScroll, false), this.started = false) : void 0;
              }, r.prototype.scrollToElement = function(t3) {
                return t3.scrollIntoView();
              }, r.prototype.scrollToPosition = function(t3) {
                var e2, r2;
                return e2 = t3.x, r2 = t3.y, window.scrollTo(e2, r2);
              }, r.prototype.onScroll = function(t3) {
                return this.updatePosition({ x: window.pageXOffset, y: window.pageYOffset });
              }, r.prototype.updatePosition = function(t3) {
                var e2;
                return this.position = t3, null != (e2 = this.delegate) ? e2.scrollPositionChanged(this.position) : void 0;
              }, r;
            }();
          }.call(this), function() {
            e.SnapshotCache = function() {
              function t2(t3) {
                this.size = t3, this.keys = [], this.snapshots = {};
              }
              var r;
              return t2.prototype.has = function(t3) {
                var e2;
                return e2 = r(t3), e2 in this.snapshots;
              }, t2.prototype.get = function(t3) {
                var e2;
                if (this.has(t3))
                  return e2 = this.read(t3), this.touch(t3), e2;
              }, t2.prototype.put = function(t3, e2) {
                return this.write(t3, e2), this.touch(t3), e2;
              }, t2.prototype.read = function(t3) {
                var e2;
                return e2 = r(t3), this.snapshots[e2];
              }, t2.prototype.write = function(t3, e2) {
                var n;
                return n = r(t3), this.snapshots[n] = e2;
              }, t2.prototype.touch = function(t3) {
                var e2, n;
                return n = r(t3), e2 = this.keys.indexOf(n), e2 > -1 && this.keys.splice(e2, 1), this.keys.unshift(n), this.trim();
              }, t2.prototype.trim = function() {
                var t3, e2, r2, n, o;
                for (n = this.keys.splice(this.size), o = [], t3 = 0, r2 = n.length; r2 > t3; t3++)
                  e2 = n[t3], o.push(delete this.snapshots[e2]);
                return o;
              }, r = function(t3) {
                return e.Location.wrap(t3).toCacheKey();
              }, t2;
            }();
          }.call(this), function() {
            var t2 = function(t3, e2) {
              return function() {
                return t3.apply(e2, arguments);
              };
            };
            e.Visit = function() {
              function r(r2, n2, o) {
                this.controller = r2, this.action = o, this.performScroll = t2(this.performScroll, this), this.identifier = e.uuid(), this.location = e.Location.wrap(n2), this.adapter = this.controller.adapter, this.state = "initialized", this.timingMetrics = {};
              }
              var n;
              return r.prototype.start = function() {
                return "initialized" === this.state ? (this.recordTimingMetric("visitStart"), this.state = "started", this.adapter.visitStarted(this)) : void 0;
              }, r.prototype.cancel = function() {
                var t3;
                return "started" === this.state ? (null != (t3 = this.request) && t3.cancel(), this.cancelRender(), this.state = "canceled") : void 0;
              }, r.prototype.complete = function() {
                var t3;
                return "started" === this.state ? (this.recordTimingMetric("visitEnd"), this.state = "completed", "function" == typeof (t3 = this.adapter).visitCompleted && t3.visitCompleted(this), this.controller.visitCompleted(this)) : void 0;
              }, r.prototype.fail = function() {
                var t3;
                return "started" === this.state ? (this.state = "failed", "function" == typeof (t3 = this.adapter).visitFailed ? t3.visitFailed(this) : void 0) : void 0;
              }, r.prototype.changeHistory = function() {
                var t3, e2;
                return this.historyChanged ? void 0 : (t3 = this.location.isEqualTo(this.referrer) ? "replace" : this.action, e2 = n(t3), this.controller[e2](this.location, this.restorationIdentifier), this.historyChanged = true);
              }, r.prototype.issueRequest = function() {
                return this.shouldIssueRequest() && null == this.request ? (this.progress = 0, this.request = new e.HttpRequest(this, this.location, this.referrer), this.request.send()) : void 0;
              }, r.prototype.getCachedSnapshot = function() {
                var t3;
                return !(t3 = this.controller.getCachedSnapshotForLocation(this.location)) || null != this.location.anchor && !t3.hasAnchor(this.location.anchor) || "restore" !== this.action && !t3.isPreviewable() ? void 0 : t3;
              }, r.prototype.hasCachedSnapshot = function() {
                return null != this.getCachedSnapshot();
              }, r.prototype.loadCachedSnapshot = function() {
                var t3, e2;
                return (e2 = this.getCachedSnapshot()) ? (t3 = this.shouldIssueRequest(), this.render(function() {
                  var r2;
                  return this.cacheSnapshot(), this.controller.render({ snapshot: e2, isPreview: t3 }, this.performScroll), "function" == typeof (r2 = this.adapter).visitRendered && r2.visitRendered(this), t3 ? void 0 : this.complete();
                })) : void 0;
              }, r.prototype.loadResponse = function() {
                return null != this.response ? this.render(function() {
                  var t3, e2;
                  return this.cacheSnapshot(), this.request.failed ? (this.controller.render({ error: this.response }, this.performScroll), "function" == typeof (t3 = this.adapter).visitRendered && t3.visitRendered(this), this.fail()) : (this.controller.render({ snapshot: this.response }, this.performScroll), "function" == typeof (e2 = this.adapter).visitRendered && e2.visitRendered(this), this.complete());
                }) : void 0;
              }, r.prototype.followRedirect = function() {
                return this.redirectedToLocation && !this.followedRedirect ? (this.location = this.redirectedToLocation, this.controller.replaceHistoryWithLocationAndRestorationIdentifier(this.redirectedToLocation, this.restorationIdentifier), this.followedRedirect = true) : void 0;
              }, r.prototype.requestStarted = function() {
                var t3;
                return this.recordTimingMetric("requestStart"), "function" == typeof (t3 = this.adapter).visitRequestStarted ? t3.visitRequestStarted(this) : void 0;
              }, r.prototype.requestProgressed = function(t3) {
                var e2;
                return this.progress = t3, "function" == typeof (e2 = this.adapter).visitRequestProgressed ? e2.visitRequestProgressed(this) : void 0;
              }, r.prototype.requestCompletedWithResponse = function(t3, r2) {
                return this.response = t3, null != r2 && (this.redirectedToLocation = e.Location.wrap(r2)), this.adapter.visitRequestCompleted(this);
              }, r.prototype.requestFailedWithStatusCode = function(t3, e2) {
                return this.response = e2, this.adapter.visitRequestFailedWithStatusCode(this, t3);
              }, r.prototype.requestFinished = function() {
                var t3;
                return this.recordTimingMetric("requestEnd"), "function" == typeof (t3 = this.adapter).visitRequestFinished ? t3.visitRequestFinished(this) : void 0;
              }, r.prototype.performScroll = function() {
                return this.scrolled ? void 0 : ("restore" === this.action ? this.scrollToRestoredPosition() || this.scrollToTop() : this.scrollToAnchor() || this.scrollToTop(), this.scrolled = true);
              }, r.prototype.scrollToRestoredPosition = function() {
                var t3, e2;
                return t3 = null != (e2 = this.restorationData) ? e2.scrollPosition : void 0, null != t3 ? (this.controller.scrollToPosition(t3), true) : void 0;
              }, r.prototype.scrollToAnchor = function() {
                return null != this.location.anchor ? (this.controller.scrollToAnchor(this.location.anchor), true) : void 0;
              }, r.prototype.scrollToTop = function() {
                return this.controller.scrollToPosition({ x: 0, y: 0 });
              }, r.prototype.recordTimingMetric = function(t3) {
                var e2;
                return null != (e2 = this.timingMetrics)[t3] ? e2[t3] : e2[t3] = (/* @__PURE__ */ new Date()).getTime();
              }, r.prototype.getTimingMetrics = function() {
                return e.copyObject(this.timingMetrics);
              }, n = function(t3) {
                switch (t3) {
                  case "replace":
                    return "replaceHistoryWithLocationAndRestorationIdentifier";
                  case "advance":
                  case "restore":
                    return "pushHistoryWithLocationAndRestorationIdentifier";
                }
              }, r.prototype.shouldIssueRequest = function() {
                return "restore" === this.action ? !this.hasCachedSnapshot() : true;
              }, r.prototype.cacheSnapshot = function() {
                return this.snapshotCached ? void 0 : (this.controller.cacheSnapshot(), this.snapshotCached = true);
              }, r.prototype.render = function(t3) {
                return this.cancelRender(), this.frame = requestAnimationFrame(/* @__PURE__ */ function(e2) {
                  return function() {
                    return e2.frame = null, t3.call(e2);
                  };
                }(this));
              }, r.prototype.cancelRender = function() {
                return this.frame ? cancelAnimationFrame(this.frame) : void 0;
              }, r;
            }();
          }.call(this), function() {
            var t2 = function(t3, e2) {
              return function() {
                return t3.apply(e2, arguments);
              };
            };
            e.Controller = function() {
              function r() {
                this.clickBubbled = t2(this.clickBubbled, this), this.clickCaptured = t2(this.clickCaptured, this), this.pageLoaded = t2(this.pageLoaded, this), this.history = new e.History(this), this.view = new e.View(this), this.scrollManager = new e.ScrollManager(this), this.restorationData = {}, this.clearCache(), this.setProgressBarDelay(500);
              }
              return r.prototype.start = function() {
                return e.supported && !this.started ? (addEventListener("click", this.clickCaptured, true), addEventListener("DOMContentLoaded", this.pageLoaded, false), this.scrollManager.start(), this.startHistory(), this.started = true, this.enabled = true) : void 0;
              }, r.prototype.disable = function() {
                return this.enabled = false;
              }, r.prototype.stop = function() {
                return this.started ? (removeEventListener("click", this.clickCaptured, true), removeEventListener("DOMContentLoaded", this.pageLoaded, false), this.scrollManager.stop(), this.stopHistory(), this.started = false) : void 0;
              }, r.prototype.clearCache = function() {
                return this.cache = new e.SnapshotCache(10);
              }, r.prototype.visit = function(t3, r2) {
                var n, o;
                return null == r2 && (r2 = {}), t3 = e.Location.wrap(t3), this.applicationAllowsVisitingLocation(t3) ? this.locationIsVisitable(t3) ? (n = null != (o = r2.action) ? o : "advance", this.adapter.visitProposedToLocationWithAction(t3, n)) : window.location = t3 : void 0;
              }, r.prototype.startVisitToLocationWithAction = function(t3, r2, n) {
                var o;
                return e.supported ? (o = this.getRestorationDataForIdentifier(n), this.startVisit(t3, r2, { restorationData: o })) : window.location = t3;
              }, r.prototype.setProgressBarDelay = function(t3) {
                return this.progressBarDelay = t3;
              }, r.prototype.startHistory = function() {
                return this.location = e.Location.wrap(window.location), this.restorationIdentifier = e.uuid(), this.history.start(), this.history.replace(this.location, this.restorationIdentifier);
              }, r.prototype.stopHistory = function() {
                return this.history.stop();
              }, r.prototype.pushHistoryWithLocationAndRestorationIdentifier = function(t3, r2) {
                return this.restorationIdentifier = r2, this.location = e.Location.wrap(t3), this.history.push(this.location, this.restorationIdentifier);
              }, r.prototype.replaceHistoryWithLocationAndRestorationIdentifier = function(t3, r2) {
                return this.restorationIdentifier = r2, this.location = e.Location.wrap(t3), this.history.replace(this.location, this.restorationIdentifier);
              }, r.prototype.historyPoppedToLocationWithRestorationIdentifier = function(t3, r2) {
                var n;
                return this.restorationIdentifier = r2, this.enabled ? (n = this.getRestorationDataForIdentifier(this.restorationIdentifier), this.startVisit(t3, "restore", { restorationIdentifier: this.restorationIdentifier, restorationData: n, historyChanged: true }), this.location = e.Location.wrap(t3)) : this.adapter.pageInvalidated();
              }, r.prototype.getCachedSnapshotForLocation = function(t3) {
                var e2;
                return null != (e2 = this.cache.get(t3)) ? e2.clone() : void 0;
              }, r.prototype.shouldCacheSnapshot = function() {
                return this.view.getSnapshot().isCacheable();
              }, r.prototype.cacheSnapshot = function() {
                var t3, r2;
                return this.shouldCacheSnapshot() ? (this.notifyApplicationBeforeCachingSnapshot(), r2 = this.view.getSnapshot(), t3 = this.lastRenderedLocation, e.defer(/* @__PURE__ */ function(e2) {
                  return function() {
                    return e2.cache.put(t3, r2.clone());
                  };
                }(this))) : void 0;
              }, r.prototype.scrollToAnchor = function(t3) {
                var e2;
                return (e2 = this.view.getElementForAnchor(t3)) ? this.scrollToElement(e2) : this.scrollToPosition({ x: 0, y: 0 });
              }, r.prototype.scrollToElement = function(t3) {
                return this.scrollManager.scrollToElement(t3);
              }, r.prototype.scrollToPosition = function(t3) {
                return this.scrollManager.scrollToPosition(t3);
              }, r.prototype.scrollPositionChanged = function(t3) {
                var e2;
                return e2 = this.getCurrentRestorationData(), e2.scrollPosition = t3;
              }, r.prototype.render = function(t3, e2) {
                return this.view.render(t3, e2);
              }, r.prototype.viewInvalidated = function() {
                return this.adapter.pageInvalidated();
              }, r.prototype.viewWillRender = function(t3) {
                return this.notifyApplicationBeforeRender(t3);
              }, r.prototype.viewRendered = function() {
                return this.lastRenderedLocation = this.currentVisit.location, this.notifyApplicationAfterRender();
              }, r.prototype.pageLoaded = function() {
                return this.lastRenderedLocation = this.location, this.notifyApplicationAfterPageLoad();
              }, r.prototype.clickCaptured = function() {
                return removeEventListener("click", this.clickBubbled, false), addEventListener("click", this.clickBubbled, false);
              }, r.prototype.clickBubbled = function(t3) {
                var e2, r2, n;
                return this.enabled && this.clickEventIsSignificant(t3) && (r2 = this.getVisitableLinkForNode(t3.target)) && (n = this.getVisitableLocationForLink(r2)) && this.applicationAllowsFollowingLinkToLocation(r2, n) ? (t3.preventDefault(), e2 = this.getActionForLink(r2), this.visit(n, { action: e2 })) : void 0;
              }, r.prototype.applicationAllowsFollowingLinkToLocation = function(t3, e2) {
                var r2;
                return r2 = this.notifyApplicationAfterClickingLinkToLocation(t3, e2), !r2.defaultPrevented;
              }, r.prototype.applicationAllowsVisitingLocation = function(t3) {
                var e2;
                return e2 = this.notifyApplicationBeforeVisitingLocation(t3), !e2.defaultPrevented;
              }, r.prototype.notifyApplicationAfterClickingLinkToLocation = function(t3, r2) {
                return e.dispatch("turbolinks:click", { target: t3, data: { url: r2.absoluteURL }, cancelable: true });
              }, r.prototype.notifyApplicationBeforeVisitingLocation = function(t3) {
                return e.dispatch("turbolinks:before-visit", { data: { url: t3.absoluteURL }, cancelable: true });
              }, r.prototype.notifyApplicationAfterVisitingLocation = function(t3) {
                return e.dispatch("turbolinks:visit", { data: { url: t3.absoluteURL } });
              }, r.prototype.notifyApplicationBeforeCachingSnapshot = function() {
                return e.dispatch("turbolinks:before-cache");
              }, r.prototype.notifyApplicationBeforeRender = function(t3) {
                return e.dispatch("turbolinks:before-render", { data: { newBody: t3 } });
              }, r.prototype.notifyApplicationAfterRender = function() {
                return e.dispatch("turbolinks:render");
              }, r.prototype.notifyApplicationAfterPageLoad = function(t3) {
                return null == t3 && (t3 = {}), e.dispatch("turbolinks:load", { data: { url: this.location.absoluteURL, timing: t3 } });
              }, r.prototype.startVisit = function(t3, e2, r2) {
                var n;
                return null != (n = this.currentVisit) && n.cancel(), this.currentVisit = this.createVisit(t3, e2, r2), this.currentVisit.start(), this.notifyApplicationAfterVisitingLocation(t3);
              }, r.prototype.createVisit = function(t3, r2, n) {
                var o, i, s, a, u;
                return i = null != n ? n : {}, a = i.restorationIdentifier, s = i.restorationData, o = i.historyChanged, u = new e.Visit(this, t3, r2), u.restorationIdentifier = null != a ? a : e.uuid(), u.restorationData = e.copyObject(s), u.historyChanged = o, u.referrer = this.location, u;
              }, r.prototype.visitCompleted = function(t3) {
                return this.notifyApplicationAfterPageLoad(t3.getTimingMetrics());
              }, r.prototype.clickEventIsSignificant = function(t3) {
                return !(t3.defaultPrevented || t3.target.isContentEditable || t3.which > 1 || t3.altKey || t3.ctrlKey || t3.metaKey || t3.shiftKey);
              }, r.prototype.getVisitableLinkForNode = function(t3) {
                return this.nodeIsVisitable(t3) ? e.closest(t3, "a[href]:not([target]):not([download])") : void 0;
              }, r.prototype.getVisitableLocationForLink = function(t3) {
                var r2;
                return r2 = new e.Location(t3.getAttribute("href")), this.locationIsVisitable(r2) ? r2 : void 0;
              }, r.prototype.getActionForLink = function(t3) {
                var e2;
                return null != (e2 = t3.getAttribute("data-turbolinks-action")) ? e2 : "advance";
              }, r.prototype.nodeIsVisitable = function(t3) {
                var r2;
                return (r2 = e.closest(t3, "[data-turbolinks]")) ? "false" !== r2.getAttribute("data-turbolinks") : true;
              }, r.prototype.locationIsVisitable = function(t3) {
                return t3.isPrefixedBy(this.view.getRootLocation()) && t3.isHTML();
              }, r.prototype.getCurrentRestorationData = function() {
                return this.getRestorationDataForIdentifier(this.restorationIdentifier);
              }, r.prototype.getRestorationDataForIdentifier = function(t3) {
                var e2;
                return null != (e2 = this.restorationData)[t3] ? e2[t3] : e2[t3] = {};
              }, r;
            }();
          }.call(this), function() {
            !function() {
              var t2, e2;
              if ((t2 = e2 = document.currentScript) && !e2.hasAttribute("data-turbolinks-suppress-warning")) {
                for (; t2 = t2.parentNode; )
                  if (t2 === document.body)
                    return console.warn("You are loading Turbolinks from a <script> element inside the <body> element. This is probably not what you meant to do!\n\nLoad your application\u2019s JavaScript bundle inside the <head> element instead. <script> elements in <body> are evaluated with each page change.\n\nFor more information, see: https://github.com/turbolinks/turbolinks#working-with-script-elements\n\n\u2014\u2014\nSuppress this warning by adding a `data-turbolinks-suppress-warning` attribute to: %s", e2.outerHTML);
              }
            }();
          }.call(this), function() {
            var t2, r, n;
            e.start = function() {
              return r() ? (null == e.controller && (e.controller = t2()), e.controller.start()) : void 0;
            }, r = function() {
              return null == window.Turbolinks && (window.Turbolinks = e), n();
            }, t2 = function() {
              var t3;
              return t3 = new e.Controller(), t3.adapter = new e.BrowserAdapter(t3), t3;
            }, n = function() {
              return window.Turbolinks === e;
            }, n() && e.start();
          }.call(this);
        }).call(this), "object" == typeof module && module.exports ? module.exports = e : "function" == typeof define && define.amd && define(e);
      }).call(exports);
    }
  });

  // node_modules/@rails/activestorage/app/assets/javascripts/activestorage.js
  var require_activestorage = __commonJS({
    "node_modules/@rails/activestorage/app/assets/javascripts/activestorage.js"(exports, module) {
      (function(global2, factory) {
        typeof exports === "object" && typeof module !== "undefined" ? factory(exports) : typeof define === "function" && define.amd ? define(["exports"], factory) : factory(global2.ActiveStorage = {});
      })(exports, function(exports2) {
        "use strict";
        function createCommonjsModule(fn, module2) {
          return module2 = {
            exports: {}
          }, fn(module2, module2.exports), module2.exports;
        }
        var sparkMd5 = createCommonjsModule(function(module2, exports3) {
          (function(factory) {
            {
              module2.exports = factory();
            }
          })(function(undefined2) {
            var hex_chr = ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "a", "b", "c", "d", "e", "f"];
            function md5cycle(x, k) {
              var a = x[0], b = x[1], c = x[2], d = x[3];
              a += (b & c | ~b & d) + k[0] - 680876936 | 0;
              a = (a << 7 | a >>> 25) + b | 0;
              d += (a & b | ~a & c) + k[1] - 389564586 | 0;
              d = (d << 12 | d >>> 20) + a | 0;
              c += (d & a | ~d & b) + k[2] + 606105819 | 0;
              c = (c << 17 | c >>> 15) + d | 0;
              b += (c & d | ~c & a) + k[3] - 1044525330 | 0;
              b = (b << 22 | b >>> 10) + c | 0;
              a += (b & c | ~b & d) + k[4] - 176418897 | 0;
              a = (a << 7 | a >>> 25) + b | 0;
              d += (a & b | ~a & c) + k[5] + 1200080426 | 0;
              d = (d << 12 | d >>> 20) + a | 0;
              c += (d & a | ~d & b) + k[6] - 1473231341 | 0;
              c = (c << 17 | c >>> 15) + d | 0;
              b += (c & d | ~c & a) + k[7] - 45705983 | 0;
              b = (b << 22 | b >>> 10) + c | 0;
              a += (b & c | ~b & d) + k[8] + 1770035416 | 0;
              a = (a << 7 | a >>> 25) + b | 0;
              d += (a & b | ~a & c) + k[9] - 1958414417 | 0;
              d = (d << 12 | d >>> 20) + a | 0;
              c += (d & a | ~d & b) + k[10] - 42063 | 0;
              c = (c << 17 | c >>> 15) + d | 0;
              b += (c & d | ~c & a) + k[11] - 1990404162 | 0;
              b = (b << 22 | b >>> 10) + c | 0;
              a += (b & c | ~b & d) + k[12] + 1804603682 | 0;
              a = (a << 7 | a >>> 25) + b | 0;
              d += (a & b | ~a & c) + k[13] - 40341101 | 0;
              d = (d << 12 | d >>> 20) + a | 0;
              c += (d & a | ~d & b) + k[14] - 1502002290 | 0;
              c = (c << 17 | c >>> 15) + d | 0;
              b += (c & d | ~c & a) + k[15] + 1236535329 | 0;
              b = (b << 22 | b >>> 10) + c | 0;
              a += (b & d | c & ~d) + k[1] - 165796510 | 0;
              a = (a << 5 | a >>> 27) + b | 0;
              d += (a & c | b & ~c) + k[6] - 1069501632 | 0;
              d = (d << 9 | d >>> 23) + a | 0;
              c += (d & b | a & ~b) + k[11] + 643717713 | 0;
              c = (c << 14 | c >>> 18) + d | 0;
              b += (c & a | d & ~a) + k[0] - 373897302 | 0;
              b = (b << 20 | b >>> 12) + c | 0;
              a += (b & d | c & ~d) + k[5] - 701558691 | 0;
              a = (a << 5 | a >>> 27) + b | 0;
              d += (a & c | b & ~c) + k[10] + 38016083 | 0;
              d = (d << 9 | d >>> 23) + a | 0;
              c += (d & b | a & ~b) + k[15] - 660478335 | 0;
              c = (c << 14 | c >>> 18) + d | 0;
              b += (c & a | d & ~a) + k[4] - 405537848 | 0;
              b = (b << 20 | b >>> 12) + c | 0;
              a += (b & d | c & ~d) + k[9] + 568446438 | 0;
              a = (a << 5 | a >>> 27) + b | 0;
              d += (a & c | b & ~c) + k[14] - 1019803690 | 0;
              d = (d << 9 | d >>> 23) + a | 0;
              c += (d & b | a & ~b) + k[3] - 187363961 | 0;
              c = (c << 14 | c >>> 18) + d | 0;
              b += (c & a | d & ~a) + k[8] + 1163531501 | 0;
              b = (b << 20 | b >>> 12) + c | 0;
              a += (b & d | c & ~d) + k[13] - 1444681467 | 0;
              a = (a << 5 | a >>> 27) + b | 0;
              d += (a & c | b & ~c) + k[2] - 51403784 | 0;
              d = (d << 9 | d >>> 23) + a | 0;
              c += (d & b | a & ~b) + k[7] + 1735328473 | 0;
              c = (c << 14 | c >>> 18) + d | 0;
              b += (c & a | d & ~a) + k[12] - 1926607734 | 0;
              b = (b << 20 | b >>> 12) + c | 0;
              a += (b ^ c ^ d) + k[5] - 378558 | 0;
              a = (a << 4 | a >>> 28) + b | 0;
              d += (a ^ b ^ c) + k[8] - 2022574463 | 0;
              d = (d << 11 | d >>> 21) + a | 0;
              c += (d ^ a ^ b) + k[11] + 1839030562 | 0;
              c = (c << 16 | c >>> 16) + d | 0;
              b += (c ^ d ^ a) + k[14] - 35309556 | 0;
              b = (b << 23 | b >>> 9) + c | 0;
              a += (b ^ c ^ d) + k[1] - 1530992060 | 0;
              a = (a << 4 | a >>> 28) + b | 0;
              d += (a ^ b ^ c) + k[4] + 1272893353 | 0;
              d = (d << 11 | d >>> 21) + a | 0;
              c += (d ^ a ^ b) + k[7] - 155497632 | 0;
              c = (c << 16 | c >>> 16) + d | 0;
              b += (c ^ d ^ a) + k[10] - 1094730640 | 0;
              b = (b << 23 | b >>> 9) + c | 0;
              a += (b ^ c ^ d) + k[13] + 681279174 | 0;
              a = (a << 4 | a >>> 28) + b | 0;
              d += (a ^ b ^ c) + k[0] - 358537222 | 0;
              d = (d << 11 | d >>> 21) + a | 0;
              c += (d ^ a ^ b) + k[3] - 722521979 | 0;
              c = (c << 16 | c >>> 16) + d | 0;
              b += (c ^ d ^ a) + k[6] + 76029189 | 0;
              b = (b << 23 | b >>> 9) + c | 0;
              a += (b ^ c ^ d) + k[9] - 640364487 | 0;
              a = (a << 4 | a >>> 28) + b | 0;
              d += (a ^ b ^ c) + k[12] - 421815835 | 0;
              d = (d << 11 | d >>> 21) + a | 0;
              c += (d ^ a ^ b) + k[15] + 530742520 | 0;
              c = (c << 16 | c >>> 16) + d | 0;
              b += (c ^ d ^ a) + k[2] - 995338651 | 0;
              b = (b << 23 | b >>> 9) + c | 0;
              a += (c ^ (b | ~d)) + k[0] - 198630844 | 0;
              a = (a << 6 | a >>> 26) + b | 0;
              d += (b ^ (a | ~c)) + k[7] + 1126891415 | 0;
              d = (d << 10 | d >>> 22) + a | 0;
              c += (a ^ (d | ~b)) + k[14] - 1416354905 | 0;
              c = (c << 15 | c >>> 17) + d | 0;
              b += (d ^ (c | ~a)) + k[5] - 57434055 | 0;
              b = (b << 21 | b >>> 11) + c | 0;
              a += (c ^ (b | ~d)) + k[12] + 1700485571 | 0;
              a = (a << 6 | a >>> 26) + b | 0;
              d += (b ^ (a | ~c)) + k[3] - 1894986606 | 0;
              d = (d << 10 | d >>> 22) + a | 0;
              c += (a ^ (d | ~b)) + k[10] - 1051523 | 0;
              c = (c << 15 | c >>> 17) + d | 0;
              b += (d ^ (c | ~a)) + k[1] - 2054922799 | 0;
              b = (b << 21 | b >>> 11) + c | 0;
              a += (c ^ (b | ~d)) + k[8] + 1873313359 | 0;
              a = (a << 6 | a >>> 26) + b | 0;
              d += (b ^ (a | ~c)) + k[15] - 30611744 | 0;
              d = (d << 10 | d >>> 22) + a | 0;
              c += (a ^ (d | ~b)) + k[6] - 1560198380 | 0;
              c = (c << 15 | c >>> 17) + d | 0;
              b += (d ^ (c | ~a)) + k[13] + 1309151649 | 0;
              b = (b << 21 | b >>> 11) + c | 0;
              a += (c ^ (b | ~d)) + k[4] - 145523070 | 0;
              a = (a << 6 | a >>> 26) + b | 0;
              d += (b ^ (a | ~c)) + k[11] - 1120210379 | 0;
              d = (d << 10 | d >>> 22) + a | 0;
              c += (a ^ (d | ~b)) + k[2] + 718787259 | 0;
              c = (c << 15 | c >>> 17) + d | 0;
              b += (d ^ (c | ~a)) + k[9] - 343485551 | 0;
              b = (b << 21 | b >>> 11) + c | 0;
              x[0] = a + x[0] | 0;
              x[1] = b + x[1] | 0;
              x[2] = c + x[2] | 0;
              x[3] = d + x[3] | 0;
            }
            function md5blk(s) {
              var md5blks = [], i;
              for (i = 0; i < 64; i += 4) {
                md5blks[i >> 2] = s.charCodeAt(i) + (s.charCodeAt(i + 1) << 8) + (s.charCodeAt(i + 2) << 16) + (s.charCodeAt(i + 3) << 24);
              }
              return md5blks;
            }
            function md5blk_array(a) {
              var md5blks = [], i;
              for (i = 0; i < 64; i += 4) {
                md5blks[i >> 2] = a[i] + (a[i + 1] << 8) + (a[i + 2] << 16) + (a[i + 3] << 24);
              }
              return md5blks;
            }
            function md51(s) {
              var n = s.length, state = [1732584193, -271733879, -1732584194, 271733878], i, length, tail, tmp, lo, hi;
              for (i = 64; i <= n; i += 64) {
                md5cycle(state, md5blk(s.substring(i - 64, i)));
              }
              s = s.substring(i - 64);
              length = s.length;
              tail = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
              for (i = 0; i < length; i += 1) {
                tail[i >> 2] |= s.charCodeAt(i) << (i % 4 << 3);
              }
              tail[i >> 2] |= 128 << (i % 4 << 3);
              if (i > 55) {
                md5cycle(state, tail);
                for (i = 0; i < 16; i += 1) {
                  tail[i] = 0;
                }
              }
              tmp = n * 8;
              tmp = tmp.toString(16).match(/(.*?)(.{0,8})$/);
              lo = parseInt(tmp[2], 16);
              hi = parseInt(tmp[1], 16) || 0;
              tail[14] = lo;
              tail[15] = hi;
              md5cycle(state, tail);
              return state;
            }
            function md51_array(a) {
              var n = a.length, state = [1732584193, -271733879, -1732584194, 271733878], i, length, tail, tmp, lo, hi;
              for (i = 64; i <= n; i += 64) {
                md5cycle(state, md5blk_array(a.subarray(i - 64, i)));
              }
              a = i - 64 < n ? a.subarray(i - 64) : new Uint8Array(0);
              length = a.length;
              tail = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
              for (i = 0; i < length; i += 1) {
                tail[i >> 2] |= a[i] << (i % 4 << 3);
              }
              tail[i >> 2] |= 128 << (i % 4 << 3);
              if (i > 55) {
                md5cycle(state, tail);
                for (i = 0; i < 16; i += 1) {
                  tail[i] = 0;
                }
              }
              tmp = n * 8;
              tmp = tmp.toString(16).match(/(.*?)(.{0,8})$/);
              lo = parseInt(tmp[2], 16);
              hi = parseInt(tmp[1], 16) || 0;
              tail[14] = lo;
              tail[15] = hi;
              md5cycle(state, tail);
              return state;
            }
            function rhex(n) {
              var s = "", j;
              for (j = 0; j < 4; j += 1) {
                s += hex_chr[n >> j * 8 + 4 & 15] + hex_chr[n >> j * 8 & 15];
              }
              return s;
            }
            function hex(x) {
              var i;
              for (i = 0; i < x.length; i += 1) {
                x[i] = rhex(x[i]);
              }
              return x.join("");
            }
            if (hex(md51("hello")) !== "5d41402abc4b2a76b9719d911017c592")
              ;
            if (typeof ArrayBuffer !== "undefined" && !ArrayBuffer.prototype.slice) {
              (function() {
                function clamp(val, length) {
                  val = val | 0 || 0;
                  if (val < 0) {
                    return Math.max(val + length, 0);
                  }
                  return Math.min(val, length);
                }
                ArrayBuffer.prototype.slice = function(from, to) {
                  var length = this.byteLength, begin = clamp(from, length), end = length, num, target, targetArray, sourceArray;
                  if (to !== undefined2) {
                    end = clamp(to, length);
                  }
                  if (begin > end) {
                    return new ArrayBuffer(0);
                  }
                  num = end - begin;
                  target = new ArrayBuffer(num);
                  targetArray = new Uint8Array(target);
                  sourceArray = new Uint8Array(this, begin, num);
                  targetArray.set(sourceArray);
                  return target;
                };
              })();
            }
            function toUtf8(str) {
              if (/[\u0080-\uFFFF]/.test(str)) {
                str = unescape(encodeURIComponent(str));
              }
              return str;
            }
            function utf8Str2ArrayBuffer(str, returnUInt8Array) {
              var length = str.length, buff = new ArrayBuffer(length), arr = new Uint8Array(buff), i;
              for (i = 0; i < length; i += 1) {
                arr[i] = str.charCodeAt(i);
              }
              return returnUInt8Array ? arr : buff;
            }
            function arrayBuffer2Utf8Str(buff) {
              return String.fromCharCode.apply(null, new Uint8Array(buff));
            }
            function concatenateArrayBuffers(first, second, returnUInt8Array) {
              var result = new Uint8Array(first.byteLength + second.byteLength);
              result.set(new Uint8Array(first));
              result.set(new Uint8Array(second), first.byteLength);
              return returnUInt8Array ? result : result.buffer;
            }
            function hexToBinaryString(hex2) {
              var bytes = [], length = hex2.length, x;
              for (x = 0; x < length - 1; x += 2) {
                bytes.push(parseInt(hex2.substr(x, 2), 16));
              }
              return String.fromCharCode.apply(String, bytes);
            }
            function SparkMD5() {
              this.reset();
            }
            SparkMD5.prototype.append = function(str) {
              this.appendBinary(toUtf8(str));
              return this;
            };
            SparkMD5.prototype.appendBinary = function(contents) {
              this._buff += contents;
              this._length += contents.length;
              var length = this._buff.length, i;
              for (i = 64; i <= length; i += 64) {
                md5cycle(this._hash, md5blk(this._buff.substring(i - 64, i)));
              }
              this._buff = this._buff.substring(i - 64);
              return this;
            };
            SparkMD5.prototype.end = function(raw) {
              var buff = this._buff, length = buff.length, i, tail = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ret;
              for (i = 0; i < length; i += 1) {
                tail[i >> 2] |= buff.charCodeAt(i) << (i % 4 << 3);
              }
              this._finish(tail, length);
              ret = hex(this._hash);
              if (raw) {
                ret = hexToBinaryString(ret);
              }
              this.reset();
              return ret;
            };
            SparkMD5.prototype.reset = function() {
              this._buff = "";
              this._length = 0;
              this._hash = [1732584193, -271733879, -1732584194, 271733878];
              return this;
            };
            SparkMD5.prototype.getState = function() {
              return {
                buff: this._buff,
                length: this._length,
                hash: this._hash
              };
            };
            SparkMD5.prototype.setState = function(state) {
              this._buff = state.buff;
              this._length = state.length;
              this._hash = state.hash;
              return this;
            };
            SparkMD5.prototype.destroy = function() {
              delete this._hash;
              delete this._buff;
              delete this._length;
            };
            SparkMD5.prototype._finish = function(tail, length) {
              var i = length, tmp, lo, hi;
              tail[i >> 2] |= 128 << (i % 4 << 3);
              if (i > 55) {
                md5cycle(this._hash, tail);
                for (i = 0; i < 16; i += 1) {
                  tail[i] = 0;
                }
              }
              tmp = this._length * 8;
              tmp = tmp.toString(16).match(/(.*?)(.{0,8})$/);
              lo = parseInt(tmp[2], 16);
              hi = parseInt(tmp[1], 16) || 0;
              tail[14] = lo;
              tail[15] = hi;
              md5cycle(this._hash, tail);
            };
            SparkMD5.hash = function(str, raw) {
              return SparkMD5.hashBinary(toUtf8(str), raw);
            };
            SparkMD5.hashBinary = function(content, raw) {
              var hash = md51(content), ret = hex(hash);
              return raw ? hexToBinaryString(ret) : ret;
            };
            SparkMD5.ArrayBuffer = function() {
              this.reset();
            };
            SparkMD5.ArrayBuffer.prototype.append = function(arr) {
              var buff = concatenateArrayBuffers(this._buff.buffer, arr, true), length = buff.length, i;
              this._length += arr.byteLength;
              for (i = 64; i <= length; i += 64) {
                md5cycle(this._hash, md5blk_array(buff.subarray(i - 64, i)));
              }
              this._buff = i - 64 < length ? new Uint8Array(buff.buffer.slice(i - 64)) : new Uint8Array(0);
              return this;
            };
            SparkMD5.ArrayBuffer.prototype.end = function(raw) {
              var buff = this._buff, length = buff.length, tail = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], i, ret;
              for (i = 0; i < length; i += 1) {
                tail[i >> 2] |= buff[i] << (i % 4 << 3);
              }
              this._finish(tail, length);
              ret = hex(this._hash);
              if (raw) {
                ret = hexToBinaryString(ret);
              }
              this.reset();
              return ret;
            };
            SparkMD5.ArrayBuffer.prototype.reset = function() {
              this._buff = new Uint8Array(0);
              this._length = 0;
              this._hash = [1732584193, -271733879, -1732584194, 271733878];
              return this;
            };
            SparkMD5.ArrayBuffer.prototype.getState = function() {
              var state = SparkMD5.prototype.getState.call(this);
              state.buff = arrayBuffer2Utf8Str(state.buff);
              return state;
            };
            SparkMD5.ArrayBuffer.prototype.setState = function(state) {
              state.buff = utf8Str2ArrayBuffer(state.buff, true);
              return SparkMD5.prototype.setState.call(this, state);
            };
            SparkMD5.ArrayBuffer.prototype.destroy = SparkMD5.prototype.destroy;
            SparkMD5.ArrayBuffer.prototype._finish = SparkMD5.prototype._finish;
            SparkMD5.ArrayBuffer.hash = function(arr, raw) {
              var hash = md51_array(new Uint8Array(arr)), ret = hex(hash);
              return raw ? hexToBinaryString(ret) : ret;
            };
            return SparkMD5;
          });
        });
        var classCallCheck = function(instance, Constructor) {
          if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
          }
        };
        var createClass = /* @__PURE__ */ function() {
          function defineProperties(target, props) {
            for (var i = 0; i < props.length; i++) {
              var descriptor = props[i];
              descriptor.enumerable = descriptor.enumerable || false;
              descriptor.configurable = true;
              if ("value" in descriptor)
                descriptor.writable = true;
              Object.defineProperty(target, descriptor.key, descriptor);
            }
          }
          return function(Constructor, protoProps, staticProps) {
            if (protoProps)
              defineProperties(Constructor.prototype, protoProps);
            if (staticProps)
              defineProperties(Constructor, staticProps);
            return Constructor;
          };
        }();
        var fileSlice = File.prototype.slice || File.prototype.mozSlice || File.prototype.webkitSlice;
        var FileChecksum = function() {
          createClass(FileChecksum2, null, [{
            key: "create",
            value: function create(file, callback) {
              var instance = new FileChecksum2(file);
              instance.create(callback);
            }
          }]);
          function FileChecksum2(file) {
            classCallCheck(this, FileChecksum2);
            this.file = file;
            this.chunkSize = 2097152;
            this.chunkCount = Math.ceil(this.file.size / this.chunkSize);
            this.chunkIndex = 0;
          }
          createClass(FileChecksum2, [{
            key: "create",
            value: function create(callback) {
              var _this = this;
              this.callback = callback;
              this.md5Buffer = new sparkMd5.ArrayBuffer();
              this.fileReader = new FileReader();
              this.fileReader.addEventListener("load", function(event) {
                return _this.fileReaderDidLoad(event);
              });
              this.fileReader.addEventListener("error", function(event) {
                return _this.fileReaderDidError(event);
              });
              this.readNextChunk();
            }
          }, {
            key: "fileReaderDidLoad",
            value: function fileReaderDidLoad(event) {
              this.md5Buffer.append(event.target.result);
              if (!this.readNextChunk()) {
                var binaryDigest = this.md5Buffer.end(true);
                var base64digest = btoa(binaryDigest);
                this.callback(null, base64digest);
              }
            }
          }, {
            key: "fileReaderDidError",
            value: function fileReaderDidError(event) {
              this.callback("Error reading " + this.file.name);
            }
          }, {
            key: "readNextChunk",
            value: function readNextChunk() {
              if (this.chunkIndex < this.chunkCount || this.chunkIndex == 0 && this.chunkCount == 0) {
                var start3 = this.chunkIndex * this.chunkSize;
                var end = Math.min(start3 + this.chunkSize, this.file.size);
                var bytes = fileSlice.call(this.file, start3, end);
                this.fileReader.readAsArrayBuffer(bytes);
                this.chunkIndex++;
                return true;
              } else {
                return false;
              }
            }
          }]);
          return FileChecksum2;
        }();
        function getMetaValue(name) {
          var element = findElement(document.head, 'meta[name="' + name + '"]');
          if (element) {
            return element.getAttribute("content");
          }
        }
        function findElements(root, selector) {
          if (typeof root == "string") {
            selector = root;
            root = document;
          }
          var elements = root.querySelectorAll(selector);
          return toArray$1(elements);
        }
        function findElement(root, selector) {
          if (typeof root == "string") {
            selector = root;
            root = document;
          }
          return root.querySelector(selector);
        }
        function dispatchEvent(element, type) {
          var eventInit = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
          var disabled = element.disabled;
          var bubbles = eventInit.bubbles, cancelable = eventInit.cancelable, detail = eventInit.detail;
          var event = document.createEvent("Event");
          event.initEvent(type, bubbles || true, cancelable || true);
          event.detail = detail || {};
          try {
            element.disabled = false;
            element.dispatchEvent(event);
          } finally {
            element.disabled = disabled;
          }
          return event;
        }
        function toArray$1(value) {
          if (Array.isArray(value)) {
            return value;
          } else if (Array.from) {
            return Array.from(value);
          } else {
            return [].slice.call(value);
          }
        }
        var BlobRecord = function() {
          function BlobRecord2(file, checksum, url) {
            var _this = this;
            classCallCheck(this, BlobRecord2);
            this.file = file;
            this.attributes = {
              filename: file.name,
              content_type: file.type || "application/octet-stream",
              byte_size: file.size,
              checksum
            };
            this.xhr = new XMLHttpRequest();
            this.xhr.open("POST", url, true);
            this.xhr.responseType = "json";
            this.xhr.setRequestHeader("Content-Type", "application/json");
            this.xhr.setRequestHeader("Accept", "application/json");
            this.xhr.setRequestHeader("X-Requested-With", "XMLHttpRequest");
            var csrfToken = getMetaValue("csrf-token");
            if (csrfToken != void 0) {
              this.xhr.setRequestHeader("X-CSRF-Token", csrfToken);
            }
            this.xhr.addEventListener("load", function(event) {
              return _this.requestDidLoad(event);
            });
            this.xhr.addEventListener("error", function(event) {
              return _this.requestDidError(event);
            });
          }
          createClass(BlobRecord2, [{
            key: "create",
            value: function create(callback) {
              this.callback = callback;
              this.xhr.send(JSON.stringify({
                blob: this.attributes
              }));
            }
          }, {
            key: "requestDidLoad",
            value: function requestDidLoad(event) {
              if (this.status >= 200 && this.status < 300) {
                var response = this.response;
                var direct_upload = response.direct_upload;
                delete response.direct_upload;
                this.attributes = response;
                this.directUploadData = direct_upload;
                this.callback(null, this.toJSON());
              } else {
                this.requestDidError(event);
              }
            }
          }, {
            key: "requestDidError",
            value: function requestDidError(event) {
              this.callback('Error creating Blob for "' + this.file.name + '". Status: ' + this.status);
            }
          }, {
            key: "toJSON",
            value: function toJSON() {
              var result = {};
              for (var key in this.attributes) {
                result[key] = this.attributes[key];
              }
              return result;
            }
          }, {
            key: "status",
            get: function get$$1() {
              return this.xhr.status;
            }
          }, {
            key: "response",
            get: function get$$1() {
              var _xhr = this.xhr, responseType = _xhr.responseType, response = _xhr.response;
              if (responseType == "json") {
                return response;
              } else {
                return JSON.parse(response);
              }
            }
          }]);
          return BlobRecord2;
        }();
        var BlobUpload = function() {
          function BlobUpload2(blob) {
            var _this = this;
            classCallCheck(this, BlobUpload2);
            this.blob = blob;
            this.file = blob.file;
            var _blob$directUploadDat = blob.directUploadData, url = _blob$directUploadDat.url, headers = _blob$directUploadDat.headers;
            this.xhr = new XMLHttpRequest();
            this.xhr.open("PUT", url, true);
            this.xhr.responseType = "text";
            for (var key in headers) {
              this.xhr.setRequestHeader(key, headers[key]);
            }
            this.xhr.addEventListener("load", function(event) {
              return _this.requestDidLoad(event);
            });
            this.xhr.addEventListener("error", function(event) {
              return _this.requestDidError(event);
            });
          }
          createClass(BlobUpload2, [{
            key: "create",
            value: function create(callback) {
              this.callback = callback;
              this.xhr.send(this.file.slice());
            }
          }, {
            key: "requestDidLoad",
            value: function requestDidLoad(event) {
              var _xhr = this.xhr, status = _xhr.status, response = _xhr.response;
              if (status >= 200 && status < 300) {
                this.callback(null, response);
              } else {
                this.requestDidError(event);
              }
            }
          }, {
            key: "requestDidError",
            value: function requestDidError(event) {
              this.callback('Error storing "' + this.file.name + '". Status: ' + this.xhr.status);
            }
          }]);
          return BlobUpload2;
        }();
        var id = 0;
        var DirectUpload2 = function() {
          function DirectUpload3(file, url, delegate) {
            classCallCheck(this, DirectUpload3);
            this.id = ++id;
            this.file = file;
            this.url = url;
            this.delegate = delegate;
          }
          createClass(DirectUpload3, [{
            key: "create",
            value: function create(callback) {
              var _this = this;
              FileChecksum.create(this.file, function(error, checksum) {
                if (error) {
                  callback(error);
                  return;
                }
                var blob = new BlobRecord(_this.file, checksum, _this.url);
                notify(_this.delegate, "directUploadWillCreateBlobWithXHR", blob.xhr);
                blob.create(function(error2) {
                  if (error2) {
                    callback(error2);
                  } else {
                    var upload = new BlobUpload(blob);
                    notify(_this.delegate, "directUploadWillStoreFileWithXHR", upload.xhr);
                    upload.create(function(error3) {
                      if (error3) {
                        callback(error3);
                      } else {
                        callback(null, blob.toJSON());
                      }
                    });
                  }
                });
              });
            }
          }]);
          return DirectUpload3;
        }();
        function notify(object, methodName) {
          if (object && typeof object[methodName] == "function") {
            for (var _len = arguments.length, messages = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
              messages[_key - 2] = arguments[_key];
            }
            return object[methodName].apply(object, messages);
          }
        }
        var DirectUploadController = function() {
          function DirectUploadController2(input, file) {
            classCallCheck(this, DirectUploadController2);
            this.input = input;
            this.file = file;
            this.directUpload = new DirectUpload2(this.file, this.url, this);
            this.dispatch("initialize");
          }
          createClass(DirectUploadController2, [{
            key: "start",
            value: function start3(callback) {
              var _this = this;
              var hiddenInput = document.createElement("input");
              hiddenInput.type = "hidden";
              hiddenInput.name = this.input.name;
              this.input.insertAdjacentElement("beforebegin", hiddenInput);
              this.dispatch("start");
              this.directUpload.create(function(error, attributes) {
                if (error) {
                  hiddenInput.parentNode.removeChild(hiddenInput);
                  _this.dispatchError(error);
                } else {
                  hiddenInput.value = attributes.signed_id;
                }
                _this.dispatch("end");
                callback(error);
              });
            }
          }, {
            key: "uploadRequestDidProgress",
            value: function uploadRequestDidProgress(event) {
              var progress = event.loaded / event.total * 100;
              if (progress) {
                this.dispatch("progress", {
                  progress
                });
              }
            }
          }, {
            key: "dispatch",
            value: function dispatch(name) {
              var detail = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
              detail.file = this.file;
              detail.id = this.directUpload.id;
              return dispatchEvent(this.input, "direct-upload:" + name, {
                detail
              });
            }
          }, {
            key: "dispatchError",
            value: function dispatchError(error) {
              var event = this.dispatch("error", {
                error
              });
              if (!event.defaultPrevented) {
                alert(error);
              }
            }
          }, {
            key: "directUploadWillCreateBlobWithXHR",
            value: function directUploadWillCreateBlobWithXHR(xhr) {
              this.dispatch("before-blob-request", {
                xhr
              });
            }
          }, {
            key: "directUploadWillStoreFileWithXHR",
            value: function directUploadWillStoreFileWithXHR(xhr) {
              var _this2 = this;
              this.dispatch("before-storage-request", {
                xhr
              });
              xhr.upload.addEventListener("progress", function(event) {
                return _this2.uploadRequestDidProgress(event);
              });
            }
          }, {
            key: "url",
            get: function get$$1() {
              return this.input.getAttribute("data-direct-upload-url");
            }
          }]);
          return DirectUploadController2;
        }();
        var inputSelector = "input[type=file][data-direct-upload-url]:not([disabled])";
        var DirectUploadsController = function() {
          function DirectUploadsController2(form) {
            classCallCheck(this, DirectUploadsController2);
            this.form = form;
            this.inputs = findElements(form, inputSelector).filter(function(input) {
              return input.files.length;
            });
          }
          createClass(DirectUploadsController2, [{
            key: "start",
            value: function start3(callback) {
              var _this = this;
              var controllers = this.createDirectUploadControllers();
              var startNextController = function startNextController2() {
                var controller = controllers.shift();
                if (controller) {
                  controller.start(function(error) {
                    if (error) {
                      callback(error);
                      _this.dispatch("end");
                    } else {
                      startNextController2();
                    }
                  });
                } else {
                  callback();
                  _this.dispatch("end");
                }
              };
              this.dispatch("start");
              startNextController();
            }
          }, {
            key: "createDirectUploadControllers",
            value: function createDirectUploadControllers() {
              var controllers = [];
              this.inputs.forEach(function(input) {
                toArray$1(input.files).forEach(function(file) {
                  var controller = new DirectUploadController(input, file);
                  controllers.push(controller);
                });
              });
              return controllers;
            }
          }, {
            key: "dispatch",
            value: function dispatch(name) {
              var detail = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
              return dispatchEvent(this.form, "direct-uploads:" + name, {
                detail
              });
            }
          }]);
          return DirectUploadsController2;
        }();
        var processingAttribute = "data-direct-uploads-processing";
        var submitButtonsByForm = /* @__PURE__ */ new WeakMap();
        var started = false;
        function start2() {
          if (!started) {
            started = true;
            document.addEventListener("click", didClick, true);
            document.addEventListener("submit", didSubmitForm);
            document.addEventListener("ajax:before", didSubmitRemoteElement);
          }
        }
        function didClick(event) {
          var target = event.target;
          if ((target.tagName == "INPUT" || target.tagName == "BUTTON") && target.type == "submit" && target.form) {
            submitButtonsByForm.set(target.form, target);
          }
        }
        function didSubmitForm(event) {
          handleFormSubmissionEvent(event);
        }
        function didSubmitRemoteElement(event) {
          if (event.target.tagName == "FORM") {
            handleFormSubmissionEvent(event);
          }
        }
        function handleFormSubmissionEvent(event) {
          var form = event.target;
          if (form.hasAttribute(processingAttribute)) {
            event.preventDefault();
            return;
          }
          var controller = new DirectUploadsController(form);
          var inputs = controller.inputs;
          if (inputs.length) {
            event.preventDefault();
            form.setAttribute(processingAttribute, "");
            inputs.forEach(disable);
            controller.start(function(error) {
              form.removeAttribute(processingAttribute);
              if (error) {
                inputs.forEach(enable);
              } else {
                submitForm(form);
              }
            });
          }
        }
        function submitForm(form) {
          var button = submitButtonsByForm.get(form) || findElement(form, "input[type=submit], button[type=submit]");
          if (button) {
            var _button = button, disabled = _button.disabled;
            button.disabled = false;
            button.focus();
            button.click();
            button.disabled = disabled;
          } else {
            button = document.createElement("input");
            button.type = "submit";
            button.style.display = "none";
            form.appendChild(button);
            button.click();
            form.removeChild(button);
          }
          submitButtonsByForm.delete(form);
        }
        function disable(input) {
          input.disabled = true;
        }
        function enable(input) {
          input.disabled = false;
        }
        function autostart() {
          if (window.ActiveStorage) {
            start2();
          }
        }
        setTimeout(autostart, 1);
        exports2.start = start2;
        exports2.DirectUpload = DirectUpload2;
        Object.defineProperty(exports2, "__esModule", {
          value: true
        });
      });
    }
  });

  // node_modules/trix/dist/trix.js
  var require_trix = __commonJS({
    "node_modules/trix/dist/trix.js"(exports, module) {
      (function() {
      }).call(exports), function() {
        var t;
        null == window.Set && (window.Set = t = function() {
          function t2() {
            this.clear();
          }
          return t2.prototype.clear = function() {
            return this.values = [];
          }, t2.prototype.has = function(t3) {
            return -1 !== this.values.indexOf(t3);
          }, t2.prototype.add = function(t3) {
            return this.has(t3) || this.values.push(t3), this;
          }, t2.prototype["delete"] = function(t3) {
            var e;
            return -1 === (e = this.values.indexOf(t3)) ? false : (this.values.splice(e, 1), true);
          }, t2.prototype.forEach = function() {
            var t3;
            return (t3 = this.values).forEach.apply(t3, arguments);
          }, t2;
        }());
      }.call(exports), function(t) {
        function e() {
        }
        function n(t2, e2) {
          return function() {
            t2.apply(e2, arguments);
          };
        }
        function i(t2) {
          if ("object" != typeof this)
            throw new TypeError("Promises must be constructed via new");
          if ("function" != typeof t2)
            throw new TypeError("not a function");
          this._state = 0, this._handled = false, this._value = void 0, this._deferreds = [], c(t2, this);
        }
        function o(t2, e2) {
          for (; 3 === t2._state; )
            t2 = t2._value;
          return 0 === t2._state ? void t2._deferreds.push(e2) : (t2._handled = true, void h(function() {
            var n2 = 1 === t2._state ? e2.onFulfilled : e2.onRejected;
            if (null === n2)
              return void (1 === t2._state ? r : s)(e2.promise, t2._value);
            var i2;
            try {
              i2 = n2(t2._value);
            } catch (o2) {
              return void s(e2.promise, o2);
            }
            r(e2.promise, i2);
          }));
        }
        function r(t2, e2) {
          try {
            if (e2 === t2)
              throw new TypeError("A promise cannot be resolved with itself.");
            if (e2 && ("object" == typeof e2 || "function" == typeof e2)) {
              var o2 = e2.then;
              if (e2 instanceof i)
                return t2._state = 3, t2._value = e2, void a(t2);
              if ("function" == typeof o2)
                return void c(n(o2, e2), t2);
            }
            t2._state = 1, t2._value = e2, a(t2);
          } catch (r2) {
            s(t2, r2);
          }
        }
        function s(t2, e2) {
          t2._state = 2, t2._value = e2, a(t2);
        }
        function a(t2) {
          2 === t2._state && 0 === t2._deferreds.length && setTimeout(function() {
            t2._handled || p(t2._value);
          }, 1);
          for (var e2 = 0, n2 = t2._deferreds.length; n2 > e2; e2++)
            o(t2, t2._deferreds[e2]);
          t2._deferreds = null;
        }
        function u(t2, e2, n2) {
          this.onFulfilled = "function" == typeof t2 ? t2 : null, this.onRejected = "function" == typeof e2 ? e2 : null, this.promise = n2;
        }
        function c(t2, e2) {
          var n2 = false;
          try {
            t2(function(t3) {
              n2 || (n2 = true, r(e2, t3));
            }, function(t3) {
              n2 || (n2 = true, s(e2, t3));
            });
          } catch (i2) {
            if (n2)
              return;
            n2 = true, s(e2, i2);
          }
        }
        var l = setTimeout, h = "function" == typeof setImmediate && setImmediate || function(t2) {
          l(t2, 1);
        }, p = function(t2) {
          "undefined" != typeof console && console && console.warn("Possible Unhandled Promise Rejection:", t2);
        };
        i.prototype["catch"] = function(t2) {
          return this.then(null, t2);
        }, i.prototype.then = function(t2, n2) {
          var r2 = new i(e);
          return o(this, new u(t2, n2, r2)), r2;
        }, i.all = function(t2) {
          var e2 = Array.prototype.slice.call(t2);
          return new i(function(t3, n2) {
            function i2(r3, s2) {
              try {
                if (s2 && ("object" == typeof s2 || "function" == typeof s2)) {
                  var a2 = s2.then;
                  if ("function" == typeof a2)
                    return void a2.call(s2, function(t4) {
                      i2(r3, t4);
                    }, n2);
                }
                e2[r3] = s2, 0 === --o2 && t3(e2);
              } catch (u2) {
                n2(u2);
              }
            }
            if (0 === e2.length)
              return t3([]);
            for (var o2 = e2.length, r2 = 0; r2 < e2.length; r2++)
              i2(r2, e2[r2]);
          });
        }, i.resolve = function(t2) {
          return t2 && "object" == typeof t2 && t2.constructor === i ? t2 : new i(function(e2) {
            e2(t2);
          });
        }, i.reject = function(t2) {
          return new i(function(e2, n2) {
            n2(t2);
          });
        }, i.race = function(t2) {
          return new i(function(e2, n2) {
            for (var i2 = 0, o2 = t2.length; o2 > i2; i2++)
              t2[i2].then(e2, n2);
          });
        }, i._setImmediateFn = function(t2) {
          h = t2;
        }, i._setUnhandledRejectionFn = function(t2) {
          p = t2;
        }, "undefined" != typeof module && module.exports ? module.exports = i : t.Promise || (t.Promise = i);
      }(exports), function() {
        var t = "object" == typeof window.customElements, e = "function" == typeof document.registerElement, n = t || e;
        n || /**
        * @license
        * Copyright (c) 2014 The Polymer Project Authors. All rights reserved.
        * This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
        * The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
        * The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
        * Code distributed by Google as part of the polymer project is also
        * subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
        */
        ("undefined" == typeof WeakMap && !function() {
          var t2 = Object.defineProperty, e2 = Date.now() % 1e9, n2 = function() {
            this.name = "__st" + (1e9 * Math.random() >>> 0) + (e2++ + "__");
          };
          n2.prototype = { set: function(e3, n3) {
            var i = e3[this.name];
            return i && i[0] === e3 ? i[1] = n3 : t2(e3, this.name, { value: [e3, n3], writable: true }), this;
          }, get: function(t3) {
            var e3;
            return (e3 = t3[this.name]) && e3[0] === t3 ? e3[1] : void 0;
          }, "delete": function(t3) {
            var e3 = t3[this.name];
            return e3 && e3[0] === t3 ? (e3[0] = e3[1] = void 0, true) : false;
          }, has: function(t3) {
            var e3 = t3[this.name];
            return e3 ? e3[0] === t3 : false;
          } }, window.WeakMap = n2;
        }(), function(t2) {
          function e2(t3) {
            A.push(t3), b || (b = true, g(i));
          }
          function n2(t3) {
            return window.ShadowDOMPolyfill && window.ShadowDOMPolyfill.wrapIfNeeded(t3) || t3;
          }
          function i() {
            b = false;
            var t3 = A;
            A = [], t3.sort(function(t4, e4) {
              return t4.uid_ - e4.uid_;
            });
            var e3 = false;
            t3.forEach(function(t4) {
              var n3 = t4.takeRecords();
              o(t4), n3.length && (t4.callback_(n3, t4), e3 = true);
            }), e3 && i();
          }
          function o(t3) {
            t3.nodes_.forEach(function(e3) {
              var n3 = m.get(e3);
              n3 && n3.forEach(function(e4) {
                e4.observer === t3 && e4.removeTransientObservers();
              });
            });
          }
          function r(t3, e3) {
            for (var n3 = t3; n3; n3 = n3.parentNode) {
              var i2 = m.get(n3);
              if (i2)
                for (var o2 = 0; o2 < i2.length; o2++) {
                  var r2 = i2[o2], s2 = r2.options;
                  if (n3 === t3 || s2.subtree) {
                    var a2 = e3(s2);
                    a2 && r2.enqueue(a2);
                  }
                }
            }
          }
          function s(t3) {
            this.callback_ = t3, this.nodes_ = [], this.records_ = [], this.uid_ = ++C;
          }
          function a(t3, e3) {
            this.type = t3, this.target = e3, this.addedNodes = [], this.removedNodes = [], this.previousSibling = null, this.nextSibling = null, this.attributeName = null, this.attributeNamespace = null, this.oldValue = null;
          }
          function u(t3) {
            var e3 = new a(t3.type, t3.target);
            return e3.addedNodes = t3.addedNodes.slice(), e3.removedNodes = t3.removedNodes.slice(), e3.previousSibling = t3.previousSibling, e3.nextSibling = t3.nextSibling, e3.attributeName = t3.attributeName, e3.attributeNamespace = t3.attributeNamespace, e3.oldValue = t3.oldValue, e3;
          }
          function c(t3, e3) {
            return x = new a(t3, e3);
          }
          function l(t3) {
            return w ? w : (w = u(x), w.oldValue = t3, w);
          }
          function h() {
            x = w = void 0;
          }
          function p(t3) {
            return t3 === w || t3 === x;
          }
          function d(t3, e3) {
            return t3 === e3 ? t3 : w && p(t3) ? w : null;
          }
          function f(t3, e3, n3) {
            this.observer = t3, this.target = e3, this.options = n3, this.transientObservedNodes = [];
          }
          if (!t2.JsMutationObserver) {
            var g, m = /* @__PURE__ */ new WeakMap();
            if (/Trident|Edge/.test(navigator.userAgent))
              g = setTimeout;
            else if (window.setImmediate)
              g = window.setImmediate;
            else {
              var v = [], y = String(Math.random());
              window.addEventListener("message", function(t3) {
                if (t3.data === y) {
                  var e3 = v;
                  v = [], e3.forEach(function(t4) {
                    t4();
                  });
                }
              }), g = function(t3) {
                v.push(t3), window.postMessage(y, "*");
              };
            }
            var b = false, A = [], C = 0;
            s.prototype = { observe: function(t3, e3) {
              if (t3 = n2(t3), !e3.childList && !e3.attributes && !e3.characterData || e3.attributeOldValue && !e3.attributes || e3.attributeFilter && e3.attributeFilter.length && !e3.attributes || e3.characterDataOldValue && !e3.characterData)
                throw new SyntaxError();
              var i2 = m.get(t3);
              i2 || m.set(t3, i2 = []);
              for (var o2, r2 = 0; r2 < i2.length; r2++)
                if (i2[r2].observer === this) {
                  o2 = i2[r2], o2.removeListeners(), o2.options = e3;
                  break;
                }
              o2 || (o2 = new f(this, t3, e3), i2.push(o2), this.nodes_.push(t3)), o2.addListeners();
            }, disconnect: function() {
              this.nodes_.forEach(function(t3) {
                for (var e3 = m.get(t3), n3 = 0; n3 < e3.length; n3++) {
                  var i2 = e3[n3];
                  if (i2.observer === this) {
                    i2.removeListeners(), e3.splice(n3, 1);
                    break;
                  }
                }
              }, this), this.records_ = [];
            }, takeRecords: function() {
              var t3 = this.records_;
              return this.records_ = [], t3;
            } };
            var x, w;
            f.prototype = { enqueue: function(t3) {
              var n3 = this.observer.records_, i2 = n3.length;
              if (n3.length > 0) {
                var o2 = n3[i2 - 1], r2 = d(o2, t3);
                if (r2)
                  return void (n3[i2 - 1] = r2);
              } else
                e2(this.observer);
              n3[i2] = t3;
            }, addListeners: function() {
              this.addListeners_(this.target);
            }, addListeners_: function(t3) {
              var e3 = this.options;
              e3.attributes && t3.addEventListener("DOMAttrModified", this, true), e3.characterData && t3.addEventListener("DOMCharacterDataModified", this, true), e3.childList && t3.addEventListener("DOMNodeInserted", this, true), (e3.childList || e3.subtree) && t3.addEventListener("DOMNodeRemoved", this, true);
            }, removeListeners: function() {
              this.removeListeners_(this.target);
            }, removeListeners_: function(t3) {
              var e3 = this.options;
              e3.attributes && t3.removeEventListener("DOMAttrModified", this, true), e3.characterData && t3.removeEventListener("DOMCharacterDataModified", this, true), e3.childList && t3.removeEventListener("DOMNodeInserted", this, true), (e3.childList || e3.subtree) && t3.removeEventListener("DOMNodeRemoved", this, true);
            }, addTransientObserver: function(t3) {
              if (t3 !== this.target) {
                this.addListeners_(t3), this.transientObservedNodes.push(t3);
                var e3 = m.get(t3);
                e3 || m.set(t3, e3 = []), e3.push(this);
              }
            }, removeTransientObservers: function() {
              var t3 = this.transientObservedNodes;
              this.transientObservedNodes = [], t3.forEach(function(t4) {
                this.removeListeners_(t4);
                for (var e3 = m.get(t4), n3 = 0; n3 < e3.length; n3++)
                  if (e3[n3] === this) {
                    e3.splice(n3, 1);
                    break;
                  }
              }, this);
            }, handleEvent: function(t3) {
              switch (t3.stopImmediatePropagation(), t3.type) {
                case "DOMAttrModified":
                  var e3 = t3.attrName, n3 = t3.relatedNode.namespaceURI, i2 = t3.target, o2 = new c("attributes", i2);
                  o2.attributeName = e3, o2.attributeNamespace = n3;
                  var s2 = t3.attrChange === MutationEvent.ADDITION ? null : t3.prevValue;
                  r(i2, function(t4) {
                    return !t4.attributes || t4.attributeFilter && t4.attributeFilter.length && -1 === t4.attributeFilter.indexOf(e3) && -1 === t4.attributeFilter.indexOf(n3) ? void 0 : t4.attributeOldValue ? l(s2) : o2;
                  });
                  break;
                case "DOMCharacterDataModified":
                  var i2 = t3.target, o2 = c("characterData", i2), s2 = t3.prevValue;
                  r(i2, function(t4) {
                    return t4.characterData ? t4.characterDataOldValue ? l(s2) : o2 : void 0;
                  });
                  break;
                case "DOMNodeRemoved":
                  this.addTransientObserver(t3.target);
                case "DOMNodeInserted":
                  var a2, u2, p2 = t3.target;
                  "DOMNodeInserted" === t3.type ? (a2 = [p2], u2 = []) : (a2 = [], u2 = [p2]);
                  var d2 = p2.previousSibling, f2 = p2.nextSibling, o2 = c("childList", t3.target.parentNode);
                  o2.addedNodes = a2, o2.removedNodes = u2, o2.previousSibling = d2, o2.nextSibling = f2, r(t3.relatedNode, function(t4) {
                    return t4.childList ? o2 : void 0;
                  });
              }
              h();
            } }, t2.JsMutationObserver = s, t2.MutationObserver || (t2.MutationObserver = s, s._isPolyfilled = true);
          }
        }(self), function() {
          "use strict";
          if (!window.performance || !window.performance.now) {
            var t2 = Date.now();
            window.performance = { now: function() {
              return Date.now() - t2;
            } };
          }
          window.requestAnimationFrame || (window.requestAnimationFrame = function() {
            var t3 = window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame;
            return t3 ? function(e3) {
              return t3(function() {
                e3(performance.now());
              });
            } : function(t4) {
              return window.setTimeout(t4, 1e3 / 60);
            };
          }()), window.cancelAnimationFrame || (window.cancelAnimationFrame = function() {
            return window.webkitCancelAnimationFrame || window.mozCancelAnimationFrame || function(t3) {
              clearTimeout(t3);
            };
          }());
          var e2 = function() {
            var t3 = document.createEvent("Event");
            return t3.initEvent("foo", true, true), t3.preventDefault(), t3.defaultPrevented;
          }();
          if (!e2) {
            var n2 = Event.prototype.preventDefault;
            Event.prototype.preventDefault = function() {
              this.cancelable && (n2.call(this), Object.defineProperty(this, "defaultPrevented", { get: function() {
                return true;
              }, configurable: true }));
            };
          }
          var i = /Trident/.test(navigator.userAgent);
          if ((!window.CustomEvent || i && "function" != typeof window.CustomEvent) && (window.CustomEvent = function(t3, e3) {
            e3 = e3 || {};
            var n3 = document.createEvent("CustomEvent");
            return n3.initCustomEvent(t3, Boolean(e3.bubbles), Boolean(e3.cancelable), e3.detail), n3;
          }, window.CustomEvent.prototype = window.Event.prototype), !window.Event || i && "function" != typeof window.Event) {
            var o = window.Event;
            window.Event = function(t3, e3) {
              e3 = e3 || {};
              var n3 = document.createEvent("Event");
              return n3.initEvent(t3, Boolean(e3.bubbles), Boolean(e3.cancelable)), n3;
            }, window.Event.prototype = o.prototype;
          }
        }(window.WebComponents), window.CustomElements = window.CustomElements || { flags: {} }, function(t2) {
          var e2 = t2.flags, n2 = [], i = function(t3) {
            n2.push(t3);
          }, o = function() {
            n2.forEach(function(e3) {
              e3(t2);
            });
          };
          t2.addModule = i, t2.initializeModules = o, t2.hasNative = Boolean(document.registerElement), t2.isIE = /Trident/.test(navigator.userAgent), t2.useNative = !e2.register && t2.hasNative && !window.ShadowDOMPolyfill && (!window.HTMLImports || window.HTMLImports.useNative);
        }(window.CustomElements), window.CustomElements.addModule(function(t2) {
          function e2(t3, e3) {
            n2(t3, function(t4) {
              return e3(t4) ? true : void i(t4, e3);
            }), i(t3, e3);
          }
          function n2(t3, e3, i2) {
            var o2 = t3.firstElementChild;
            if (!o2)
              for (o2 = t3.firstChild; o2 && o2.nodeType !== Node.ELEMENT_NODE; )
                o2 = o2.nextSibling;
            for (; o2; )
              e3(o2, i2) !== true && n2(o2, e3, i2), o2 = o2.nextElementSibling;
            return null;
          }
          function i(t3, n3) {
            for (var i2 = t3.shadowRoot; i2; )
              e2(i2, n3), i2 = i2.olderShadowRoot;
          }
          function o(t3, e3) {
            r(t3, e3, []);
          }
          function r(t3, e3, n3) {
            if (t3 = window.wrap(t3), !(n3.indexOf(t3) >= 0)) {
              n3.push(t3);
              for (var i2, o2 = t3.querySelectorAll("link[rel=" + s + "]"), a = 0, u = o2.length; u > a && (i2 = o2[a]); a++)
                i2.import && r(i2.import, e3, n3);
              e3(t3);
            }
          }
          var s = window.HTMLImports ? window.HTMLImports.IMPORT_LINK_TYPE : "none";
          t2.forDocumentTree = o, t2.forSubtree = e2;
        }), window.CustomElements.addModule(function(t2) {
          function e2(t3, e3) {
            return n2(t3, e3) || i(t3, e3);
          }
          function n2(e3, n3) {
            return t2.upgrade(e3, n3) ? true : void (n3 && s(e3));
          }
          function i(t3, e3) {
            b(t3, function(t4) {
              return n2(t4, e3) ? true : void 0;
            });
          }
          function o(t3) {
            w.push(t3), x || (x = true, setTimeout(r));
          }
          function r() {
            x = false;
            for (var t3, e3 = w, n3 = 0, i2 = e3.length; i2 > n3 && (t3 = e3[n3]); n3++)
              t3();
            w = [];
          }
          function s(t3) {
            C ? o(function() {
              a(t3);
            }) : a(t3);
          }
          function a(t3) {
            t3.__upgraded__ && !t3.__attached && (t3.__attached = true, t3.attachedCallback && t3.attachedCallback());
          }
          function u(t3) {
            c(t3), b(t3, function(t4) {
              c(t4);
            });
          }
          function c(t3) {
            C ? o(function() {
              l(t3);
            }) : l(t3);
          }
          function l(t3) {
            t3.__upgraded__ && t3.__attached && (t3.__attached = false, t3.detachedCallback && t3.detachedCallback());
          }
          function h(t3) {
            for (var e3 = t3, n3 = window.wrap(document); e3; ) {
              if (e3 == n3)
                return true;
              e3 = e3.parentNode || e3.nodeType === Node.DOCUMENT_FRAGMENT_NODE && e3.host;
            }
          }
          function p(t3) {
            if (t3.shadowRoot && !t3.shadowRoot.__watched) {
              y.dom && console.log("watching shadow-root for: ", t3.localName);
              for (var e3 = t3.shadowRoot; e3; )
                g(e3), e3 = e3.olderShadowRoot;
            }
          }
          function d(t3, n3) {
            if (y.dom) {
              var i2 = n3[0];
              if (i2 && "childList" === i2.type && i2.addedNodes && i2.addedNodes) {
                for (var o2 = i2.addedNodes[0]; o2 && o2 !== document && !o2.host; )
                  o2 = o2.parentNode;
                var r2 = o2 && (o2.URL || o2._URL || o2.host && o2.host.localName) || "";
                r2 = r2.split("/?").shift().split("/").pop();
              }
              console.group("mutations (%d) [%s]", n3.length, r2 || "");
            }
            var s2 = h(t3);
            n3.forEach(function(t4) {
              "childList" === t4.type && (E(t4.addedNodes, function(t5) {
                t5.localName && e2(t5, s2);
              }), E(t4.removedNodes, function(t5) {
                t5.localName && u(t5);
              }));
            }), y.dom && console.groupEnd();
          }
          function f(t3) {
            for (t3 = window.wrap(t3), t3 || (t3 = window.wrap(document)); t3.parentNode; )
              t3 = t3.parentNode;
            var e3 = t3.__observer;
            e3 && (d(t3, e3.takeRecords()), r());
          }
          function g(t3) {
            if (!t3.__observer) {
              var e3 = new MutationObserver(d.bind(this, t3));
              e3.observe(t3, { childList: true, subtree: true }), t3.__observer = e3;
            }
          }
          function m(t3) {
            t3 = window.wrap(t3), y.dom && console.group("upgradeDocument: ", t3.baseURI.split("/").pop());
            var n3 = t3 === window.wrap(document);
            e2(t3, n3), g(t3), y.dom && console.groupEnd();
          }
          function v(t3) {
            A(t3, m);
          }
          var y = t2.flags, b = t2.forSubtree, A = t2.forDocumentTree, C = window.MutationObserver._isPolyfilled && y["throttle-attached"];
          t2.hasPolyfillMutations = C, t2.hasThrottledAttached = C;
          var x = false, w = [], E = Array.prototype.forEach.call.bind(Array.prototype.forEach), S = Element.prototype.createShadowRoot;
          S && (Element.prototype.createShadowRoot = function() {
            var t3 = S.call(this);
            return window.CustomElements.watchShadow(this), t3;
          }), t2.watchShadow = p, t2.upgradeDocumentTree = v, t2.upgradeDocument = m, t2.upgradeSubtree = i, t2.upgradeAll = e2, t2.attached = s, t2.takeRecords = f;
        }), window.CustomElements.addModule(function(t2) {
          function e2(e3, i2) {
            if ("template" === e3.localName && window.HTMLTemplateElement && HTMLTemplateElement.decorate && HTMLTemplateElement.decorate(e3), !e3.__upgraded__ && e3.nodeType === Node.ELEMENT_NODE) {
              var o2 = e3.getAttribute("is"), r2 = t2.getRegisteredDefinition(e3.localName) || t2.getRegisteredDefinition(o2);
              if (r2 && (o2 && r2.tag == e3.localName || !o2 && !r2.extends))
                return n2(e3, r2, i2);
            }
          }
          function n2(e3, n3, o2) {
            return s.upgrade && console.group("upgrade:", e3.localName), n3.is && e3.setAttribute("is", n3.is), i(e3, n3), e3.__upgraded__ = true, r(e3), o2 && t2.attached(e3), t2.upgradeSubtree(e3, o2), s.upgrade && console.groupEnd(), e3;
          }
          function i(t3, e3) {
            Object.__proto__ ? t3.__proto__ = e3.prototype : (o(t3, e3.prototype, e3.native), t3.__proto__ = e3.prototype);
          }
          function o(t3, e3, n3) {
            for (var i2 = {}, o2 = e3; o2 !== n3 && o2 !== HTMLElement.prototype; ) {
              for (var r2, s2 = Object.getOwnPropertyNames(o2), a = 0; r2 = s2[a]; a++)
                i2[r2] || (Object.defineProperty(t3, r2, Object.getOwnPropertyDescriptor(o2, r2)), i2[r2] = 1);
              o2 = Object.getPrototypeOf(o2);
            }
          }
          function r(t3) {
            t3.createdCallback && t3.createdCallback();
          }
          var s = t2.flags;
          t2.upgrade = e2, t2.upgradeWithDefinition = n2, t2.implementPrototype = i;
        }), window.CustomElements.addModule(function(t2) {
          function e2(e3, i2) {
            var u2 = i2 || {};
            if (!e3)
              throw new Error("document.registerElement: first argument `name` must not be empty");
            if (e3.indexOf("-") < 0)
              throw new Error("document.registerElement: first argument ('name') must contain a dash ('-'). Argument provided was '" + String(e3) + "'.");
            if (o(e3))
              throw new Error("Failed to execute 'registerElement' on 'Document': Registration failed for type '" + String(e3) + "'. The type name is invalid.");
            if (c(e3))
              throw new Error("DuplicateDefinitionError: a type with name '" + String(e3) + "' is already registered");
            return u2.prototype || (u2.prototype = Object.create(HTMLElement.prototype)), u2.__name = e3.toLowerCase(), u2.extends && (u2.extends = u2.extends.toLowerCase()), u2.lifecycle = u2.lifecycle || {}, u2.ancestry = r(u2.extends), s(u2), a(u2), n2(u2.prototype), l(u2.__name, u2), u2.ctor = h(u2), u2.ctor.prototype = u2.prototype, u2.prototype.constructor = u2.ctor, t2.ready && m(document), u2.ctor;
          }
          function n2(t3) {
            if (!t3.setAttribute._polyfilled) {
              var e3 = t3.setAttribute;
              t3.setAttribute = function(t4, n4) {
                i.call(this, t4, n4, e3);
              };
              var n3 = t3.removeAttribute;
              t3.removeAttribute = function(t4) {
                i.call(this, t4, null, n3);
              }, t3.setAttribute._polyfilled = true;
            }
          }
          function i(t3, e3, n3) {
            t3 = t3.toLowerCase();
            var i2 = this.getAttribute(t3);
            n3.apply(this, arguments);
            var o2 = this.getAttribute(t3);
            this.attributeChangedCallback && o2 !== i2 && this.attributeChangedCallback(t3, i2, o2);
          }
          function o(t3) {
            for (var e3 = 0; e3 < C.length; e3++)
              if (t3 === C[e3])
                return true;
          }
          function r(t3) {
            var e3 = c(t3);
            return e3 ? r(e3.extends).concat([e3]) : [];
          }
          function s(t3) {
            for (var e3, n3 = t3.extends, i2 = 0; e3 = t3.ancestry[i2]; i2++)
              n3 = e3.is && e3.tag;
            t3.tag = n3 || t3.__name, n3 && (t3.is = t3.__name);
          }
          function a(t3) {
            if (!Object.__proto__) {
              var e3 = HTMLElement.prototype;
              if (t3.is) {
                var n3 = document.createElement(t3.tag);
                e3 = Object.getPrototypeOf(n3);
              }
              for (var i2, o2 = t3.prototype, r2 = false; o2; )
                o2 == e3 && (r2 = true), i2 = Object.getPrototypeOf(o2), i2 && (o2.__proto__ = i2), o2 = i2;
              r2 || console.warn(t3.tag + " prototype not found in prototype chain for " + t3.is), t3.native = e3;
            }
          }
          function u(t3) {
            return y(E(t3.tag), t3);
          }
          function c(t3) {
            return t3 ? x[t3.toLowerCase()] : void 0;
          }
          function l(t3, e3) {
            x[t3] = e3;
          }
          function h(t3) {
            return function() {
              return u(t3);
            };
          }
          function p(t3, e3, n3) {
            return t3 === w ? d(e3, n3) : S(t3, e3);
          }
          function d(t3, e3) {
            t3 && (t3 = t3.toLowerCase()), e3 && (e3 = e3.toLowerCase());
            var n3 = c(e3 || t3);
            if (n3) {
              if (t3 == n3.tag && e3 == n3.is)
                return new n3.ctor();
              if (!e3 && !n3.is)
                return new n3.ctor();
            }
            var i2;
            return e3 ? (i2 = d(t3), i2.setAttribute("is", e3), i2) : (i2 = E(t3), t3.indexOf("-") >= 0 && b(i2, HTMLElement), i2);
          }
          function f(t3, e3) {
            var n3 = t3[e3];
            t3[e3] = function() {
              var t4 = n3.apply(this, arguments);
              return v(t4), t4;
            };
          }
          var g, m = (t2.isIE, t2.upgradeDocumentTree), v = t2.upgradeAll, y = t2.upgradeWithDefinition, b = t2.implementPrototype, A = t2.useNative, C = ["annotation-xml", "color-profile", "font-face", "font-face-src", "font-face-uri", "font-face-format", "font-face-name", "missing-glyph"], x = {}, w = "http://www.w3.org/1999/xhtml", E = document.createElement.bind(document), S = document.createElementNS.bind(document);
          g = Object.__proto__ || A ? function(t3, e3) {
            return t3 instanceof e3;
          } : function(t3, e3) {
            if (t3 instanceof e3)
              return true;
            for (var n3 = t3; n3; ) {
              if (n3 === e3.prototype)
                return true;
              n3 = n3.__proto__;
            }
            return false;
          }, f(Node.prototype, "cloneNode"), f(document, "importNode"), document.registerElement = e2, document.createElement = d, document.createElementNS = p, t2.registry = x, t2.instanceof = g, t2.reservedTagList = C, t2.getRegisteredDefinition = c, document.register = document.registerElement;
        }), function(t2) {
          function e2() {
            r(window.wrap(document)), window.CustomElements.ready = true;
            var t3 = window.requestAnimationFrame || function(t4) {
              setTimeout(t4, 16);
            };
            t3(function() {
              setTimeout(function() {
                window.CustomElements.readyTime = Date.now(), window.HTMLImports && (window.CustomElements.elapsed = window.CustomElements.readyTime - window.HTMLImports.readyTime), document.dispatchEvent(new CustomEvent("WebComponentsReady", { bubbles: true }));
              });
            });
          }
          var n2 = t2.useNative, i = t2.initializeModules;
          if (t2.isIE, n2) {
            var o = function() {
            };
            t2.watchShadow = o, t2.upgrade = o, t2.upgradeAll = o, t2.upgradeDocumentTree = o, t2.upgradeSubtree = o, t2.takeRecords = o, t2.instanceof = function(t3, e3) {
              return t3 instanceof e3;
            };
          } else
            i();
          var r = t2.upgradeDocumentTree, s = t2.upgradeDocument;
          if (window.wrap || (window.ShadowDOMPolyfill ? (window.wrap = window.ShadowDOMPolyfill.wrapIfNeeded, window.unwrap = window.ShadowDOMPolyfill.unwrapIfNeeded) : window.wrap = window.unwrap = function(t3) {
            return t3;
          }), window.HTMLImports && (window.HTMLImports.__importsParsingHook = function(t3) {
            t3.import && s(wrap(t3.import));
          }), "complete" === document.readyState || t2.flags.eager)
            e2();
          else if ("interactive" !== document.readyState || window.attachEvent || window.HTMLImports && !window.HTMLImports.ready) {
            var a = window.HTMLImports && !window.HTMLImports.ready ? "HTMLImportsLoaded" : "DOMContentLoaded";
            window.addEventListener(a, e2);
          } else
            e2();
        }(window.CustomElements));
      }.call(exports), function() {
      }.call(exports), function() {
        var t = this;
        (function() {
          (function() {
            this.Trix = { VERSION: "1.3.1", ZERO_WIDTH_SPACE: "\uFEFF", NON_BREAKING_SPACE: "\xA0", OBJECT_REPLACEMENT_CHARACTER: "\uFFFC", browser: { composesExistingText: /Android.*Chrome/.test(navigator.userAgent), forcesObjectResizing: /Trident.*rv:11/.test(navigator.userAgent), supportsInputEvents: function() {
              var t2, e2, n, i;
              if ("undefined" == typeof InputEvent)
                return false;
              for (i = ["data", "getTargetRanges", "inputType"], t2 = 0, e2 = i.length; e2 > t2; t2++)
                if (n = i[t2], !(n in InputEvent.prototype))
                  return false;
              return true;
            }() }, config: {} };
          }).call(this);
        }).call(t);
        var e = t.Trix;
        (function() {
          (function() {
            e.BasicObject = function() {
              function t2() {
              }
              var e2, n, i;
              return t2.proxyMethod = function(t3) {
                var i2, o, r, s, a;
                return r = n(t3), i2 = r.name, s = r.toMethod, a = r.toProperty, o = r.optional, this.prototype[i2] = function() {
                  var t4, n2;
                  return t4 = null != s ? o ? "function" == typeof this[s] ? this[s]() : void 0 : this[s]() : null != a ? this[a] : void 0, o ? (n2 = null != t4 ? t4[i2] : void 0, null != n2 ? e2.call(n2, t4, arguments) : void 0) : (n2 = t4[i2], e2.call(n2, t4, arguments));
                };
              }, n = function(t3) {
                var e3, n2;
                if (!(n2 = t3.match(i)))
                  throw new Error("can't parse @proxyMethod expression: " + t3);
                return e3 = { name: n2[4] }, null != n2[2] ? e3.toMethod = n2[1] : e3.toProperty = n2[1], null != n2[3] && (e3.optional = true), e3;
              }, e2 = Function.prototype.apply, i = /^(.+?)(\(\))?(\?)?\.(.+?)$/, t2;
            }();
          }).call(this), function() {
            var t2 = function(t3, e2) {
              function i() {
                this.constructor = t3;
              }
              for (var o in e2)
                n.call(e2, o) && (t3[o] = e2[o]);
              return i.prototype = e2.prototype, t3.prototype = new i(), t3.__super__ = e2.prototype, t3;
            }, n = {}.hasOwnProperty;
            e.Object = function(n2) {
              function i() {
                this.id = ++o;
              }
              var o;
              return t2(i, n2), o = 0, i.fromJSONString = function(t3) {
                return this.fromJSON(JSON.parse(t3));
              }, i.prototype.hasSameConstructorAs = function(t3) {
                return this.constructor === (null != t3 ? t3.constructor : void 0);
              }, i.prototype.isEqualTo = function(t3) {
                return this === t3;
              }, i.prototype.inspect = function() {
                var t3, e2, n3;
                return t3 = function() {
                  var t4, i2, o2;
                  i2 = null != (t4 = this.contentsForInspection()) ? t4 : {}, o2 = [];
                  for (e2 in i2)
                    n3 = i2[e2], o2.push(e2 + "=" + n3);
                  return o2;
                }.call(this), "#<" + this.constructor.name + ":" + this.id + (t3.length ? " " + t3.join(", ") : "") + ">";
              }, i.prototype.contentsForInspection = function() {
              }, i.prototype.toJSONString = function() {
                return JSON.stringify(this);
              }, i.prototype.toUTF16String = function() {
                return e.UTF16String.box(this);
              }, i.prototype.getCacheKey = function() {
                return this.id.toString();
              }, i;
            }(e.BasicObject);
          }.call(this), function() {
            e.extend = function(t2) {
              var e2, n;
              for (e2 in t2)
                n = t2[e2], this[e2] = n;
              return this;
            };
          }.call(this), function() {
            e.extend({ defer: function(t2) {
              return setTimeout(t2, 1);
            } });
          }.call(this), function() {
            var t2, n;
            e.extend({ normalizeSpaces: function(t3) {
              return t3.replace(RegExp("" + e.ZERO_WIDTH_SPACE, "g"), "").replace(RegExp("" + e.NON_BREAKING_SPACE, "g"), " ");
            }, normalizeNewlines: function(t3) {
              return t3.replace(/\r\n/g, "\n");
            }, breakableWhitespacePattern: RegExp("[^\\S" + e.NON_BREAKING_SPACE + "]"), squishBreakableWhitespace: function(t3) {
              return t3.replace(RegExp("" + e.breakableWhitespacePattern.source, "g"), " ").replace(/\ {2,}/g, " ");
            }, summarizeStringChange: function(t3, i) {
              var o, r, s, a;
              return t3 = e.UTF16String.box(t3), i = e.UTF16String.box(i), i.length < t3.length ? (r = n(t3, i), a = r[0], o = r[1]) : (s = n(i, t3), o = s[0], a = s[1]), { added: o, removed: a };
            } }), n = function(n2, i) {
              var o, r, s, a, u;
              return n2.isEqualTo(i) ? ["", ""] : (r = t2(n2, i), a = r.utf16String.length, s = a ? (u = r.offset, r, o = n2.codepoints.slice(0, u).concat(n2.codepoints.slice(u + a)), t2(i, e.UTF16String.fromCodepoints(o))) : t2(i, n2), [r.utf16String.toString(), s.utf16String.toString()]);
            }, t2 = function(t3, e2) {
              var n2, i, o;
              for (n2 = 0, i = t3.length, o = e2.length; i > n2 && t3.charAt(n2).isEqualTo(e2.charAt(n2)); )
                n2++;
              for (; i > n2 + 1 && t3.charAt(i - 1).isEqualTo(e2.charAt(o - 1)); )
                i--, o--;
              return { utf16String: t3.slice(n2, i), offset: n2 };
            };
          }.call(this), function() {
            e.extend({ copyObject: function(t2) {
              var e2, n, i;
              null == t2 && (t2 = {}), n = {};
              for (e2 in t2)
                i = t2[e2], n[e2] = i;
              return n;
            }, objectsAreEqual: function(t2, e2) {
              var n, i;
              if (null == t2 && (t2 = {}), null == e2 && (e2 = {}), Object.keys(t2).length !== Object.keys(e2).length)
                return false;
              for (n in t2)
                if (i = t2[n], i !== e2[n])
                  return false;
              return true;
            } });
          }.call(this), function() {
            var t2 = [].slice;
            e.extend({ arraysAreEqual: function(t3, e2) {
              var n, i, o, r;
              if (null == t3 && (t3 = []), null == e2 && (e2 = []), t3.length !== e2.length)
                return false;
              for (i = n = 0, o = t3.length; o > n; i = ++n)
                if (r = t3[i], r !== e2[i])
                  return false;
              return true;
            }, arrayStartsWith: function(t3, n) {
              return null == t3 && (t3 = []), null == n && (n = []), e.arraysAreEqual(t3.slice(0, n.length), n);
            }, spliceArray: function() {
              var e2, n, i;
              return n = arguments[0], e2 = 2 <= arguments.length ? t2.call(arguments, 1) : [], i = n.slice(0), i.splice.apply(i, e2), i;
            }, summarizeArrayChange: function(t3, e2) {
              var n, i, o, r, s, a, u, c, l, h, p;
              for (null == t3 && (t3 = []), null == e2 && (e2 = []), n = [], h = [], o = /* @__PURE__ */ new Set(), r = 0, u = t3.length; u > r; r++)
                p = t3[r], o.add(p);
              for (i = /* @__PURE__ */ new Set(), s = 0, c = e2.length; c > s; s++)
                p = e2[s], i.add(p), o.has(p) || n.push(p);
              for (a = 0, l = t3.length; l > a; a++)
                p = t3[a], i.has(p) || h.push(p);
              return { added: n, removed: h };
            } });
          }.call(this), function() {
            var t2, n, i, o;
            t2 = null, n = null, o = null, i = null, e.extend({ getAllAttributeNames: function() {
              return null != t2 ? t2 : t2 = e.getTextAttributeNames().concat(e.getBlockAttributeNames());
            }, getBlockConfig: function(t3) {
              return e.config.blockAttributes[t3];
            }, getBlockAttributeNames: function() {
              return null != n ? n : n = Object.keys(e.config.blockAttributes);
            }, getTextConfig: function(t3) {
              return e.config.textAttributes[t3];
            }, getTextAttributeNames: function() {
              return null != o ? o : o = Object.keys(e.config.textAttributes);
            }, getListAttributeNames: function() {
              var t3, n2;
              return null != i ? i : i = function() {
                var i2, o2;
                i2 = e.config.blockAttributes, o2 = [];
                for (t3 in i2)
                  n2 = i2[t3].listAttribute, null != n2 && o2.push(n2);
                return o2;
              }();
            } });
          }.call(this), function() {
            var t2, n, i, o, r, s = [].indexOf || function(t3) {
              for (var e2 = 0, n2 = this.length; n2 > e2; e2++)
                if (e2 in this && this[e2] === t3)
                  return e2;
              return -1;
            };
            t2 = document.documentElement, n = null != (i = null != (o = null != (r = t2.matchesSelector) ? r : t2.webkitMatchesSelector) ? o : t2.msMatchesSelector) ? i : t2.mozMatchesSelector, e.extend({ handleEvent: function(n2, i2) {
              var o2, r2, s2, a, u, c, l, h, p, d, f, g;
              return h = null != i2 ? i2 : {}, c = h.onElement, u = h.matchingSelector, g = h.withCallback, a = h.inPhase, l = h.preventDefault, d = h.times, r2 = null != c ? c : t2, p = u, o2 = g, f = "capturing" === a, s2 = function(t3) {
                var n3;
                return null != d && 0 === --d && s2.destroy(), n3 = e.findClosestElementFromNode(t3.target, { matchingSelector: p }), null != n3 && (null != g && g.call(n3, t3, n3), l) ? t3.preventDefault() : void 0;
              }, s2.destroy = function() {
                return r2.removeEventListener(n2, s2, f);
              }, r2.addEventListener(n2, s2, f), s2;
            }, handleEventOnce: function(t3, n2) {
              return null == n2 && (n2 = {}), n2.times = 1, e.handleEvent(t3, n2);
            }, triggerEvent: function(n2, i2) {
              var o2, r2, s2, a, u, c, l;
              return l = null != i2 ? i2 : {}, c = l.onElement, r2 = l.bubbles, s2 = l.cancelable, o2 = l.attributes, a = null != c ? c : t2, r2 = r2 !== false, s2 = s2 !== false, u = document.createEvent("Events"), u.initEvent(n2, r2, s2), null != o2 && e.extend.call(u, o2), a.dispatchEvent(u);
            }, elementMatchesSelector: function(t3, e2) {
              return 1 === (null != t3 ? t3.nodeType : void 0) ? n.call(t3, e2) : void 0;
            }, findClosestElementFromNode: function(t3, n2) {
              var i2, o2, r2;
              for (o2 = null != n2 ? n2 : {}, i2 = o2.matchingSelector, r2 = o2.untilNode; null != t3 && t3.nodeType !== Node.ELEMENT_NODE; )
                t3 = t3.parentNode;
              if (null != t3) {
                if (null == i2)
                  return t3;
                if (t3.closest && null == r2)
                  return t3.closest(i2);
                for (; t3 && t3 !== r2; ) {
                  if (e.elementMatchesSelector(t3, i2))
                    return t3;
                  t3 = t3.parentNode;
                }
              }
            }, findInnerElement: function(t3) {
              for (; null != t3 ? t3.firstElementChild : void 0; )
                t3 = t3.firstElementChild;
              return t3;
            }, innerElementIsActive: function(t3) {
              return document.activeElement !== t3 && e.elementContainsNode(t3, document.activeElement);
            }, elementContainsNode: function(t3, e2) {
              if (t3 && e2)
                for (; e2; ) {
                  if (e2 === t3)
                    return true;
                  e2 = e2.parentNode;
                }
            }, findNodeFromContainerAndOffset: function(t3, e2) {
              var n2;
              if (t3)
                return t3.nodeType === Node.TEXT_NODE ? t3 : 0 === e2 ? null != (n2 = t3.firstChild) ? n2 : t3 : t3.childNodes.item(e2 - 1);
            }, findElementFromContainerAndOffset: function(t3, n2) {
              var i2;
              return i2 = e.findNodeFromContainerAndOffset(t3, n2), e.findClosestElementFromNode(i2);
            }, findChildIndexOfNode: function(t3) {
              var e2;
              if (null != t3 ? t3.parentNode : void 0) {
                for (e2 = 0; t3 = t3.previousSibling; )
                  e2++;
                return e2;
              }
            }, removeNode: function(t3) {
              var e2;
              return null != t3 && null != (e2 = t3.parentNode) ? e2.removeChild(t3) : void 0;
            }, walkTree: function(t3, e2) {
              var n2, i2, o2, r2, s2;
              return o2 = null != e2 ? e2 : {}, i2 = o2.onlyNodesOfType, r2 = o2.usingFilter, n2 = o2.expandEntityReferences, s2 = function() {
                switch (i2) {
                  case "element":
                    return NodeFilter.SHOW_ELEMENT;
                  case "text":
                    return NodeFilter.SHOW_TEXT;
                  case "comment":
                    return NodeFilter.SHOW_COMMENT;
                  default:
                    return NodeFilter.SHOW_ALL;
                }
              }(), document.createTreeWalker(t3, s2, null != r2 ? r2 : null, n2 === true);
            }, tagName: function(t3) {
              var e2;
              return null != t3 && null != (e2 = t3.tagName) ? e2.toLowerCase() : void 0;
            }, makeElement: function(t3, e2) {
              var n2, i2, o2, r2, s2, a, u, c, l, h, p, d, f, g;
              if (null == e2 && (e2 = {}), "object" == typeof t3 ? (e2 = t3, t3 = e2.tagName) : e2 = { attributes: e2 }, o2 = document.createElement(t3), null != e2.editable && (null == e2.attributes && (e2.attributes = {}), e2.attributes.contenteditable = e2.editable), e2.attributes) {
                l = e2.attributes;
                for (a in l)
                  g = l[a], o2.setAttribute(a, g);
              }
              if (e2.style) {
                h = e2.style;
                for (a in h)
                  g = h[a], o2.style[a] = g;
              }
              if (e2.data) {
                p = e2.data;
                for (a in p)
                  g = p[a], o2.dataset[a] = g;
              }
              if (e2.className)
                for (d = e2.className.split(" "), r2 = 0, u = d.length; u > r2; r2++)
                  i2 = d[r2], o2.classList.add(i2);
              if (e2.textContent && (o2.textContent = e2.textContent), e2.childNodes)
                for (f = [].concat(e2.childNodes), s2 = 0, c = f.length; c > s2; s2++)
                  n2 = f[s2], o2.appendChild(n2);
              return o2;
            }, getBlockTagNames: function() {
              var t3, n2;
              return null != e.blockTagNames ? e.blockTagNames : e.blockTagNames = function() {
                var i2, o2;
                i2 = e.config.blockAttributes, o2 = [];
                for (t3 in i2)
                  n2 = i2[t3].tagName, n2 && o2.push(n2);
                return o2;
              }();
            }, nodeIsBlockContainer: function(t3) {
              return e.nodeIsBlockStartComment(null != t3 ? t3.firstChild : void 0);
            }, nodeProbablyIsBlockContainer: function(t3) {
              var n2, i2;
              return n2 = e.tagName(t3), s.call(e.getBlockTagNames(), n2) >= 0 && (i2 = e.tagName(t3.firstChild), s.call(e.getBlockTagNames(), i2) < 0);
            }, nodeIsBlockStart: function(t3, n2) {
              var i2;
              return i2 = (null != n2 ? n2 : { strict: true }).strict, i2 ? e.nodeIsBlockStartComment(t3) : e.nodeIsBlockStartComment(t3) || !e.nodeIsBlockStartComment(t3.firstChild) && e.nodeProbablyIsBlockContainer(t3);
            }, nodeIsBlockStartComment: function(t3) {
              return e.nodeIsCommentNode(t3) && "block" === (null != t3 ? t3.data : void 0);
            }, nodeIsCommentNode: function(t3) {
              return (null != t3 ? t3.nodeType : void 0) === Node.COMMENT_NODE;
            }, nodeIsCursorTarget: function(t3, n2) {
              var i2;
              return i2 = (null != n2 ? n2 : {}).name, t3 ? e.nodeIsTextNode(t3) ? t3.data === e.ZERO_WIDTH_SPACE ? i2 ? t3.parentNode.dataset.trixCursorTarget === i2 : true : void 0 : e.nodeIsCursorTarget(t3.firstChild) : void 0;
            }, nodeIsAttachmentElement: function(t3) {
              return e.elementMatchesSelector(t3, e.AttachmentView.attachmentSelector);
            }, nodeIsEmptyTextNode: function(t3) {
              return e.nodeIsTextNode(t3) && "" === (null != t3 ? t3.data : void 0);
            }, nodeIsTextNode: function(t3) {
              return (null != t3 ? t3.nodeType : void 0) === Node.TEXT_NODE;
            } });
          }.call(this), function() {
            var t2, n, i, o, r;
            t2 = e.copyObject, o = e.objectsAreEqual, e.extend({ normalizeRange: i = function(t3) {
              var e2;
              if (null != t3)
                return Array.isArray(t3) || (t3 = [t3, t3]), [n(t3[0]), n(null != (e2 = t3[1]) ? e2 : t3[0])];
            }, rangeIsCollapsed: function(t3) {
              var e2, n2, o2;
              if (null != t3)
                return n2 = i(t3), o2 = n2[0], e2 = n2[1], r(o2, e2);
            }, rangesAreEqual: function(t3, e2) {
              var n2, o2, s, a, u, c;
              if (null != t3 && null != e2)
                return s = i(t3), o2 = s[0], n2 = s[1], a = i(e2), c = a[0], u = a[1], r(o2, c) && r(n2, u);
            } }), n = function(e2) {
              return "number" == typeof e2 ? e2 : t2(e2);
            }, r = function(t3, e2) {
              return "number" == typeof t3 ? t3 === e2 : o(t3, e2);
            };
          }.call(this), function() {
            var t2, n, i, o, r, s, a;
            e.registerElement = function(t3, e2) {
              var n2, i2;
              return null == e2 && (e2 = {}), t3 = t3.toLowerCase(), e2 = a(e2), i2 = s(e2), (n2 = i2.defaultCSS) && (delete i2.defaultCSS, o(n2, t3)), r(t3, i2);
            }, o = function(t3, e2) {
              var n2;
              return n2 = i(e2), n2.textContent = t3.replace(/%t/g, e2);
            }, i = function(e2) {
              var n2, i2;
              return n2 = document.createElement("style"), n2.setAttribute("type", "text/css"), n2.setAttribute("data-tag-name", e2.toLowerCase()), (i2 = t2()) && n2.setAttribute("nonce", i2), document.head.insertBefore(n2, document.head.firstChild), n2;
            }, t2 = function() {
              var t3;
              return (t3 = n("trix-csp-nonce") || n("csp-nonce")) ? t3.getAttribute("content") : void 0;
            }, n = function(t3) {
              return document.head.querySelector("meta[name=" + t3 + "]");
            }, s = function(t3) {
              var e2, n2, i2;
              n2 = {};
              for (e2 in t3)
                i2 = t3[e2], n2[e2] = "function" == typeof i2 ? { value: i2 } : i2;
              return n2;
            }, a = function() {
              var t3;
              return t3 = function(t4) {
                var e2, n2, i2, o2, r2;
                for (e2 = {}, r2 = ["initialize", "connect", "disconnect"], n2 = 0, o2 = r2.length; o2 > n2; n2++)
                  i2 = r2[n2], e2[i2] = t4[i2], delete t4[i2];
                return e2;
              }, window.customElements ? function(e2) {
                var n2, i2, o2, r2, s2;
                return s2 = t3(e2), o2 = s2.initialize, n2 = s2.connect, i2 = s2.disconnect, o2 && (r2 = n2, n2 = function() {
                  return this.initialized || (this.initialized = true, o2.call(this)), null != r2 ? r2.call(this) : void 0;
                }), n2 && (e2.connectedCallback = n2), i2 && (e2.disconnectedCallback = i2), e2;
              } : function(e2) {
                var n2, i2, o2, r2;
                return r2 = t3(e2), o2 = r2.initialize, n2 = r2.connect, i2 = r2.disconnect, o2 && (e2.createdCallback = o2), n2 && (e2.attachedCallback = n2), i2 && (e2.detachedCallback = i2), e2;
              };
            }(), r = function() {
              return window.customElements ? function(t3, e2) {
                var n2;
                return n2 = function() {
                  return "object" == typeof Reflect ? Reflect.construct(HTMLElement, [], n2) : HTMLElement.apply(this);
                }, Object.setPrototypeOf(n2.prototype, HTMLElement.prototype), Object.setPrototypeOf(n2, HTMLElement), Object.defineProperties(n2.prototype, e2), window.customElements.define(t3, n2), n2;
              } : function(t3, e2) {
                var n2, i2;
                return i2 = Object.create(HTMLElement.prototype, e2), n2 = document.registerElement(t3, { prototype: i2 }), Object.defineProperty(i2, "constructor", { value: n2 }), n2;
              };
            }();
          }.call(this), function() {
            var t2, n;
            e.extend({ getDOMSelection: function() {
              var t3;
              return t3 = window.getSelection(), t3.rangeCount > 0 ? t3 : void 0;
            }, getDOMRange: function() {
              var n2, i;
              return (n2 = null != (i = e.getDOMSelection()) ? i.getRangeAt(0) : void 0) && !t2(n2) ? n2 : void 0;
            }, setDOMRange: function(t3) {
              var n2;
              return n2 = window.getSelection(), n2.removeAllRanges(), n2.addRange(t3), e.selectionChangeObserver.update();
            } }), t2 = function(t3) {
              return n(t3.startContainer) || n(t3.endContainer);
            }, n = function(t3) {
              return !Object.getPrototypeOf(t3);
            };
          }.call(this), function() {
            var t2;
            t2 = { "application/x-trix-feature-detection": "test" }, e.extend({ dataTransferIsPlainText: function(t3) {
              var e2, n, i;
              return i = t3.getData("text/plain"), n = t3.getData("text/html"), i && n ? (e2 = new DOMParser().parseFromString(n, "text/html").body, e2.textContent === i ? !e2.querySelector("*") : void 0) : null != i ? i.length : void 0;
            }, dataTransferIsWritable: function(e2) {
              var n, i;
              if (null != (null != e2 ? e2.setData : void 0)) {
                for (n in t2)
                  if (i = t2[n], !function() {
                    try {
                      return e2.setData(n, i), e2.getData(n) === i;
                    } catch (t3) {
                    }
                  }())
                    return;
                return true;
              }
            }, keyEventIsKeyboardCommand: function() {
              return /Mac|^iP/.test(navigator.platform) ? function(t3) {
                return t3.metaKey;
              } : function(t3) {
                return t3.ctrlKey;
              };
            }() });
          }.call(this), function() {
            e.extend({ RTL_PATTERN: /[\u05BE\u05C0\u05C3\u05D0-\u05EA\u05F0-\u05F4\u061B\u061F\u0621-\u063A\u0640-\u064A\u066D\u0671-\u06B7\u06BA-\u06BE\u06C0-\u06CE\u06D0-\u06D5\u06E5\u06E6\u200F\u202B\u202E\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE72\uFE74\uFE76-\uFEFC]/, getDirection: function() {
              var t2, n, i, o;
              return n = e.makeElement("input", { dir: "auto", name: "x", dirName: "x.dir" }), t2 = e.makeElement("form"), t2.appendChild(n), i = function() {
                try {
                  return new FormData(t2).has(n.dirName);
                } catch (e2) {
                }
              }(), o = function() {
                try {
                  return n.matches(":dir(ltr),:dir(rtl)");
                } catch (t3) {
                }
              }(), i ? function(e2) {
                return n.value = e2, new FormData(t2).get(n.dirName);
              } : o ? function(t3) {
                return n.value = t3, n.matches(":dir(rtl)") ? "rtl" : "ltr";
              } : function(t3) {
                var n2;
                return n2 = t3.trim().charAt(0), e.RTL_PATTERN.test(n2) ? "rtl" : "ltr";
              };
            }() });
          }.call(this), function() {
          }.call(this), function() {
            var t2, n = function(t3, e2) {
              function n2() {
                this.constructor = t3;
              }
              for (var o in e2)
                i.call(e2, o) && (t3[o] = e2[o]);
              return n2.prototype = e2.prototype, t3.prototype = new n2(), t3.__super__ = e2.prototype, t3;
            }, i = {}.hasOwnProperty;
            t2 = e.arraysAreEqual, e.Hash = function(i2) {
              function o(t3) {
                null == t3 && (t3 = {}), this.values = s(t3), o.__super__.constructor.apply(this, arguments);
              }
              var r, s, a, u, c;
              return n(o, i2), o.fromCommonAttributesOfObjects = function(t3) {
                var e2, n2, i3, o2, s2, a2;
                if (null == t3 && (t3 = []), !t3.length)
                  return new this();
                for (e2 = r(t3[0]), i3 = e2.getKeys(), a2 = t3.slice(1), n2 = 0, o2 = a2.length; o2 > n2; n2++)
                  s2 = a2[n2], i3 = e2.getKeysCommonToHash(r(s2)), e2 = e2.slice(i3);
                return e2;
              }, o.box = function(t3) {
                return r(t3);
              }, o.prototype.add = function(t3, e2) {
                return this.merge(u(t3, e2));
              }, o.prototype.remove = function(t3) {
                return new e.Hash(s(this.values, t3));
              }, o.prototype.get = function(t3) {
                return this.values[t3];
              }, o.prototype.has = function(t3) {
                return t3 in this.values;
              }, o.prototype.merge = function(t3) {
                return new e.Hash(a(this.values, c(t3)));
              }, o.prototype.slice = function(t3) {
                var n2, i3, o2, r2;
                for (r2 = {}, n2 = 0, o2 = t3.length; o2 > n2; n2++)
                  i3 = t3[n2], this.has(i3) && (r2[i3] = this.values[i3]);
                return new e.Hash(r2);
              }, o.prototype.getKeys = function() {
                return Object.keys(this.values);
              }, o.prototype.getKeysCommonToHash = function(t3) {
                var e2, n2, i3, o2, s2;
                for (t3 = r(t3), o2 = this.getKeys(), s2 = [], e2 = 0, i3 = o2.length; i3 > e2; e2++)
                  n2 = o2[e2], this.values[n2] === t3.values[n2] && s2.push(n2);
                return s2;
              }, o.prototype.isEqualTo = function(e2) {
                return t2(this.toArray(), r(e2).toArray());
              }, o.prototype.isEmpty = function() {
                return 0 === this.getKeys().length;
              }, o.prototype.toArray = function() {
                var t3, e2, n2;
                return (null != this.array ? this.array : this.array = function() {
                  var i3;
                  e2 = [], i3 = this.values;
                  for (t3 in i3)
                    n2 = i3[t3], e2.push(t3, n2);
                  return e2;
                }.call(this)).slice(0);
              }, o.prototype.toObject = function() {
                return s(this.values);
              }, o.prototype.toJSON = function() {
                return this.toObject();
              }, o.prototype.contentsForInspection = function() {
                return { values: JSON.stringify(this.values) };
              }, u = function(t3, e2) {
                var n2;
                return n2 = {}, n2[t3] = e2, n2;
              }, a = function(t3, e2) {
                var n2, i3, o2;
                i3 = s(t3);
                for (n2 in e2)
                  o2 = e2[n2], i3[n2] = o2;
                return i3;
              }, s = function(t3, e2) {
                var n2, i3, o2, r2, s2;
                for (r2 = {}, s2 = Object.keys(t3).sort(), n2 = 0, o2 = s2.length; o2 > n2; n2++)
                  i3 = s2[n2], i3 !== e2 && (r2[i3] = t3[i3]);
                return r2;
              }, r = function(t3) {
                return t3 instanceof e.Hash ? t3 : new e.Hash(t3);
              }, c = function(t3) {
                return t3 instanceof e.Hash ? t3.values : t3;
              }, o;
            }(e.Object);
          }.call(this), function() {
            e.ObjectGroup = function() {
              function t2(t3, e2) {
                var n, i;
                this.objects = null != t3 ? t3 : [], i = e2.depth, n = e2.asTree, n && (this.depth = i, this.objects = this.constructor.groupObjects(this.objects, { asTree: n, depth: this.depth + 1 }));
              }
              return t2.groupObjects = function(t3, e2) {
                var n, i, o, r, s, a, u, c, l;
                for (null == t3 && (t3 = []), l = null != e2 ? e2 : {}, o = l.depth, n = l.asTree, n && null == o && (o = 0), c = [], s = 0, a = t3.length; a > s; s++) {
                  if (u = t3[s], r) {
                    if (("function" == typeof u.canBeGrouped ? u.canBeGrouped(o) : void 0) && ("function" == typeof (i = r[r.length - 1]).canBeGroupedWith ? i.canBeGroupedWith(u, o) : void 0)) {
                      r.push(u);
                      continue;
                    }
                    c.push(new this(r, { depth: o, asTree: n })), r = null;
                  }
                  ("function" == typeof u.canBeGrouped ? u.canBeGrouped(o) : void 0) ? r = [u] : c.push(u);
                }
                return r && c.push(new this(r, { depth: o, asTree: n })), c;
              }, t2.prototype.getObjects = function() {
                return this.objects;
              }, t2.prototype.getDepth = function() {
                return this.depth;
              }, t2.prototype.getCacheKey = function() {
                var t3, e2, n, i, o;
                for (e2 = ["objectGroup"], o = this.getObjects(), t3 = 0, n = o.length; n > t3; t3++)
                  i = o[t3], e2.push(i.getCacheKey());
                return e2.join("/");
              }, t2;
            }();
          }.call(this), function() {
            var t2 = function(t3, e2) {
              function i() {
                this.constructor = t3;
              }
              for (var o in e2)
                n.call(e2, o) && (t3[o] = e2[o]);
              return i.prototype = e2.prototype, t3.prototype = new i(), t3.__super__ = e2.prototype, t3;
            }, n = {}.hasOwnProperty;
            e.ObjectMap = function(e2) {
              function n2(t3) {
                var e3, n3, i, o, r;
                for (null == t3 && (t3 = []), this.objects = {}, i = 0, o = t3.length; o > i; i++)
                  r = t3[i], n3 = JSON.stringify(r), null == (e3 = this.objects)[n3] && (e3[n3] = r);
              }
              return t2(n2, e2), n2.prototype.find = function(t3) {
                var e3;
                return e3 = JSON.stringify(t3), this.objects[e3];
              }, n2;
            }(e.BasicObject);
          }.call(this), function() {
            e.ElementStore = function() {
              function t2(t3) {
                this.reset(t3);
              }
              var e2;
              return t2.prototype.add = function(t3) {
                var n;
                return n = e2(t3), this.elements[n] = t3;
              }, t2.prototype.remove = function(t3) {
                var n, i;
                return n = e2(t3), (i = this.elements[n]) ? (delete this.elements[n], i) : void 0;
              }, t2.prototype.reset = function(t3) {
                var e3, n, i;
                for (null == t3 && (t3 = []), this.elements = {}, n = 0, i = t3.length; i > n; n++)
                  e3 = t3[n], this.add(e3);
                return t3;
              }, e2 = function(t3) {
                return t3.dataset.trixStoreKey;
              }, t2;
            }();
          }.call(this), function() {
          }.call(this), function() {
            var t2 = function(t3, e2) {
              function i() {
                this.constructor = t3;
              }
              for (var o in e2)
                n.call(e2, o) && (t3[o] = e2[o]);
              return i.prototype = e2.prototype, t3.prototype = new i(), t3.__super__ = e2.prototype, t3;
            }, n = {}.hasOwnProperty;
            e.Operation = function(e2) {
              function n2() {
                return n2.__super__.constructor.apply(this, arguments);
              }
              return t2(n2, e2), n2.prototype.isPerforming = function() {
                return this.performing === true;
              }, n2.prototype.hasPerformed = function() {
                return this.performed === true;
              }, n2.prototype.hasSucceeded = function() {
                return this.performed && this.succeeded;
              }, n2.prototype.hasFailed = function() {
                return this.performed && !this.succeeded;
              }, n2.prototype.getPromise = function() {
                return null != this.promise ? this.promise : this.promise = new Promise(/* @__PURE__ */ function(t3) {
                  return function(e3, n3) {
                    return t3.performing = true, t3.perform(function(i, o) {
                      return t3.succeeded = i, t3.performing = false, t3.performed = true, t3.succeeded ? e3(o) : n3(o);
                    });
                  };
                }(this));
              }, n2.prototype.perform = function(t3) {
                return t3(false);
              }, n2.prototype.release = function() {
                var t3;
                return null != (t3 = this.promise) && "function" == typeof t3.cancel && t3.cancel(), this.promise = null, this.performing = null, this.performed = null, this.succeeded = null;
              }, n2.proxyMethod("getPromise().then"), n2.proxyMethod("getPromise().catch"), n2;
            }(e.BasicObject);
          }.call(this), function() {
            var t2, n, i, o, r, s = function(t3, e2) {
              function n2() {
                this.constructor = t3;
              }
              for (var i2 in e2)
                a.call(e2, i2) && (t3[i2] = e2[i2]);
              return n2.prototype = e2.prototype, t3.prototype = new n2(), t3.__super__ = e2.prototype, t3;
            }, a = {}.hasOwnProperty;
            e.UTF16String = function(t3) {
              function e2(t4, e3) {
                this.ucs2String = t4, this.codepoints = e3, this.length = this.codepoints.length, this.ucs2Length = this.ucs2String.length;
              }
              return s(e2, t3), e2.box = function(t4) {
                return null == t4 && (t4 = ""), t4 instanceof this ? t4 : this.fromUCS2String(null != t4 ? t4.toString() : void 0);
              }, e2.fromUCS2String = function(t4) {
                return new this(t4, o(t4));
              }, e2.fromCodepoints = function(t4) {
                return new this(r(t4), t4);
              }, e2.prototype.offsetToUCS2Offset = function(t4) {
                return r(this.codepoints.slice(0, Math.max(0, t4))).length;
              }, e2.prototype.offsetFromUCS2Offset = function(t4) {
                return o(this.ucs2String.slice(0, Math.max(0, t4))).length;
              }, e2.prototype.slice = function() {
                var t4;
                return this.constructor.fromCodepoints((t4 = this.codepoints).slice.apply(t4, arguments));
              }, e2.prototype.charAt = function(t4) {
                return this.slice(t4, t4 + 1);
              }, e2.prototype.isEqualTo = function(t4) {
                return this.constructor.box(t4).ucs2String === this.ucs2String;
              }, e2.prototype.toJSON = function() {
                return this.ucs2String;
              }, e2.prototype.getCacheKey = function() {
                return this.ucs2String;
              }, e2.prototype.toString = function() {
                return this.ucs2String;
              }, e2;
            }(e.BasicObject), t2 = 1 === ("function" == typeof Array.from ? Array.from("\u{1F47C}").length : void 0), n = null != ("function" == typeof " ".codePointAt ? " ".codePointAt(0) : void 0), i = " \u{1F47C}" === ("function" == typeof String.fromCodePoint ? String.fromCodePoint(32, 128124) : void 0), o = t2 && n ? function(t3) {
              return Array.from(t3).map(function(t4) {
                return t4.codePointAt(0);
              });
            } : function(t3) {
              var e2, n2, i2, o2, r2;
              for (o2 = [], e2 = 0, i2 = t3.length; i2 > e2; )
                r2 = t3.charCodeAt(e2++), r2 >= 55296 && 56319 >= r2 && i2 > e2 && (n2 = t3.charCodeAt(e2++), 56320 === (64512 & n2) ? r2 = ((1023 & r2) << 10) + (1023 & n2) + 65536 : e2--), o2.push(r2);
              return o2;
            }, r = i ? function(t3) {
              return String.fromCodePoint.apply(String, t3);
            } : function(t3) {
              var e2, n2, i2;
              return e2 = function() {
                var e3, o2, r2;
                for (r2 = [], e3 = 0, o2 = t3.length; o2 > e3; e3++)
                  i2 = t3[e3], n2 = "", i2 > 65535 && (i2 -= 65536, n2 += String.fromCharCode(i2 >>> 10 & 1023 | 55296), i2 = 56320 | 1023 & i2), r2.push(n2 + String.fromCharCode(i2));
                return r2;
              }(), e2.join("");
            };
          }.call(this), function() {
          }.call(this), function() {
          }.call(this), function() {
            e.config.lang = { attachFiles: "Attach Files", bold: "Bold", bullets: "Bullets", "byte": "Byte", bytes: "Bytes", captionPlaceholder: "Add a caption\u2026", code: "Code", heading1: "Heading", indent: "Increase Level", italic: "Italic", link: "Link", numbers: "Numbers", outdent: "Decrease Level", quote: "Quote", redo: "Redo", remove: "Remove", strike: "Strikethrough", undo: "Undo", unlink: "Unlink", url: "URL", urlPlaceholder: "Enter a URL\u2026", GB: "GB", KB: "KB", MB: "MB", PB: "PB", TB: "TB" };
          }.call(this), function() {
            e.config.css = { attachment: "attachment", attachmentCaption: "attachment__caption", attachmentCaptionEditor: "attachment__caption-editor", attachmentMetadata: "attachment__metadata", attachmentMetadataContainer: "attachment__metadata-container", attachmentName: "attachment__name", attachmentProgress: "attachment__progress", attachmentSize: "attachment__size", attachmentToolbar: "attachment__toolbar", attachmentGallery: "attachment-gallery" };
          }.call(this), function() {
            var t2;
            e.config.blockAttributes = t2 = { "default": { tagName: "div", parse: false }, quote: { tagName: "blockquote", nestable: true }, heading1: { tagName: "h1", terminal: true, breakOnReturn: true, group: false }, code: { tagName: "pre", terminal: true, text: { plaintext: true } }, bulletList: { tagName: "ul", parse: false }, bullet: { tagName: "li", listAttribute: "bulletList", group: false, nestable: true, test: function(n) {
              return e.tagName(n.parentNode) === t2[this.listAttribute].tagName;
            } }, numberList: { tagName: "ol", parse: false }, number: { tagName: "li", listAttribute: "numberList", group: false, nestable: true, test: function(n) {
              return e.tagName(n.parentNode) === t2[this.listAttribute].tagName;
            } }, attachmentGallery: { tagName: "div", exclusive: true, terminal: true, parse: false, group: false } };
          }.call(this), function() {
            var t2, n;
            t2 = e.config.lang, n = [t2.bytes, t2.KB, t2.MB, t2.GB, t2.TB, t2.PB], e.config.fileSize = { prefix: "IEC", precision: 2, formatter: function(e2) {
              var i, o, r, s, a;
              switch (e2) {
                case 0:
                  return "0 " + t2.bytes;
                case 1:
                  return "1 " + t2.byte;
                default:
                  return i = function() {
                    switch (this.prefix) {
                      case "SI":
                        return 1e3;
                      case "IEC":
                        return 1024;
                    }
                  }.call(this), o = Math.floor(Math.log(e2) / Math.log(i)), r = e2 / Math.pow(i, o), s = r.toFixed(this.precision), a = s.replace(/0*$/, "").replace(/\.$/, ""), a + " " + n[o];
              }
            } };
          }.call(this), function() {
            e.config.textAttributes = { bold: { tagName: "strong", inheritable: true, parser: function(t2) {
              var e2;
              return e2 = window.getComputedStyle(t2), "bold" === e2.fontWeight || e2.fontWeight >= 600;
            } }, italic: { tagName: "em", inheritable: true, parser: function(t2) {
              var e2;
              return e2 = window.getComputedStyle(t2), "italic" === e2.fontStyle;
            } }, href: { groupTagName: "a", parser: function(t2) {
              var n, i, o;
              return n = e.AttachmentView.attachmentSelector, o = "a:not(" + n + ")", (i = e.findClosestElementFromNode(t2, { matchingSelector: o })) ? i.getAttribute("href") : void 0;
            } }, strike: { tagName: "del", inheritable: true }, frozen: { style: { backgroundColor: "highlight" } } };
          }.call(this), function() {
            var t2, n, i, o, r;
            r = "[data-trix-serialize=false]", o = ["contenteditable", "data-trix-id", "data-trix-store-key", "data-trix-mutable", "data-trix-placeholder", "tabindex"], n = "data-trix-serialized-attributes", i = "[" + n + "]", t2 = new RegExp("<!--block-->", "g"), e.extend({ serializers: { "application/json": function(t3) {
              var n2;
              if (t3 instanceof e.Document)
                n2 = t3;
              else {
                if (!(t3 instanceof HTMLElement))
                  throw new Error("unserializable object");
                n2 = e.Document.fromHTML(t3.innerHTML);
              }
              return n2.toSerializableDocument().toJSONString();
            }, "text/html": function(s) {
              var a, u, c, l, h, p, d, f, g, m, v, y, b, A, C, x, w;
              if (s instanceof e.Document)
                l = e.DocumentView.render(s);
              else {
                if (!(s instanceof HTMLElement))
                  throw new Error("unserializable object");
                l = s.cloneNode(true);
              }
              for (A = l.querySelectorAll(r), h = 0, g = A.length; g > h; h++)
                c = A[h], e.removeNode(c);
              for (p = 0, m = o.length; m > p; p++)
                for (a = o[p], C = l.querySelectorAll("[" + a + "]"), d = 0, v = C.length; v > d; d++)
                  c = C[d], c.removeAttribute(a);
              for (x = l.querySelectorAll(i), f = 0, y = x.length; y > f; f++) {
                c = x[f];
                try {
                  u = JSON.parse(c.getAttribute(n)), c.removeAttribute(n);
                  for (b in u)
                    w = u[b], c.setAttribute(b, w);
                } catch (E) {
                }
              }
              return l.innerHTML.replace(t2, "");
            } }, deserializers: { "application/json": function(t3) {
              return e.Document.fromJSONString(t3);
            }, "text/html": function(t3) {
              return e.Document.fromHTML(t3);
            } }, serializeToContentType: function(t3, n2) {
              var i2;
              if (i2 = e.serializers[n2])
                return i2(t3);
              throw new Error("unknown content type: " + n2);
            }, deserializeFromContentType: function(t3, n2) {
              var i2;
              if (i2 = e.deserializers[n2])
                return i2(t3);
              throw new Error("unknown content type: " + n2);
            } });
          }.call(this), function() {
            var t2;
            t2 = e.config.lang, e.config.toolbar = { getDefaultHTML: function() {
              return '<div class="trix-button-row">\n  <span class="trix-button-group trix-button-group--text-tools" data-trix-button-group="text-tools">\n    <button type="button" class="trix-button trix-button--icon trix-button--icon-bold" data-trix-attribute="bold" data-trix-key="b" title="' + t2.bold + '" tabindex="-1">' + t2.bold + '</button>\n    <button type="button" class="trix-button trix-button--icon trix-button--icon-italic" data-trix-attribute="italic" data-trix-key="i" title="' + t2.italic + '" tabindex="-1">' + t2.italic + '</button>\n    <button type="button" class="trix-button trix-button--icon trix-button--icon-strike" data-trix-attribute="strike" title="' + t2.strike + '" tabindex="-1">' + t2.strike + '</button>\n    <button type="button" class="trix-button trix-button--icon trix-button--icon-link" data-trix-attribute="href" data-trix-action="link" data-trix-key="k" title="' + t2.link + '" tabindex="-1">' + t2.link + '</button>\n  </span>\n\n  <span class="trix-button-group trix-button-group--block-tools" data-trix-button-group="block-tools">\n    <button type="button" class="trix-button trix-button--icon trix-button--icon-heading-1" data-trix-attribute="heading1" title="' + t2.heading1 + '" tabindex="-1">' + t2.heading1 + '</button>\n    <button type="button" class="trix-button trix-button--icon trix-button--icon-quote" data-trix-attribute="quote" title="' + t2.quote + '" tabindex="-1">' + t2.quote + '</button>\n    <button type="button" class="trix-button trix-button--icon trix-button--icon-code" data-trix-attribute="code" title="' + t2.code + '" tabindex="-1">' + t2.code + '</button>\n    <button type="button" class="trix-button trix-button--icon trix-button--icon-bullet-list" data-trix-attribute="bullet" title="' + t2.bullets + '" tabindex="-1">' + t2.bullets + '</button>\n    <button type="button" class="trix-button trix-button--icon trix-button--icon-number-list" data-trix-attribute="number" title="' + t2.numbers + '" tabindex="-1">' + t2.numbers + '</button>\n    <button type="button" class="trix-button trix-button--icon trix-button--icon-decrease-nesting-level" data-trix-action="decreaseNestingLevel" title="' + t2.outdent + '" tabindex="-1">' + t2.outdent + '</button>\n    <button type="button" class="trix-button trix-button--icon trix-button--icon-increase-nesting-level" data-trix-action="increaseNestingLevel" title="' + t2.indent + '" tabindex="-1">' + t2.indent + '</button>\n  </span>\n\n  <span class="trix-button-group trix-button-group--file-tools" data-trix-button-group="file-tools">\n    <button type="button" class="trix-button trix-button--icon trix-button--icon-attach" data-trix-action="attachFiles" title="' + t2.attachFiles + '" tabindex="-1">' + t2.attachFiles + '</button>\n  </span>\n\n  <span class="trix-button-group-spacer"></span>\n\n  <span class="trix-button-group trix-button-group--history-tools" data-trix-button-group="history-tools">\n    <button type="button" class="trix-button trix-button--icon trix-button--icon-undo" data-trix-action="undo" data-trix-key="z" title="' + t2.undo + '" tabindex="-1">' + t2.undo + '</button>\n    <button type="button" class="trix-button trix-button--icon trix-button--icon-redo" data-trix-action="redo" data-trix-key="shift+z" title="' + t2.redo + '" tabindex="-1">' + t2.redo + '</button>\n  </span>\n</div>\n\n<div class="trix-dialogs" data-trix-dialogs>\n  <div class="trix-dialog trix-dialog--link" data-trix-dialog="href" data-trix-dialog-attribute="href">\n    <div class="trix-dialog__link-fields">\n      <input type="url" name="href" class="trix-input trix-input--dialog" placeholder="' + t2.urlPlaceholder + '" aria-label="' + t2.url + '" required data-trix-input>\n      <div class="trix-button-group">\n        <input type="button" class="trix-button trix-button--dialog" value="' + t2.link + '" data-trix-method="setAttribute">\n        <input type="button" class="trix-button trix-button--dialog" value="' + t2.unlink + '" data-trix-method="removeAttribute">\n      </div>\n    </div>\n  </div>\n</div>';
            } };
          }.call(this), function() {
            e.config.undoInterval = 5e3;
          }.call(this), function() {
            e.config.attachments = { preview: { presentation: "gallery", caption: { name: true, size: true } }, file: { caption: { size: true } } };
          }.call(this), function() {
            e.config.keyNames = { 8: "backspace", 9: "tab", 13: "return", 27: "escape", 37: "left", 39: "right", 46: "delete", 68: "d", 72: "h", 79: "o" };
          }.call(this), function() {
            e.config.input = { level2Enabled: true, getLevel: function() {
              return this.level2Enabled && e.browser.supportsInputEvents ? 2 : 0;
            }, pickFiles: function(t2) {
              var n;
              return n = e.makeElement("input", { type: "file", multiple: true, hidden: true, id: this.fileInputId }), n.addEventListener("change", function() {
                return t2(n.files), e.removeNode(n);
              }), e.removeNode(document.getElementById(this.fileInputId)), document.body.appendChild(n), n.click();
            }, fileInputId: "trix-file-input-" + Date.now().toString(16) };
          }.call(this), function() {
          }.call(this), function() {
            e.registerElement("trix-toolbar", { defaultCSS: "%t {\n  display: block;\n}\n\n%t {\n  white-space: nowrap;\n}\n\n%t [data-trix-dialog] {\n  display: none;\n}\n\n%t [data-trix-dialog][data-trix-active] {\n  display: block;\n}\n\n%t [data-trix-dialog] [data-trix-validate]:invalid {\n  background-color: #ffdddd;\n}", initialize: function() {
              return "" === this.innerHTML ? this.innerHTML = e.config.toolbar.getDefaultHTML() : void 0;
            } });
          }.call(this), function() {
            var t2 = function(t3, e2) {
              function i2() {
                this.constructor = t3;
              }
              for (var o in e2)
                n.call(e2, o) && (t3[o] = e2[o]);
              return i2.prototype = e2.prototype, t3.prototype = new i2(), t3.__super__ = e2.prototype, t3;
            }, n = {}.hasOwnProperty, i = [].indexOf || function(t3) {
              for (var e2 = 0, n2 = this.length; n2 > e2; e2++)
                if (e2 in this && this[e2] === t3)
                  return e2;
              return -1;
            };
            e.ObjectView = function(n2) {
              function o(t3, e2) {
                this.object = t3, this.options = null != e2 ? e2 : {}, this.childViews = [], this.rootView = this;
              }
              return t2(o, n2), o.prototype.getNodes = function() {
                var t3, e2, n3, i2, o2;
                for (null == this.nodes && (this.nodes = this.createNodes()), i2 = this.nodes, o2 = [], t3 = 0, e2 = i2.length; e2 > t3; t3++)
                  n3 = i2[t3], o2.push(n3.cloneNode(true));
                return o2;
              }, o.prototype.invalidate = function() {
                var t3;
                return this.nodes = null, this.childViews = [], null != (t3 = this.parentView) ? t3.invalidate() : void 0;
              }, o.prototype.invalidateViewForObject = function(t3) {
                var e2;
                return null != (e2 = this.findViewForObject(t3)) ? e2.invalidate() : void 0;
              }, o.prototype.findOrCreateCachedChildView = function(t3, e2) {
                var n3;
                return (n3 = this.getCachedViewForObject(e2)) ? this.recordChildView(n3) : (n3 = this.createChildView.apply(this, arguments), this.cacheViewForObject(n3, e2)), n3;
              }, o.prototype.createChildView = function(t3, n3, i2) {
                var o2;
                return null == i2 && (i2 = {}), n3 instanceof e.ObjectGroup && (i2.viewClass = t3, t3 = e.ObjectGroupView), o2 = new t3(n3, i2), this.recordChildView(o2);
              }, o.prototype.recordChildView = function(t3) {
                return t3.parentView = this, t3.rootView = this.rootView, this.childViews.push(t3), t3;
              }, o.prototype.getAllChildViews = function() {
                var t3, e2, n3, i2, o2;
                for (o2 = [], i2 = this.childViews, e2 = 0, n3 = i2.length; n3 > e2; e2++)
                  t3 = i2[e2], o2.push(t3), o2 = o2.concat(t3.getAllChildViews());
                return o2;
              }, o.prototype.findElement = function() {
                return this.findElementForObject(this.object);
              }, o.prototype.findElementForObject = function(t3) {
                var e2;
                return (e2 = null != t3 ? t3.id : void 0) ? this.rootView.element.querySelector("[data-trix-id='" + e2 + "']") : void 0;
              }, o.prototype.findViewForObject = function(t3) {
                var e2, n3, i2, o2;
                for (i2 = this.getAllChildViews(), e2 = 0, n3 = i2.length; n3 > e2; e2++)
                  if (o2 = i2[e2], o2.object === t3)
                    return o2;
              }, o.prototype.getViewCache = function() {
                return this.rootView !== this ? this.rootView.getViewCache() : this.isViewCachingEnabled() ? null != this.viewCache ? this.viewCache : this.viewCache = {} : void 0;
              }, o.prototype.isViewCachingEnabled = function() {
                return this.shouldCacheViews !== false;
              }, o.prototype.enableViewCaching = function() {
                return this.shouldCacheViews = true;
              }, o.prototype.disableViewCaching = function() {
                return this.shouldCacheViews = false;
              }, o.prototype.getCachedViewForObject = function(t3) {
                var e2;
                return null != (e2 = this.getViewCache()) ? e2[t3.getCacheKey()] : void 0;
              }, o.prototype.cacheViewForObject = function(t3, e2) {
                var n3;
                return null != (n3 = this.getViewCache()) ? n3[e2.getCacheKey()] = t3 : void 0;
              }, o.prototype.garbageCollectCachedViews = function() {
                var t3, e2, n3, o2, r, s;
                if (t3 = this.getViewCache()) {
                  s = this.getAllChildViews().concat(this), n3 = function() {
                    var t4, e3, n4;
                    for (n4 = [], t4 = 0, e3 = s.length; e3 > t4; t4++)
                      r = s[t4], n4.push(r.object.getCacheKey());
                    return n4;
                  }(), o2 = [];
                  for (e2 in t3)
                    i.call(n3, e2) < 0 && o2.push(delete t3[e2]);
                  return o2;
                }
              }, o;
            }(e.BasicObject);
          }.call(this), function() {
            var t2 = function(t3, e2) {
              function i() {
                this.constructor = t3;
              }
              for (var o in e2)
                n.call(e2, o) && (t3[o] = e2[o]);
              return i.prototype = e2.prototype, t3.prototype = new i(), t3.__super__ = e2.prototype, t3;
            }, n = {}.hasOwnProperty;
            e.ObjectGroupView = function(e2) {
              function n2() {
                n2.__super__.constructor.apply(this, arguments), this.objectGroup = this.object, this.viewClass = this.options.viewClass, delete this.options.viewClass;
              }
              return t2(n2, e2), n2.prototype.getChildViews = function() {
                var t3, e3, n3, i;
                if (!this.childViews.length)
                  for (i = this.objectGroup.getObjects(), t3 = 0, e3 = i.length; e3 > t3; t3++)
                    n3 = i[t3], this.findOrCreateCachedChildView(this.viewClass, n3, this.options);
                return this.childViews;
              }, n2.prototype.createNodes = function() {
                var t3, e3, n3, i, o, r, s, a, u;
                for (t3 = this.createContainerElement(), s = this.getChildViews(), e3 = 0, i = s.length; i > e3; e3++)
                  for (u = s[e3], a = u.getNodes(), n3 = 0, o = a.length; o > n3; n3++)
                    r = a[n3], t3.appendChild(r);
                return [t3];
              }, n2.prototype.createContainerElement = function(t3) {
                return null == t3 && (t3 = this.objectGroup.getDepth()), this.getChildViews()[0].createContainerElement(t3);
              }, n2;
            }(e.ObjectView);
          }.call(this), function() {
            var t2 = function(t3, e2) {
              function i() {
                this.constructor = t3;
              }
              for (var o in e2)
                n.call(e2, o) && (t3[o] = e2[o]);
              return i.prototype = e2.prototype, t3.prototype = new i(), t3.__super__ = e2.prototype, t3;
            }, n = {}.hasOwnProperty;
            e.Controller = function(e2) {
              function n2() {
                return n2.__super__.constructor.apply(this, arguments);
              }
              return t2(n2, e2), n2;
            }(e.BasicObject);
          }.call(this), function() {
            var t2, n, i, o, r, s, a = function(t3, e2) {
              return function() {
                return t3.apply(e2, arguments);
              };
            }, u = function(t3, e2) {
              function n2() {
                this.constructor = t3;
              }
              for (var i2 in e2)
                c.call(e2, i2) && (t3[i2] = e2[i2]);
              return n2.prototype = e2.prototype, t3.prototype = new n2(), t3.__super__ = e2.prototype, t3;
            }, c = {}.hasOwnProperty, l = [].indexOf || function(t3) {
              for (var e2 = 0, n2 = this.length; n2 > e2; e2++)
                if (e2 in this && this[e2] === t3)
                  return e2;
              return -1;
            };
            t2 = e.findClosestElementFromNode, i = e.nodeIsEmptyTextNode, n = e.nodeIsBlockStartComment, o = e.normalizeSpaces, r = e.summarizeStringChange, s = e.tagName, e.MutationObserver = function(e2) {
              function c2(t3) {
                this.element = t3, this.didMutate = a(this.didMutate, this), this.observer = new window.MutationObserver(this.didMutate), this.start();
              }
              var h, p, d, f;
              return u(c2, e2), p = "data-trix-mutable", d = "[" + p + "]", f = { attributes: true, childList: true, characterData: true, characterDataOldValue: true, subtree: true }, c2.prototype.start = function() {
                return this.reset(), this.observer.observe(this.element, f);
              }, c2.prototype.stop = function() {
                return this.observer.disconnect();
              }, c2.prototype.didMutate = function(t3) {
                var e3, n2;
                return (e3 = this.mutations).push.apply(e3, this.findSignificantMutations(t3)), this.mutations.length ? (null != (n2 = this.delegate) && "function" == typeof n2.elementDidMutate && n2.elementDidMutate(this.getMutationSummary()), this.reset()) : void 0;
              }, c2.prototype.reset = function() {
                return this.mutations = [];
              }, c2.prototype.findSignificantMutations = function(t3) {
                var e3, n2, i2, o2;
                for (o2 = [], e3 = 0, n2 = t3.length; n2 > e3; e3++)
                  i2 = t3[e3], this.mutationIsSignificant(i2) && o2.push(i2);
                return o2;
              }, c2.prototype.mutationIsSignificant = function(t3) {
                var e3, n2, i2, o2;
                if (this.nodeIsMutable(t3.target))
                  return false;
                for (o2 = this.nodesModifiedByMutation(t3), e3 = 0, n2 = o2.length; n2 > e3; e3++)
                  if (i2 = o2[e3], this.nodeIsSignificant(i2))
                    return true;
                return false;
              }, c2.prototype.nodeIsSignificant = function(t3) {
                return t3 !== this.element && !this.nodeIsMutable(t3) && !i(t3);
              }, c2.prototype.nodeIsMutable = function(e3) {
                return t2(e3, { matchingSelector: d });
              }, c2.prototype.nodesModifiedByMutation = function(t3) {
                var e3;
                switch (e3 = [], t3.type) {
                  case "attributes":
                    t3.attributeName !== p && e3.push(t3.target);
                    break;
                  case "characterData":
                    e3.push(t3.target.parentNode), e3.push(t3.target);
                    break;
                  case "childList":
                    e3.push.apply(e3, t3.addedNodes), e3.push.apply(e3, t3.removedNodes);
                }
                return e3;
              }, c2.prototype.getMutationSummary = function() {
                return this.getTextMutationSummary();
              }, c2.prototype.getTextMutationSummary = function() {
                var t3, e3, n2, i2, o2, r2, s2, a2, u2, c3, h2;
                for (a2 = this.getTextChangesFromCharacterData(), n2 = a2.additions, o2 = a2.deletions, h2 = this.getTextChangesFromChildList(), u2 = h2.additions, r2 = 0, s2 = u2.length; s2 > r2; r2++)
                  e3 = u2[r2], l.call(n2, e3) < 0 && n2.push(e3);
                return o2.push.apply(o2, h2.deletions), c3 = {}, (t3 = n2.join("")) && (c3.textAdded = t3), (i2 = o2.join("")) && (c3.textDeleted = i2), c3;
              }, c2.prototype.getMutationsByType = function(t3) {
                var e3, n2, i2, o2, r2;
                for (o2 = this.mutations, r2 = [], e3 = 0, n2 = o2.length; n2 > e3; e3++)
                  i2 = o2[e3], i2.type === t3 && r2.push(i2);
                return r2;
              }, c2.prototype.getTextChangesFromChildList = function() {
                var t3, e3, i2, r2, s2, a2, u2, c3, l2, p2, d2;
                for (t3 = [], u2 = [], a2 = this.getMutationsByType("childList"), e3 = 0, r2 = a2.length; r2 > e3; e3++)
                  s2 = a2[e3], t3.push.apply(t3, s2.addedNodes), u2.push.apply(u2, s2.removedNodes);
                return c3 = 0 === t3.length && 1 === u2.length && n(u2[0]), c3 ? (p2 = [], d2 = ["\n"]) : (p2 = h(t3), d2 = h(u2)), { additions: function() {
                  var t4, e4, n2;
                  for (n2 = [], i2 = t4 = 0, e4 = p2.length; e4 > t4; i2 = ++t4)
                    l2 = p2[i2], l2 !== d2[i2] && n2.push(o(l2));
                  return n2;
                }(), deletions: function() {
                  var t4, e4, n2;
                  for (n2 = [], i2 = t4 = 0, e4 = d2.length; e4 > t4; i2 = ++t4)
                    l2 = d2[i2], l2 !== p2[i2] && n2.push(o(l2));
                  return n2;
                }() };
              }, c2.prototype.getTextChangesFromCharacterData = function() {
                var t3, e3, n2, i2, s2, a2, u2, c3;
                return e3 = this.getMutationsByType("characterData"), e3.length && (c3 = e3[0], n2 = e3[e3.length - 1], s2 = o(c3.oldValue), i2 = o(n2.target.data), a2 = r(s2, i2), t3 = a2.added, u2 = a2.removed), { additions: t3 ? [t3] : [], deletions: u2 ? [u2] : [] };
              }, h = function(t3) {
                var e3, n2, i2, o2;
                for (null == t3 && (t3 = []), o2 = [], e3 = 0, n2 = t3.length; n2 > e3; e3++)
                  switch (i2 = t3[e3], i2.nodeType) {
                    case Node.TEXT_NODE:
                      o2.push(i2.data);
                      break;
                    case Node.ELEMENT_NODE:
                      "br" === s(i2) ? o2.push("\n") : o2.push.apply(o2, h(i2.childNodes));
                  }
                return o2;
              }, c2;
            }(e.BasicObject);
          }.call(this), function() {
            var t2 = function(t3, e2) {
              function i() {
                this.constructor = t3;
              }
              for (var o in e2)
                n.call(e2, o) && (t3[o] = e2[o]);
              return i.prototype = e2.prototype, t3.prototype = new i(), t3.__super__ = e2.prototype, t3;
            }, n = {}.hasOwnProperty;
            e.FileVerificationOperation = function(e2) {
              function n2(t3) {
                this.file = t3;
              }
              return t2(n2, e2), n2.prototype.perform = function(t3) {
                var e3;
                return e3 = new FileReader(), e3.onerror = function() {
                  return t3(false);
                }, e3.onload = /* @__PURE__ */ function(n3) {
                  return function() {
                    e3.onerror = null;
                    try {
                      e3.abort();
                    } catch (i) {
                    }
                    return t3(true, n3.file);
                  };
                }(this), e3.readAsArrayBuffer(this.file);
              }, n2;
            }(e.Operation);
          }.call(this), function() {
            var t2, n, i = function(t3, e2) {
              function n2() {
                this.constructor = t3;
              }
              for (var i2 in e2)
                o.call(e2, i2) && (t3[i2] = e2[i2]);
              return n2.prototype = e2.prototype, t3.prototype = new n2(), t3.__super__ = e2.prototype, t3;
            }, o = {}.hasOwnProperty;
            t2 = e.handleEvent, n = e.innerElementIsActive, e.InputController = function(o2) {
              function r(n2) {
                var i2;
                this.element = n2, this.mutationObserver = new e.MutationObserver(this.element), this.mutationObserver.delegate = this;
                for (i2 in this.events)
                  t2(i2, { onElement: this.element, withCallback: this.handlerFor(i2) });
              }
              return i(r, o2), r.prototype.events = {}, r.prototype.elementDidMutate = function() {
              }, r.prototype.editorWillSyncDocumentView = function() {
                return this.mutationObserver.stop();
              }, r.prototype.editorDidSyncDocumentView = function() {
                return this.mutationObserver.start();
              }, r.prototype.requestRender = function() {
                var t3;
                return null != (t3 = this.delegate) && "function" == typeof t3.inputControllerDidRequestRender ? t3.inputControllerDidRequestRender() : void 0;
              }, r.prototype.requestReparse = function() {
                var t3;
                return null != (t3 = this.delegate) && "function" == typeof t3.inputControllerDidRequestReparse && t3.inputControllerDidRequestReparse(), this.requestRender();
              }, r.prototype.attachFiles = function(t3) {
                var n2, i2;
                return i2 = function() {
                  var i3, o3, r2;
                  for (r2 = [], i3 = 0, o3 = t3.length; o3 > i3; i3++)
                    n2 = t3[i3], r2.push(new e.FileVerificationOperation(n2));
                  return r2;
                }(), Promise.all(i2).then(/* @__PURE__ */ function(t4) {
                  return function(e2) {
                    return t4.handleInput(function() {
                      var t5, n3;
                      return null != (t5 = this.delegate) && t5.inputControllerWillAttachFiles(), null != (n3 = this.responder) && n3.insertFiles(e2), this.requestRender();
                    });
                  };
                }(this));
              }, r.prototype.handlerFor = function(t3) {
                return /* @__PURE__ */ function(e2) {
                  return function(i2) {
                    return i2.defaultPrevented ? void 0 : e2.handleInput(function() {
                      return n(this.element) ? void 0 : (this.eventName = t3, this.events[t3].call(this, i2));
                    });
                  };
                }(this);
              }, r.prototype.handleInput = function(t3) {
                var e2, n2;
                try {
                  return null != (e2 = this.delegate) && e2.inputControllerWillHandleInput(), t3.call(this);
                } finally {
                  null != (n2 = this.delegate) && n2.inputControllerDidHandleInput();
                }
              }, r.prototype.createLinkHTML = function(t3, e2) {
                var n2;
                return n2 = document.createElement("a"), n2.href = t3, n2.textContent = null != e2 ? e2 : t3, n2.outerHTML;
              }, r;
            }(e.BasicObject);
          }.call(this), function() {
            var t2, n, i, o, r, s, a, u, c, l, h, p, d, f = function(t3, e2) {
              function n2() {
                this.constructor = t3;
              }
              for (var i2 in e2)
                g.call(e2, i2) && (t3[i2] = e2[i2]);
              return n2.prototype = e2.prototype, t3.prototype = new n2(), t3.__super__ = e2.prototype, t3;
            }, g = {}.hasOwnProperty, m = [].indexOf || function(t3) {
              for (var e2 = 0, n2 = this.length; n2 > e2; e2++)
                if (e2 in this && this[e2] === t3)
                  return e2;
              return -1;
            };
            c = e.makeElement, l = e.objectsAreEqual, d = e.tagName, n = e.browser, a = e.keyEventIsKeyboardCommand, o = e.dataTransferIsWritable, i = e.dataTransferIsPlainText, u = e.config.keyNames, e.Level0InputController = function(n2) {
              function s2() {
                s2.__super__.constructor.apply(this, arguments), this.resetInputSummary();
              }
              var d2;
              return f(s2, n2), d2 = 0, s2.prototype.setInputSummary = function(t3) {
                var e2, n3;
                null == t3 && (t3 = {}), this.inputSummary.eventName = this.eventName;
                for (e2 in t3)
                  n3 = t3[e2], this.inputSummary[e2] = n3;
                return this.inputSummary;
              }, s2.prototype.resetInputSummary = function() {
                return this.inputSummary = {};
              }, s2.prototype.reset = function() {
                return this.resetInputSummary(), e.selectionChangeObserver.reset();
              }, s2.prototype.elementDidMutate = function(t3) {
                var e2;
                return this.isComposing() ? null != (e2 = this.delegate) && "function" == typeof e2.inputControllerDidAllowUnhandledInput ? e2.inputControllerDidAllowUnhandledInput() : void 0 : this.handleInput(function() {
                  return this.mutationIsSignificant(t3) && (this.mutationIsExpected(t3) ? this.requestRender() : this.requestReparse()), this.reset();
                });
              }, s2.prototype.mutationIsExpected = function(t3) {
                var e2, n3, i2, o2, r2, s3, a2, u2, c2, l2;
                return a2 = t3.textAdded, u2 = t3.textDeleted, this.inputSummary.preferDocument ? true : (e2 = null != a2 ? a2 === this.inputSummary.textAdded : !this.inputSummary.textAdded, n3 = null != u2 ? this.inputSummary.didDelete : !this.inputSummary.didDelete, c2 = ("\n" === a2 || " \n" === a2) && !e2, l2 = "\n" === u2 && !n3, s3 = c2 && !l2 || l2 && !c2, s3 && (o2 = this.getSelectedRange()) && (i2 = c2 ? a2.replace(/\n$/, "").length || -1 : (null != a2 ? a2.length : void 0) || 1, null != (r2 = this.responder) ? r2.positionIsBlockBreak(o2[1] + i2) : void 0) ? true : e2 && n3);
              }, s2.prototype.mutationIsSignificant = function(t3) {
                var e2, n3, i2;
                return i2 = Object.keys(t3).length > 0, e2 = "" === (null != (n3 = this.compositionInput) ? n3.getEndData() : void 0), i2 || !e2;
              }, s2.prototype.events = { keydown: function(t3) {
                var n3, i2, o2, r2, s3, c2, l2, h2, p2;
                if (this.isComposing() || this.resetInputSummary(), this.inputSummary.didInput = true, r2 = u[t3.keyCode]) {
                  for (i2 = this.keys, h2 = ["ctrl", "alt", "shift", "meta"], o2 = 0, c2 = h2.length; c2 > o2; o2++)
                    l2 = h2[o2], t3[l2 + "Key"] && ("ctrl" === l2 && (l2 = "control"), i2 = null != i2 ? i2[l2] : void 0);
                  null != (null != i2 ? i2[r2] : void 0) && (this.setInputSummary({ keyName: r2 }), e.selectionChangeObserver.reset(), i2[r2].call(this, t3));
                }
                return a(t3) && (n3 = String.fromCharCode(t3.keyCode).toLowerCase()) && (s3 = function() {
                  var e2, n4, i3, o3;
                  for (i3 = ["alt", "shift"], o3 = [], e2 = 0, n4 = i3.length; n4 > e2; e2++)
                    l2 = i3[e2], t3[l2 + "Key"] && o3.push(l2);
                  return o3;
                }(), s3.push(n3), null != (p2 = this.delegate) ? p2.inputControllerDidReceiveKeyboardCommand(s3) : void 0) ? t3.preventDefault() : void 0;
              }, keypress: function(t3) {
                var e2, n3, i2;
                if (null == this.inputSummary.eventName && !t3.metaKey && (!t3.ctrlKey || t3.altKey))
                  return (i2 = p(t3)) ? (null != (e2 = this.delegate) && e2.inputControllerWillPerformTyping(), null != (n3 = this.responder) && n3.insertString(i2), this.setInputSummary({ textAdded: i2, didDelete: this.selectionIsExpanded() })) : void 0;
              }, textInput: function(t3) {
                var e2, n3, i2, o2;
                return e2 = t3.data, o2 = this.inputSummary.textAdded, o2 && o2 !== e2 && o2.toUpperCase() === e2 ? (n3 = this.getSelectedRange(), this.setSelectedRange([n3[0], n3[1] + o2.length]), null != (i2 = this.responder) && i2.insertString(e2), this.setInputSummary({ textAdded: e2 }), this.setSelectedRange(n3)) : void 0;
              }, dragenter: function(t3) {
                return t3.preventDefault();
              }, dragstart: function(t3) {
                var e2, n3;
                return n3 = t3.target, this.serializeSelectionToDataTransfer(t3.dataTransfer), this.draggedRange = this.getSelectedRange(), null != (e2 = this.delegate) && "function" == typeof e2.inputControllerDidStartDrag ? e2.inputControllerDidStartDrag() : void 0;
              }, dragover: function(t3) {
                var e2, n3;
                return !this.draggedRange && !this.canAcceptDataTransfer(t3.dataTransfer) || (t3.preventDefault(), e2 = { x: t3.clientX, y: t3.clientY }, l(e2, this.draggingPoint)) ? void 0 : (this.draggingPoint = e2, null != (n3 = this.delegate) && "function" == typeof n3.inputControllerDidReceiveDragOverPoint ? n3.inputControllerDidReceiveDragOverPoint(this.draggingPoint) : void 0);
              }, dragend: function() {
                var t3;
                return null != (t3 = this.delegate) && "function" == typeof t3.inputControllerDidCancelDrag && t3.inputControllerDidCancelDrag(), this.draggedRange = null, this.draggingPoint = null;
              }, drop: function(t3) {
                var n3, i2, o2, r2, s3, a2, u2, c2, l2;
                return t3.preventDefault(), o2 = null != (s3 = t3.dataTransfer) ? s3.files : void 0, r2 = { x: t3.clientX, y: t3.clientY }, null != (a2 = this.responder) && a2.setLocationRangeFromPointRange(r2), (null != o2 ? o2.length : void 0) ? this.attachFiles(o2) : this.draggedRange ? (null != (u2 = this.delegate) && u2.inputControllerWillMoveText(), null != (c2 = this.responder) && c2.moveTextFromRange(this.draggedRange), this.draggedRange = null, this.requestRender()) : (i2 = t3.dataTransfer.getData("application/x-trix-document")) && (n3 = e.Document.fromJSONString(i2), null != (l2 = this.responder) && l2.insertDocument(n3), this.requestRender()), this.draggedRange = null, this.draggingPoint = null;
              }, cut: function(t3) {
                var e2, n3;
                return (null != (e2 = this.responder) ? e2.selectionIsExpanded() : void 0) && (this.serializeSelectionToDataTransfer(t3.clipboardData) && t3.preventDefault(), null != (n3 = this.delegate) && n3.inputControllerWillCutText(), this.deleteInDirection("backward"), t3.defaultPrevented) ? this.requestRender() : void 0;
              }, copy: function(t3) {
                var e2;
                return (null != (e2 = this.responder) ? e2.selectionIsExpanded() : void 0) && this.serializeSelectionToDataTransfer(t3.clipboardData) ? t3.preventDefault() : void 0;
              }, paste: function(t3) {
                var n3, o2, s3, a2, u2, c2, l2, p2, f2, g2, v, y, b, A, C, x, w, E, S, R, k, D, L;
                return n3 = null != (p2 = t3.clipboardData) ? p2 : t3.testClipboardData, l2 = { clipboard: n3 }, null == n3 || h(t3) ? void this.getPastedHTMLUsingHiddenElement(/* @__PURE__ */ function(t4) {
                  return function(e2) {
                    var n4, i2, o3;
                    return l2.type = "text/html", l2.html = e2, null != (n4 = t4.delegate) && n4.inputControllerWillPaste(l2), null != (i2 = t4.responder) && i2.insertHTML(l2.html), t4.requestRender(), null != (o3 = t4.delegate) ? o3.inputControllerDidPaste(l2) : void 0;
                  };
                }(this)) : ((a2 = n3.getData("URL")) ? (l2.type = "text/html", L = (c2 = n3.getData("public.url-name")) ? e.squishBreakableWhitespace(c2).trim() : a2, l2.html = this.createLinkHTML(a2, L), null != (f2 = this.delegate) && f2.inputControllerWillPaste(l2), this.setInputSummary({ textAdded: L, didDelete: this.selectionIsExpanded() }), null != (C = this.responder) && C.insertHTML(l2.html), this.requestRender(), null != (x = this.delegate) && x.inputControllerDidPaste(l2)) : i(n3) ? (l2.type = "text/plain", l2.string = n3.getData("text/plain"), null != (w = this.delegate) && w.inputControllerWillPaste(l2), this.setInputSummary({ textAdded: l2.string, didDelete: this.selectionIsExpanded() }), null != (E = this.responder) && E.insertString(l2.string), this.requestRender(), null != (S = this.delegate) && S.inputControllerDidPaste(l2)) : (u2 = n3.getData("text/html")) ? (l2.type = "text/html", l2.html = u2, null != (R = this.delegate) && R.inputControllerWillPaste(l2), null != (k = this.responder) && k.insertHTML(l2.html), this.requestRender(), null != (D = this.delegate) && D.inputControllerDidPaste(l2)) : m.call(n3.types, "Files") >= 0 && (s3 = null != (g2 = n3.items) && null != (v = g2[0]) && "function" == typeof v.getAsFile ? v.getAsFile() : void 0) && (!s3.name && (o2 = r(s3)) && (s3.name = "pasted-file-" + ++d2 + "." + o2), l2.type = "File", l2.file = s3, null != (y = this.delegate) && y.inputControllerWillAttachFiles(), null != (b = this.responder) && b.insertFile(l2.file), this.requestRender(), null != (A = this.delegate) && A.inputControllerDidPaste(l2)), t3.preventDefault());
              }, compositionstart: function(t3) {
                return this.getCompositionInput().start(t3.data);
              }, compositionupdate: function(t3) {
                return this.getCompositionInput().update(t3.data);
              }, compositionend: function(t3) {
                return this.getCompositionInput().end(t3.data);
              }, beforeinput: function() {
                return this.inputSummary.didInput = true;
              }, input: function(t3) {
                return this.inputSummary.didInput = true, t3.stopPropagation();
              } }, s2.prototype.keys = { backspace: function(t3) {
                var e2;
                return null != (e2 = this.delegate) && e2.inputControllerWillPerformTyping(), this.deleteInDirection("backward", t3);
              }, "delete": function(t3) {
                var e2;
                return null != (e2 = this.delegate) && e2.inputControllerWillPerformTyping(), this.deleteInDirection("forward", t3);
              }, "return": function() {
                var t3, e2;
                return this.setInputSummary({ preferDocument: true }), null != (t3 = this.delegate) && t3.inputControllerWillPerformTyping(), null != (e2 = this.responder) ? e2.insertLineBreak() : void 0;
              }, tab: function(t3) {
                var e2, n3;
                return (null != (e2 = this.responder) ? e2.canIncreaseNestingLevel() : void 0) ? (null != (n3 = this.responder) && n3.increaseNestingLevel(), this.requestRender(), t3.preventDefault()) : void 0;
              }, left: function(t3) {
                var e2;
                return this.selectionIsInCursorTarget() ? (t3.preventDefault(), null != (e2 = this.responder) ? e2.moveCursorInDirection("backward") : void 0) : void 0;
              }, right: function(t3) {
                var e2;
                return this.selectionIsInCursorTarget() ? (t3.preventDefault(), null != (e2 = this.responder) ? e2.moveCursorInDirection("forward") : void 0) : void 0;
              }, control: { d: function(t3) {
                var e2;
                return null != (e2 = this.delegate) && e2.inputControllerWillPerformTyping(), this.deleteInDirection("forward", t3);
              }, h: function(t3) {
                var e2;
                return null != (e2 = this.delegate) && e2.inputControllerWillPerformTyping(), this.deleteInDirection("backward", t3);
              }, o: function(t3) {
                var e2, n3;
                return t3.preventDefault(), null != (e2 = this.delegate) && e2.inputControllerWillPerformTyping(), null != (n3 = this.responder) && n3.insertString("\n", { updatePosition: false }), this.requestRender();
              } }, shift: { "return": function(t3) {
                var e2, n3;
                return null != (e2 = this.delegate) && e2.inputControllerWillPerformTyping(), null != (n3 = this.responder) && n3.insertString("\n"), this.requestRender(), t3.preventDefault();
              }, tab: function(t3) {
                var e2, n3;
                return (null != (e2 = this.responder) ? e2.canDecreaseNestingLevel() : void 0) ? (null != (n3 = this.responder) && n3.decreaseNestingLevel(), this.requestRender(), t3.preventDefault()) : void 0;
              }, left: function(t3) {
                return this.selectionIsInCursorTarget() ? (t3.preventDefault(), this.expandSelectionInDirection("backward")) : void 0;
              }, right: function(t3) {
                return this.selectionIsInCursorTarget() ? (t3.preventDefault(), this.expandSelectionInDirection("forward")) : void 0;
              } }, alt: { backspace: function() {
                var t3;
                return this.setInputSummary({ preferDocument: false }), null != (t3 = this.delegate) ? t3.inputControllerWillPerformTyping() : void 0;
              } }, meta: { backspace: function() {
                var t3;
                return this.setInputSummary({ preferDocument: false }), null != (t3 = this.delegate) ? t3.inputControllerWillPerformTyping() : void 0;
              } } }, s2.prototype.getCompositionInput = function() {
                return this.isComposing() ? this.compositionInput : this.compositionInput = new t2(this);
              }, s2.prototype.isComposing = function() {
                return null != this.compositionInput && !this.compositionInput.isEnded();
              }, s2.prototype.deleteInDirection = function(t3, e2) {
                var n3;
                return (null != (n3 = this.responder) ? n3.deleteInDirection(t3) : void 0) !== false ? this.setInputSummary({ didDelete: true }) : e2 ? (e2.preventDefault(), this.requestRender()) : void 0;
              }, s2.prototype.serializeSelectionToDataTransfer = function(t3) {
                var n3, i2;
                if (o(t3))
                  return n3 = null != (i2 = this.responder) ? i2.getSelectedDocument().toSerializableDocument() : void 0, t3.setData("application/x-trix-document", JSON.stringify(n3)), t3.setData("text/html", e.DocumentView.render(n3).innerHTML), t3.setData("text/plain", n3.toString().replace(/\n$/, "")), true;
              }, s2.prototype.canAcceptDataTransfer = function(t3) {
                var e2, n3, i2, o2, r2, s3;
                for (s3 = {}, o2 = null != (i2 = null != t3 ? t3.types : void 0) ? i2 : [], e2 = 0, n3 = o2.length; n3 > e2; e2++)
                  r2 = o2[e2], s3[r2] = true;
                return s3.Files || s3["application/x-trix-document"] || s3["text/html"] || s3["text/plain"];
              }, s2.prototype.getPastedHTMLUsingHiddenElement = function(t3) {
                var n3, i2, o2;
                return i2 = this.getSelectedRange(), o2 = { position: "absolute", left: window.pageXOffset + "px", top: window.pageYOffset + "px", opacity: 0 }, n3 = c({ style: o2, tagName: "div", editable: true }), document.body.appendChild(n3), n3.focus(), requestAnimationFrame(/* @__PURE__ */ function(o3) {
                  return function() {
                    var r2;
                    return r2 = n3.innerHTML, e.removeNode(n3), o3.setSelectedRange(i2), t3(r2);
                  };
                }(this));
              }, s2.proxyMethod("responder?.getSelectedRange"), s2.proxyMethod("responder?.setSelectedRange"), s2.proxyMethod("responder?.expandSelectionInDirection"), s2.proxyMethod("responder?.selectionIsInCursorTarget"), s2.proxyMethod("responder?.selectionIsExpanded"), s2;
            }(e.InputController), r = function(t3) {
              var e2, n2;
              return null != (e2 = t3.type) && null != (n2 = e2.match(/\/(\w+)$/)) ? n2[1] : void 0;
            }, s = null != ("function" == typeof " ".codePointAt ? " ".codePointAt(0) : void 0), p = function(t3) {
              var n2;
              return t3.key && s && t3.key.codePointAt(0) === t3.keyCode ? t3.key : (null === t3.which ? n2 = t3.keyCode : 0 !== t3.which && 0 !== t3.charCode && (n2 = t3.charCode), null != n2 && "escape" !== u[n2] ? e.UTF16String.fromCodepoints([n2]).toString() : void 0);
            }, h = function(t3) {
              var e2, n2, i2, o2, r2, s2, a2, u2, c2, l2;
              if (u2 = t3.clipboardData) {
                if (m.call(u2.types, "text/html") >= 0) {
                  for (c2 = u2.types, i2 = 0, s2 = c2.length; s2 > i2; i2++)
                    if (l2 = c2[i2], e2 = /^CorePasteboardFlavorType/.test(l2), n2 = /^dyn\./.test(l2) && u2.getData(l2), a2 = e2 || n2)
                      return true;
                  return false;
                }
                return o2 = m.call(u2.types, "com.apple.webarchive") >= 0, r2 = m.call(u2.types, "com.apple.flat-rtfd") >= 0, o2 || r2;
              }
            }, t2 = function(t3) {
              function e2(t4) {
                var e3;
                this.inputController = t4, e3 = this.inputController, this.responder = e3.responder, this.delegate = e3.delegate, this.inputSummary = e3.inputSummary, this.data = {};
              }
              return f(e2, t3), e2.prototype.start = function(t4) {
                var e3, n2;
                return this.data.start = t4, this.isSignificant() ? ("keypress" === this.inputSummary.eventName && this.inputSummary.textAdded && null != (e3 = this.responder) && e3.deleteInDirection("left"), this.selectionIsExpanded() || (this.insertPlaceholder(), this.requestRender()), this.range = null != (n2 = this.responder) ? n2.getSelectedRange() : void 0) : void 0;
              }, e2.prototype.update = function(t4) {
                var e3;
                return this.data.update = t4, this.isSignificant() && (e3 = this.selectPlaceholder()) ? (this.forgetPlaceholder(), this.range = e3) : void 0;
              }, e2.prototype.end = function(t4) {
                var e3, n2, i2, o2;
                return this.data.end = t4, this.isSignificant() ? (this.forgetPlaceholder(), this.canApplyToDocument() ? (this.setInputSummary({ preferDocument: true, didInput: false }), null != (e3 = this.delegate) && e3.inputControllerWillPerformTyping(), null != (n2 = this.responder) && n2.setSelectedRange(this.range), null != (i2 = this.responder) && i2.insertString(this.data.end), null != (o2 = this.responder) ? o2.setSelectedRange(this.range[0] + this.data.end.length) : void 0) : null != this.data.start || null != this.data.update ? (this.requestReparse(), this.inputController.reset()) : void 0) : this.inputController.reset();
              }, e2.prototype.getEndData = function() {
                return this.data.end;
              }, e2.prototype.isEnded = function() {
                return null != this.getEndData();
              }, e2.prototype.isSignificant = function() {
                return n.composesExistingText ? this.inputSummary.didInput : true;
              }, e2.prototype.canApplyToDocument = function() {
                var t4, e3;
                return 0 === (null != (t4 = this.data.start) ? t4.length : void 0) && (null != (e3 = this.data.end) ? e3.length : void 0) > 0 && null != this.range;
              }, e2.proxyMethod("inputController.setInputSummary"), e2.proxyMethod("inputController.requestRender"), e2.proxyMethod("inputController.requestReparse"), e2.proxyMethod("responder?.selectionIsExpanded"), e2.proxyMethod("responder?.insertPlaceholder"), e2.proxyMethod("responder?.selectPlaceholder"), e2.proxyMethod("responder?.forgetPlaceholder"), e2;
            }(e.BasicObject);
          }.call(this), function() {
            var t2, n, i, o = function(t3, e2) {
              return function() {
                return t3.apply(e2, arguments);
              };
            }, r = function(t3, e2) {
              function n2() {
                this.constructor = t3;
              }
              for (var i2 in e2)
                s.call(e2, i2) && (t3[i2] = e2[i2]);
              return n2.prototype = e2.prototype, t3.prototype = new n2(), t3.__super__ = e2.prototype, t3;
            }, s = {}.hasOwnProperty, a = [].indexOf || function(t3) {
              for (var e2 = 0, n2 = this.length; n2 > e2; e2++)
                if (e2 in this && this[e2] === t3)
                  return e2;
              return -1;
            };
            t2 = e.dataTransferIsPlainText, n = e.keyEventIsKeyboardCommand, i = e.objectsAreEqual, e.Level2InputController = function(s2) {
              function u() {
                return this.render = o(this.render, this), u.__super__.constructor.apply(this, arguments);
              }
              var c, l, h, p, d, f;
              return r(u, s2), u.prototype.elementDidMutate = function() {
                var t3;
                return this.scheduledRender ? this.composing && null != (t3 = this.delegate) && "function" == typeof t3.inputControllerDidAllowUnhandledInput ? t3.inputControllerDidAllowUnhandledInput() : void 0 : this.reparse();
              }, u.prototype.scheduleRender = function() {
                return null != this.scheduledRender ? this.scheduledRender : this.scheduledRender = requestAnimationFrame(this.render);
              }, u.prototype.render = function() {
                var t3;
                return cancelAnimationFrame(this.scheduledRender), this.scheduledRender = null, this.composing || null != (t3 = this.delegate) && t3.render(), "function" == typeof this.afterRender && this.afterRender(), this.afterRender = null;
              }, u.prototype.reparse = function() {
                var t3;
                return null != (t3 = this.delegate) ? t3.reparse() : void 0;
              }, u.prototype.events = { keydown: function(t3) {
                var e2, i2, o2, r2;
                if (n(t3)) {
                  if (e2 = l(t3), null != (r2 = this.delegate) ? r2.inputControllerDidReceiveKeyboardCommand(e2) : void 0)
                    return t3.preventDefault();
                } else if (o2 = t3.key, t3.altKey && (o2 += "+Alt"), t3.shiftKey && (o2 += "+Shift"), i2 = this.keys[o2])
                  return this.withEvent(t3, i2);
              }, paste: function(t3) {
                var e2, n2, i2, o2, r2, s3, a2, u2, c2;
                return h(t3) ? (t3.preventDefault(), this.attachFiles(t3.clipboardData.files)) : p(t3) ? (t3.preventDefault(), n2 = { type: "text/plain", string: t3.clipboardData.getData("text/plain") }, null != (i2 = this.delegate) && i2.inputControllerWillPaste(n2), null != (o2 = this.responder) && o2.insertString(n2.string), this.render(), null != (r2 = this.delegate) ? r2.inputControllerDidPaste(n2) : void 0) : (e2 = null != (s3 = t3.clipboardData) ? s3.getData("URL") : void 0) ? (t3.preventDefault(), n2 = { type: "text/html", html: this.createLinkHTML(e2) }, null != (a2 = this.delegate) && a2.inputControllerWillPaste(n2), null != (u2 = this.responder) && u2.insertHTML(n2.html), this.render(), null != (c2 = this.delegate) ? c2.inputControllerDidPaste(n2) : void 0) : void 0;
              }, beforeinput: function(t3) {
                var e2;
                return (e2 = this.inputTypes[t3.inputType]) ? (this.withEvent(t3, e2), this.scheduleRender()) : void 0;
              }, input: function() {
                return e.selectionChangeObserver.reset();
              }, dragstart: function(t3) {
                var e2, n2;
                return (null != (e2 = this.responder) ? e2.selectionContainsAttachments() : void 0) ? (t3.dataTransfer.setData("application/x-trix-dragging", true), this.dragging = { range: null != (n2 = this.responder) ? n2.getSelectedRange() : void 0, point: d(t3) }) : void 0;
              }, dragenter: function(t3) {
                return c(t3) ? t3.preventDefault() : void 0;
              }, dragover: function(t3) {
                var e2, n2;
                if (this.dragging) {
                  if (t3.preventDefault(), e2 = d(t3), !i(e2, this.dragging.point))
                    return this.dragging.point = e2, null != (n2 = this.responder) ? n2.setLocationRangeFromPointRange(e2) : void 0;
                } else if (c(t3))
                  return t3.preventDefault();
              }, drop: function(t3) {
                var e2, n2, i2, o2;
                return this.dragging ? (t3.preventDefault(), null != (n2 = this.delegate) && n2.inputControllerWillMoveText(), null != (i2 = this.responder) && i2.moveTextFromRange(this.dragging.range), this.dragging = null, this.scheduleRender()) : c(t3) ? (t3.preventDefault(), e2 = d(t3), null != (o2 = this.responder) && o2.setLocationRangeFromPointRange(e2), this.attachFiles(t3.dataTransfer.files)) : void 0;
              }, dragend: function() {
                var t3;
                return this.dragging ? (null != (t3 = this.responder) && t3.setSelectedRange(this.dragging.range), this.dragging = null) : void 0;
              }, compositionend: function() {
                return this.composing ? (this.composing = false, this.scheduleRender()) : void 0;
              } }, u.prototype.keys = { ArrowLeft: function() {
                var t3, e2;
                return (null != (t3 = this.responder) ? t3.shouldManageMovingCursorInDirection("backward") : void 0) ? (this.event.preventDefault(), null != (e2 = this.responder) ? e2.moveCursorInDirection("backward") : void 0) : void 0;
              }, ArrowRight: function() {
                var t3, e2;
                return (null != (t3 = this.responder) ? t3.shouldManageMovingCursorInDirection("forward") : void 0) ? (this.event.preventDefault(), null != (e2 = this.responder) ? e2.moveCursorInDirection("forward") : void 0) : void 0;
              }, Backspace: function() {
                var t3, e2, n2;
                return (null != (t3 = this.responder) ? t3.shouldManageDeletingInDirection("backward") : void 0) ? (this.event.preventDefault(), null != (e2 = this.delegate) && e2.inputControllerWillPerformTyping(), null != (n2 = this.responder) && n2.deleteInDirection("backward"), this.render()) : void 0;
              }, Tab: function() {
                var t3, e2;
                return (null != (t3 = this.responder) ? t3.canIncreaseNestingLevel() : void 0) ? (this.event.preventDefault(), null != (e2 = this.responder) && e2.increaseNestingLevel(), this.render()) : void 0;
              }, "Tab+Shift": function() {
                var t3, e2;
                return (null != (t3 = this.responder) ? t3.canDecreaseNestingLevel() : void 0) ? (this.event.preventDefault(), null != (e2 = this.responder) && e2.decreaseNestingLevel(), this.render()) : void 0;
              } }, u.prototype.inputTypes = { deleteByComposition: function() {
                return this.deleteInDirection("backward", { recordUndoEntry: false });
              }, deleteByCut: function() {
                return this.deleteInDirection("backward");
              }, deleteByDrag: function() {
                return this.event.preventDefault(), this.withTargetDOMRange(function() {
                  var t3;
                  return this.deleteByDragRange = null != (t3 = this.responder) ? t3.getSelectedRange() : void 0;
                });
              }, deleteCompositionText: function() {
                return this.deleteInDirection("backward", { recordUndoEntry: false });
              }, deleteContent: function() {
                return this.deleteInDirection("backward");
              }, deleteContentBackward: function() {
                return this.deleteInDirection("backward");
              }, deleteContentForward: function() {
                return this.deleteInDirection("forward");
              }, deleteEntireSoftLine: function() {
                return this.deleteInDirection("forward");
              }, deleteHardLineBackward: function() {
                return this.deleteInDirection("backward");
              }, deleteHardLineForward: function() {
                return this.deleteInDirection("forward");
              }, deleteSoftLineBackward: function() {
                return this.deleteInDirection("backward");
              }, deleteSoftLineForward: function() {
                return this.deleteInDirection("forward");
              }, deleteWordBackward: function() {
                return this.deleteInDirection("backward");
              }, deleteWordForward: function() {
                return this.deleteInDirection("forward");
              }, formatBackColor: function() {
                return this.activateAttributeIfSupported("backgroundColor", this.event.data);
              }, formatBold: function() {
                return this.toggleAttributeIfSupported("bold");
              }, formatFontColor: function() {
                return this.activateAttributeIfSupported("color", this.event.data);
              }, formatFontName: function() {
                return this.activateAttributeIfSupported("font", this.event.data);
              }, formatIndent: function() {
                var t3;
                return (null != (t3 = this.responder) ? t3.canIncreaseNestingLevel() : void 0) ? this.withTargetDOMRange(function() {
                  var t4;
                  return null != (t4 = this.responder) ? t4.increaseNestingLevel() : void 0;
                }) : void 0;
              }, formatItalic: function() {
                return this.toggleAttributeIfSupported("italic");
              }, formatJustifyCenter: function() {
                return this.toggleAttributeIfSupported("justifyCenter");
              }, formatJustifyFull: function() {
                return this.toggleAttributeIfSupported("justifyFull");
              }, formatJustifyLeft: function() {
                return this.toggleAttributeIfSupported("justifyLeft");
              }, formatJustifyRight: function() {
                return this.toggleAttributeIfSupported("justifyRight");
              }, formatOutdent: function() {
                var t3;
                return (null != (t3 = this.responder) ? t3.canDecreaseNestingLevel() : void 0) ? this.withTargetDOMRange(function() {
                  var t4;
                  return null != (t4 = this.responder) ? t4.decreaseNestingLevel() : void 0;
                }) : void 0;
              }, formatRemove: function() {
                return this.withTargetDOMRange(function() {
                  var t3, e2, n2, i2;
                  i2 = [];
                  for (t3 in null != (e2 = this.responder) ? e2.getCurrentAttributes() : void 0)
                    i2.push(null != (n2 = this.responder) ? n2.removeCurrentAttribute(t3) : void 0);
                  return i2;
                });
              }, formatSetBlockTextDirection: function() {
                return this.activateAttributeIfSupported("blockDir", this.event.data);
              }, formatSetInlineTextDirection: function() {
                return this.activateAttributeIfSupported("textDir", this.event.data);
              }, formatStrikeThrough: function() {
                return this.toggleAttributeIfSupported("strike");
              }, formatSubscript: function() {
                return this.toggleAttributeIfSupported("sub");
              }, formatSuperscript: function() {
                return this.toggleAttributeIfSupported("sup");
              }, formatUnderline: function() {
                return this.toggleAttributeIfSupported("underline");
              }, historyRedo: function() {
                var t3;
                return null != (t3 = this.delegate) ? t3.inputControllerWillPerformRedo() : void 0;
              }, historyUndo: function() {
                var t3;
                return null != (t3 = this.delegate) ? t3.inputControllerWillPerformUndo() : void 0;
              }, insertCompositionText: function() {
                return this.composing = true, this.insertString(this.event.data);
              }, insertFromComposition: function() {
                return this.composing = false, this.insertString(this.event.data);
              }, insertFromDrop: function() {
                var t3, e2;
                return (t3 = this.deleteByDragRange) ? (this.deleteByDragRange = null, null != (e2 = this.delegate) && e2.inputControllerWillMoveText(), this.withTargetDOMRange(function() {
                  var e3;
                  return null != (e3 = this.responder) ? e3.moveTextFromRange(t3) : void 0;
                })) : void 0;
              }, insertFromPaste: function() {
                var n2, i2, o2, r2, s3, a2, u2, c2, l2, h2, p2;
                return n2 = this.event.dataTransfer, s3 = { dataTransfer: n2 }, (i2 = n2.getData("URL")) ? (this.event.preventDefault(), s3.type = "text/html", p2 = (r2 = n2.getData("public.url-name")) ? e.squishBreakableWhitespace(r2).trim() : i2, s3.html = this.createLinkHTML(i2, p2), null != (a2 = this.delegate) && a2.inputControllerWillPaste(s3), this.withTargetDOMRange(function() {
                  var t3;
                  return null != (t3 = this.responder) ? t3.insertHTML(s3.html) : void 0;
                }), this.afterRender = /* @__PURE__ */ function(t3) {
                  return function() {
                    var e2;
                    return null != (e2 = t3.delegate) ? e2.inputControllerDidPaste(s3) : void 0;
                  };
                }(this)) : t2(n2) ? (s3.type = "text/plain", s3.string = n2.getData("text/plain"), null != (u2 = this.delegate) && u2.inputControllerWillPaste(s3), this.withTargetDOMRange(function() {
                  var t3;
                  return null != (t3 = this.responder) ? t3.insertString(s3.string) : void 0;
                }), this.afterRender = /* @__PURE__ */ function(t3) {
                  return function() {
                    var e2;
                    return null != (e2 = t3.delegate) ? e2.inputControllerDidPaste(s3) : void 0;
                  };
                }(this)) : (o2 = n2.getData("text/html")) ? (this.event.preventDefault(), s3.type = "text/html", s3.html = o2, null != (c2 = this.delegate) && c2.inputControllerWillPaste(s3), this.withTargetDOMRange(function() {
                  var t3;
                  return null != (t3 = this.responder) ? t3.insertHTML(s3.html) : void 0;
                }), this.afterRender = /* @__PURE__ */ function(t3) {
                  return function() {
                    var e2;
                    return null != (e2 = t3.delegate) ? e2.inputControllerDidPaste(s3) : void 0;
                  };
                }(this)) : (null != (l2 = n2.files) ? l2.length : void 0) ? (s3.type = "File", s3.file = n2.files[0], null != (h2 = this.delegate) && h2.inputControllerWillPaste(s3), this.withTargetDOMRange(function() {
                  var t3;
                  return null != (t3 = this.responder) ? t3.insertFile(s3.file) : void 0;
                }), this.afterRender = /* @__PURE__ */ function(t3) {
                  return function() {
                    var e2;
                    return null != (e2 = t3.delegate) ? e2.inputControllerDidPaste(s3) : void 0;
                  };
                }(this)) : void 0;
              }, insertFromYank: function() {
                return this.insertString(this.event.data);
              }, insertLineBreak: function() {
                return this.insertString("\n");
              }, insertLink: function() {
                return this.activateAttributeIfSupported("href", this.event.data);
              }, insertOrderedList: function() {
                return this.toggleAttributeIfSupported("number");
              }, insertParagraph: function() {
                var t3;
                return null != (t3 = this.delegate) && t3.inputControllerWillPerformTyping(), this.withTargetDOMRange(function() {
                  var t4;
                  return null != (t4 = this.responder) ? t4.insertLineBreak() : void 0;
                });
              }, insertReplacementText: function() {
                return this.insertString(this.event.dataTransfer.getData("text/plain"), { updatePosition: false });
              }, insertText: function() {
                var t3, e2;
                return this.insertString(null != (t3 = this.event.data) ? t3 : null != (e2 = this.event.dataTransfer) ? e2.getData("text/plain") : void 0);
              }, insertTranspose: function() {
                return this.insertString(this.event.data);
              }, insertUnorderedList: function() {
                return this.toggleAttributeIfSupported("bullet");
              } }, u.prototype.insertString = function(t3, e2) {
                var n2;
                return null == t3 && (t3 = ""), null != (n2 = this.delegate) && n2.inputControllerWillPerformTyping(), this.withTargetDOMRange(function() {
                  var n3;
                  return null != (n3 = this.responder) ? n3.insertString(t3, e2) : void 0;
                });
              }, u.prototype.toggleAttributeIfSupported = function(t3) {
                var n2;
                return a.call(e.getAllAttributeNames(), t3) >= 0 ? (null != (n2 = this.delegate) && n2.inputControllerWillPerformFormatting(t3), this.withTargetDOMRange(function() {
                  var e2;
                  return null != (e2 = this.responder) ? e2.toggleCurrentAttribute(t3) : void 0;
                })) : void 0;
              }, u.prototype.activateAttributeIfSupported = function(t3, n2) {
                var i2;
                return a.call(e.getAllAttributeNames(), t3) >= 0 ? (null != (i2 = this.delegate) && i2.inputControllerWillPerformFormatting(t3), this.withTargetDOMRange(function() {
                  var e2;
                  return null != (e2 = this.responder) ? e2.setCurrentAttribute(t3, n2) : void 0;
                })) : void 0;
              }, u.prototype.deleteInDirection = function(t3, e2) {
                var n2, i2, o2, r2;
                return o2 = (null != e2 ? e2 : { recordUndoEntry: true }).recordUndoEntry, o2 && null != (r2 = this.delegate) && r2.inputControllerWillPerformTyping(), i2 = /* @__PURE__ */ function(e3) {
                  return function() {
                    var n3;
                    return null != (n3 = e3.responder) ? n3.deleteInDirection(t3) : void 0;
                  };
                }(this), (n2 = this.getTargetDOMRange({ minLength: 2 })) ? this.withTargetDOMRange(n2, i2) : i2();
              }, u.prototype.withTargetDOMRange = function(t3, n2) {
                var i2;
                return "function" == typeof t3 && (n2 = t3, t3 = this.getTargetDOMRange()), t3 ? null != (i2 = this.responder) ? i2.withTargetDOMRange(t3, n2.bind(this)) : void 0 : (e.selectionChangeObserver.reset(), n2.call(this));
              }, u.prototype.getTargetDOMRange = function(t3) {
                var e2, n2, i2, o2;
                return i2 = (null != t3 ? t3 : { minLength: 0 }).minLength, (o2 = "function" == typeof (e2 = this.event).getTargetRanges ? e2.getTargetRanges() : void 0) && o2.length && (n2 = f(o2[0]), 0 === i2 || n2.toString().length >= i2) ? n2 : void 0;
              }, f = function(t3) {
                var e2;
                return e2 = document.createRange(), e2.setStart(t3.startContainer, t3.startOffset), e2.setEnd(t3.endContainer, t3.endOffset), e2;
              }, u.prototype.withEvent = function(t3, e2) {
                var n2;
                this.event = t3;
                try {
                  n2 = e2.call(this);
                } finally {
                  this.event = null;
                }
                return n2;
              }, c = function(t3) {
                var e2, n2;
                return a.call(null != (e2 = null != (n2 = t3.dataTransfer) ? n2.types : void 0) ? e2 : [], "Files") >= 0;
              }, h = function(t3) {
                var e2;
                return (e2 = t3.clipboardData) ? a.call(e2.types, "Files") >= 0 && 1 === e2.types.length && e2.files.length >= 1 : void 0;
              }, p = function(t3) {
                var e2;
                return (e2 = t3.clipboardData) ? a.call(e2.types, "text/plain") >= 0 && 1 === e2.types.length : void 0;
              }, l = function(t3) {
                var e2;
                return e2 = [], t3.altKey && e2.push("alt"), t3.shiftKey && e2.push("shift"), e2.push(t3.key), e2;
              }, d = function(t3) {
                return { x: t3.clientX, y: t3.clientY };
              }, u;
            }(e.InputController);
          }.call(this), function() {
            var t2, n, i, o, r, s, a, u, c = function(t3, e2) {
              return function() {
                return t3.apply(e2, arguments);
              };
            }, l = function(t3, e2) {
              function n2() {
                this.constructor = t3;
              }
              for (var i2 in e2)
                h.call(e2, i2) && (t3[i2] = e2[i2]);
              return n2.prototype = e2.prototype, t3.prototype = new n2(), t3.__super__ = e2.prototype, t3;
            }, h = {}.hasOwnProperty;
            n = e.defer, i = e.handleEvent, s = e.makeElement, u = e.tagName, a = e.config, r = a.lang, t2 = a.css, o = a.keyNames, e.AttachmentEditorController = function(a2) {
              function h2(t3, e2, n2, i2) {
                this.attachmentPiece = t3, this.element = e2, this.container = n2, this.options = null != i2 ? i2 : {}, this.didBlurCaption = c(this.didBlurCaption, this), this.didChangeCaption = c(this.didChangeCaption, this), this.didInputCaption = c(this.didInputCaption, this), this.didKeyDownCaption = c(this.didKeyDownCaption, this), this.didClickActionButton = c(this.didClickActionButton, this), this.didClickToolbar = c(this.didClickToolbar, this), this.attachment = this.attachmentPiece.attachment, "a" === u(this.element) && (this.element = this.element.firstChild), this.install();
              }
              var p;
              return l(h2, a2), p = function(t3) {
                return function() {
                  var e2;
                  return e2 = t3.apply(this, arguments), e2["do"](), null == this.undos && (this.undos = []), this.undos.push(e2.undo);
                };
              }, h2.prototype.install = function() {
                return this.makeElementMutable(), this.addToolbar(), this.attachment.isPreviewable() ? this.installCaptionEditor() : void 0;
              }, h2.prototype.uninstall = function() {
                var t3, e2;
                for (this.savePendingCaption(); e2 = this.undos.pop(); )
                  e2();
                return null != (t3 = this.delegate) ? t3.didUninstallAttachmentEditor(this) : void 0;
              }, h2.prototype.savePendingCaption = function() {
                var t3, e2, n2;
                return null != this.pendingCaption ? (t3 = this.pendingCaption, this.pendingCaption = null, t3 ? null != (e2 = this.delegate) && "function" == typeof e2.attachmentEditorDidRequestUpdatingAttributesForAttachment ? e2.attachmentEditorDidRequestUpdatingAttributesForAttachment({ caption: t3 }, this.attachment) : void 0 : null != (n2 = this.delegate) && "function" == typeof n2.attachmentEditorDidRequestRemovingAttributeForAttachment ? n2.attachmentEditorDidRequestRemovingAttributeForAttachment("caption", this.attachment) : void 0) : void 0;
              }, h2.prototype.makeElementMutable = p(function() {
                return { "do": /* @__PURE__ */ function(t3) {
                  return function() {
                    return t3.element.dataset.trixMutable = true;
                  };
                }(this), undo: /* @__PURE__ */ function(t3) {
                  return function() {
                    return delete t3.element.dataset.trixMutable;
                  };
                }(this) };
              }), h2.prototype.addToolbar = p(function() {
                var n2;
                return n2 = s({ tagName: "div", className: t2.attachmentToolbar, data: { trixMutable: true }, childNodes: s({ tagName: "div", className: "trix-button-row", childNodes: s({ tagName: "span", className: "trix-button-group trix-button-group--actions", childNodes: s({ tagName: "button", className: "trix-button trix-button--remove", textContent: r.remove, attributes: { title: r.remove }, data: { trixAction: "remove" } }) }) }) }), this.attachment.isPreviewable() && n2.appendChild(s({ tagName: "div", className: t2.attachmentMetadataContainer, childNodes: s({ tagName: "span", className: t2.attachmentMetadata, childNodes: [s({ tagName: "span", className: t2.attachmentName, textContent: this.attachment.getFilename(), attributes: { title: this.attachment.getFilename() } }), s({ tagName: "span", className: t2.attachmentSize, textContent: this.attachment.getFormattedFilesize() })] }) })), i("click", { onElement: n2, withCallback: this.didClickToolbar }), i("click", { onElement: n2, matchingSelector: "[data-trix-action]", withCallback: this.didClickActionButton }), { "do": /* @__PURE__ */ function(t3) {
                  return function() {
                    return t3.element.appendChild(n2);
                  };
                }(this), undo: /* @__PURE__ */ function() {
                  return function() {
                    return e.removeNode(n2);
                  };
                }(this) };
              }), h2.prototype.installCaptionEditor = p(function() {
                var o2, a3, u2, c2, l2;
                return c2 = s({ tagName: "textarea", className: t2.attachmentCaptionEditor, attributes: { placeholder: r.captionPlaceholder }, data: { trixMutable: true } }), c2.value = this.attachmentPiece.getCaption(), l2 = c2.cloneNode(), l2.classList.add("trix-autoresize-clone"), l2.tabIndex = -1, o2 = function() {
                  return l2.value = c2.value, c2.style.height = l2.scrollHeight + "px";
                }, i("input", { onElement: c2, withCallback: o2 }), i("input", { onElement: c2, withCallback: this.didInputCaption }), i("keydown", { onElement: c2, withCallback: this.didKeyDownCaption }), i("change", { onElement: c2, withCallback: this.didChangeCaption }), i("blur", { onElement: c2, withCallback: this.didBlurCaption }), u2 = this.element.querySelector("figcaption"), a3 = u2.cloneNode(), { "do": /* @__PURE__ */ function(e2) {
                  return function() {
                    return u2.style.display = "none", a3.appendChild(c2), a3.appendChild(l2), a3.classList.add(t2.attachmentCaption + "--editing"), u2.parentElement.insertBefore(a3, u2), o2(), e2.options.editCaption ? n(function() {
                      return c2.focus();
                    }) : void 0;
                  };
                }(this), undo: function() {
                  return e.removeNode(a3), u2.style.display = null;
                } };
              }), h2.prototype.didClickToolbar = function(t3) {
                return t3.preventDefault(), t3.stopPropagation();
              }, h2.prototype.didClickActionButton = function(t3) {
                var e2, n2;
                switch (e2 = t3.target.getAttribute("data-trix-action")) {
                  case "remove":
                    return null != (n2 = this.delegate) ? n2.attachmentEditorDidRequestRemovalOfAttachment(this.attachment) : void 0;
                }
              }, h2.prototype.didKeyDownCaption = function(t3) {
                var e2;
                return "return" === o[t3.keyCode] ? (t3.preventDefault(), this.savePendingCaption(), null != (e2 = this.delegate) && "function" == typeof e2.attachmentEditorDidRequestDeselectingAttachment ? e2.attachmentEditorDidRequestDeselectingAttachment(this.attachment) : void 0) : void 0;
              }, h2.prototype.didInputCaption = function(t3) {
                return this.pendingCaption = t3.target.value.replace(/\s/g, " ").trim();
              }, h2.prototype.didChangeCaption = function() {
                return this.savePendingCaption();
              }, h2.prototype.didBlurCaption = function() {
                return this.savePendingCaption();
              }, h2;
            }(e.BasicObject);
          }.call(this), function() {
            var t2, n, i, o = function(t3, e2) {
              function n2() {
                this.constructor = t3;
              }
              for (var i2 in e2)
                r.call(e2, i2) && (t3[i2] = e2[i2]);
              return n2.prototype = e2.prototype, t3.prototype = new n2(), t3.__super__ = e2.prototype, t3;
            }, r = {}.hasOwnProperty;
            i = e.makeElement, t2 = e.config.css, e.AttachmentView = function(r2) {
              function s() {
                s.__super__.constructor.apply(this, arguments), this.attachment = this.object, this.attachment.uploadProgressDelegate = this, this.attachmentPiece = this.options.piece;
              }
              var a;
              return o(s, r2), s.attachmentSelector = "[data-trix-attachment]", s.prototype.createContentNodes = function() {
                return [];
              }, s.prototype.createNodes = function() {
                var e2, n2, o2, r3, s2, u, c;
                if (e2 = r3 = i({ tagName: "figure", className: this.getClassName(), data: this.getData(), editable: false }), (n2 = this.getHref()) && (r3 = i({ tagName: "a", editable: false, attributes: { href: n2, tabindex: -1 } }), e2.appendChild(r3)), this.attachment.hasContent())
                  r3.innerHTML = this.attachment.getContent();
                else
                  for (c = this.createContentNodes(), o2 = 0, s2 = c.length; s2 > o2; o2++)
                    u = c[o2], r3.appendChild(u);
                return r3.appendChild(this.createCaptionElement()), this.attachment.isPending() && (this.progressElement = i({ tagName: "progress", attributes: { "class": t2.attachmentProgress, value: this.attachment.getUploadProgress(), max: 100 }, data: { trixMutable: true, trixStoreKey: ["progressElement", this.attachment.id].join("/") } }), e2.appendChild(this.progressElement)), [a("left"), e2, a("right")];
              }, s.prototype.createCaptionElement = function() {
                var e2, n2, o2, r3, s2, a2, u;
                return o2 = i({ tagName: "figcaption", className: t2.attachmentCaption }), (e2 = this.attachmentPiece.getCaption()) ? (o2.classList.add(t2.attachmentCaption + "--edited"), o2.textContent = e2) : (n2 = this.getCaptionConfig(), n2.name && (r3 = this.attachment.getFilename()), n2.size && (a2 = this.attachment.getFormattedFilesize()), r3 && (s2 = i({ tagName: "span", className: t2.attachmentName, textContent: r3 }), o2.appendChild(s2)), a2 && (r3 && o2.appendChild(document.createTextNode(" ")), u = i({ tagName: "span", className: t2.attachmentSize, textContent: a2 }), o2.appendChild(u))), o2;
              }, s.prototype.getClassName = function() {
                var e2, n2;
                return n2 = [t2.attachment, t2.attachment + "--" + this.attachment.getType()], (e2 = this.attachment.getExtension()) && n2.push(t2.attachment + "--" + e2), n2.join(" ");
              }, s.prototype.getData = function() {
                var t3, e2;
                return e2 = { trixAttachment: JSON.stringify(this.attachment), trixContentType: this.attachment.getContentType(), trixId: this.attachment.id }, t3 = this.attachmentPiece.attributes, t3.isEmpty() || (e2.trixAttributes = JSON.stringify(t3)), this.attachment.isPending() && (e2.trixSerialize = false), e2;
              }, s.prototype.getHref = function() {
                return n(this.attachment.getContent(), "a") ? void 0 : this.attachment.getHref();
              }, s.prototype.getCaptionConfig = function() {
                var t3, n2, i2;
                return i2 = this.attachment.getType(), t3 = e.copyObject(null != (n2 = e.config.attachments[i2]) ? n2.caption : void 0), "file" === i2 && (t3.name = true), t3;
              }, s.prototype.findProgressElement = function() {
                var t3;
                return null != (t3 = this.findElement()) ? t3.querySelector("progress") : void 0;
              }, a = function(t3) {
                return i({ tagName: "span", textContent: e.ZERO_WIDTH_SPACE, data: { trixCursorTarget: t3, trixSerialize: false } });
              }, s.prototype.attachmentDidChangeUploadProgress = function() {
                var t3, e2;
                return e2 = this.attachment.getUploadProgress(), null != (t3 = this.findProgressElement()) ? t3.value = e2 : void 0;
              }, s;
            }(e.ObjectView), n = function(t3, e2) {
              var n2;
              return n2 = i("div"), n2.innerHTML = null != t3 ? t3 : "", n2.querySelector(e2);
            };
          }.call(this), function() {
            var t2, n = function(t3, e2) {
              function n2() {
                this.constructor = t3;
              }
              for (var o in e2)
                i.call(e2, o) && (t3[o] = e2[o]);
              return n2.prototype = e2.prototype, t3.prototype = new n2(), t3.__super__ = e2.prototype, t3;
            }, i = {}.hasOwnProperty;
            t2 = e.makeElement, e.PreviewableAttachmentView = function(i2) {
              function o() {
                o.__super__.constructor.apply(this, arguments), this.attachment.previewDelegate = this;
              }
              return n(o, i2), o.prototype.createContentNodes = function() {
                return this.image = t2({ tagName: "img", attributes: { src: "" }, data: { trixMutable: true } }), this.refresh(this.image), [this.image];
              }, o.prototype.createCaptionElement = function() {
                var t3;
                return t3 = o.__super__.createCaptionElement.apply(this, arguments), t3.textContent || t3.setAttribute("data-trix-placeholder", e.config.lang.captionPlaceholder), t3;
              }, o.prototype.refresh = function(t3) {
                var e2;
                return null == t3 && (t3 = null != (e2 = this.findElement()) ? e2.querySelector("img") : void 0), t3 ? this.updateAttributesForImage(t3) : void 0;
              }, o.prototype.updateAttributesForImage = function(t3) {
                var e2, n2, i3, o2, r, s;
                return r = this.attachment.getURL(), n2 = this.attachment.getPreviewURL(), t3.src = n2 || r, n2 === r ? t3.removeAttribute("data-trix-serialized-attributes") : (i3 = JSON.stringify({ src: r }), t3.setAttribute("data-trix-serialized-attributes", i3)), s = this.attachment.getWidth(), e2 = this.attachment.getHeight(), null != s && (t3.width = s), null != e2 && (t3.height = e2), o2 = ["imageElement", this.attachment.id, t3.src, t3.width, t3.height].join("/"), t3.dataset.trixStoreKey = o2;
              }, o.prototype.attachmentDidChangeAttributes = function() {
                return this.refresh(this.image), this.refresh();
              }, o;
            }(e.AttachmentView);
          }.call(this), function() {
            var t2, n, i, o = function(t3, e2) {
              function n2() {
                this.constructor = t3;
              }
              for (var i2 in e2)
                r.call(e2, i2) && (t3[i2] = e2[i2]);
              return n2.prototype = e2.prototype, t3.prototype = new n2(), t3.__super__ = e2.prototype, t3;
            }, r = {}.hasOwnProperty;
            i = e.makeElement, t2 = e.findInnerElement, n = e.getTextConfig, e.PieceView = function(r2) {
              function s() {
                var t3;
                s.__super__.constructor.apply(this, arguments), this.piece = this.object, this.attributes = this.piece.getAttributes(), t3 = this.options, this.textConfig = t3.textConfig, this.context = t3.context, this.piece.attachment ? this.attachment = this.piece.attachment : this.string = this.piece.toString();
              }
              var a;
              return o(s, r2), s.prototype.createNodes = function() {
                var e2, n2, i2, o2, r3, s2;
                if (s2 = this.attachment ? this.createAttachmentNodes() : this.createStringNodes(), e2 = this.createElement()) {
                  for (i2 = t2(e2), n2 = 0, o2 = s2.length; o2 > n2; n2++)
                    r3 = s2[n2], i2.appendChild(r3);
                  s2 = [e2];
                }
                return s2;
              }, s.prototype.createAttachmentNodes = function() {
                var t3, n2;
                return t3 = this.attachment.isPreviewable() ? e.PreviewableAttachmentView : e.AttachmentView, n2 = this.createChildView(t3, this.piece.attachment, { piece: this.piece }), n2.getNodes();
              }, s.prototype.createStringNodes = function() {
                var t3, e2, n2, o2, r3, s2, a2, u, c, l;
                if (null != (u = this.textConfig) ? u.plaintext : void 0)
                  return [document.createTextNode(this.string)];
                for (a2 = [], c = this.string.split("\n"), n2 = e2 = 0, o2 = c.length; o2 > e2; n2 = ++e2)
                  l = c[n2], n2 > 0 && (t3 = i("br"), a2.push(t3)), (r3 = l.length) && (s2 = document.createTextNode(this.preserveSpaces(l)), a2.push(s2));
                return a2;
              }, s.prototype.createElement = function() {
                var t3, e2, o2, r3, s2, a2, u, c, l;
                c = {}, a2 = this.attributes;
                for (r3 in a2)
                  if (l = a2[r3], (t3 = n(r3)) && (t3.tagName && (s2 = i(t3.tagName), o2 ? (o2.appendChild(s2), o2 = s2) : e2 = o2 = s2), t3.styleProperty && (c[t3.styleProperty] = l), t3.style)) {
                    u = t3.style;
                    for (r3 in u)
                      l = u[r3], c[r3] = l;
                  }
                if (Object.keys(c).length) {
                  null == e2 && (e2 = i("span"));
                  for (r3 in c)
                    l = c[r3], e2.style[r3] = l;
                }
                return e2;
              }, s.prototype.createContainerElement = function() {
                var t3, e2, o2, r3, s2;
                r3 = this.attributes;
                for (o2 in r3)
                  if (s2 = r3[o2], (e2 = n(o2)) && e2.groupTagName)
                    return t3 = {}, t3[o2] = s2, i(e2.groupTagName, t3);
              }, a = e.NON_BREAKING_SPACE, s.prototype.preserveSpaces = function(t3) {
                return this.context.isLast && (t3 = t3.replace(/\ $/, a)), t3 = t3.replace(/(\S)\ {3}(\S)/g, "$1 " + a + " $2").replace(/\ {2}/g, a + " ").replace(/\ {2}/g, " " + a), (this.context.isFirst || this.context.followsWhitespace) && (t3 = t3.replace(/^\ /, a)), t3;
              }, s;
            }(e.ObjectView);
          }.call(this), function() {
            var t2 = function(t3, e2) {
              function i() {
                this.constructor = t3;
              }
              for (var o in e2)
                n.call(e2, o) && (t3[o] = e2[o]);
              return i.prototype = e2.prototype, t3.prototype = new i(), t3.__super__ = e2.prototype, t3;
            }, n = {}.hasOwnProperty;
            e.TextView = function(n2) {
              function i() {
                i.__super__.constructor.apply(this, arguments), this.text = this.object, this.textConfig = this.options.textConfig;
              }
              var o;
              return t2(i, n2), i.prototype.createNodes = function() {
                var t3, n3, i2, r, s, a, u, c, l, h;
                for (a = [], c = e.ObjectGroup.groupObjects(this.getPieces()), r = c.length - 1, i2 = n3 = 0, s = c.length; s > n3; i2 = ++n3)
                  u = c[i2], t3 = {}, 0 === i2 && (t3.isFirst = true), i2 === r && (t3.isLast = true), o(l) && (t3.followsWhitespace = true), h = this.findOrCreateCachedChildView(e.PieceView, u, { textConfig: this.textConfig, context: t3 }), a.push.apply(a, h.getNodes()), l = u;
                return a;
              }, i.prototype.getPieces = function() {
                var t3, e2, n3, i2, o2;
                for (i2 = this.text.getPieces(), o2 = [], t3 = 0, e2 = i2.length; e2 > t3; t3++)
                  n3 = i2[t3], n3.hasAttribute("blockBreak") || o2.push(n3);
                return o2;
              }, o = function(t3) {
                return /\s$/.test(null != t3 ? t3.toString() : void 0);
              }, i;
            }(e.ObjectView);
          }.call(this), function() {
            var t2, n, i, o = function(t3, e2) {
              function n2() {
                this.constructor = t3;
              }
              for (var i2 in e2)
                r.call(e2, i2) && (t3[i2] = e2[i2]);
              return n2.prototype = e2.prototype, t3.prototype = new n2(), t3.__super__ = e2.prototype, t3;
            }, r = {}.hasOwnProperty;
            i = e.makeElement, n = e.getBlockConfig, t2 = e.config.css, e.BlockView = function(r2) {
              function s() {
                s.__super__.constructor.apply(this, arguments), this.block = this.object, this.attributes = this.block.getAttributes();
              }
              return o(s, r2), s.prototype.createNodes = function() {
                var t3, o2, r3, s2, a, u, c, l, h, p, d;
                if (o2 = document.createComment("block"), c = [o2], this.block.isEmpty() ? c.push(i("br")) : (p = null != (l = n(this.block.getLastAttribute())) ? l.text : void 0, d = this.findOrCreateCachedChildView(e.TextView, this.block.text, { textConfig: p }), c.push.apply(c, d.getNodes()), this.shouldAddExtraNewlineElement() && c.push(i("br"))), this.attributes.length)
                  return c;
                for (h = e.config.blockAttributes["default"].tagName, this.block.isRTL() && (t3 = { dir: "rtl" }), r3 = i({ tagName: h, attributes: t3 }), s2 = 0, a = c.length; a > s2; s2++)
                  u = c[s2], r3.appendChild(u);
                return [r3];
              }, s.prototype.createContainerElement = function(e2) {
                var o2, r3, s2, a, u;
                return o2 = this.attributes[e2], u = n(o2).tagName, 0 === e2 && this.block.isRTL() && (r3 = { dir: "rtl" }), "attachmentGallery" === o2 && (a = this.block.getBlockBreakPosition(), s2 = t2.attachmentGallery + " " + t2.attachmentGallery + "--" + a), i({ tagName: u, className: s2, attributes: r3 });
              }, s.prototype.shouldAddExtraNewlineElement = function() {
                return /\n\n$/.test(this.block.toString());
              }, s;
            }(e.ObjectView);
          }.call(this), function() {
            var t2, n, i = function(t3, e2) {
              function n2() {
                this.constructor = t3;
              }
              for (var i2 in e2)
                o.call(e2, i2) && (t3[i2] = e2[i2]);
              return n2.prototype = e2.prototype, t3.prototype = new n2(), t3.__super__ = e2.prototype, t3;
            }, o = {}.hasOwnProperty;
            t2 = e.defer, n = e.makeElement, e.DocumentView = function(o2) {
              function r() {
                r.__super__.constructor.apply(this, arguments), this.element = this.options.element, this.elementStore = new e.ElementStore(), this.setDocument(this.object);
              }
              var s, a, u;
              return i(r, o2), r.render = function(t3) {
                var e2, i2;
                return e2 = n("div"), i2 = new this(t3, { element: e2 }), i2.render(), i2.sync(), e2;
              }, r.prototype.setDocument = function(t3) {
                return t3.isEqualTo(this.document) ? void 0 : this.document = this.object = t3;
              }, r.prototype.render = function() {
                var t3, i2, o3, r2, s2, a2, u2;
                if (this.childViews = [], this.shadowElement = n("div"), !this.document.isEmpty()) {
                  for (s2 = e.ObjectGroup.groupObjects(this.document.getBlocks(), { asTree: true }), a2 = [], t3 = 0, i2 = s2.length; i2 > t3; t3++)
                    r2 = s2[t3], u2 = this.findOrCreateCachedChildView(e.BlockView, r2), a2.push(function() {
                      var t4, e2, n2, i3;
                      for (n2 = u2.getNodes(), i3 = [], t4 = 0, e2 = n2.length; e2 > t4; t4++)
                        o3 = n2[t4], i3.push(this.shadowElement.appendChild(o3));
                      return i3;
                    }.call(this));
                  return a2;
                }
              }, r.prototype.isSynced = function() {
                return s(this.shadowElement, this.element);
              }, r.prototype.sync = function() {
                var t3;
                for (t3 = this.createDocumentFragmentForSync(); this.element.lastChild; )
                  this.element.removeChild(this.element.lastChild);
                return this.element.appendChild(t3), this.didSync();
              }, r.prototype.didSync = function() {
                return this.elementStore.reset(a(this.element)), t2(/* @__PURE__ */ function(t3) {
                  return function() {
                    return t3.garbageCollectCachedViews();
                  };
                }(this));
              }, r.prototype.createDocumentFragmentForSync = function() {
                var t3, e2, n2, i2, o3, r2, s2, u2, c, l;
                for (e2 = document.createDocumentFragment(), u2 = this.shadowElement.childNodes, n2 = 0, o3 = u2.length; o3 > n2; n2++)
                  s2 = u2[n2], e2.appendChild(s2.cloneNode(true));
                for (c = a(e2), i2 = 0, r2 = c.length; r2 > i2; i2++)
                  t3 = c[i2], (l = this.elementStore.remove(t3)) && t3.parentNode.replaceChild(l, t3);
                return e2;
              }, a = function(t3) {
                return t3.querySelectorAll("[data-trix-store-key]");
              }, s = function(t3, e2) {
                return u(t3.innerHTML) === u(e2.innerHTML);
              }, u = function(t3) {
                return t3.replace(/&nbsp;/g, " ");
              }, r;
            }(e.ObjectView);
          }.call(this), function() {
            var t2, n, i, o, r, s = function(t3, e2) {
              return function() {
                return t3.apply(e2, arguments);
              };
            }, a = function(t3, e2) {
              function n2() {
                this.constructor = t3;
              }
              for (var i2 in e2)
                u.call(e2, i2) && (t3[i2] = e2[i2]);
              return n2.prototype = e2.prototype, t3.prototype = new n2(), t3.__super__ = e2.prototype, t3;
            }, u = {}.hasOwnProperty;
            i = e.findClosestElementFromNode, o = e.handleEvent, r = e.innerElementIsActive, n = e.defer, t2 = e.AttachmentView.attachmentSelector, e.CompositionController = function(u2) {
              function c(n2, i2) {
                this.element = n2, this.composition = i2, this.didClickAttachment = s(this.didClickAttachment, this), this.didBlur = s(this.didBlur, this), this.didFocus = s(this.didFocus, this), this.documentView = new e.DocumentView(this.composition.document, { element: this.element }), o("focus", { onElement: this.element, withCallback: this.didFocus }), o("blur", { onElement: this.element, withCallback: this.didBlur }), o("click", { onElement: this.element, matchingSelector: "a[contenteditable=false]", preventDefault: true }), o("mousedown", { onElement: this.element, matchingSelector: t2, withCallback: this.didClickAttachment }), o("click", { onElement: this.element, matchingSelector: "a" + t2, preventDefault: true });
              }
              return a(c, u2), c.prototype.didFocus = function() {
                var t3, e2, n2;
                return t3 = /* @__PURE__ */ function(t4) {
                  return function() {
                    var e3;
                    return t4.focused ? void 0 : (t4.focused = true, null != (e3 = t4.delegate) && "function" == typeof e3.compositionControllerDidFocus ? e3.compositionControllerDidFocus() : void 0);
                  };
                }(this), null != (e2 = null != (n2 = this.blurPromise) ? n2.then(t3) : void 0) ? e2 : t3();
              }, c.prototype.didBlur = function() {
                return this.blurPromise = new Promise(/* @__PURE__ */ function(t3) {
                  return function(e2) {
                    return n(function() {
                      var n2;
                      return r(t3.element) || (t3.focused = null, null != (n2 = t3.delegate) && "function" == typeof n2.compositionControllerDidBlur && n2.compositionControllerDidBlur()), t3.blurPromise = null, e2();
                    });
                  };
                }(this));
              }, c.prototype.didClickAttachment = function(t3, e2) {
                var n2, o2, r2;
                return n2 = this.findAttachmentForElement(e2), o2 = null != i(t3.target, { matchingSelector: "figcaption" }), null != (r2 = this.delegate) && "function" == typeof r2.compositionControllerDidSelectAttachment ? r2.compositionControllerDidSelectAttachment(n2, { editCaption: o2 }) : void 0;
              }, c.prototype.getSerializableElement = function() {
                return this.isEditingAttachment() ? this.documentView.shadowElement : this.element;
              }, c.prototype.render = function() {
                var t3, e2, n2;
                return this.revision !== this.composition.revision && (this.documentView.setDocument(this.composition.document), this.documentView.render(), this.revision = this.composition.revision), this.canSyncDocumentView() && !this.documentView.isSynced() && (null != (t3 = this.delegate) && "function" == typeof t3.compositionControllerWillSyncDocumentView && t3.compositionControllerWillSyncDocumentView(), this.documentView.sync(), null != (e2 = this.delegate) && "function" == typeof e2.compositionControllerDidSyncDocumentView && e2.compositionControllerDidSyncDocumentView()), null != (n2 = this.delegate) && "function" == typeof n2.compositionControllerDidRender ? n2.compositionControllerDidRender() : void 0;
              }, c.prototype.rerenderViewForObject = function(t3) {
                return this.invalidateViewForObject(t3), this.render();
              }, c.prototype.invalidateViewForObject = function(t3) {
                return this.documentView.invalidateViewForObject(t3);
              }, c.prototype.isViewCachingEnabled = function() {
                return this.documentView.isViewCachingEnabled();
              }, c.prototype.enableViewCaching = function() {
                return this.documentView.enableViewCaching();
              }, c.prototype.disableViewCaching = function() {
                return this.documentView.disableViewCaching();
              }, c.prototype.refreshViewCache = function() {
                return this.documentView.garbageCollectCachedViews();
              }, c.prototype.isEditingAttachment = function() {
                return null != this.attachmentEditor;
              }, c.prototype.installAttachmentEditorForAttachment = function(t3, n2) {
                var i2, o2, r2;
                if ((null != (r2 = this.attachmentEditor) ? r2.attachment : void 0) !== t3 && (o2 = this.documentView.findElementForObject(t3)))
                  return this.uninstallAttachmentEditor(), i2 = this.composition.document.getAttachmentPieceForAttachment(t3), this.attachmentEditor = new e.AttachmentEditorController(i2, o2, this.element, n2), this.attachmentEditor.delegate = this;
              }, c.prototype.uninstallAttachmentEditor = function() {
                var t3;
                return null != (t3 = this.attachmentEditor) ? t3.uninstall() : void 0;
              }, c.prototype.didUninstallAttachmentEditor = function() {
                return this.attachmentEditor = null, this.render();
              }, c.prototype.attachmentEditorDidRequestUpdatingAttributesForAttachment = function(t3, e2) {
                var n2;
                return null != (n2 = this.delegate) && "function" == typeof n2.compositionControllerWillUpdateAttachment && n2.compositionControllerWillUpdateAttachment(e2), this.composition.updateAttributesForAttachment(t3, e2);
              }, c.prototype.attachmentEditorDidRequestRemovingAttributeForAttachment = function(t3, e2) {
                var n2;
                return null != (n2 = this.delegate) && "function" == typeof n2.compositionControllerWillUpdateAttachment && n2.compositionControllerWillUpdateAttachment(e2), this.composition.removeAttributeForAttachment(t3, e2);
              }, c.prototype.attachmentEditorDidRequestRemovalOfAttachment = function(t3) {
                var e2;
                return null != (e2 = this.delegate) && "function" == typeof e2.compositionControllerDidRequestRemovalOfAttachment ? e2.compositionControllerDidRequestRemovalOfAttachment(t3) : void 0;
              }, c.prototype.attachmentEditorDidRequestDeselectingAttachment = function(t3) {
                var e2;
                return null != (e2 = this.delegate) && "function" == typeof e2.compositionControllerDidRequestDeselectingAttachment ? e2.compositionControllerDidRequestDeselectingAttachment(t3) : void 0;
              }, c.prototype.canSyncDocumentView = function() {
                return !this.isEditingAttachment();
              }, c.prototype.findAttachmentForElement = function(t3) {
                return this.composition.document.getAttachmentById(parseInt(t3.dataset.trixId, 10));
              }, c;
            }(e.BasicObject);
          }.call(this), function() {
            var t2, n, i, o = function(t3, e2) {
              return function() {
                return t3.apply(e2, arguments);
              };
            }, r = function(t3, e2) {
              function n2() {
                this.constructor = t3;
              }
              for (var i2 in e2)
                s.call(e2, i2) && (t3[i2] = e2[i2]);
              return n2.prototype = e2.prototype, t3.prototype = new n2(), t3.__super__ = e2.prototype, t3;
            }, s = {}.hasOwnProperty;
            n = e.handleEvent, i = e.triggerEvent, t2 = e.findClosestElementFromNode, e.ToolbarController = function(e2) {
              function s2(t3) {
                this.element = t3, this.didKeyDownDialogInput = o(this.didKeyDownDialogInput, this), this.didClickDialogButton = o(this.didClickDialogButton, this), this.didClickAttributeButton = o(this.didClickAttributeButton, this), this.didClickActionButton = o(this.didClickActionButton, this), this.attributes = {}, this.actions = {}, this.resetDialogInputs(), n("mousedown", { onElement: this.element, matchingSelector: a, withCallback: this.didClickActionButton }), n("mousedown", { onElement: this.element, matchingSelector: c, withCallback: this.didClickAttributeButton }), n("click", { onElement: this.element, matchingSelector: v, preventDefault: true }), n("click", { onElement: this.element, matchingSelector: l, withCallback: this.didClickDialogButton }), n("keydown", { onElement: this.element, matchingSelector: h, withCallback: this.didKeyDownDialogInput });
              }
              var a, u, c, l, h, p, d, f, g, m, v;
              return r(s2, e2), c = "[data-trix-attribute]", a = "[data-trix-action]", v = c + ", " + a, p = "[data-trix-dialog]", u = p + "[data-trix-active]", l = p + " [data-trix-method]", h = p + " [data-trix-input]", s2.prototype.didClickActionButton = function(t3, e3) {
                var n2, i2, o2;
                return null != (i2 = this.delegate) && i2.toolbarDidClickButton(), t3.preventDefault(), n2 = d(e3), this.getDialog(n2) ? this.toggleDialog(n2) : null != (o2 = this.delegate) ? o2.toolbarDidInvokeAction(n2) : void 0;
              }, s2.prototype.didClickAttributeButton = function(t3, e3) {
                var n2, i2, o2;
                return null != (i2 = this.delegate) && i2.toolbarDidClickButton(), t3.preventDefault(), n2 = f(e3), this.getDialog(n2) ? this.toggleDialog(n2) : null != (o2 = this.delegate) && o2.toolbarDidToggleAttribute(n2), this.refreshAttributeButtons();
              }, s2.prototype.didClickDialogButton = function(e3, n2) {
                var i2, o2;
                return i2 = t2(n2, { matchingSelector: p }), o2 = n2.getAttribute("data-trix-method"), this[o2].call(this, i2);
              }, s2.prototype.didKeyDownDialogInput = function(t3, e3) {
                var n2, i2;
                return 13 === t3.keyCode && (t3.preventDefault(), n2 = e3.getAttribute("name"), i2 = this.getDialog(n2), this.setAttribute(i2)), 27 === t3.keyCode ? (t3.preventDefault(), this.hideDialog()) : void 0;
              }, s2.prototype.updateActions = function(t3) {
                return this.actions = t3, this.refreshActionButtons();
              }, s2.prototype.refreshActionButtons = function() {
                return this.eachActionButton(/* @__PURE__ */ function(t3) {
                  return function(e3, n2) {
                    return e3.disabled = t3.actions[n2] === false;
                  };
                }(this));
              }, s2.prototype.eachActionButton = function(t3) {
                var e3, n2, i2, o2, r2;
                for (o2 = this.element.querySelectorAll(a), r2 = [], n2 = 0, i2 = o2.length; i2 > n2; n2++)
                  e3 = o2[n2], r2.push(t3(e3, d(e3)));
                return r2;
              }, s2.prototype.updateAttributes = function(t3) {
                return this.attributes = t3, this.refreshAttributeButtons();
              }, s2.prototype.refreshAttributeButtons = function() {
                return this.eachAttributeButton(/* @__PURE__ */ function(t3) {
                  return function(e3, n2) {
                    return e3.disabled = t3.attributes[n2] === false, t3.attributes[n2] || t3.dialogIsVisible(n2) ? (e3.setAttribute("data-trix-active", ""), e3.classList.add("trix-active")) : (e3.removeAttribute("data-trix-active"), e3.classList.remove("trix-active"));
                  };
                }(this));
              }, s2.prototype.eachAttributeButton = function(t3) {
                var e3, n2, i2, o2, r2;
                for (o2 = this.element.querySelectorAll(c), r2 = [], n2 = 0, i2 = o2.length; i2 > n2; n2++)
                  e3 = o2[n2], r2.push(t3(e3, f(e3)));
                return r2;
              }, s2.prototype.applyKeyboardCommand = function(t3) {
                var e3, n2, o2, r2, s3, a2, u2;
                for (s3 = JSON.stringify(t3.sort()), u2 = this.element.querySelectorAll("[data-trix-key]"), r2 = 0, a2 = u2.length; a2 > r2; r2++)
                  if (e3 = u2[r2], o2 = e3.getAttribute("data-trix-key").split("+"), n2 = JSON.stringify(o2.sort()), n2 === s3)
                    return i("mousedown", { onElement: e3 }), true;
                return false;
              }, s2.prototype.dialogIsVisible = function(t3) {
                var e3;
                return (e3 = this.getDialog(t3)) ? e3.hasAttribute("data-trix-active") : void 0;
              }, s2.prototype.toggleDialog = function(t3) {
                return this.dialogIsVisible(t3) ? this.hideDialog() : this.showDialog(t3);
              }, s2.prototype.showDialog = function(t3) {
                var e3, n2, i2, o2, r2, s3, a2, u2, c2, l2;
                for (this.hideDialog(), null != (a2 = this.delegate) && a2.toolbarWillShowDialog(), i2 = this.getDialog(t3), i2.setAttribute("data-trix-active", ""), i2.classList.add("trix-active"), u2 = i2.querySelectorAll("input[disabled]"), o2 = 0, s3 = u2.length; s3 > o2; o2++)
                  n2 = u2[o2], n2.removeAttribute("disabled");
                return (e3 = f(i2)) && (r2 = m(i2, t3)) && (r2.value = null != (c2 = this.attributes[e3]) ? c2 : "", r2.select()), null != (l2 = this.delegate) ? l2.toolbarDidShowDialog(t3) : void 0;
              }, s2.prototype.setAttribute = function(t3) {
                var e3, n2, i2;
                return e3 = f(t3), n2 = m(t3, e3), n2.willValidate && !n2.checkValidity() ? (n2.setAttribute("data-trix-validate", ""), n2.classList.add("trix-validate"), n2.focus()) : (null != (i2 = this.delegate) && i2.toolbarDidUpdateAttribute(e3, n2.value), this.hideDialog());
              }, s2.prototype.removeAttribute = function(t3) {
                var e3, n2;
                return e3 = f(t3), null != (n2 = this.delegate) && n2.toolbarDidRemoveAttribute(e3), this.hideDialog();
              }, s2.prototype.hideDialog = function() {
                var t3, e3;
                return (t3 = this.element.querySelector(u)) ? (t3.removeAttribute("data-trix-active"), t3.classList.remove("trix-active"), this.resetDialogInputs(), null != (e3 = this.delegate) ? e3.toolbarDidHideDialog(g(t3)) : void 0) : void 0;
              }, s2.prototype.resetDialogInputs = function() {
                var t3, e3, n2, i2, o2;
                for (i2 = this.element.querySelectorAll(h), o2 = [], t3 = 0, n2 = i2.length; n2 > t3; t3++)
                  e3 = i2[t3], e3.setAttribute("disabled", "disabled"), e3.removeAttribute("data-trix-validate"), o2.push(e3.classList.remove("trix-validate"));
                return o2;
              }, s2.prototype.getDialog = function(t3) {
                return this.element.querySelector("[data-trix-dialog=" + t3 + "]");
              }, m = function(t3, e3) {
                return null == e3 && (e3 = f(t3)), t3.querySelector("[data-trix-input][name='" + e3 + "']");
              }, d = function(t3) {
                return t3.getAttribute("data-trix-action");
              }, f = function(t3) {
                var e3;
                return null != (e3 = t3.getAttribute("data-trix-attribute")) ? e3 : t3.getAttribute("data-trix-dialog-attribute");
              }, g = function(t3) {
                return t3.getAttribute("data-trix-dialog");
              }, s2;
            }(e.BasicObject);
          }.call(this), function() {
            var t2 = function(t3, e2) {
              function i() {
                this.constructor = t3;
              }
              for (var o in e2)
                n.call(e2, o) && (t3[o] = e2[o]);
              return i.prototype = e2.prototype, t3.prototype = new i(), t3.__super__ = e2.prototype, t3;
            }, n = {}.hasOwnProperty;
            e.ImagePreloadOperation = function(e2) {
              function n2(t3) {
                this.url = t3;
              }
              return t2(n2, e2), n2.prototype.perform = function(t3) {
                var e3;
                return e3 = new Image(), e3.onload = /* @__PURE__ */ function(n3) {
                  return function() {
                    return e3.width = n3.width = e3.naturalWidth, e3.height = n3.height = e3.naturalHeight, t3(true, e3);
                  };
                }(this), e3.onerror = function() {
                  return t3(false);
                }, e3.src = this.url;
              }, n2;
            }(e.Operation);
          }.call(this), function() {
            var t2 = function(t3, e2) {
              return function() {
                return t3.apply(e2, arguments);
              };
            }, n = function(t3, e2) {
              function n2() {
                this.constructor = t3;
              }
              for (var o in e2)
                i.call(e2, o) && (t3[o] = e2[o]);
              return n2.prototype = e2.prototype, t3.prototype = new n2(), t3.__super__ = e2.prototype, t3;
            }, i = {}.hasOwnProperty;
            e.Attachment = function(i2) {
              function o(n2) {
                null == n2 && (n2 = {}), this.releaseFile = t2(this.releaseFile, this), o.__super__.constructor.apply(this, arguments), this.attributes = e.Hash.box(n2), this.didChangeAttributes();
              }
              return n(o, i2), o.previewablePattern = /^image(\/(gif|png|jpe?g)|$)/, o.attachmentForFile = function(t3) {
                var e2, n2;
                return n2 = this.attributesForFile(t3), e2 = new this(n2), e2.setFile(t3), e2;
              }, o.attributesForFile = function(t3) {
                return new e.Hash({ filename: t3.name, filesize: t3.size, contentType: t3.type });
              }, o.fromJSON = function(t3) {
                return new this(t3);
              }, o.prototype.getAttribute = function(t3) {
                return this.attributes.get(t3);
              }, o.prototype.hasAttribute = function(t3) {
                return this.attributes.has(t3);
              }, o.prototype.getAttributes = function() {
                return this.attributes.toObject();
              }, o.prototype.setAttributes = function(t3) {
                var e2, n2, i3;
                return null == t3 && (t3 = {}), e2 = this.attributes.merge(t3), this.attributes.isEqualTo(e2) ? void 0 : (this.attributes = e2, this.didChangeAttributes(), null != (n2 = this.previewDelegate) && "function" == typeof n2.attachmentDidChangeAttributes && n2.attachmentDidChangeAttributes(this), null != (i3 = this.delegate) && "function" == typeof i3.attachmentDidChangeAttributes ? i3.attachmentDidChangeAttributes(this) : void 0);
              }, o.prototype.didChangeAttributes = function() {
                return this.isPreviewable() ? this.preloadURL() : void 0;
              }, o.prototype.isPending = function() {
                return null != this.file && !(this.getURL() || this.getHref());
              }, o.prototype.isPreviewable = function() {
                return this.attributes.has("previewable") ? this.attributes.get("previewable") : this.constructor.previewablePattern.test(this.getContentType());
              }, o.prototype.getType = function() {
                return this.hasContent() ? "content" : this.isPreviewable() ? "preview" : "file";
              }, o.prototype.getURL = function() {
                return this.attributes.get("url");
              }, o.prototype.getHref = function() {
                return this.attributes.get("href");
              }, o.prototype.getFilename = function() {
                var t3;
                return null != (t3 = this.attributes.get("filename")) ? t3 : "";
              }, o.prototype.getFilesize = function() {
                return this.attributes.get("filesize");
              }, o.prototype.getFormattedFilesize = function() {
                var t3;
                return t3 = this.attributes.get("filesize"), "number" == typeof t3 ? e.config.fileSize.formatter(t3) : "";
              }, o.prototype.getExtension = function() {
                var t3;
                return null != (t3 = this.getFilename().match(/\.(\w+)$/)) ? t3[1].toLowerCase() : void 0;
              }, o.prototype.getContentType = function() {
                return this.attributes.get("contentType");
              }, o.prototype.hasContent = function() {
                return this.attributes.has("content");
              }, o.prototype.getContent = function() {
                return this.attributes.get("content");
              }, o.prototype.getWidth = function() {
                return this.attributes.get("width");
              }, o.prototype.getHeight = function() {
                return this.attributes.get("height");
              }, o.prototype.getFile = function() {
                return this.file;
              }, o.prototype.setFile = function(t3) {
                return this.file = t3, this.isPreviewable() ? this.preloadFile() : void 0;
              }, o.prototype.releaseFile = function() {
                return this.releasePreloadedFile(), this.file = null;
              }, o.prototype.getUploadProgress = function() {
                var t3;
                return null != (t3 = this.uploadProgress) ? t3 : 0;
              }, o.prototype.setUploadProgress = function(t3) {
                var e2;
                return this.uploadProgress !== t3 ? (this.uploadProgress = t3, null != (e2 = this.uploadProgressDelegate) && "function" == typeof e2.attachmentDidChangeUploadProgress ? e2.attachmentDidChangeUploadProgress(this) : void 0) : void 0;
              }, o.prototype.toJSON = function() {
                return this.getAttributes();
              }, o.prototype.getCacheKey = function() {
                return [o.__super__.getCacheKey.apply(this, arguments), this.attributes.getCacheKey(), this.getPreviewURL()].join("/");
              }, o.prototype.getPreviewURL = function() {
                return this.previewURL || this.preloadingURL;
              }, o.prototype.setPreviewURL = function(t3) {
                var e2, n2;
                return t3 !== this.getPreviewURL() ? (this.previewURL = t3, null != (e2 = this.previewDelegate) && "function" == typeof e2.attachmentDidChangeAttributes && e2.attachmentDidChangeAttributes(this), null != (n2 = this.delegate) && "function" == typeof n2.attachmentDidChangePreviewURL ? n2.attachmentDidChangePreviewURL(this) : void 0) : void 0;
              }, o.prototype.preloadURL = function() {
                return this.preload(this.getURL(), this.releaseFile);
              }, o.prototype.preloadFile = function() {
                return this.file ? (this.fileObjectURL = URL.createObjectURL(this.file), this.preload(this.fileObjectURL)) : void 0;
              }, o.prototype.releasePreloadedFile = function() {
                return this.fileObjectURL ? (URL.revokeObjectURL(this.fileObjectURL), this.fileObjectURL = null) : void 0;
              }, o.prototype.preload = function(t3, n2) {
                var i3;
                return t3 && t3 !== this.getPreviewURL() ? (this.preloadingURL = t3, i3 = new e.ImagePreloadOperation(t3), i3.then(/* @__PURE__ */ function(e2) {
                  return function(i4) {
                    var o2, r;
                    return r = i4.width, o2 = i4.height, e2.getWidth() && e2.getHeight() || e2.setAttributes({ width: r, height: o2 }), e2.preloadingURL = null, e2.setPreviewURL(t3), "function" == typeof n2 ? n2() : void 0;
                  };
                }(this))["catch"](/* @__PURE__ */ function(t4) {
                  return function() {
                    return t4.preloadingURL = null, "function" == typeof n2 ? n2() : void 0;
                  };
                }(this))) : void 0;
              }, o;
            }(e.Object);
          }.call(this), function() {
            var t2 = function(t3, e2) {
              function i() {
                this.constructor = t3;
              }
              for (var o in e2)
                n.call(e2, o) && (t3[o] = e2[o]);
              return i.prototype = e2.prototype, t3.prototype = new i(), t3.__super__ = e2.prototype, t3;
            }, n = {}.hasOwnProperty;
            e.Piece = function(n2) {
              function i(t3, n3) {
                null == n3 && (n3 = {}), i.__super__.constructor.apply(this, arguments), this.attributes = e.Hash.box(n3);
              }
              return t2(i, n2), i.types = {}, i.registerType = function(t3, e2) {
                return e2.type = t3, this.types[t3] = e2;
              }, i.fromJSON = function(t3) {
                var e2;
                return (e2 = this.types[t3.type]) ? e2.fromJSON(t3) : void 0;
              }, i.prototype.copyWithAttributes = function(t3) {
                return new this.constructor(this.getValue(), t3);
              }, i.prototype.copyWithAdditionalAttributes = function(t3) {
                return this.copyWithAttributes(this.attributes.merge(t3));
              }, i.prototype.copyWithoutAttribute = function(t3) {
                return this.copyWithAttributes(this.attributes.remove(t3));
              }, i.prototype.copy = function() {
                return this.copyWithAttributes(this.attributes);
              }, i.prototype.getAttribute = function(t3) {
                return this.attributes.get(t3);
              }, i.prototype.getAttributesHash = function() {
                return this.attributes;
              }, i.prototype.getAttributes = function() {
                return this.attributes.toObject();
              }, i.prototype.getCommonAttributes = function() {
                var t3, e2, n3;
                return (n3 = pieceList.getPieceAtIndex(0)) ? (t3 = n3.attributes, e2 = t3.getKeys(), pieceList.eachPiece(function(n4) {
                  return e2 = t3.getKeysCommonToHash(n4.attributes), t3 = t3.slice(e2);
                }), t3.toObject()) : {};
              }, i.prototype.hasAttribute = function(t3) {
                return this.attributes.has(t3);
              }, i.prototype.hasSameStringValueAsPiece = function(t3) {
                return null != t3 && this.toString() === t3.toString();
              }, i.prototype.hasSameAttributesAsPiece = function(t3) {
                return null != t3 && (this.attributes === t3.attributes || this.attributes.isEqualTo(t3.attributes));
              }, i.prototype.isBlockBreak = function() {
                return false;
              }, i.prototype.isEqualTo = function(t3) {
                return i.__super__.isEqualTo.apply(this, arguments) || this.hasSameConstructorAs(t3) && this.hasSameStringValueAsPiece(t3) && this.hasSameAttributesAsPiece(t3);
              }, i.prototype.isEmpty = function() {
                return 0 === this.length;
              }, i.prototype.isSerializable = function() {
                return true;
              }, i.prototype.toJSON = function() {
                return { type: this.constructor.type, attributes: this.getAttributes() };
              }, i.prototype.contentsForInspection = function() {
                return { type: this.constructor.type, attributes: this.attributes.inspect() };
              }, i.prototype.canBeGrouped = function() {
                return this.hasAttribute("href");
              }, i.prototype.canBeGroupedWith = function(t3) {
                return this.getAttribute("href") === t3.getAttribute("href");
              }, i.prototype.getLength = function() {
                return this.length;
              }, i.prototype.canBeConsolidatedWith = function() {
                return false;
              }, i;
            }(e.Object);
          }.call(this), function() {
            var t2 = function(t3, e2) {
              function i() {
                this.constructor = t3;
              }
              for (var o in e2)
                n.call(e2, o) && (t3[o] = e2[o]);
              return i.prototype = e2.prototype, t3.prototype = new i(), t3.__super__ = e2.prototype, t3;
            }, n = {}.hasOwnProperty;
            e.Piece.registerType("attachment", e.AttachmentPiece = function(n2) {
              function i(t3) {
                this.attachment = t3, i.__super__.constructor.apply(this, arguments), this.length = 1, this.ensureAttachmentExclusivelyHasAttribute("href"), this.attachment.hasContent() || this.removeProhibitedAttributes();
              }
              return t2(i, n2), i.fromJSON = function(t3) {
                return new this(e.Attachment.fromJSON(t3.attachment), t3.attributes);
              }, i.permittedAttributes = ["caption", "presentation"], i.prototype.ensureAttachmentExclusivelyHasAttribute = function(t3) {
                return this.hasAttribute(t3) ? (this.attachment.hasAttribute(t3) || this.attachment.setAttributes(this.attributes.slice(t3)), this.attributes = this.attributes.remove(t3)) : void 0;
              }, i.prototype.removeProhibitedAttributes = function() {
                var t3;
                return t3 = this.attributes.slice(this.constructor.permittedAttributes), t3.isEqualTo(this.attributes) ? void 0 : this.attributes = t3;
              }, i.prototype.getValue = function() {
                return this.attachment;
              }, i.prototype.isSerializable = function() {
                return !this.attachment.isPending();
              }, i.prototype.getCaption = function() {
                var t3;
                return null != (t3 = this.attributes.get("caption")) ? t3 : "";
              }, i.prototype.isEqualTo = function(t3) {
                var e2;
                return i.__super__.isEqualTo.apply(this, arguments) && this.attachment.id === (null != t3 && null != (e2 = t3.attachment) ? e2.id : void 0);
              }, i.prototype.toString = function() {
                return e.OBJECT_REPLACEMENT_CHARACTER;
              }, i.prototype.toJSON = function() {
                var t3;
                return t3 = i.__super__.toJSON.apply(this, arguments), t3.attachment = this.attachment, t3;
              }, i.prototype.getCacheKey = function() {
                return [i.__super__.getCacheKey.apply(this, arguments), this.attachment.getCacheKey()].join("/");
              }, i.prototype.toConsole = function() {
                return JSON.stringify(this.toString());
              }, i;
            }(e.Piece));
          }.call(this), function() {
            var t2, n = function(t3, e2) {
              function n2() {
                this.constructor = t3;
              }
              for (var o in e2)
                i.call(e2, o) && (t3[o] = e2[o]);
              return n2.prototype = e2.prototype, t3.prototype = new n2(), t3.__super__ = e2.prototype, t3;
            }, i = {}.hasOwnProperty;
            t2 = e.normalizeNewlines, e.Piece.registerType("string", e.StringPiece = function(e2) {
              function i2(e3) {
                i2.__super__.constructor.apply(this, arguments), this.string = t2(e3), this.length = this.string.length;
              }
              return n(i2, e2), i2.fromJSON = function(t3) {
                return new this(t3.string, t3.attributes);
              }, i2.prototype.getValue = function() {
                return this.string;
              }, i2.prototype.toString = function() {
                return this.string.toString();
              }, i2.prototype.isBlockBreak = function() {
                return "\n" === this.toString() && this.getAttribute("blockBreak") === true;
              }, i2.prototype.toJSON = function() {
                var t3;
                return t3 = i2.__super__.toJSON.apply(this, arguments), t3.string = this.string, t3;
              }, i2.prototype.canBeConsolidatedWith = function(t3) {
                return null != t3 && this.hasSameConstructorAs(t3) && this.hasSameAttributesAsPiece(t3);
              }, i2.prototype.consolidateWith = function(t3) {
                return new this.constructor(this.toString() + t3.toString(), this.attributes);
              }, i2.prototype.splitAtOffset = function(t3) {
                var e3, n2;
                return 0 === t3 ? (e3 = null, n2 = this) : t3 === this.length ? (e3 = this, n2 = null) : (e3 = new this.constructor(this.string.slice(0, t3), this.attributes), n2 = new this.constructor(this.string.slice(t3), this.attributes)), [e3, n2];
              }, i2.prototype.toConsole = function() {
                var t3;
                return t3 = this.string, t3.length > 15 && (t3 = t3.slice(0, 14) + "\u2026"), JSON.stringify(t3.toString());
              }, i2;
            }(e.Piece));
          }.call(this), function() {
            var t2, n = function(t3, e2) {
              function n2() {
                this.constructor = t3;
              }
              for (var o2 in e2)
                i.call(e2, o2) && (t3[o2] = e2[o2]);
              return n2.prototype = e2.prototype, t3.prototype = new n2(), t3.__super__ = e2.prototype, t3;
            }, i = {}.hasOwnProperty, o = [].slice;
            t2 = e.spliceArray, e.SplittableList = function(e2) {
              function i2(t3) {
                null == t3 && (t3 = []), i2.__super__.constructor.apply(this, arguments), this.objects = t3.slice(0), this.length = this.objects.length;
              }
              var r, s, a;
              return n(i2, e2), i2.box = function(t3) {
                return t3 instanceof this ? t3 : new this(t3);
              }, i2.prototype.indexOf = function(t3) {
                return this.objects.indexOf(t3);
              }, i2.prototype.splice = function() {
                var e3;
                return e3 = 1 <= arguments.length ? o.call(arguments, 0) : [], new this.constructor(t2.apply(null, [this.objects].concat(o.call(e3))));
              }, i2.prototype.eachObject = function(t3) {
                var e3, n2, i3, o2, r2, s2;
                for (r2 = this.objects, s2 = [], n2 = e3 = 0, i3 = r2.length; i3 > e3; n2 = ++e3)
                  o2 = r2[n2], s2.push(t3(o2, n2));
                return s2;
              }, i2.prototype.insertObjectAtIndex = function(t3, e3) {
                return this.splice(e3, 0, t3);
              }, i2.prototype.insertSplittableListAtIndex = function(t3, e3) {
                return this.splice.apply(this, [e3, 0].concat(o.call(t3.objects)));
              }, i2.prototype.insertSplittableListAtPosition = function(t3, e3) {
                var n2, i3, o2;
                return o2 = this.splitObjectAtPosition(e3), i3 = o2[0], n2 = o2[1], new this.constructor(i3).insertSplittableListAtIndex(t3, n2);
              }, i2.prototype.editObjectAtIndex = function(t3, e3) {
                return this.replaceObjectAtIndex(e3(this.objects[t3]), t3);
              }, i2.prototype.replaceObjectAtIndex = function(t3, e3) {
                return this.splice(e3, 1, t3);
              }, i2.prototype.removeObjectAtIndex = function(t3) {
                return this.splice(t3, 1);
              }, i2.prototype.getObjectAtIndex = function(t3) {
                return this.objects[t3];
              }, i2.prototype.getSplittableListInRange = function(t3) {
                var e3, n2, i3, o2;
                return i3 = this.splitObjectsAtRange(t3), n2 = i3[0], e3 = i3[1], o2 = i3[2], new this.constructor(n2.slice(e3, o2 + 1));
              }, i2.prototype.selectSplittableList = function(t3) {
                var e3, n2;
                return n2 = function() {
                  var n3, i3, o2, r2;
                  for (o2 = this.objects, r2 = [], n3 = 0, i3 = o2.length; i3 > n3; n3++)
                    e3 = o2[n3], t3(e3) && r2.push(e3);
                  return r2;
                }.call(this), new this.constructor(n2);
              }, i2.prototype.removeObjectsInRange = function(t3) {
                var e3, n2, i3, o2;
                return i3 = this.splitObjectsAtRange(t3), n2 = i3[0], e3 = i3[1], o2 = i3[2], new this.constructor(n2).splice(e3, o2 - e3 + 1);
              }, i2.prototype.transformObjectsInRange = function(t3, e3) {
                var n2, i3, o2, r2, s2, a2, u;
                return s2 = this.splitObjectsAtRange(t3), r2 = s2[0], i3 = s2[1], a2 = s2[2], u = function() {
                  var t4, s3, u2;
                  for (u2 = [], n2 = t4 = 0, s3 = r2.length; s3 > t4; n2 = ++t4)
                    o2 = r2[n2], u2.push(n2 >= i3 && a2 >= n2 ? e3(o2) : o2);
                  return u2;
                }(), new this.constructor(u);
              }, i2.prototype.splitObjectsAtRange = function(t3) {
                var e3, n2, i3, o2, s2, u;
                return o2 = this.splitObjectAtPosition(a(t3)), n2 = o2[0], e3 = o2[1], i3 = o2[2], s2 = new this.constructor(n2).splitObjectAtPosition(r(t3) + i3), n2 = s2[0], u = s2[1], [n2, e3, u - 1];
              }, i2.prototype.getObjectAtPosition = function(t3) {
                var e3, n2, i3;
                return i3 = this.findIndexAndOffsetAtPosition(t3), e3 = i3.index, n2 = i3.offset, this.objects[e3];
              }, i2.prototype.splitObjectAtPosition = function(t3) {
                var e3, n2, i3, o2, r2, s2, a2, u, c, l;
                return s2 = this.findIndexAndOffsetAtPosition(t3), e3 = s2.index, r2 = s2.offset, o2 = this.objects.slice(0), null != e3 ? 0 === r2 ? (c = e3, l = 0) : (i3 = this.getObjectAtIndex(e3), a2 = i3.splitAtOffset(r2), n2 = a2[0], u = a2[1], o2.splice(e3, 1, n2, u), c = e3 + 1, l = n2.getLength() - r2) : (c = o2.length, l = 0), [o2, c, l];
              }, i2.prototype.consolidate = function() {
                var t3, e3, n2, i3, o2, r2;
                for (i3 = [], o2 = this.objects[0], r2 = this.objects.slice(1), t3 = 0, e3 = r2.length; e3 > t3; t3++)
                  n2 = r2[t3], ("function" == typeof o2.canBeConsolidatedWith ? o2.canBeConsolidatedWith(n2) : void 0) ? o2 = o2.consolidateWith(n2) : (i3.push(o2), o2 = n2);
                return null != o2 && i3.push(o2), new this.constructor(i3);
              }, i2.prototype.consolidateFromIndexToIndex = function(t3, e3) {
                var n2, i3, r2;
                return i3 = this.objects.slice(0), r2 = i3.slice(t3, e3 + 1), n2 = new this.constructor(r2).consolidate().toArray(), this.splice.apply(this, [t3, r2.length].concat(o.call(n2)));
              }, i2.prototype.findIndexAndOffsetAtPosition = function(t3) {
                var e3, n2, i3, o2, r2, s2, a2;
                for (e3 = 0, a2 = this.objects, i3 = n2 = 0, o2 = a2.length; o2 > n2; i3 = ++n2) {
                  if (s2 = a2[i3], r2 = e3 + s2.getLength(), t3 >= e3 && r2 > t3)
                    return { index: i3, offset: t3 - e3 };
                  e3 = r2;
                }
                return { index: null, offset: null };
              }, i2.prototype.findPositionAtIndexAndOffset = function(t3, e3) {
                var n2, i3, o2, r2, s2, a2;
                for (s2 = 0, a2 = this.objects, n2 = i3 = 0, o2 = a2.length; o2 > i3; n2 = ++i3)
                  if (r2 = a2[n2], t3 > n2)
                    s2 += r2.getLength();
                  else if (n2 === t3) {
                    s2 += e3;
                    break;
                  }
                return s2;
              }, i2.prototype.getEndPosition = function() {
                var t3, e3;
                return null != this.endPosition ? this.endPosition : this.endPosition = function() {
                  var n2, i3, o2;
                  for (e3 = 0, o2 = this.objects, n2 = 0, i3 = o2.length; i3 > n2; n2++)
                    t3 = o2[n2], e3 += t3.getLength();
                  return e3;
                }.call(this);
              }, i2.prototype.toString = function() {
                return this.objects.join("");
              }, i2.prototype.toArray = function() {
                return this.objects.slice(0);
              }, i2.prototype.toJSON = function() {
                return this.toArray();
              }, i2.prototype.isEqualTo = function(t3) {
                return i2.__super__.isEqualTo.apply(this, arguments) || s(this.objects, null != t3 ? t3.objects : void 0);
              }, s = function(t3, e3) {
                var n2, i3, o2, r2, s2;
                if (null == e3 && (e3 = []), t3.length !== e3.length)
                  return false;
                for (s2 = true, i3 = n2 = 0, o2 = t3.length; o2 > n2; i3 = ++n2)
                  r2 = t3[i3], s2 && !r2.isEqualTo(e3[i3]) && (s2 = false);
                return s2;
              }, i2.prototype.contentsForInspection = function() {
                var t3;
                return { objects: "[" + function() {
                  var e3, n2, i3, o2;
                  for (i3 = this.objects, o2 = [], e3 = 0, n2 = i3.length; n2 > e3; e3++)
                    t3 = i3[e3], o2.push(t3.inspect());
                  return o2;
                }.call(this).join(", ") + "]" };
              }, a = function(t3) {
                return t3[0];
              }, r = function(t3) {
                return t3[1];
              }, i2;
            }(e.Object);
          }.call(this), function() {
            var t2 = function(t3, e2) {
              function i() {
                this.constructor = t3;
              }
              for (var o in e2)
                n.call(e2, o) && (t3[o] = e2[o]);
              return i.prototype = e2.prototype, t3.prototype = new i(), t3.__super__ = e2.prototype, t3;
            }, n = {}.hasOwnProperty;
            e.Text = function(n2) {
              function i(t3) {
                var n3;
                null == t3 && (t3 = []), i.__super__.constructor.apply(this, arguments), this.pieceList = new e.SplittableList(function() {
                  var e2, i2, o;
                  for (o = [], e2 = 0, i2 = t3.length; i2 > e2; e2++)
                    n3 = t3[e2], n3.isEmpty() || o.push(n3);
                  return o;
                }());
              }
              return t2(i, n2), i.textForAttachmentWithAttributes = function(t3, n3) {
                var i2;
                return i2 = new e.AttachmentPiece(t3, n3), new this([i2]);
              }, i.textForStringWithAttributes = function(t3, n3) {
                var i2;
                return i2 = new e.StringPiece(t3, n3), new this([i2]);
              }, i.fromJSON = function(t3) {
                var n3, i2;
                return i2 = function() {
                  var i3, o, r;
                  for (r = [], i3 = 0, o = t3.length; o > i3; i3++)
                    n3 = t3[i3], r.push(e.Piece.fromJSON(n3));
                  return r;
                }(), new this(i2);
              }, i.prototype.copy = function() {
                return this.copyWithPieceList(this.pieceList);
              }, i.prototype.copyWithPieceList = function(t3) {
                return new this.constructor(t3.consolidate().toArray());
              }, i.prototype.copyUsingObjectMap = function(t3) {
                var e2, n3;
                return n3 = function() {
                  var n4, i2, o, r, s;
                  for (o = this.getPieces(), s = [], n4 = 0, i2 = o.length; i2 > n4; n4++)
                    e2 = o[n4], s.push(null != (r = t3.find(e2)) ? r : e2);
                  return s;
                }.call(this), new this.constructor(n3);
              }, i.prototype.appendText = function(t3) {
                return this.insertTextAtPosition(t3, this.getLength());
              }, i.prototype.insertTextAtPosition = function(t3, e2) {
                return this.copyWithPieceList(this.pieceList.insertSplittableListAtPosition(t3.pieceList, e2));
              }, i.prototype.removeTextAtRange = function(t3) {
                return this.copyWithPieceList(this.pieceList.removeObjectsInRange(t3));
              }, i.prototype.replaceTextAtRange = function(t3, e2) {
                return this.removeTextAtRange(e2).insertTextAtPosition(t3, e2[0]);
              }, i.prototype.moveTextFromRangeToPosition = function(t3, e2) {
                var n3, i2;
                if (!(t3[0] <= e2 && e2 <= t3[1]))
                  return i2 = this.getTextAtRange(t3), n3 = i2.getLength(), t3[0] < e2 && (e2 -= n3), this.removeTextAtRange(t3).insertTextAtPosition(i2, e2);
              }, i.prototype.addAttributeAtRange = function(t3, e2, n3) {
                var i2;
                return i2 = {}, i2[t3] = e2, this.addAttributesAtRange(i2, n3);
              }, i.prototype.addAttributesAtRange = function(t3, e2) {
                return this.copyWithPieceList(this.pieceList.transformObjectsInRange(e2, function(e3) {
                  return e3.copyWithAdditionalAttributes(t3);
                }));
              }, i.prototype.removeAttributeAtRange = function(t3, e2) {
                return this.copyWithPieceList(this.pieceList.transformObjectsInRange(e2, function(e3) {
                  return e3.copyWithoutAttribute(t3);
                }));
              }, i.prototype.setAttributesAtRange = function(t3, e2) {
                return this.copyWithPieceList(this.pieceList.transformObjectsInRange(e2, function(e3) {
                  return e3.copyWithAttributes(t3);
                }));
              }, i.prototype.getAttributesAtPosition = function(t3) {
                var e2, n3;
                return null != (e2 = null != (n3 = this.pieceList.getObjectAtPosition(t3)) ? n3.getAttributes() : void 0) ? e2 : {};
              }, i.prototype.getCommonAttributes = function() {
                var t3, n3;
                return t3 = function() {
                  var t4, e2, i2, o;
                  for (i2 = this.pieceList.toArray(), o = [], t4 = 0, e2 = i2.length; e2 > t4; t4++)
                    n3 = i2[t4], o.push(n3.getAttributes());
                  return o;
                }.call(this), e.Hash.fromCommonAttributesOfObjects(t3).toObject();
              }, i.prototype.getCommonAttributesAtRange = function(t3) {
                var e2;
                return null != (e2 = this.getTextAtRange(t3).getCommonAttributes()) ? e2 : {};
              }, i.prototype.getExpandedRangeForAttributeAtOffset = function(t3, e2) {
                var n3, i2, o;
                for (n3 = o = e2, i2 = this.getLength(); n3 > 0 && this.getCommonAttributesAtRange([n3 - 1, o])[t3]; )
                  n3--;
                for (; i2 > o && this.getCommonAttributesAtRange([e2, o + 1])[t3]; )
                  o++;
                return [n3, o];
              }, i.prototype.getTextAtRange = function(t3) {
                return this.copyWithPieceList(this.pieceList.getSplittableListInRange(t3));
              }, i.prototype.getStringAtRange = function(t3) {
                return this.pieceList.getSplittableListInRange(t3).toString();
              }, i.prototype.getStringAtPosition = function(t3) {
                return this.getStringAtRange([t3, t3 + 1]);
              }, i.prototype.startsWithString = function(t3) {
                return this.getStringAtRange([0, t3.length]) === t3;
              }, i.prototype.endsWithString = function(t3) {
                var e2;
                return e2 = this.getLength(), this.getStringAtRange([e2 - t3.length, e2]) === t3;
              }, i.prototype.getAttachmentPieces = function() {
                var t3, e2, n3, i2, o;
                for (i2 = this.pieceList.toArray(), o = [], t3 = 0, e2 = i2.length; e2 > t3; t3++)
                  n3 = i2[t3], null != n3.attachment && o.push(n3);
                return o;
              }, i.prototype.getAttachments = function() {
                var t3, e2, n3, i2, o;
                for (i2 = this.getAttachmentPieces(), o = [], t3 = 0, e2 = i2.length; e2 > t3; t3++)
                  n3 = i2[t3], o.push(n3.attachment);
                return o;
              }, i.prototype.getAttachmentAndPositionById = function(t3) {
                var e2, n3, i2, o, r, s;
                for (o = 0, r = this.pieceList.toArray(), e2 = 0, n3 = r.length; n3 > e2; e2++) {
                  if (i2 = r[e2], (null != (s = i2.attachment) ? s.id : void 0) === t3)
                    return { attachment: i2.attachment, position: o };
                  o += i2.length;
                }
                return { attachment: null, position: null };
              }, i.prototype.getAttachmentById = function(t3) {
                var e2, n3, i2;
                return i2 = this.getAttachmentAndPositionById(t3), e2 = i2.attachment, n3 = i2.position, e2;
              }, i.prototype.getRangeOfAttachment = function(t3) {
                var e2, n3;
                return n3 = this.getAttachmentAndPositionById(t3.id), t3 = n3.attachment, e2 = n3.position, null != t3 ? [e2, e2 + 1] : void 0;
              }, i.prototype.updateAttributesForAttachment = function(t3, e2) {
                var n3;
                return (n3 = this.getRangeOfAttachment(e2)) ? this.addAttributesAtRange(t3, n3) : this;
              }, i.prototype.getLength = function() {
                return this.pieceList.getEndPosition();
              }, i.prototype.isEmpty = function() {
                return 0 === this.getLength();
              }, i.prototype.isEqualTo = function(t3) {
                var e2;
                return i.__super__.isEqualTo.apply(this, arguments) || (null != t3 && null != (e2 = t3.pieceList) ? e2.isEqualTo(this.pieceList) : void 0);
              }, i.prototype.isBlockBreak = function() {
                return 1 === this.getLength() && this.pieceList.getObjectAtIndex(0).isBlockBreak();
              }, i.prototype.eachPiece = function(t3) {
                return this.pieceList.eachObject(t3);
              }, i.prototype.getPieces = function() {
                return this.pieceList.toArray();
              }, i.prototype.getPieceAtPosition = function(t3) {
                return this.pieceList.getObjectAtPosition(t3);
              }, i.prototype.contentsForInspection = function() {
                return { pieceList: this.pieceList.inspect() };
              }, i.prototype.toSerializableText = function() {
                var t3;
                return t3 = this.pieceList.selectSplittableList(function(t4) {
                  return t4.isSerializable();
                }), this.copyWithPieceList(t3);
              }, i.prototype.toString = function() {
                return this.pieceList.toString();
              }, i.prototype.toJSON = function() {
                return this.pieceList.toJSON();
              }, i.prototype.toConsole = function() {
                var t3;
                return JSON.stringify(function() {
                  var e2, n3, i2, o;
                  for (i2 = this.pieceList.toArray(), o = [], e2 = 0, n3 = i2.length; n3 > e2; e2++)
                    t3 = i2[e2], o.push(JSON.parse(t3.toConsole()));
                  return o;
                }.call(this));
              }, i.prototype.getDirection = function() {
                return e.getDirection(this.toString());
              }, i.prototype.isRTL = function() {
                return "rtl" === this.getDirection();
              }, i;
            }(e.Object);
          }.call(this), function() {
            var t2, n, i, o, r, s = function(t3, e2) {
              function n2() {
                this.constructor = t3;
              }
              for (var i2 in e2)
                a.call(e2, i2) && (t3[i2] = e2[i2]);
              return n2.prototype = e2.prototype, t3.prototype = new n2(), t3.__super__ = e2.prototype, t3;
            }, a = {}.hasOwnProperty, u = [].indexOf || function(t3) {
              for (var e2 = 0, n2 = this.length; n2 > e2; e2++)
                if (e2 in this && this[e2] === t3)
                  return e2;
              return -1;
            }, c = [].slice;
            t2 = e.arraysAreEqual, r = e.spliceArray, i = e.getBlockConfig, n = e.getBlockAttributeNames, o = e.getListAttributeNames, e.Block = function(n2) {
              function a2(t3, n3) {
                null == t3 && (t3 = new e.Text()), null == n3 && (n3 = []), a2.__super__.constructor.apply(this, arguments), this.text = h(t3), this.attributes = n3;
              }
              var l, h, p, d, f, g, m, v, y;
              return s(a2, n2), a2.fromJSON = function(t3) {
                var n3;
                return n3 = e.Text.fromJSON(t3.text), new this(n3, t3.attributes);
              }, a2.prototype.isEmpty = function() {
                return this.text.isBlockBreak();
              }, a2.prototype.isEqualTo = function(e2) {
                return a2.__super__.isEqualTo.apply(this, arguments) || this.text.isEqualTo(null != e2 ? e2.text : void 0) && t2(this.attributes, null != e2 ? e2.attributes : void 0);
              }, a2.prototype.copyWithText = function(t3) {
                return new this.constructor(t3, this.attributes);
              }, a2.prototype.copyWithoutText = function() {
                return this.copyWithText(null);
              }, a2.prototype.copyWithAttributes = function(t3) {
                return new this.constructor(this.text, t3);
              }, a2.prototype.copyWithoutAttributes = function() {
                return this.copyWithAttributes(null);
              }, a2.prototype.copyUsingObjectMap = function(t3) {
                var e2;
                return this.copyWithText((e2 = t3.find(this.text)) ? e2 : this.text.copyUsingObjectMap(t3));
              }, a2.prototype.addAttribute = function(t3) {
                var e2;
                return e2 = this.attributes.concat(d(t3)), this.copyWithAttributes(e2);
              }, a2.prototype.removeAttribute = function(t3) {
                var e2, n3;
                return n3 = i(t3).listAttribute, e2 = g(g(this.attributes, t3), n3), this.copyWithAttributes(e2);
              }, a2.prototype.removeLastAttribute = function() {
                return this.removeAttribute(this.getLastAttribute());
              }, a2.prototype.getLastAttribute = function() {
                return f(this.attributes);
              }, a2.prototype.getAttributes = function() {
                return this.attributes.slice(0);
              }, a2.prototype.getAttributeLevel = function() {
                return this.attributes.length;
              }, a2.prototype.getAttributeAtLevel = function(t3) {
                return this.attributes[t3 - 1];
              }, a2.prototype.hasAttribute = function(t3) {
                return u.call(this.attributes, t3) >= 0;
              }, a2.prototype.hasAttributes = function() {
                return this.getAttributeLevel() > 0;
              }, a2.prototype.getLastNestableAttribute = function() {
                return f(this.getNestableAttributes());
              }, a2.prototype.getNestableAttributes = function() {
                var t3, e2, n3, o2, r2;
                for (o2 = this.attributes, r2 = [], e2 = 0, n3 = o2.length; n3 > e2; e2++)
                  t3 = o2[e2], i(t3).nestable && r2.push(t3);
                return r2;
              }, a2.prototype.getNestingLevel = function() {
                return this.getNestableAttributes().length;
              }, a2.prototype.decreaseNestingLevel = function() {
                var t3;
                return (t3 = this.getLastNestableAttribute()) ? this.removeAttribute(t3) : this;
              }, a2.prototype.increaseNestingLevel = function() {
                var t3, e2, n3;
                return (t3 = this.getLastNestableAttribute()) ? (n3 = this.attributes.lastIndexOf(t3), e2 = r.apply(null, [this.attributes, n3 + 1, 0].concat(c.call(d(t3)))), this.copyWithAttributes(e2)) : this;
              }, a2.prototype.getListItemAttributes = function() {
                var t3, e2, n3, o2, r2;
                for (o2 = this.attributes, r2 = [], e2 = 0, n3 = o2.length; n3 > e2; e2++)
                  t3 = o2[e2], i(t3).listAttribute && r2.push(t3);
                return r2;
              }, a2.prototype.isListItem = function() {
                var t3;
                return null != (t3 = i(this.getLastAttribute())) ? t3.listAttribute : void 0;
              }, a2.prototype.isTerminalBlock = function() {
                var t3;
                return null != (t3 = i(this.getLastAttribute())) ? t3.terminal : void 0;
              }, a2.prototype.breaksOnReturn = function() {
                var t3;
                return null != (t3 = i(this.getLastAttribute())) ? t3.breakOnReturn : void 0;
              }, a2.prototype.findLineBreakInDirectionFromPosition = function(t3, e2) {
                var n3, i2;
                return i2 = this.toString(), n3 = function() {
                  switch (t3) {
                    case "forward":
                      return i2.indexOf("\n", e2);
                    case "backward":
                      return i2.slice(0, e2).lastIndexOf("\n");
                  }
                }(), -1 !== n3 ? n3 : void 0;
              }, a2.prototype.contentsForInspection = function() {
                return { text: this.text.inspect(), attributes: this.attributes };
              }, a2.prototype.toString = function() {
                return this.text.toString();
              }, a2.prototype.toJSON = function() {
                return { text: this.text, attributes: this.attributes };
              }, a2.prototype.getDirection = function() {
                return this.text.getDirection();
              }, a2.prototype.isRTL = function() {
                return this.text.isRTL();
              }, a2.prototype.getLength = function() {
                return this.text.getLength();
              }, a2.prototype.canBeConsolidatedWith = function(t3) {
                return !this.hasAttributes() && !t3.hasAttributes() && this.getDirection() === t3.getDirection();
              }, a2.prototype.consolidateWith = function(t3) {
                var n3, i2;
                return n3 = e.Text.textForStringWithAttributes("\n"), i2 = this.getTextWithoutBlockBreak().appendText(n3), this.copyWithText(i2.appendText(t3.text));
              }, a2.prototype.splitAtOffset = function(t3) {
                var e2, n3;
                return 0 === t3 ? (e2 = null, n3 = this) : t3 === this.getLength() ? (e2 = this, n3 = null) : (e2 = this.copyWithText(this.text.getTextAtRange([0, t3])), n3 = this.copyWithText(this.text.getTextAtRange([t3, this.getLength()]))), [e2, n3];
              }, a2.prototype.getBlockBreakPosition = function() {
                return this.text.getLength() - 1;
              }, a2.prototype.getTextWithoutBlockBreak = function() {
                return m(this.text) ? this.text.getTextAtRange([0, this.getBlockBreakPosition()]) : this.text.copy();
              }, a2.prototype.canBeGrouped = function(t3) {
                return this.attributes[t3];
              }, a2.prototype.canBeGroupedWith = function(t3, e2) {
                var n3, r2, s2, a3;
                return s2 = t3.getAttributes(), r2 = s2[e2], n3 = this.attributes[e2], !(n3 !== r2 || i(n3).group === false && (a3 = s2[e2 + 1], u.call(o(), a3) < 0) || this.getDirection() !== t3.getDirection() && !t3.isEmpty());
              }, h = function(t3) {
                return t3 = y(t3), t3 = l(t3);
              }, y = function(t3) {
                var n3, i2, o2, r2, s2, a3;
                return r2 = false, a3 = t3.getPieces(), i2 = 2 <= a3.length ? c.call(a3, 0, n3 = a3.length - 1) : (n3 = 0, []), o2 = a3[n3++], null == o2 ? t3 : (i2 = function() {
                  var t4, e2, n4;
                  for (n4 = [], t4 = 0, e2 = i2.length; e2 > t4; t4++)
                    s2 = i2[t4], s2.isBlockBreak() ? (r2 = true, n4.push(v(s2))) : n4.push(s2);
                  return n4;
                }(), r2 ? new e.Text(c.call(i2).concat([o2])) : t3);
              }, p = e.Text.textForStringWithAttributes("\n", { blockBreak: true }), l = function(t3) {
                return m(t3) ? t3 : t3.appendText(p);
              }, m = function(t3) {
                var e2, n3;
                return n3 = t3.getLength(), 0 === n3 ? false : (e2 = t3.getTextAtRange([n3 - 1, n3]), e2.isBlockBreak());
              }, v = function(t3) {
                return t3.copyWithoutAttribute("blockBreak");
              }, d = function(t3) {
                var e2;
                return e2 = i(t3).listAttribute, null != e2 ? [e2, t3] : [t3];
              }, f = function(t3) {
                return t3.slice(-1)[0];
              }, g = function(t3, e2) {
                var n3;
                return n3 = t3.lastIndexOf(e2), -1 === n3 ? t3 : r(t3, n3, 1);
              }, a2;
            }(e.Object);
          }.call(this), function() {
            var t2, n, i, o = function(t3, e2) {
              function n2() {
                this.constructor = t3;
              }
              for (var i2 in e2)
                r.call(e2, i2) && (t3[i2] = e2[i2]);
              return n2.prototype = e2.prototype, t3.prototype = new n2(), t3.__super__ = e2.prototype, t3;
            }, r = {}.hasOwnProperty, s = [].indexOf || function(t3) {
              for (var e2 = 0, n2 = this.length; n2 > e2; e2++)
                if (e2 in this && this[e2] === t3)
                  return e2;
              return -1;
            }, a = [].slice;
            n = e.tagName, i = e.walkTree, t2 = e.nodeIsAttachmentElement, e.HTMLSanitizer = function(r2) {
              function u(t3, e2) {
                var n2;
                n2 = null != e2 ? e2 : {}, this.allowedAttributes = n2.allowedAttributes, this.forbiddenProtocols = n2.forbiddenProtocols, this.forbiddenElements = n2.forbiddenElements, null == this.allowedAttributes && (this.allowedAttributes = c), null == this.forbiddenProtocols && (this.forbiddenProtocols = h), null == this.forbiddenElements && (this.forbiddenElements = l), this.body = p(t3);
              }
              var c, l, h, p;
              return o(u, r2), c = "style href src width height class".split(" "), h = "javascript:".split(" "), l = "script iframe".split(" "), u.sanitize = function(t3, e2) {
                var n2;
                return n2 = new this(t3, e2), n2.sanitize(), n2;
              }, u.prototype.sanitize = function() {
                return this.sanitizeElements(), this.normalizeListElementNesting();
              }, u.prototype.getHTML = function() {
                return this.body.innerHTML;
              }, u.prototype.getBody = function() {
                return this.body;
              }, u.prototype.sanitizeElements = function() {
                var t3, n2, o2, r3, s2;
                for (s2 = i(this.body), r3 = []; s2.nextNode(); )
                  switch (o2 = s2.currentNode, o2.nodeType) {
                    case Node.ELEMENT_NODE:
                      this.elementIsRemovable(o2) ? r3.push(o2) : this.sanitizeElement(o2);
                      break;
                    case Node.COMMENT_NODE:
                      r3.push(o2);
                  }
                for (t3 = 0, n2 = r3.length; n2 > t3; t3++)
                  o2 = r3[t3], e.removeNode(o2);
                return this.body;
              }, u.prototype.sanitizeElement = function(t3) {
                var e2, n2, i2, o2, r3;
                for (t3.hasAttribute("href") && (o2 = t3.protocol, s.call(this.forbiddenProtocols, o2) >= 0 && t3.removeAttribute("href")), r3 = a.call(t3.attributes), e2 = 0, n2 = r3.length; n2 > e2; e2++)
                  i2 = r3[e2].name, s.call(this.allowedAttributes, i2) >= 0 || 0 === i2.indexOf("data-trix") || t3.removeAttribute(i2);
                return t3;
              }, u.prototype.normalizeListElementNesting = function() {
                var t3, e2, i2, o2, r3;
                for (r3 = a.call(this.body.querySelectorAll("ul,ol")), t3 = 0, e2 = r3.length; e2 > t3; t3++)
                  i2 = r3[t3], (o2 = i2.previousElementSibling) && "li" === n(o2) && o2.appendChild(i2);
                return this.body;
              }, u.prototype.elementIsRemovable = function(t3) {
                return (null != t3 ? t3.nodeType : void 0) === Node.ELEMENT_NODE ? this.elementIsForbidden(t3) || this.elementIsntSerializable(t3) : void 0;
              }, u.prototype.elementIsForbidden = function(t3) {
                var e2;
                return e2 = n(t3), s.call(this.forbiddenElements, e2) >= 0;
              }, u.prototype.elementIsntSerializable = function(e2) {
                return "false" === e2.getAttribute("data-trix-serialize") && !t2(e2);
              }, p = function(t3) {
                var e2, n2, i2, o2, r3;
                for (null == t3 && (t3 = ""), t3 = t3.replace(/<\/html[^>]*>[^]*$/i, "</html>"), e2 = document.implementation.createHTMLDocument(""), e2.documentElement.innerHTML = t3, r3 = e2.head.querySelectorAll("style"), i2 = 0, o2 = r3.length; o2 > i2; i2++)
                  n2 = r3[i2], e2.body.appendChild(n2);
                return e2.body;
              }, u;
            }(e.BasicObject);
          }.call(this), function() {
            var t2, n, i, o, r, s, a, u, c, l, h, p = function(t3, e2) {
              function n2() {
                this.constructor = t3;
              }
              for (var i2 in e2)
                d.call(e2, i2) && (t3[i2] = e2[i2]);
              return n2.prototype = e2.prototype, t3.prototype = new n2(), t3.__super__ = e2.prototype, t3;
            }, d = {}.hasOwnProperty, f = [].indexOf || function(t3) {
              for (var e2 = 0, n2 = this.length; n2 > e2; e2++)
                if (e2 in this && this[e2] === t3)
                  return e2;
              return -1;
            };
            t2 = e.arraysAreEqual, s = e.makeElement, l = e.tagName, r = e.getBlockTagNames, h = e.walkTree, o = e.findClosestElementFromNode, i = e.elementContainsNode, a = e.nodeIsAttachmentElement, u = e.normalizeSpaces, n = e.breakableWhitespacePattern, c = e.squishBreakableWhitespace, e.HTMLParser = function(d2) {
              function g(t3, e2) {
                this.html = t3, this.referenceElement = (null != e2 ? e2 : {}).referenceElement, this.blocks = [], this.blockElements = [], this.processedElements = [];
              }
              var m, v, y, b, A, C, x, w, E, S, R, k;
              return p(g, d2), g.parse = function(t3, e2) {
                var n2;
                return n2 = new this(t3, e2), n2.parse(), n2;
              }, g.prototype.getDocument = function() {
                return e.Document.fromJSON(this.blocks);
              }, g.prototype.parse = function() {
                var t3, n2;
                try {
                  for (this.createHiddenContainer(), t3 = e.HTMLSanitizer.sanitize(this.html).getHTML(), this.containerElement.innerHTML = t3, n2 = h(this.containerElement, { usingFilter: x }); n2.nextNode(); )
                    this.processNode(n2.currentNode);
                  return this.translateBlockElementMarginsToNewlines();
                } finally {
                  this.removeHiddenContainer();
                }
              }, g.prototype.createHiddenContainer = function() {
                return this.referenceElement ? (this.containerElement = this.referenceElement.cloneNode(false), this.containerElement.removeAttribute("id"), this.containerElement.setAttribute("data-trix-internal", ""), this.containerElement.style.display = "none", this.referenceElement.parentNode.insertBefore(this.containerElement, this.referenceElement.nextSibling)) : (this.containerElement = s({ tagName: "div", style: { display: "none" } }), document.body.appendChild(this.containerElement));
              }, g.prototype.removeHiddenContainer = function() {
                return e.removeNode(this.containerElement);
              }, x = function(t3) {
                return "style" === l(t3) ? NodeFilter.FILTER_REJECT : NodeFilter.FILTER_ACCEPT;
              }, g.prototype.processNode = function(t3) {
                switch (t3.nodeType) {
                  case Node.TEXT_NODE:
                    if (!this.isInsignificantTextNode(t3))
                      return this.appendBlockForTextNode(t3), this.processTextNode(t3);
                    break;
                  case Node.ELEMENT_NODE:
                    return this.appendBlockForElement(t3), this.processElement(t3);
                }
              }, g.prototype.appendBlockForTextNode = function(e2) {
                var n2, i2, o2;
                return i2 = e2.parentNode, i2 === this.currentBlockElement && this.isBlockElement(e2.previousSibling) ? this.appendStringWithAttributes("\n") : i2 !== this.containerElement && !this.isBlockElement(i2) || (n2 = this.getBlockAttributes(i2), t2(n2, null != (o2 = this.currentBlock) ? o2.attributes : void 0)) ? void 0 : (this.currentBlock = this.appendBlockForAttributesWithElement(n2, i2), this.currentBlockElement = i2);
              }, g.prototype.appendBlockForElement = function(e2) {
                var n2, o2, r2, s2;
                if (r2 = this.isBlockElement(e2), o2 = i(this.currentBlockElement, e2), r2 && !this.isBlockElement(e2.firstChild)) {
                  if ((!this.isInsignificantTextNode(e2.firstChild) || !this.isBlockElement(e2.firstElementChild)) && (n2 = this.getBlockAttributes(e2), e2.firstChild))
                    return o2 && t2(n2, this.currentBlock.attributes) ? this.appendStringWithAttributes("\n") : (this.currentBlock = this.appendBlockForAttributesWithElement(n2, e2), this.currentBlockElement = e2);
                } else if (this.currentBlockElement && !o2 && !r2)
                  return (s2 = this.findParentBlockElement(e2)) ? this.appendBlockForElement(s2) : (this.currentBlock = this.appendEmptyBlock(), this.currentBlockElement = null);
              }, g.prototype.findParentBlockElement = function(t3) {
                var e2;
                for (e2 = t3.parentElement; e2 && e2 !== this.containerElement; ) {
                  if (this.isBlockElement(e2) && f.call(this.blockElements, e2) >= 0)
                    return e2;
                  e2 = e2.parentElement;
                }
                return null;
              }, g.prototype.processTextNode = function(t3) {
                var e2, n2;
                return n2 = t3.data, v(t3.parentNode) || (n2 = c(n2), R(null != (e2 = t3.previousSibling) ? e2.textContent : void 0) && (n2 = A(n2))), this.appendStringWithAttributes(n2, this.getTextAttributes(t3.parentNode));
              }, g.prototype.processElement = function(t3) {
                var e2, n2, i2, o2, r2;
                if (a(t3))
                  return e2 = w(t3, "attachment"), Object.keys(e2).length && (o2 = this.getTextAttributes(t3), this.appendAttachmentWithAttributes(e2, o2), t3.innerHTML = ""), this.processedElements.push(t3);
                switch (l(t3)) {
                  case "br":
                    return this.isExtraBR(t3) || this.isBlockElement(t3.nextSibling) || this.appendStringWithAttributes("\n", this.getTextAttributes(t3)), this.processedElements.push(t3);
                  case "img":
                    e2 = { url: t3.getAttribute("src"), contentType: "image" }, i2 = b(t3);
                    for (n2 in i2)
                      r2 = i2[n2], e2[n2] = r2;
                    return this.appendAttachmentWithAttributes(e2, this.getTextAttributes(t3)), this.processedElements.push(t3);
                  case "tr":
                    if (t3.parentNode.firstChild !== t3)
                      return this.appendStringWithAttributes("\n");
                    break;
                  case "td":
                    if (t3.parentNode.firstChild !== t3)
                      return this.appendStringWithAttributes(" | ");
                }
              }, g.prototype.appendBlockForAttributesWithElement = function(t3, e2) {
                var n2;
                return this.blockElements.push(e2), n2 = m(t3), this.blocks.push(n2), n2;
              }, g.prototype.appendEmptyBlock = function() {
                return this.appendBlockForAttributesWithElement([], null);
              }, g.prototype.appendStringWithAttributes = function(t3, e2) {
                return this.appendPiece(S(t3, e2));
              }, g.prototype.appendAttachmentWithAttributes = function(t3, e2) {
                return this.appendPiece(E(t3, e2));
              }, g.prototype.appendPiece = function(t3) {
                return 0 === this.blocks.length && this.appendEmptyBlock(), this.blocks[this.blocks.length - 1].text.push(t3);
              }, g.prototype.appendStringToTextAtIndex = function(t3, e2) {
                var n2, i2;
                return i2 = this.blocks[e2].text, n2 = i2[i2.length - 1], "string" === (null != n2 ? n2.type : void 0) ? n2.string += t3 : i2.push(S(t3));
              }, g.prototype.prependStringToTextAtIndex = function(t3, e2) {
                var n2, i2;
                return i2 = this.blocks[e2].text, n2 = i2[0], "string" === (null != n2 ? n2.type : void 0) ? n2.string = t3 + n2.string : i2.unshift(S(t3));
              }, S = function(t3, e2) {
                var n2;
                return null == e2 && (e2 = {}), n2 = "string", t3 = u(t3), { string: t3, attributes: e2, type: n2 };
              }, E = function(t3, e2) {
                var n2;
                return null == e2 && (e2 = {}), n2 = "attachment", { attachment: t3, attributes: e2, type: n2 };
              }, m = function(t3) {
                var e2;
                return null == t3 && (t3 = {}), e2 = [], { text: e2, attributes: t3 };
              }, g.prototype.getTextAttributes = function(t3) {
                var n2, i2, r2, s2, u2, c2, l2, h2, p2, d3, f2, g2;
                r2 = {}, p2 = e.config.textAttributes;
                for (n2 in p2)
                  if (u2 = p2[n2], u2.tagName && o(t3, { matchingSelector: u2.tagName, untilNode: this.containerElement }))
                    r2[n2] = true;
                  else if (u2.parser) {
                    if (g2 = u2.parser(t3)) {
                      for (i2 = false, d3 = this.findBlockElementAncestors(t3), c2 = 0, h2 = d3.length; h2 > c2; c2++)
                        if (s2 = d3[c2], u2.parser(s2) === g2) {
                          i2 = true;
                          break;
                        }
                      i2 || (r2[n2] = g2);
                    }
                  } else
                    u2.styleProperty && (g2 = t3.style[u2.styleProperty]) && (r2[n2] = g2);
                if (a(t3)) {
                  f2 = w(t3, "attributes");
                  for (l2 in f2)
                    g2 = f2[l2], r2[l2] = g2;
                }
                return r2;
              }, g.prototype.getBlockAttributes = function(t3) {
                var n2, i2, o2, r2;
                for (i2 = []; t3 && t3 !== this.containerElement; ) {
                  r2 = e.config.blockAttributes;
                  for (n2 in r2)
                    o2 = r2[n2], o2.parse !== false && l(t3) === o2.tagName && (("function" == typeof o2.test ? o2.test(t3) : void 0) || !o2.test) && (i2.push(n2), o2.listAttribute && i2.push(o2.listAttribute));
                  t3 = t3.parentNode;
                }
                return i2.reverse();
              }, g.prototype.findBlockElementAncestors = function(t3) {
                var e2, n2;
                for (e2 = []; t3 && t3 !== this.containerElement; )
                  n2 = l(t3), f.call(r(), n2) >= 0 && e2.push(t3), t3 = t3.parentNode;
                return e2;
              }, w = function(t3, e2) {
                try {
                  return JSON.parse(t3.getAttribute("data-trix-" + e2));
                } catch (n2) {
                  return {};
                }
              }, b = function(t3) {
                var e2, n2, i2;
                return i2 = t3.getAttribute("width"), n2 = t3.getAttribute("height"), e2 = {}, i2 && (e2.width = parseInt(i2, 10)), n2 && (e2.height = parseInt(n2, 10)), e2;
              }, g.prototype.isBlockElement = function(t3) {
                var e2;
                if ((null != t3 ? t3.nodeType : void 0) === Node.ELEMENT_NODE && !a(t3) && !o(t3, { matchingSelector: "td", untilNode: this.containerElement }))
                  return e2 = l(t3), f.call(r(), e2) >= 0 || "block" === window.getComputedStyle(t3).display;
              }, g.prototype.isInsignificantTextNode = function(t3) {
                var e2, n2, i2;
                if ((null != t3 ? t3.nodeType : void 0) === Node.TEXT_NODE && k(t3.data) && (n2 = t3.parentNode, i2 = t3.previousSibling, e2 = t3.nextSibling, (!C(n2.previousSibling) || this.isBlockElement(n2.previousSibling)) && !v(n2)))
                  return !i2 || this.isBlockElement(i2) || !e2 || this.isBlockElement(e2);
              }, g.prototype.isExtraBR = function(t3) {
                return "br" === l(t3) && this.isBlockElement(t3.parentNode) && t3.parentNode.lastChild === t3;
              }, v = function(t3) {
                var e2;
                return e2 = window.getComputedStyle(t3).whiteSpace, "pre" === e2 || "pre-wrap" === e2 || "pre-line" === e2;
              }, C = function(t3) {
                return t3 && !R(t3.textContent);
              }, g.prototype.translateBlockElementMarginsToNewlines = function() {
                var t3, e2, n2, i2, o2, r2, s2, a2;
                for (e2 = this.getMarginOfDefaultBlockElement(), s2 = this.blocks, a2 = [], i2 = n2 = 0, o2 = s2.length; o2 > n2; i2 = ++n2)
                  t3 = s2[i2], (r2 = this.getMarginOfBlockElementAtIndex(i2)) && (r2.top > 2 * e2.top && this.prependStringToTextAtIndex("\n", i2), a2.push(r2.bottom > 2 * e2.bottom ? this.appendStringToTextAtIndex("\n", i2) : void 0));
                return a2;
              }, g.prototype.getMarginOfBlockElementAtIndex = function(t3) {
                var e2, n2;
                return !(e2 = this.blockElements[t3]) || !e2.textContent || (n2 = l(e2), f.call(r(), n2) >= 0 || f.call(this.processedElements, e2) >= 0) ? void 0 : y(e2);
              }, g.prototype.getMarginOfDefaultBlockElement = function() {
                var t3;
                return t3 = s(e.config.blockAttributes["default"].tagName), this.containerElement.appendChild(t3), y(t3);
              }, y = function(t3) {
                var e2;
                return e2 = window.getComputedStyle(t3), "block" === e2.display ? { top: parseInt(e2.marginTop), bottom: parseInt(e2.marginBottom) } : void 0;
              }, A = function(t3) {
                return t3.replace(RegExp("^" + n.source + "+"), "");
              }, k = function(t3) {
                return RegExp("^" + n.source + "*$").test(t3);
              }, R = function(t3) {
                return /\s$/.test(t3);
              }, g;
            }(e.BasicObject);
          }.call(this), function() {
            var t2, n, i, o, r = function(t3, e2) {
              function n2() {
                this.constructor = t3;
              }
              for (var i2 in e2)
                s.call(e2, i2) && (t3[i2] = e2[i2]);
              return n2.prototype = e2.prototype, t3.prototype = new n2(), t3.__super__ = e2.prototype, t3;
            }, s = {}.hasOwnProperty, a = [].slice, u = [].indexOf || function(t3) {
              for (var e2 = 0, n2 = this.length; n2 > e2; e2++)
                if (e2 in this && this[e2] === t3)
                  return e2;
              return -1;
            };
            t2 = e.arraysAreEqual, i = e.normalizeRange, o = e.rangeIsCollapsed, n = e.getBlockConfig, e.Document = function(s2) {
              function c(t3) {
                null == t3 && (t3 = []), c.__super__.constructor.apply(this, arguments), 0 === t3.length && (t3 = [new e.Block()]), this.blockList = e.SplittableList.box(t3);
              }
              var l;
              return r(c, s2), c.fromJSON = function(t3) {
                var n2, i2;
                return i2 = function() {
                  var i3, o2, r2;
                  for (r2 = [], i3 = 0, o2 = t3.length; o2 > i3; i3++)
                    n2 = t3[i3], r2.push(e.Block.fromJSON(n2));
                  return r2;
                }(), new this(i2);
              }, c.fromHTML = function(t3, n2) {
                return e.HTMLParser.parse(t3, n2).getDocument();
              }, c.fromString = function(t3, n2) {
                var i2;
                return i2 = e.Text.textForStringWithAttributes(t3, n2), new this([new e.Block(i2)]);
              }, c.prototype.isEmpty = function() {
                var t3;
                return 1 === this.blockList.length && (t3 = this.getBlockAtIndex(0), t3.isEmpty() && !t3.hasAttributes());
              }, c.prototype.copy = function(t3) {
                var e2;
                return null == t3 && (t3 = {}), e2 = t3.consolidateBlocks ? this.blockList.consolidate().toArray() : this.blockList.toArray(), new this.constructor(e2);
              }, c.prototype.copyUsingObjectsFromDocument = function(t3) {
                var n2;
                return n2 = new e.ObjectMap(t3.getObjects()), this.copyUsingObjectMap(n2);
              }, c.prototype.copyUsingObjectMap = function(t3) {
                var e2, n2, i2;
                return n2 = function() {
                  var n3, o2, r2, s3;
                  for (r2 = this.getBlocks(), s3 = [], n3 = 0, o2 = r2.length; o2 > n3; n3++)
                    e2 = r2[n3], s3.push((i2 = t3.find(e2)) ? i2 : e2.copyUsingObjectMap(t3));
                  return s3;
                }.call(this), new this.constructor(n2);
              }, c.prototype.copyWithBaseBlockAttributes = function(t3) {
                var e2, n2, i2;
                return null == t3 && (t3 = []), i2 = function() {
                  var i3, o2, r2, s3;
                  for (r2 = this.getBlocks(), s3 = [], i3 = 0, o2 = r2.length; o2 > i3; i3++)
                    n2 = r2[i3], e2 = t3.concat(n2.getAttributes()), s3.push(n2.copyWithAttributes(e2));
                  return s3;
                }.call(this), new this.constructor(i2);
              }, c.prototype.replaceBlock = function(t3, e2) {
                var n2;
                return n2 = this.blockList.indexOf(t3), -1 === n2 ? this : new this.constructor(this.blockList.replaceObjectAtIndex(e2, n2));
              }, c.prototype.insertDocumentAtRange = function(t3, e2) {
                var n2, r2, s3, a2, u2, c2, l2;
                return r2 = t3.blockList, u2 = (e2 = i(e2))[0], c2 = this.locationFromPosition(u2), s3 = c2.index, a2 = c2.offset, l2 = this, n2 = this.getBlockAtPosition(u2), o(e2) && n2.isEmpty() && !n2.hasAttributes() ? l2 = new this.constructor(l2.blockList.removeObjectAtIndex(s3)) : n2.getBlockBreakPosition() === a2 && u2++, l2 = l2.removeTextAtRange(e2), new this.constructor(l2.blockList.insertSplittableListAtPosition(r2, u2));
              }, c.prototype.mergeDocumentAtRange = function(e2, n2) {
                var o2, r2, s3, a2, u2, c2, l2, h, p, d, f, g;
                return f = (n2 = i(n2))[0], d = this.locationFromPosition(f), r2 = this.getBlockAtIndex(d.index).getAttributes(), o2 = e2.getBaseBlockAttributes(), g = r2.slice(-o2.length), t2(o2, g) ? (l2 = r2.slice(0, -o2.length), c2 = e2.copyWithBaseBlockAttributes(l2)) : c2 = e2.copy({ consolidateBlocks: true }).copyWithBaseBlockAttributes(r2), s3 = c2.getBlockCount(), a2 = c2.getBlockAtIndex(0), t2(r2, a2.getAttributes()) ? (u2 = a2.getTextWithoutBlockBreak(), p = this.insertTextAtRange(u2, n2), s3 > 1 && (c2 = new this.constructor(c2.getBlocks().slice(1)), h = f + u2.getLength(), p = p.insertDocumentAtRange(c2, h))) : p = this.insertDocumentAtRange(c2, n2), p;
              }, c.prototype.insertTextAtRange = function(t3, e2) {
                var n2, o2, r2, s3, a2;
                return a2 = (e2 = i(e2))[0], s3 = this.locationFromPosition(a2), o2 = s3.index, r2 = s3.offset, n2 = this.removeTextAtRange(e2), new this.constructor(n2.blockList.editObjectAtIndex(o2, function(e3) {
                  return e3.copyWithText(e3.text.insertTextAtPosition(t3, r2));
                }));
              }, c.prototype.removeTextAtRange = function(t3) {
                var e2, n2, r2, s3, a2, u2, c2, l2, h, p, d, f, g, m, v, y, b, A, C, x, w;
                return p = t3 = i(t3), l2 = p[0], A = p[1], o(t3) ? this : (d = this.locationRangeFromRange(t3), u2 = d[0], y = d[1], a2 = u2.index, c2 = u2.offset, s3 = this.getBlockAtIndex(a2), v = y.index, b = y.offset, m = this.getBlockAtIndex(v), f = A - l2 === 1 && s3.getBlockBreakPosition() === c2 && m.getBlockBreakPosition() !== b && "\n" === m.text.getStringAtPosition(b), f ? r2 = this.blockList.editObjectAtIndex(v, function(t4) {
                  return t4.copyWithText(t4.text.removeTextAtRange([b, b + 1]));
                }) : (h = s3.text.getTextAtRange([0, c2]), C = m.text.getTextAtRange([b, m.getLength()]), x = h.appendText(C), g = a2 !== v && 0 === c2, w = g && s3.getAttributeLevel() >= m.getAttributeLevel(), n2 = w ? m.copyWithText(x) : s3.copyWithText(x), e2 = v + 1 - a2, r2 = this.blockList.splice(a2, e2, n2)), new this.constructor(r2));
              }, c.prototype.moveTextFromRangeToPosition = function(t3, e2) {
                var n2, o2, r2, s3, u2, c2, l2, h, p, d;
                return c2 = t3 = i(t3), p = c2[0], r2 = c2[1], e2 >= p && r2 >= e2 ? this : (o2 = this.getDocumentAtRange(t3), h = this.removeTextAtRange(t3), u2 = e2 > p, u2 && (e2 -= o2.getLength()), l2 = o2.getBlocks(), s3 = l2[0], n2 = 2 <= l2.length ? a.call(l2, 1) : [], 0 === n2.length ? (d = s3.getTextWithoutBlockBreak(), u2 && (e2 += 1)) : d = s3.text, h = h.insertTextAtRange(d, e2), 0 === n2.length ? h : (o2 = new this.constructor(n2), e2 += d.getLength(), h.insertDocumentAtRange(o2, e2)));
              }, c.prototype.addAttributeAtRange = function(t3, e2, i2) {
                var o2;
                return o2 = this.blockList, this.eachBlockAtRange(i2, function(i3, r2, s3) {
                  return o2 = o2.editObjectAtIndex(s3, function() {
                    return n(t3) ? i3.addAttribute(t3, e2) : r2[0] === r2[1] ? i3 : i3.copyWithText(i3.text.addAttributeAtRange(t3, e2, r2));
                  });
                }), new this.constructor(o2);
              }, c.prototype.addAttribute = function(t3, e2) {
                var n2;
                return n2 = this.blockList, this.eachBlock(function(i2, o2) {
                  return n2 = n2.editObjectAtIndex(o2, function() {
                    return i2.addAttribute(t3, e2);
                  });
                }), new this.constructor(n2);
              }, c.prototype.removeAttributeAtRange = function(t3, e2) {
                var i2;
                return i2 = this.blockList, this.eachBlockAtRange(e2, function(e3, o2, r2) {
                  return n(t3) ? i2 = i2.editObjectAtIndex(r2, function() {
                    return e3.removeAttribute(t3);
                  }) : o2[0] !== o2[1] ? i2 = i2.editObjectAtIndex(r2, function() {
                    return e3.copyWithText(e3.text.removeAttributeAtRange(t3, o2));
                  }) : void 0;
                }), new this.constructor(i2);
              }, c.prototype.updateAttributesForAttachment = function(t3, e2) {
                var n2, i2, o2, r2;
                return o2 = (i2 = this.getRangeOfAttachment(e2))[0], n2 = this.locationFromPosition(o2).index, r2 = this.getTextAtIndex(n2), new this.constructor(this.blockList.editObjectAtIndex(n2, function(n3) {
                  return n3.copyWithText(r2.updateAttributesForAttachment(t3, e2));
                }));
              }, c.prototype.removeAttributeForAttachment = function(t3, e2) {
                var n2;
                return n2 = this.getRangeOfAttachment(e2), this.removeAttributeAtRange(t3, n2);
              }, c.prototype.insertBlockBreakAtRange = function(t3) {
                var n2, o2, r2, s3;
                return s3 = (t3 = i(t3))[0], r2 = this.locationFromPosition(s3).offset, o2 = this.removeTextAtRange(t3), 0 === r2 && (n2 = [new e.Block()]), new this.constructor(o2.blockList.insertSplittableListAtPosition(new e.SplittableList(n2), s3));
              }, c.prototype.applyBlockAttributeAtRange = function(t3, e2, i2) {
                var o2, r2, s3, a2;
                return s3 = this.expandRangeToLineBreaksAndSplitBlocks(i2), r2 = s3.document, i2 = s3.range, o2 = n(t3), o2.listAttribute ? (r2 = r2.removeLastListAttributeAtRange(i2, { exceptAttributeName: t3 }), a2 = r2.convertLineBreaksToBlockBreaksInRange(i2), r2 = a2.document, i2 = a2.range) : r2 = o2.exclusive ? r2.removeBlockAttributesAtRange(i2) : o2.terminal ? r2.removeLastTerminalAttributeAtRange(i2) : r2.consolidateBlocksAtRange(i2), r2.addAttributeAtRange(t3, e2, i2);
              }, c.prototype.removeLastListAttributeAtRange = function(t3, e2) {
                var i2;
                return null == e2 && (e2 = {}), i2 = this.blockList, this.eachBlockAtRange(t3, function(t4, o2, r2) {
                  var s3;
                  if ((s3 = t4.getLastAttribute()) && n(s3).listAttribute && s3 !== e2.exceptAttributeName)
                    return i2 = i2.editObjectAtIndex(r2, function() {
                      return t4.removeAttribute(s3);
                    });
                }), new this.constructor(i2);
              }, c.prototype.removeLastTerminalAttributeAtRange = function(t3) {
                var e2;
                return e2 = this.blockList, this.eachBlockAtRange(t3, function(t4, i2, o2) {
                  var r2;
                  if ((r2 = t4.getLastAttribute()) && n(r2).terminal)
                    return e2 = e2.editObjectAtIndex(o2, function() {
                      return t4.removeAttribute(r2);
                    });
                }), new this.constructor(e2);
              }, c.prototype.removeBlockAttributesAtRange = function(t3) {
                var e2;
                return e2 = this.blockList, this.eachBlockAtRange(t3, function(t4, n2, i2) {
                  return t4.hasAttributes() ? e2 = e2.editObjectAtIndex(i2, function() {
                    return t4.copyWithoutAttributes();
                  }) : void 0;
                }), new this.constructor(e2);
              }, c.prototype.expandRangeToLineBreaksAndSplitBlocks = function(t3) {
                var e2, n2, o2, r2, s3, a2, u2, c2, l2;
                return a2 = t3 = i(t3), l2 = a2[0], r2 = a2[1], c2 = this.locationFromPosition(l2), o2 = this.locationFromPosition(r2), e2 = this, u2 = e2.getBlockAtIndex(c2.index), null != (c2.offset = u2.findLineBreakInDirectionFromPosition("backward", c2.offset)) && (s3 = e2.positionFromLocation(c2), e2 = e2.insertBlockBreakAtRange([s3, s3 + 1]), o2.index += 1, o2.offset -= e2.getBlockAtIndex(c2.index).getLength(), c2.index += 1), c2.offset = 0, 0 === o2.offset && o2.index > c2.index ? (o2.index -= 1, o2.offset = e2.getBlockAtIndex(o2.index).getBlockBreakPosition()) : (n2 = e2.getBlockAtIndex(o2.index), "\n" === n2.text.getStringAtRange([o2.offset - 1, o2.offset]) ? o2.offset -= 1 : o2.offset = n2.findLineBreakInDirectionFromPosition("forward", o2.offset), o2.offset !== n2.getBlockBreakPosition() && (s3 = e2.positionFromLocation(o2), e2 = e2.insertBlockBreakAtRange([s3, s3 + 1]))), l2 = e2.positionFromLocation(c2), r2 = e2.positionFromLocation(o2), t3 = i([l2, r2]), { document: e2, range: t3 };
              }, c.prototype.convertLineBreaksToBlockBreaksInRange = function(t3) {
                var e2, n2, o2;
                return n2 = (t3 = i(t3))[0], o2 = this.getStringAtRange(t3).slice(0, -1), e2 = this, o2.replace(/.*?\n/g, function(t4) {
                  return n2 += t4.length, e2 = e2.insertBlockBreakAtRange([n2 - 1, n2]);
                }), { document: e2, range: t3 };
              }, c.prototype.consolidateBlocksAtRange = function(t3) {
                var e2, n2, o2, r2, s3;
                return o2 = t3 = i(t3), s3 = o2[0], n2 = o2[1], r2 = this.locationFromPosition(s3).index, e2 = this.locationFromPosition(n2).index, new this.constructor(this.blockList.consolidateFromIndexToIndex(r2, e2));
              }, c.prototype.getDocumentAtRange = function(t3) {
                var e2;
                return t3 = i(t3), e2 = this.blockList.getSplittableListInRange(t3).toArray(), new this.constructor(e2);
              }, c.prototype.getStringAtRange = function(t3) {
                var e2, n2, o2;
                return o2 = t3 = i(t3), n2 = o2[o2.length - 1], n2 !== this.getLength() && (e2 = -1), this.getDocumentAtRange(t3).toString().slice(0, e2);
              }, c.prototype.getBlockAtIndex = function(t3) {
                return this.blockList.getObjectAtIndex(t3);
              }, c.prototype.getBlockAtPosition = function(t3) {
                var e2;
                return e2 = this.locationFromPosition(t3).index, this.getBlockAtIndex(e2);
              }, c.prototype.getTextAtIndex = function(t3) {
                var e2;
                return null != (e2 = this.getBlockAtIndex(t3)) ? e2.text : void 0;
              }, c.prototype.getTextAtPosition = function(t3) {
                var e2;
                return e2 = this.locationFromPosition(t3).index, this.getTextAtIndex(e2);
              }, c.prototype.getPieceAtPosition = function(t3) {
                var e2, n2, i2;
                return i2 = this.locationFromPosition(t3), e2 = i2.index, n2 = i2.offset, this.getTextAtIndex(e2).getPieceAtPosition(n2);
              }, c.prototype.getCharacterAtPosition = function(t3) {
                var e2, n2, i2;
                return i2 = this.locationFromPosition(t3), e2 = i2.index, n2 = i2.offset, this.getTextAtIndex(e2).getStringAtRange([n2, n2 + 1]);
              }, c.prototype.getLength = function() {
                return this.blockList.getEndPosition();
              }, c.prototype.getBlocks = function() {
                return this.blockList.toArray();
              }, c.prototype.getBlockCount = function() {
                return this.blockList.length;
              }, c.prototype.getEditCount = function() {
                return this.editCount;
              }, c.prototype.eachBlock = function(t3) {
                return this.blockList.eachObject(t3);
              }, c.prototype.eachBlockAtRange = function(t3, e2) {
                var n2, o2, r2, s3, a2, u2, c2, l2, h, p, d, f;
                if (u2 = t3 = i(t3), d = u2[0], r2 = u2[1], p = this.locationFromPosition(d), o2 = this.locationFromPosition(r2), p.index === o2.index)
                  return n2 = this.getBlockAtIndex(p.index), f = [p.offset, o2.offset], e2(n2, f, p.index);
                for (h = [], a2 = s3 = c2 = p.index, l2 = o2.index; l2 >= c2 ? l2 >= s3 : s3 >= l2; a2 = l2 >= c2 ? ++s3 : --s3)
                  (n2 = this.getBlockAtIndex(a2)) ? (f = function() {
                    switch (a2) {
                      case p.index:
                        return [p.offset, n2.text.getLength()];
                      case o2.index:
                        return [0, o2.offset];
                      default:
                        return [0, n2.text.getLength()];
                    }
                  }(), h.push(e2(n2, f, a2))) : h.push(void 0);
                return h;
              }, c.prototype.getCommonAttributesAtRange = function(t3) {
                var n2, r2, s3;
                return r2 = (t3 = i(t3))[0], o(t3) ? this.getCommonAttributesAtPosition(r2) : (s3 = [], n2 = [], this.eachBlockAtRange(t3, function(t4, e2) {
                  return e2[0] !== e2[1] ? (s3.push(t4.text.getCommonAttributesAtRange(e2)), n2.push(l(t4))) : void 0;
                }), e.Hash.fromCommonAttributesOfObjects(s3).merge(e.Hash.fromCommonAttributesOfObjects(n2)).toObject());
              }, c.prototype.getCommonAttributesAtPosition = function(t3) {
                var n2, i2, o2, r2, s3, a2, c2, h, p, d;
                if (p = this.locationFromPosition(t3), s3 = p.index, h = p.offset, o2 = this.getBlockAtIndex(s3), !o2)
                  return {};
                r2 = l(o2), n2 = o2.text.getAttributesAtPosition(h), i2 = o2.text.getAttributesAtPosition(h - 1), a2 = function() {
                  var t4, n3;
                  t4 = e.config.textAttributes, n3 = [];
                  for (c2 in t4)
                    d = t4[c2], d.inheritable && n3.push(c2);
                  return n3;
                }();
                for (c2 in i2)
                  d = i2[c2], (d === n2[c2] || u.call(a2, c2) >= 0) && (r2[c2] = d);
                return r2;
              }, c.prototype.getRangeOfCommonAttributeAtPosition = function(t3, e2) {
                var n2, o2, r2, s3, a2, u2, c2, l2, h;
                return a2 = this.locationFromPosition(e2), r2 = a2.index, s3 = a2.offset, h = this.getTextAtIndex(r2), u2 = h.getExpandedRangeForAttributeAtOffset(t3, s3), l2 = u2[0], o2 = u2[1], c2 = this.positionFromLocation({ index: r2, offset: l2 }), n2 = this.positionFromLocation({ index: r2, offset: o2 }), i([c2, n2]);
              }, c.prototype.getBaseBlockAttributes = function() {
                var t3, e2, n2, i2, o2, r2, s3;
                for (t3 = this.getBlockAtIndex(0).getAttributes(), n2 = i2 = 1, s3 = this.getBlockCount(); s3 >= 1 ? s3 > i2 : i2 > s3; n2 = s3 >= 1 ? ++i2 : --i2)
                  e2 = this.getBlockAtIndex(n2).getAttributes(), r2 = Math.min(t3.length, e2.length), t3 = function() {
                    var n3, i3, s4;
                    for (s4 = [], o2 = n3 = 0, i3 = r2; (i3 >= 0 ? i3 > n3 : n3 > i3) && e2[o2] === t3[o2]; o2 = i3 >= 0 ? ++n3 : --n3)
                      s4.push(e2[o2]);
                    return s4;
                  }();
                return t3;
              }, l = function(t3) {
                var e2, n2;
                return n2 = {}, (e2 = t3.getLastAttribute()) && (n2[e2] = true), n2;
              }, c.prototype.getAttachmentById = function(t3) {
                var e2, n2, i2, o2;
                for (o2 = this.getAttachments(), n2 = 0, i2 = o2.length; i2 > n2; n2++)
                  if (e2 = o2[n2], e2.id === t3)
                    return e2;
              }, c.prototype.getAttachmentPieces = function() {
                var t3;
                return t3 = [], this.blockList.eachObject(function(e2) {
                  var n2;
                  return n2 = e2.text, t3 = t3.concat(n2.getAttachmentPieces());
                }), t3;
              }, c.prototype.getAttachments = function() {
                var t3, e2, n2, i2, o2;
                for (i2 = this.getAttachmentPieces(), o2 = [], t3 = 0, e2 = i2.length; e2 > t3; t3++)
                  n2 = i2[t3], o2.push(n2.attachment);
                return o2;
              }, c.prototype.getRangeOfAttachment = function(t3) {
                var e2, n2, o2, r2, s3, a2, u2;
                for (r2 = 0, s3 = this.blockList.toArray(), n2 = e2 = 0, o2 = s3.length; o2 > e2; n2 = ++e2) {
                  if (a2 = s3[n2].text, u2 = a2.getRangeOfAttachment(t3))
                    return i([r2 + u2[0], r2 + u2[1]]);
                  r2 += a2.getLength();
                }
              }, c.prototype.getLocationRangeOfAttachment = function(t3) {
                var e2;
                return e2 = this.getRangeOfAttachment(t3), this.locationRangeFromRange(e2);
              }, c.prototype.getAttachmentPieceForAttachment = function(t3) {
                var e2, n2, i2, o2;
                for (o2 = this.getAttachmentPieces(), e2 = 0, n2 = o2.length; n2 > e2; e2++)
                  if (i2 = o2[e2], i2.attachment === t3)
                    return i2;
              }, c.prototype.findRangesForBlockAttribute = function(t3) {
                var e2, n2, i2, o2, r2, s3, a2;
                for (r2 = 0, s3 = [], a2 = this.getBlocks(), n2 = 0, i2 = a2.length; i2 > n2; n2++)
                  e2 = a2[n2], o2 = e2.getLength(), e2.hasAttribute(t3) && s3.push([r2, r2 + o2]), r2 += o2;
                return s3;
              }, c.prototype.findRangesForTextAttribute = function(t3, e2) {
                var n2, i2, o2, r2, s3, a2, u2, c2, l2, h;
                for (h = (null != e2 ? e2 : {}).withValue, a2 = 0, u2 = [], c2 = [], r2 = function(e3) {
                  return null != h ? e3.getAttribute(t3) === h : e3.hasAttribute(t3);
                }, l2 = this.getPieces(), n2 = 0, i2 = l2.length; i2 > n2; n2++)
                  s3 = l2[n2], o2 = s3.getLength(), r2(s3) && (u2[1] === a2 ? u2[1] = a2 + o2 : c2.push(u2 = [a2, a2 + o2])), a2 += o2;
                return c2;
              }, c.prototype.locationFromPosition = function(t3) {
                var e2, n2;
                return n2 = this.blockList.findIndexAndOffsetAtPosition(Math.max(0, t3)), null != n2.index ? n2 : (e2 = this.getBlocks(), { index: e2.length - 1, offset: e2[e2.length - 1].getLength() });
              }, c.prototype.positionFromLocation = function(t3) {
                return this.blockList.findPositionAtIndexAndOffset(t3.index, t3.offset);
              }, c.prototype.locationRangeFromPosition = function(t3) {
                return i(this.locationFromPosition(t3));
              }, c.prototype.locationRangeFromRange = function(t3) {
                var e2, n2, o2, r2;
                if (t3 = i(t3))
                  return r2 = t3[0], n2 = t3[1], o2 = this.locationFromPosition(r2), e2 = this.locationFromPosition(n2), i([o2, e2]);
              }, c.prototype.rangeFromLocationRange = function(t3) {
                var e2, n2;
                return t3 = i(t3), e2 = this.positionFromLocation(t3[0]), o(t3) || (n2 = this.positionFromLocation(t3[1])), i([e2, n2]);
              }, c.prototype.isEqualTo = function(t3) {
                return this.blockList.isEqualTo(null != t3 ? t3.blockList : void 0);
              }, c.prototype.getTexts = function() {
                var t3, e2, n2, i2, o2;
                for (i2 = this.getBlocks(), o2 = [], e2 = 0, n2 = i2.length; n2 > e2; e2++)
                  t3 = i2[e2], o2.push(t3.text);
                return o2;
              }, c.prototype.getPieces = function() {
                var t3, e2, n2, i2, o2;
                for (n2 = [], i2 = this.getTexts(), t3 = 0, e2 = i2.length; e2 > t3; t3++)
                  o2 = i2[t3], n2.push.apply(n2, o2.getPieces());
                return n2;
              }, c.prototype.getObjects = function() {
                return this.getBlocks().concat(this.getTexts()).concat(this.getPieces());
              }, c.prototype.toSerializableDocument = function() {
                var t3;
                return t3 = [], this.blockList.eachObject(function(e2) {
                  return t3.push(e2.copyWithText(e2.text.toSerializableText()));
                }), new this.constructor(t3);
              }, c.prototype.toString = function() {
                return this.blockList.toString();
              }, c.prototype.toJSON = function() {
                return this.blockList.toJSON();
              }, c.prototype.toConsole = function() {
                var t3;
                return JSON.stringify(function() {
                  var e2, n2, i2, o2;
                  for (i2 = this.blockList.toArray(), o2 = [], e2 = 0, n2 = i2.length; n2 > e2; e2++)
                    t3 = i2[e2], o2.push(JSON.parse(t3.text.toConsole()));
                  return o2;
                }.call(this));
              }, c;
            }(e.Object);
          }.call(this), function() {
            e.LineBreakInsertion = function() {
              function t2(t3) {
                var e2;
                this.composition = t3, this.document = this.composition.document, e2 = this.composition.getSelectedRange(), this.startPosition = e2[0], this.endPosition = e2[1], this.startLocation = this.document.locationFromPosition(this.startPosition), this.endLocation = this.document.locationFromPosition(this.endPosition), this.block = this.document.getBlockAtIndex(this.endLocation.index), this.breaksOnReturn = this.block.breaksOnReturn(), this.previousCharacter = this.block.text.getStringAtPosition(this.endLocation.offset - 1), this.nextCharacter = this.block.text.getStringAtPosition(this.endLocation.offset);
              }
              return t2.prototype.shouldInsertBlockBreak = function() {
                return this.block.hasAttributes() && this.block.isListItem() && !this.block.isEmpty() ? 0 !== this.startLocation.offset : this.breaksOnReturn && "\n" !== this.nextCharacter;
              }, t2.prototype.shouldBreakFormattedBlock = function() {
                return this.block.hasAttributes() && !this.block.isListItem() && (this.breaksOnReturn && "\n" === this.nextCharacter || "\n" === this.previousCharacter);
              }, t2.prototype.shouldDecreaseListLevel = function() {
                return this.block.hasAttributes() && this.block.isListItem() && this.block.isEmpty();
              }, t2.prototype.shouldPrependListItem = function() {
                return this.block.isListItem() && 0 === this.startLocation.offset && !this.block.isEmpty();
              }, t2.prototype.shouldRemoveLastBlockAttribute = function() {
                return this.block.hasAttributes() && !this.block.isListItem() && this.block.isEmpty();
              }, t2;
            }();
          }.call(this), function() {
            var t2, n, i, o, r, s, a, u, c, l, h = function(t3, e2) {
              function n2() {
                this.constructor = t3;
              }
              for (var i2 in e2)
                p.call(e2, i2) && (t3[i2] = e2[i2]);
              return n2.prototype = e2.prototype, t3.prototype = new n2(), t3.__super__ = e2.prototype, t3;
            }, p = {}.hasOwnProperty;
            s = e.normalizeRange, c = e.rangesAreEqual, u = e.rangeIsCollapsed, a = e.objectsAreEqual, t2 = e.arrayStartsWith, l = e.summarizeArrayChange, i = e.getAllAttributeNames, o = e.getBlockConfig, r = e.getTextConfig, n = e.extend, e.Composition = function(p2) {
              function d() {
                this.document = new e.Document(), this.attachments = [], this.currentAttributes = {}, this.revision = 0;
              }
              var f;
              return h(d, p2), d.prototype.setDocument = function(t3) {
                var e2;
                return t3.isEqualTo(this.document) ? void 0 : (this.document = t3, this.refreshAttachments(), this.revision++, null != (e2 = this.delegate) && "function" == typeof e2.compositionDidChangeDocument ? e2.compositionDidChangeDocument(t3) : void 0);
              }, d.prototype.getSnapshot = function() {
                return { document: this.document, selectedRange: this.getSelectedRange() };
              }, d.prototype.loadSnapshot = function(t3) {
                var n2, i2, o2, r2;
                return n2 = t3.document, r2 = t3.selectedRange, null != (i2 = this.delegate) && "function" == typeof i2.compositionWillLoadSnapshot && i2.compositionWillLoadSnapshot(), this.setDocument(null != n2 ? n2 : new e.Document()), this.setSelection(null != r2 ? r2 : [0, 0]), null != (o2 = this.delegate) && "function" == typeof o2.compositionDidLoadSnapshot ? o2.compositionDidLoadSnapshot() : void 0;
              }, d.prototype.insertText = function(t3, e2) {
                var n2, i2, o2, r2;
                return r2 = (null != e2 ? e2 : { updatePosition: true }).updatePosition, i2 = this.getSelectedRange(), this.setDocument(this.document.insertTextAtRange(t3, i2)), o2 = i2[0], n2 = o2 + t3.getLength(), r2 && this.setSelection(n2), this.notifyDelegateOfInsertionAtRange([o2, n2]);
              }, d.prototype.insertBlock = function(t3) {
                var n2;
                return null == t3 && (t3 = new e.Block()), n2 = new e.Document([t3]), this.insertDocument(n2);
              }, d.prototype.insertDocument = function(t3) {
                var n2, i2, o2;
                return null == t3 && (t3 = new e.Document()), i2 = this.getSelectedRange(), this.setDocument(this.document.insertDocumentAtRange(t3, i2)), o2 = i2[0], n2 = o2 + t3.getLength(), this.setSelection(n2), this.notifyDelegateOfInsertionAtRange([o2, n2]);
              }, d.prototype.insertString = function(t3, n2) {
                var i2, o2;
                return i2 = this.getCurrentTextAttributes(), o2 = e.Text.textForStringWithAttributes(t3, i2), this.insertText(o2, n2);
              }, d.prototype.insertBlockBreak = function() {
                var t3, e2, n2;
                return e2 = this.getSelectedRange(), this.setDocument(this.document.insertBlockBreakAtRange(e2)), n2 = e2[0], t3 = n2 + 1, this.setSelection(t3), this.notifyDelegateOfInsertionAtRange([n2, t3]);
              }, d.prototype.insertLineBreak = function() {
                var t3, n2;
                return n2 = new e.LineBreakInsertion(this), n2.shouldDecreaseListLevel() ? (this.decreaseListLevel(), this.setSelection(n2.startPosition)) : n2.shouldPrependListItem() ? (t3 = new e.Document([n2.block.copyWithoutText()]), this.insertDocument(t3)) : n2.shouldInsertBlockBreak() ? this.insertBlockBreak() : n2.shouldRemoveLastBlockAttribute() ? this.removeLastBlockAttribute() : n2.shouldBreakFormattedBlock() ? this.breakFormattedBlock(n2) : this.insertString("\n");
              }, d.prototype.insertHTML = function(t3) {
                var n2, i2, o2, r2;
                return n2 = e.Document.fromHTML(t3), o2 = this.getSelectedRange(), this.setDocument(this.document.mergeDocumentAtRange(n2, o2)), r2 = o2[0], i2 = r2 + n2.getLength() - 1, this.setSelection(i2), this.notifyDelegateOfInsertionAtRange([r2, i2]);
              }, d.prototype.replaceHTML = function(t3) {
                var n2, i2, o2;
                return n2 = e.Document.fromHTML(t3).copyUsingObjectsFromDocument(this.document), i2 = this.getLocationRange({ strict: false }), o2 = this.document.rangeFromLocationRange(i2), this.setDocument(n2), this.setSelection(o2);
              }, d.prototype.insertFile = function(t3) {
                return this.insertFiles([t3]);
              }, d.prototype.insertFiles = function(t3) {
                var n2, i2, o2, r2, s2, a2;
                for (i2 = [], r2 = 0, s2 = t3.length; s2 > r2; r2++)
                  o2 = t3[r2], (null != (a2 = this.delegate) ? a2.compositionShouldAcceptFile(o2) : void 0) && (n2 = e.Attachment.attachmentForFile(o2), i2.push(n2));
                return this.insertAttachments(i2);
              }, d.prototype.insertAttachment = function(t3) {
                return this.insertAttachments([t3]);
              }, d.prototype.insertAttachments = function(t3) {
                var n2, i2, o2, r2, s2, a2, u2, c2, l2;
                for (c2 = new e.Text(), r2 = 0, s2 = t3.length; s2 > r2; r2++)
                  n2 = t3[r2], l2 = n2.getType(), a2 = null != (u2 = e.config.attachments[l2]) ? u2.presentation : void 0, o2 = this.getCurrentTextAttributes(), a2 && (o2.presentation = a2), i2 = e.Text.textForAttachmentWithAttributes(n2, o2), c2 = c2.appendText(i2);
                return this.insertText(c2);
              }, d.prototype.shouldManageDeletingInDirection = function(t3) {
                var e2;
                if (e2 = this.getLocationRange(), u(e2)) {
                  if ("backward" === t3 && 0 === e2[0].offset)
                    return true;
                  if (this.shouldManageMovingCursorInDirection(t3))
                    return true;
                } else if (e2[0].index !== e2[1].index)
                  return true;
                return false;
              }, d.prototype.deleteInDirection = function(t3, e2) {
                var n2, i2, o2, r2, s2, a2, c2, l2;
                return r2 = (null != e2 ? e2 : {}).length, s2 = this.getLocationRange(), a2 = this.getSelectedRange(), c2 = u(a2), c2 ? o2 = "backward" === t3 && 0 === s2[0].offset : l2 = s2[0].index !== s2[1].index, o2 && this.canDecreaseBlockAttributeLevel() && (i2 = this.getBlock(), i2.isListItem() ? this.decreaseListLevel() : this.decreaseBlockAttributeLevel(), this.setSelection(a2[0]), i2.isEmpty()) ? false : (c2 && (a2 = this.getExpandedRangeInDirection(t3, { length: r2 }), "backward" === t3 && (n2 = this.getAttachmentAtRange(a2))), n2 ? (this.editAttachment(n2), false) : (this.setDocument(this.document.removeTextAtRange(a2)), this.setSelection(a2[0]), o2 || l2 ? false : void 0));
              }, d.prototype.moveTextFromRange = function(t3) {
                var e2;
                return e2 = this.getSelectedRange()[0], this.setDocument(this.document.moveTextFromRangeToPosition(t3, e2)), this.setSelection(e2);
              }, d.prototype.removeAttachment = function(t3) {
                var e2;
                return (e2 = this.document.getRangeOfAttachment(t3)) ? (this.stopEditingAttachment(), this.setDocument(this.document.removeTextAtRange(e2)), this.setSelection(e2[0])) : void 0;
              }, d.prototype.removeLastBlockAttribute = function() {
                var t3, e2, n2, i2;
                return n2 = this.getSelectedRange(), i2 = n2[0], e2 = n2[1], t3 = this.document.getBlockAtPosition(e2), this.removeCurrentAttribute(t3.getLastAttribute()), this.setSelection(i2);
              }, f = " ", d.prototype.insertPlaceholder = function() {
                return this.placeholderPosition = this.getPosition(), this.insertString(f);
              }, d.prototype.selectPlaceholder = function() {
                return null != this.placeholderPosition ? (this.setSelectedRange([this.placeholderPosition, this.placeholderPosition + f.length]), this.getSelectedRange()) : void 0;
              }, d.prototype.forgetPlaceholder = function() {
                return this.placeholderPosition = null;
              }, d.prototype.hasCurrentAttribute = function(t3) {
                var e2;
                return e2 = this.currentAttributes[t3], null != e2 && e2 !== false;
              }, d.prototype.toggleCurrentAttribute = function(t3) {
                var e2;
                return (e2 = !this.currentAttributes[t3]) ? this.setCurrentAttribute(t3, e2) : this.removeCurrentAttribute(t3);
              }, d.prototype.canSetCurrentAttribute = function(t3) {
                return o(t3) ? this.canSetCurrentBlockAttribute(t3) : this.canSetCurrentTextAttribute(t3);
              }, d.prototype.canSetCurrentTextAttribute = function() {
                var t3, e2, n2, i2, o2;
                if (e2 = this.getSelectedDocument()) {
                  for (o2 = e2.getAttachments(), n2 = 0, i2 = o2.length; i2 > n2; n2++)
                    if (t3 = o2[n2], !t3.hasContent())
                      return false;
                  return true;
                }
              }, d.prototype.canSetCurrentBlockAttribute = function() {
                var t3;
                if (t3 = this.getBlock())
                  return !t3.isTerminalBlock();
              }, d.prototype.setCurrentAttribute = function(t3, e2) {
                return o(t3) ? this.setBlockAttribute(t3, e2) : (this.setTextAttribute(t3, e2), this.currentAttributes[t3] = e2, this.notifyDelegateOfCurrentAttributesChange());
              }, d.prototype.setTextAttribute = function(t3, n2) {
                var i2, o2, r2, s2;
                if (o2 = this.getSelectedRange())
                  return r2 = o2[0], i2 = o2[1], r2 !== i2 ? this.setDocument(this.document.addAttributeAtRange(t3, n2, o2)) : "href" === t3 ? (s2 = e.Text.textForStringWithAttributes(n2, { href: n2 }), this.insertText(s2)) : void 0;
              }, d.prototype.setBlockAttribute = function(t3, e2) {
                var n2, i2;
                if (i2 = this.getSelectedRange())
                  return this.canSetCurrentAttribute(t3) ? (n2 = this.getBlock(), this.setDocument(this.document.applyBlockAttributeAtRange(t3, e2, i2)), this.setSelection(i2)) : void 0;
              }, d.prototype.removeCurrentAttribute = function(t3) {
                return o(t3) ? (this.removeBlockAttribute(t3), this.updateCurrentAttributes()) : (this.removeTextAttribute(t3), delete this.currentAttributes[t3], this.notifyDelegateOfCurrentAttributesChange());
              }, d.prototype.removeTextAttribute = function(t3) {
                var e2;
                if (e2 = this.getSelectedRange())
                  return this.setDocument(this.document.removeAttributeAtRange(t3, e2));
              }, d.prototype.removeBlockAttribute = function(t3) {
                var e2;
                if (e2 = this.getSelectedRange())
                  return this.setDocument(this.document.removeAttributeAtRange(t3, e2));
              }, d.prototype.canDecreaseNestingLevel = function() {
                var t3;
                return (null != (t3 = this.getBlock()) ? t3.getNestingLevel() : void 0) > 0;
              }, d.prototype.canIncreaseNestingLevel = function() {
                var e2, n2, i2;
                if (e2 = this.getBlock())
                  return (null != (i2 = o(e2.getLastNestableAttribute())) ? i2.listAttribute : 0) ? (n2 = this.getPreviousBlock()) ? t2(n2.getListItemAttributes(), e2.getListItemAttributes()) : void 0 : e2.getNestingLevel() > 0;
              }, d.prototype.decreaseNestingLevel = function() {
                var t3;
                if (t3 = this.getBlock())
                  return this.setDocument(this.document.replaceBlock(t3, t3.decreaseNestingLevel()));
              }, d.prototype.increaseNestingLevel = function() {
                var t3;
                if (t3 = this.getBlock())
                  return this.setDocument(this.document.replaceBlock(t3, t3.increaseNestingLevel()));
              }, d.prototype.canDecreaseBlockAttributeLevel = function() {
                var t3;
                return (null != (t3 = this.getBlock()) ? t3.getAttributeLevel() : void 0) > 0;
              }, d.prototype.decreaseBlockAttributeLevel = function() {
                var t3, e2;
                return (t3 = null != (e2 = this.getBlock()) ? e2.getLastAttribute() : void 0) ? this.removeCurrentAttribute(t3) : void 0;
              }, d.prototype.decreaseListLevel = function() {
                var t3, e2, n2, i2, o2, r2;
                for (r2 = this.getSelectedRange()[0], o2 = this.document.locationFromPosition(r2).index, n2 = o2, t3 = this.getBlock().getAttributeLevel(); (e2 = this.document.getBlockAtIndex(n2 + 1)) && e2.isListItem() && e2.getAttributeLevel() > t3; )
                  n2++;
                return r2 = this.document.positionFromLocation({ index: o2, offset: 0 }), i2 = this.document.positionFromLocation({ index: n2, offset: 0 }), this.setDocument(this.document.removeLastListAttributeAtRange([r2, i2]));
              }, d.prototype.updateCurrentAttributes = function() {
                var t3, e2, n2, o2, r2, s2;
                if (s2 = this.getSelectedRange({ ignoreLock: true })) {
                  for (e2 = this.document.getCommonAttributesAtRange(s2), r2 = i(), n2 = 0, o2 = r2.length; o2 > n2; n2++)
                    t3 = r2[n2], e2[t3] || this.canSetCurrentAttribute(t3) || (e2[t3] = false);
                  if (!a(e2, this.currentAttributes))
                    return this.currentAttributes = e2, this.notifyDelegateOfCurrentAttributesChange();
                }
              }, d.prototype.getCurrentAttributes = function() {
                return n.call({}, this.currentAttributes);
              }, d.prototype.getCurrentTextAttributes = function() {
                var t3, e2, n2, i2;
                t3 = {}, n2 = this.currentAttributes;
                for (e2 in n2)
                  i2 = n2[e2], i2 !== false && r(e2) && (t3[e2] = i2);
                return t3;
              }, d.prototype.freezeSelection = function() {
                return this.setCurrentAttribute("frozen", true);
              }, d.prototype.thawSelection = function() {
                return this.removeCurrentAttribute("frozen");
              }, d.prototype.hasFrozenSelection = function() {
                return this.hasCurrentAttribute("frozen");
              }, d.proxyMethod("getSelectionManager().getPointRange"), d.proxyMethod("getSelectionManager().setLocationRangeFromPointRange"), d.proxyMethod("getSelectionManager().createLocationRangeFromDOMRange"), d.proxyMethod("getSelectionManager().locationIsCursorTarget"), d.proxyMethod("getSelectionManager().selectionIsExpanded"), d.proxyMethod("delegate?.getSelectionManager"), d.prototype.setSelection = function(t3) {
                var e2, n2;
                return e2 = this.document.locationRangeFromRange(t3), null != (n2 = this.delegate) ? n2.compositionDidRequestChangingSelectionToLocationRange(e2) : void 0;
              }, d.prototype.getSelectedRange = function() {
                var t3;
                return (t3 = this.getLocationRange()) ? this.document.rangeFromLocationRange(t3) : void 0;
              }, d.prototype.setSelectedRange = function(t3) {
                var e2;
                return e2 = this.document.locationRangeFromRange(t3), this.getSelectionManager().setLocationRange(e2);
              }, d.prototype.getPosition = function() {
                var t3;
                return (t3 = this.getLocationRange()) ? this.document.positionFromLocation(t3[0]) : void 0;
              }, d.prototype.getLocationRange = function(t3) {
                var e2, n2;
                return null != (e2 = null != (n2 = this.targetLocationRange) ? n2 : this.getSelectionManager().getLocationRange(t3)) ? e2 : s({ index: 0, offset: 0 });
              }, d.prototype.withTargetLocationRange = function(t3, e2) {
                var n2;
                this.targetLocationRange = t3;
                try {
                  n2 = e2();
                } finally {
                  this.targetLocationRange = null;
                }
                return n2;
              }, d.prototype.withTargetRange = function(t3, e2) {
                var n2;
                return n2 = this.document.locationRangeFromRange(t3), this.withTargetLocationRange(n2, e2);
              }, d.prototype.withTargetDOMRange = function(t3, e2) {
                var n2;
                return n2 = this.createLocationRangeFromDOMRange(t3, { strict: false }), this.withTargetLocationRange(n2, e2);
              }, d.prototype.getExpandedRangeInDirection = function(t3, e2) {
                var n2, i2, o2, r2;
                return i2 = (null != e2 ? e2 : {}).length, o2 = this.getSelectedRange(), r2 = o2[0], n2 = o2[1], "backward" === t3 ? i2 ? r2 -= i2 : r2 = this.translateUTF16PositionFromOffset(r2, -1) : i2 ? n2 += i2 : n2 = this.translateUTF16PositionFromOffset(n2, 1), s([r2, n2]);
              }, d.prototype.shouldManageMovingCursorInDirection = function(t3) {
                var e2;
                return this.editingAttachment ? true : (e2 = this.getExpandedRangeInDirection(t3), null != this.getAttachmentAtRange(e2));
              }, d.prototype.moveCursorInDirection = function(t3) {
                var e2, n2, i2, o2;
                return this.editingAttachment ? i2 = this.document.getRangeOfAttachment(this.editingAttachment) : (o2 = this.getSelectedRange(), i2 = this.getExpandedRangeInDirection(t3), n2 = !c(o2, i2)), this.setSelectedRange("backward" === t3 ? i2[0] : i2[1]), n2 && (e2 = this.getAttachmentAtRange(i2)) ? this.editAttachment(e2) : void 0;
              }, d.prototype.expandSelectionInDirection = function(t3, e2) {
                var n2, i2;
                return n2 = (null != e2 ? e2 : {}).length, i2 = this.getExpandedRangeInDirection(t3, { length: n2 }), this.setSelectedRange(i2);
              }, d.prototype.expandSelectionForEditing = function() {
                return this.hasCurrentAttribute("href") ? this.expandSelectionAroundCommonAttribute("href") : void 0;
              }, d.prototype.expandSelectionAroundCommonAttribute = function(t3) {
                var e2, n2;
                return e2 = this.getPosition(), n2 = this.document.getRangeOfCommonAttributeAtPosition(t3, e2), this.setSelectedRange(n2);
              }, d.prototype.selectionContainsAttachments = function() {
                var t3;
                return (null != (t3 = this.getSelectedAttachments()) ? t3.length : void 0) > 0;
              }, d.prototype.selectionIsInCursorTarget = function() {
                return this.editingAttachment || this.positionIsCursorTarget(this.getPosition());
              }, d.prototype.positionIsCursorTarget = function(t3) {
                var e2;
                return (e2 = this.document.locationFromPosition(t3)) ? this.locationIsCursorTarget(e2) : void 0;
              }, d.prototype.positionIsBlockBreak = function(t3) {
                var e2;
                return null != (e2 = this.document.getPieceAtPosition(t3)) ? e2.isBlockBreak() : void 0;
              }, d.prototype.getSelectedDocument = function() {
                var t3;
                return (t3 = this.getSelectedRange()) ? this.document.getDocumentAtRange(t3) : void 0;
              }, d.prototype.getSelectedAttachments = function() {
                var t3;
                return null != (t3 = this.getSelectedDocument()) ? t3.getAttachments() : void 0;
              }, d.prototype.getAttachments = function() {
                return this.attachments.slice(0);
              }, d.prototype.refreshAttachments = function() {
                var t3, e2, n2, i2, o2, r2, s2, a2, u2, c2, h2, p3;
                for (n2 = this.document.getAttachments(), a2 = l(this.attachments, n2), t3 = a2.added, h2 = a2.removed, this.attachments = n2, i2 = 0, r2 = h2.length; r2 > i2; i2++)
                  e2 = h2[i2], e2.delegate = null, null != (u2 = this.delegate) && "function" == typeof u2.compositionDidRemoveAttachment && u2.compositionDidRemoveAttachment(e2);
                for (p3 = [], o2 = 0, s2 = t3.length; s2 > o2; o2++)
                  e2 = t3[o2], e2.delegate = this, p3.push(null != (c2 = this.delegate) && "function" == typeof c2.compositionDidAddAttachment ? c2.compositionDidAddAttachment(e2) : void 0);
                return p3;
              }, d.prototype.attachmentDidChangeAttributes = function(t3) {
                var e2;
                return this.revision++, null != (e2 = this.delegate) && "function" == typeof e2.compositionDidEditAttachment ? e2.compositionDidEditAttachment(t3) : void 0;
              }, d.prototype.attachmentDidChangePreviewURL = function(t3) {
                var e2;
                return this.revision++, null != (e2 = this.delegate) && "function" == typeof e2.compositionDidChangeAttachmentPreviewURL ? e2.compositionDidChangeAttachmentPreviewURL(t3) : void 0;
              }, d.prototype.editAttachment = function(t3, e2) {
                var n2;
                if (t3 !== this.editingAttachment)
                  return this.stopEditingAttachment(), this.editingAttachment = t3, null != (n2 = this.delegate) && "function" == typeof n2.compositionDidStartEditingAttachment ? n2.compositionDidStartEditingAttachment(this.editingAttachment, e2) : void 0;
              }, d.prototype.stopEditingAttachment = function() {
                var t3;
                if (this.editingAttachment)
                  return null != (t3 = this.delegate) && "function" == typeof t3.compositionDidStopEditingAttachment && t3.compositionDidStopEditingAttachment(this.editingAttachment), this.editingAttachment = null;
              }, d.prototype.updateAttributesForAttachment = function(t3, e2) {
                return this.setDocument(this.document.updateAttributesForAttachment(t3, e2));
              }, d.prototype.removeAttributeForAttachment = function(t3, e2) {
                return this.setDocument(this.document.removeAttributeForAttachment(t3, e2));
              }, d.prototype.breakFormattedBlock = function(t3) {
                var n2, i2, o2, r2, s2;
                return i2 = t3.document, n2 = t3.block, r2 = t3.startPosition, s2 = [r2 - 1, r2], n2.getBlockBreakPosition() === t3.startLocation.offset ? (n2.breaksOnReturn() && "\n" === t3.nextCharacter ? r2 += 1 : i2 = i2.removeTextAtRange(s2), s2 = [r2, r2]) : "\n" === t3.nextCharacter ? "\n" === t3.previousCharacter ? s2 = [r2 - 1, r2 + 1] : (s2 = [r2, r2 + 1], r2 += 1) : t3.startLocation.offset - 1 !== 0 && (r2 += 1), o2 = new e.Document([n2.removeLastAttribute().copyWithoutText()]), this.setDocument(i2.insertDocumentAtRange(o2, s2)), this.setSelection(r2);
              }, d.prototype.getPreviousBlock = function() {
                var t3, e2;
                return (e2 = this.getLocationRange()) && (t3 = e2[0].index, t3 > 0) ? this.document.getBlockAtIndex(t3 - 1) : void 0;
              }, d.prototype.getBlock = function() {
                var t3;
                return (t3 = this.getLocationRange()) ? this.document.getBlockAtIndex(t3[0].index) : void 0;
              }, d.prototype.getAttachmentAtRange = function(t3) {
                var n2;
                return n2 = this.document.getDocumentAtRange(t3), n2.toString() === e.OBJECT_REPLACEMENT_CHARACTER + "\n" ? n2.getAttachments()[0] : void 0;
              }, d.prototype.notifyDelegateOfCurrentAttributesChange = function() {
                var t3;
                return null != (t3 = this.delegate) && "function" == typeof t3.compositionDidChangeCurrentAttributes ? t3.compositionDidChangeCurrentAttributes(this.currentAttributes) : void 0;
              }, d.prototype.notifyDelegateOfInsertionAtRange = function(t3) {
                var e2;
                return null != (e2 = this.delegate) && "function" == typeof e2.compositionDidPerformInsertionAtRange ? e2.compositionDidPerformInsertionAtRange(t3) : void 0;
              }, d.prototype.translateUTF16PositionFromOffset = function(t3, e2) {
                var n2, i2;
                return i2 = this.document.toUTF16String(), n2 = i2.offsetFromUCS2Offset(t3), i2.offsetToUCS2Offset(n2 + e2);
              }, d;
            }(e.BasicObject);
          }.call(this), function() {
            var t2 = function(t3, e2) {
              function i() {
                this.constructor = t3;
              }
              for (var o in e2)
                n.call(e2, o) && (t3[o] = e2[o]);
              return i.prototype = e2.prototype, t3.prototype = new i(), t3.__super__ = e2.prototype, t3;
            }, n = {}.hasOwnProperty;
            e.UndoManager = function(e2) {
              function n2(t3) {
                this.composition = t3, this.undoEntries = [], this.redoEntries = [];
              }
              var i;
              return t2(n2, e2), n2.prototype.recordUndoEntry = function(t3, e3) {
                var n3, o, r, s, a;
                return s = null != e3 ? e3 : {}, o = s.context, n3 = s.consolidatable, r = this.undoEntries.slice(-1)[0], n3 && i(r, t3, o) ? void 0 : (a = this.createEntry({ description: t3, context: o }), this.undoEntries.push(a), this.redoEntries = []);
              }, n2.prototype.undo = function() {
                var t3, e3;
                return (e3 = this.undoEntries.pop()) ? (t3 = this.createEntry(e3), this.redoEntries.push(t3), this.composition.loadSnapshot(e3.snapshot)) : void 0;
              }, n2.prototype.redo = function() {
                var t3, e3;
                return (t3 = this.redoEntries.pop()) ? (e3 = this.createEntry(t3), this.undoEntries.push(e3), this.composition.loadSnapshot(t3.snapshot)) : void 0;
              }, n2.prototype.canUndo = function() {
                return this.undoEntries.length > 0;
              }, n2.prototype.canRedo = function() {
                return this.redoEntries.length > 0;
              }, n2.prototype.createEntry = function(t3) {
                var e3, n3, i2;
                return i2 = null != t3 ? t3 : {}, n3 = i2.description, e3 = i2.context, { description: null != n3 ? n3.toString() : void 0, context: JSON.stringify(e3), snapshot: this.composition.getSnapshot() };
              }, i = function(t3, e3, n3) {
                return (null != t3 ? t3.description : void 0) === (null != e3 ? e3.toString() : void 0) && (null != t3 ? t3.context : void 0) === JSON.stringify(n3);
              }, n2;
            }(e.BasicObject);
          }.call(this), function() {
            var t2;
            e.attachmentGalleryFilter = function(e2) {
              var n;
              return n = new t2(e2), n.perform(), n.getSnapshot();
            }, t2 = function() {
              function t3(t4) {
                this.document = t4.document, this.selectedRange = t4.selectedRange;
              }
              var e2, n, i;
              return e2 = "attachmentGallery", n = "presentation", i = "gallery", t3.prototype.perform = function() {
                return this.removeBlockAttribute(), this.applyBlockAttribute();
              }, t3.prototype.getSnapshot = function() {
                return { document: this.document, selectedRange: this.selectedRange };
              }, t3.prototype.removeBlockAttribute = function() {
                var t4, n2, i2, o, r;
                for (o = this.findRangesOfBlocks(), r = [], t4 = 0, n2 = o.length; n2 > t4; t4++)
                  i2 = o[t4], r.push(this.document = this.document.removeAttributeAtRange(e2, i2));
                return r;
              }, t3.prototype.applyBlockAttribute = function() {
                var t4, n2, i2, o, r, s;
                for (i2 = 0, r = this.findRangesOfPieces(), s = [], t4 = 0, n2 = r.length; n2 > t4; t4++)
                  o = r[t4], o[1] - o[0] > 1 && (o[0] += i2, o[1] += i2, "\n" !== this.document.getCharacterAtPosition(o[1]) && (this.document = this.document.insertBlockBreakAtRange(o[1]), o[1] < this.selectedRange[1] && this.moveSelectedRangeForward(), o[1]++, i2++), 0 !== o[0] && "\n" !== this.document.getCharacterAtPosition(o[0] - 1) && (this.document = this.document.insertBlockBreakAtRange(o[0]), o[0] < this.selectedRange[0] && this.moveSelectedRangeForward(), o[0]++, i2++), s.push(this.document = this.document.applyBlockAttributeAtRange(e2, true, o)));
                return s;
              }, t3.prototype.findRangesOfBlocks = function() {
                return this.document.findRangesForBlockAttribute(e2);
              }, t3.prototype.findRangesOfPieces = function() {
                return this.document.findRangesForTextAttribute(n, { withValue: i });
              }, t3.prototype.moveSelectedRangeForward = function() {
                return this.selectedRange[0] += 1, this.selectedRange[1] += 1;
              }, t3;
            }();
          }.call(this), function() {
            var t2 = function(t3, e2) {
              return function() {
                return t3.apply(e2, arguments);
              };
            };
            e.Editor = function() {
              function n(n2, o, r) {
                this.composition = n2, this.selectionManager = o, this.element = r, this.insertFiles = t2(this.insertFiles, this), this.undoManager = new e.UndoManager(this.composition), this.filters = i.slice(0);
              }
              var i;
              return i = [e.attachmentGalleryFilter], n.prototype.loadDocument = function(t3) {
                return this.loadSnapshot({ document: t3, selectedRange: [0, 0] });
              }, n.prototype.loadHTML = function(t3) {
                return null == t3 && (t3 = ""), this.loadDocument(e.Document.fromHTML(t3, { referenceElement: this.element }));
              }, n.prototype.loadJSON = function(t3) {
                var n2, i2;
                return n2 = t3.document, i2 = t3.selectedRange, n2 = e.Document.fromJSON(n2), this.loadSnapshot({ document: n2, selectedRange: i2 });
              }, n.prototype.loadSnapshot = function(t3) {
                return this.undoManager = new e.UndoManager(this.composition), this.composition.loadSnapshot(t3);
              }, n.prototype.getDocument = function() {
                return this.composition.document;
              }, n.prototype.getSelectedDocument = function() {
                return this.composition.getSelectedDocument();
              }, n.prototype.getSnapshot = function() {
                return this.composition.getSnapshot();
              }, n.prototype.toJSON = function() {
                return this.getSnapshot();
              }, n.prototype.deleteInDirection = function(t3) {
                return this.composition.deleteInDirection(t3);
              }, n.prototype.insertAttachment = function(t3) {
                return this.composition.insertAttachment(t3);
              }, n.prototype.insertAttachments = function(t3) {
                return this.composition.insertAttachments(t3);
              }, n.prototype.insertDocument = function(t3) {
                return this.composition.insertDocument(t3);
              }, n.prototype.insertFile = function(t3) {
                return this.composition.insertFile(t3);
              }, n.prototype.insertFiles = function(t3) {
                return this.composition.insertFiles(t3);
              }, n.prototype.insertHTML = function(t3) {
                return this.composition.insertHTML(t3);
              }, n.prototype.insertString = function(t3) {
                return this.composition.insertString(t3);
              }, n.prototype.insertText = function(t3) {
                return this.composition.insertText(t3);
              }, n.prototype.insertLineBreak = function() {
                return this.composition.insertLineBreak();
              }, n.prototype.getSelectedRange = function() {
                return this.composition.getSelectedRange();
              }, n.prototype.getPosition = function() {
                return this.composition.getPosition();
              }, n.prototype.getClientRectAtPosition = function(t3) {
                var e2;
                return e2 = this.getDocument().locationRangeFromRange([t3, t3 + 1]), this.selectionManager.getClientRectAtLocationRange(e2);
              }, n.prototype.expandSelectionInDirection = function(t3) {
                return this.composition.expandSelectionInDirection(t3);
              }, n.prototype.moveCursorInDirection = function(t3) {
                return this.composition.moveCursorInDirection(t3);
              }, n.prototype.setSelectedRange = function(t3) {
                return this.composition.setSelectedRange(t3);
              }, n.prototype.activateAttribute = function(t3, e2) {
                return null == e2 && (e2 = true), this.composition.setCurrentAttribute(t3, e2);
              }, n.prototype.attributeIsActive = function(t3) {
                return this.composition.hasCurrentAttribute(t3);
              }, n.prototype.canActivateAttribute = function(t3) {
                return this.composition.canSetCurrentAttribute(t3);
              }, n.prototype.deactivateAttribute = function(t3) {
                return this.composition.removeCurrentAttribute(t3);
              }, n.prototype.canDecreaseNestingLevel = function() {
                return this.composition.canDecreaseNestingLevel();
              }, n.prototype.canIncreaseNestingLevel = function() {
                return this.composition.canIncreaseNestingLevel();
              }, n.prototype.decreaseNestingLevel = function() {
                return this.canDecreaseNestingLevel() ? this.composition.decreaseNestingLevel() : void 0;
              }, n.prototype.increaseNestingLevel = function() {
                return this.canIncreaseNestingLevel() ? this.composition.increaseNestingLevel() : void 0;
              }, n.prototype.canRedo = function() {
                return this.undoManager.canRedo();
              }, n.prototype.canUndo = function() {
                return this.undoManager.canUndo();
              }, n.prototype.recordUndoEntry = function(t3, e2) {
                var n2, i2, o;
                return o = null != e2 ? e2 : {}, i2 = o.context, n2 = o.consolidatable, this.undoManager.recordUndoEntry(t3, { context: i2, consolidatable: n2 });
              }, n.prototype.redo = function() {
                return this.canRedo() ? this.undoManager.redo() : void 0;
              }, n.prototype.undo = function() {
                return this.canUndo() ? this.undoManager.undo() : void 0;
              }, n;
            }();
          }.call(this), function() {
            var t2 = function(t3, e2) {
              function i() {
                this.constructor = t3;
              }
              for (var o in e2)
                n.call(e2, o) && (t3[o] = e2[o]);
              return i.prototype = e2.prototype, t3.prototype = new i(), t3.__super__ = e2.prototype, t3;
            }, n = {}.hasOwnProperty;
            e.ManagedAttachment = function(e2) {
              function n2(t3, e3) {
                var n3;
                this.attachmentManager = t3, this.attachment = e3, n3 = this.attachment, this.id = n3.id, this.file = n3.file;
              }
              return t2(n2, e2), n2.prototype.remove = function() {
                return this.attachmentManager.requestRemovalOfAttachment(this.attachment);
              }, n2.proxyMethod("attachment.getAttribute"), n2.proxyMethod("attachment.hasAttribute"), n2.proxyMethod("attachment.setAttribute"), n2.proxyMethod("attachment.getAttributes"), n2.proxyMethod("attachment.setAttributes"), n2.proxyMethod("attachment.isPending"), n2.proxyMethod("attachment.isPreviewable"), n2.proxyMethod("attachment.getURL"), n2.proxyMethod("attachment.getHref"), n2.proxyMethod("attachment.getFilename"), n2.proxyMethod("attachment.getFilesize"), n2.proxyMethod("attachment.getFormattedFilesize"), n2.proxyMethod("attachment.getExtension"), n2.proxyMethod("attachment.getContentType"), n2.proxyMethod("attachment.getFile"), n2.proxyMethod("attachment.setFile"), n2.proxyMethod("attachment.releaseFile"), n2.proxyMethod("attachment.getUploadProgress"), n2.proxyMethod("attachment.setUploadProgress"), n2;
            }(e.BasicObject);
          }.call(this), function() {
            var t2 = function(t3, e2) {
              function i() {
                this.constructor = t3;
              }
              for (var o in e2)
                n.call(e2, o) && (t3[o] = e2[o]);
              return i.prototype = e2.prototype, t3.prototype = new i(), t3.__super__ = e2.prototype, t3;
            }, n = {}.hasOwnProperty;
            e.AttachmentManager = function(n2) {
              function i(t3) {
                var e2, n3, i2;
                for (null == t3 && (t3 = []), this.managedAttachments = {}, n3 = 0, i2 = t3.length; i2 > n3; n3++)
                  e2 = t3[n3], this.manageAttachment(e2);
              }
              return t2(i, n2), i.prototype.getAttachments = function() {
                var t3, e2, n3, i2;
                n3 = this.managedAttachments, i2 = [];
                for (e2 in n3)
                  t3 = n3[e2], i2.push(t3);
                return i2;
              }, i.prototype.manageAttachment = function(t3) {
                var n3, i2;
                return null != (n3 = this.managedAttachments)[i2 = t3.id] ? n3[i2] : n3[i2] = new e.ManagedAttachment(this, t3);
              }, i.prototype.attachmentIsManaged = function(t3) {
                return t3.id in this.managedAttachments;
              }, i.prototype.requestRemovalOfAttachment = function(t3) {
                var e2;
                return this.attachmentIsManaged(t3) && null != (e2 = this.delegate) && "function" == typeof e2.attachmentManagerDidRequestRemovalOfAttachment ? e2.attachmentManagerDidRequestRemovalOfAttachment(t3) : void 0;
              }, i.prototype.unmanageAttachment = function(t3) {
                var e2;
                return e2 = this.managedAttachments[t3.id], delete this.managedAttachments[t3.id], e2;
              }, i;
            }(e.BasicObject);
          }.call(this), function() {
            var t2, n, i, o, r, s, a, u, c, l, h;
            t2 = e.elementContainsNode, n = e.findChildIndexOfNode, r = e.nodeIsBlockStart, s = e.nodeIsBlockStartComment, o = e.nodeIsBlockContainer, a = e.nodeIsCursorTarget, u = e.nodeIsEmptyTextNode, c = e.nodeIsTextNode, i = e.nodeIsAttachmentElement, l = e.tagName, h = e.walkTree, e.LocationMapper = function() {
              function e2(t3) {
                this.element = t3;
              }
              var p, d, f, g;
              return e2.prototype.findLocationFromContainerAndOffset = function(e3, i2, o2) {
                var s2, u2, l2, p2, g2, m, v;
                for (m = (null != o2 ? o2 : { strict: true }).strict, u2 = 0, l2 = false, p2 = { index: 0, offset: 0 }, (s2 = this.findAttachmentElementParentForNode(e3)) && (e3 = s2.parentNode, i2 = n(s2)), v = h(this.element, { usingFilter: f }); v.nextNode(); ) {
                  if (g2 = v.currentNode, g2 === e3 && c(e3)) {
                    a(g2) || (p2.offset += i2);
                    break;
                  }
                  if (g2.parentNode === e3) {
                    if (u2++ === i2)
                      break;
                  } else if (!t2(e3, g2) && u2 > 0)
                    break;
                  r(g2, { strict: m }) ? (l2 && p2.index++, p2.offset = 0, l2 = true) : p2.offset += d(g2);
                }
                return p2;
              }, e2.prototype.findContainerAndOffsetFromLocation = function(t3) {
                var e3, i2, s2, u2, l2;
                if (0 === t3.index && 0 === t3.offset) {
                  for (e3 = this.element, u2 = 0; e3.firstChild; )
                    if (e3 = e3.firstChild, o(e3)) {
                      u2 = 1;
                      break;
                    }
                  return [e3, u2];
                }
                if (l2 = this.findNodeAndOffsetFromLocation(t3), i2 = l2[0], s2 = l2[1], i2) {
                  if (c(i2))
                    0 === d(i2) ? (e3 = i2.parentNode.parentNode, u2 = n(i2.parentNode), a(i2, { name: "right" }) && u2++) : (e3 = i2, u2 = t3.offset - s2);
                  else {
                    if (e3 = i2.parentNode, !r(i2.previousSibling) && !o(e3))
                      for (; i2 === e3.lastChild && (i2 = e3, e3 = e3.parentNode, !o(e3)); )
                        ;
                    u2 = n(i2), 0 !== t3.offset && u2++;
                  }
                  return [e3, u2];
                }
              }, e2.prototype.findNodeAndOffsetFromLocation = function(t3) {
                var e3, n2, i2, o2, r2, s2, u2, l2;
                for (u2 = 0, l2 = this.getSignificantNodesForIndex(t3.index), n2 = 0, i2 = l2.length; i2 > n2; n2++) {
                  if (e3 = l2[n2], o2 = d(e3), t3.offset <= u2 + o2)
                    if (c(e3)) {
                      if (r2 = e3, s2 = u2, t3.offset === s2 && a(r2))
                        break;
                    } else
                      r2 || (r2 = e3, s2 = u2);
                  if (u2 += o2, u2 > t3.offset)
                    break;
                }
                return [r2, s2];
              }, e2.prototype.findAttachmentElementParentForNode = function(t3) {
                for (; t3 && t3 !== this.element; ) {
                  if (i(t3))
                    return t3;
                  t3 = t3.parentNode;
                }
              }, e2.prototype.getSignificantNodesForIndex = function(t3) {
                var e3, n2, i2, o2, r2;
                for (i2 = [], r2 = h(this.element, { usingFilter: p }), o2 = false; r2.nextNode(); )
                  if (n2 = r2.currentNode, s(n2)) {
                    if ("undefined" != typeof e3 && null !== e3 ? e3++ : e3 = 0, e3 === t3)
                      o2 = true;
                    else if (o2)
                      break;
                  } else
                    o2 && i2.push(n2);
                return i2;
              }, d = function(t3) {
                var e3;
                return t3.nodeType === Node.TEXT_NODE ? a(t3) ? 0 : (e3 = t3.textContent, e3.length) : "br" === l(t3) || i(t3) ? 1 : 0;
              }, p = function(t3) {
                return g(t3) === NodeFilter.FILTER_ACCEPT ? f(t3) : NodeFilter.FILTER_REJECT;
              }, g = function(t3) {
                return u(t3) ? NodeFilter.FILTER_REJECT : NodeFilter.FILTER_ACCEPT;
              }, f = function(t3) {
                return i(t3.parentNode) ? NodeFilter.FILTER_REJECT : NodeFilter.FILTER_ACCEPT;
              }, e2;
            }();
          }.call(this), function() {
            var t2, n, i = [].slice;
            t2 = e.getDOMRange, n = e.setDOMRange, e.PointMapper = function() {
              function e2() {
              }
              return e2.prototype.createDOMRangeFromPoint = function(e3) {
                var i2, o, r, s, a, u, c, l;
                if (c = e3.x, l = e3.y, document.caretPositionFromPoint)
                  return a = document.caretPositionFromPoint(c, l), r = a.offsetNode, o = a.offset, i2 = document.createRange(), i2.setStart(r, o), i2;
                if (document.caretRangeFromPoint)
                  return document.caretRangeFromPoint(c, l);
                if (document.body.createTextRange) {
                  s = t2();
                  try {
                    u = document.body.createTextRange(), u.moveToPoint(c, l), u.select();
                  } catch (h) {
                  }
                  return i2 = t2(), n(s), i2;
                }
              }, e2.prototype.getClientRectsForDOMRange = function(t3) {
                var e3, n2, o;
                return n2 = i.call(t3.getClientRects()), o = n2[0], e3 = n2[n2.length - 1], [o, e3];
              }, e2;
            }();
          }.call(this), function() {
            var t2, n = function(t3, e2) {
              return function() {
                return t3.apply(e2, arguments);
              };
            }, i = function(t3, e2) {
              function n2() {
                this.constructor = t3;
              }
              for (var i2 in e2)
                o.call(e2, i2) && (t3[i2] = e2[i2]);
              return n2.prototype = e2.prototype, t3.prototype = new n2(), t3.__super__ = e2.prototype, t3;
            }, o = {}.hasOwnProperty, r = [].indexOf || function(t3) {
              for (var e2 = 0, n2 = this.length; n2 > e2; e2++)
                if (e2 in this && this[e2] === t3)
                  return e2;
              return -1;
            };
            t2 = e.getDOMRange, e.SelectionChangeObserver = function(e2) {
              function o2() {
                this.run = n(this.run, this), this.update = n(this.update, this), this.selectionManagers = [];
              }
              var s;
              return i(o2, e2), o2.prototype.start = function() {
                return this.started ? void 0 : (this.started = true, "onselectionchange" in document ? document.addEventListener("selectionchange", this.update, true) : this.run());
              }, o2.prototype.stop = function() {
                return this.started ? (this.started = false, document.removeEventListener("selectionchange", this.update, true)) : void 0;
              }, o2.prototype.registerSelectionManager = function(t3) {
                return r.call(this.selectionManagers, t3) < 0 ? (this.selectionManagers.push(t3), this.start()) : void 0;
              }, o2.prototype.unregisterSelectionManager = function(t3) {
                var e3;
                return this.selectionManagers = function() {
                  var n2, i2, o3, r2;
                  for (o3 = this.selectionManagers, r2 = [], n2 = 0, i2 = o3.length; i2 > n2; n2++)
                    e3 = o3[n2], e3 !== t3 && r2.push(e3);
                  return r2;
                }.call(this), 0 === this.selectionManagers.length ? this.stop() : void 0;
              }, o2.prototype.notifySelectionManagersOfSelectionChange = function() {
                var t3, e3, n2, i2, o3;
                for (n2 = this.selectionManagers, i2 = [], t3 = 0, e3 = n2.length; e3 > t3; t3++)
                  o3 = n2[t3], i2.push(o3.selectionDidChange());
                return i2;
              }, o2.prototype.update = function() {
                var e3;
                return e3 = t2(), s(e3, this.domRange) ? void 0 : (this.domRange = e3, this.notifySelectionManagersOfSelectionChange());
              }, o2.prototype.reset = function() {
                return this.domRange = null, this.update();
              }, o2.prototype.run = function() {
                return this.started ? (this.update(), requestAnimationFrame(this.run)) : void 0;
              }, s = function(t3, e3) {
                return (null != t3 ? t3.startContainer : void 0) === (null != e3 ? e3.startContainer : void 0) && (null != t3 ? t3.startOffset : void 0) === (null != e3 ? e3.startOffset : void 0) && (null != t3 ? t3.endContainer : void 0) === (null != e3 ? e3.endContainer : void 0) && (null != t3 ? t3.endOffset : void 0) === (null != e3 ? e3.endOffset : void 0);
              }, o2;
            }(e.BasicObject), null == e.selectionChangeObserver && (e.selectionChangeObserver = new e.SelectionChangeObserver());
          }.call(this), function() {
            var t2, n, i, o, r, s, a, u, c, l, h = function(t3, e2) {
              return function() {
                return t3.apply(e2, arguments);
              };
            }, p = function(t3, e2) {
              function n2() {
                this.constructor = t3;
              }
              for (var i2 in e2)
                d.call(e2, i2) && (t3[i2] = e2[i2]);
              return n2.prototype = e2.prototype, t3.prototype = new n2(), t3.__super__ = e2.prototype, t3;
            }, d = {}.hasOwnProperty;
            i = e.getDOMSelection, n = e.getDOMRange, l = e.setDOMRange, t2 = e.elementContainsNode, s = e.nodeIsCursorTarget, r = e.innerElementIsActive, o = e.handleEvent, a = e.normalizeRange, u = e.rangeIsCollapsed, c = e.rangesAreEqual, e.SelectionManager = function(d2) {
              function f(t3) {
                this.element = t3, this.selectionDidChange = h(this.selectionDidChange, this), this.didMouseDown = h(this.didMouseDown, this), this.locationMapper = new e.LocationMapper(this.element), this.pointMapper = new e.PointMapper(), this.lockCount = 0, o("mousedown", { onElement: this.element, withCallback: this.didMouseDown });
              }
              return p(f, d2), f.prototype.getLocationRange = function(t3) {
                var e2, i2;
                return null == t3 && (t3 = {}), e2 = t3.strict === false ? this.createLocationRangeFromDOMRange(n(), { strict: false }) : t3.ignoreLock ? this.currentLocationRange : null != (i2 = this.lockedLocationRange) ? i2 : this.currentLocationRange;
              }, f.prototype.setLocationRange = function(t3) {
                var e2;
                if (!this.lockedLocationRange)
                  return t3 = a(t3), (e2 = this.createDOMRangeFromLocationRange(t3)) ? (l(e2), this.updateCurrentLocationRange(t3)) : void 0;
              }, f.prototype.setLocationRangeFromPointRange = function(t3) {
                var e2, n2;
                return t3 = a(t3), n2 = this.getLocationAtPoint(t3[0]), e2 = this.getLocationAtPoint(t3[1]), this.setLocationRange([n2, e2]);
              }, f.prototype.getClientRectAtLocationRange = function(t3) {
                var e2;
                return (e2 = this.createDOMRangeFromLocationRange(t3)) ? this.getClientRectsForDOMRange(e2)[1] : void 0;
              }, f.prototype.locationIsCursorTarget = function(t3) {
                var e2, n2, i2;
                return i2 = this.findNodeAndOffsetFromLocation(t3), e2 = i2[0], n2 = i2[1], s(e2);
              }, f.prototype.lock = function() {
                return 0 === this.lockCount++ ? (this.updateCurrentLocationRange(), this.lockedLocationRange = this.getLocationRange()) : void 0;
              }, f.prototype.unlock = function() {
                var t3;
                return 0 === --this.lockCount && (t3 = this.lockedLocationRange, this.lockedLocationRange = null, null != t3) ? this.setLocationRange(t3) : void 0;
              }, f.prototype.clearSelection = function() {
                var t3;
                return null != (t3 = i()) ? t3.removeAllRanges() : void 0;
              }, f.prototype.selectionIsCollapsed = function() {
                var t3;
                return (null != (t3 = n()) ? t3.collapsed : void 0) === true;
              }, f.prototype.selectionIsExpanded = function() {
                return !this.selectionIsCollapsed();
              }, f.prototype.createLocationRangeFromDOMRange = function(t3, e2) {
                var n2, i2;
                if (null != t3 && this.domRangeWithinElement(t3) && (i2 = this.findLocationFromContainerAndOffset(t3.startContainer, t3.startOffset, e2)))
                  return t3.collapsed || (n2 = this.findLocationFromContainerAndOffset(t3.endContainer, t3.endOffset, e2)), a([i2, n2]);
              }, f.proxyMethod("locationMapper.findLocationFromContainerAndOffset"), f.proxyMethod("locationMapper.findContainerAndOffsetFromLocation"), f.proxyMethod("locationMapper.findNodeAndOffsetFromLocation"), f.proxyMethod("pointMapper.createDOMRangeFromPoint"), f.proxyMethod("pointMapper.getClientRectsForDOMRange"), f.prototype.didMouseDown = function() {
                return this.pauseTemporarily();
              }, f.prototype.pauseTemporarily = function() {
                var e2, n2, i2, r2;
                return this.paused = true, n2 = /* @__PURE__ */ function(e3) {
                  return function() {
                    var n3, o2, s2;
                    for (e3.paused = false, clearTimeout(r2), o2 = 0, s2 = i2.length; s2 > o2; o2++)
                      n3 = i2[o2], n3.destroy();
                    return t2(document, e3.element) ? e3.selectionDidChange() : void 0;
                  };
                }(this), r2 = setTimeout(n2, 200), i2 = function() {
                  var t3, i3, r3, s2;
                  for (r3 = ["mousemove", "keydown"], s2 = [], t3 = 0, i3 = r3.length; i3 > t3; t3++)
                    e2 = r3[t3], s2.push(o(e2, { onElement: document, withCallback: n2 }));
                  return s2;
                }();
              }, f.prototype.selectionDidChange = function() {
                return this.paused || r(this.element) ? void 0 : this.updateCurrentLocationRange();
              }, f.prototype.updateCurrentLocationRange = function(t3) {
                var e2;
                return (null != t3 ? t3 : t3 = this.createLocationRangeFromDOMRange(n())) && !c(t3, this.currentLocationRange) ? (this.currentLocationRange = t3, null != (e2 = this.delegate) && "function" == typeof e2.locationRangeDidChange ? e2.locationRangeDidChange(this.currentLocationRange.slice(0)) : void 0) : void 0;
              }, f.prototype.createDOMRangeFromLocationRange = function(t3) {
                var e2, n2, i2, o2;
                return i2 = this.findContainerAndOffsetFromLocation(t3[0]), n2 = u(t3) ? i2 : null != (o2 = this.findContainerAndOffsetFromLocation(t3[1])) ? o2 : i2, null != i2 && null != n2 ? (e2 = document.createRange(), e2.setStart.apply(e2, i2), e2.setEnd.apply(e2, n2), e2) : void 0;
              }, f.prototype.getLocationAtPoint = function(t3) {
                var e2, n2;
                return (e2 = this.createDOMRangeFromPoint(t3)) && null != (n2 = this.createLocationRangeFromDOMRange(e2)) ? n2[0] : void 0;
              }, f.prototype.domRangeWithinElement = function(e2) {
                return e2.collapsed ? t2(this.element, e2.startContainer) : t2(this.element, e2.startContainer) && t2(this.element, e2.endContainer);
              }, f;
            }(e.BasicObject);
          }.call(this), function() {
            var t2, n, i, o, r = function(t3, e2) {
              function n2() {
                this.constructor = t3;
              }
              for (var i2 in e2)
                s.call(e2, i2) && (t3[i2] = e2[i2]);
              return n2.prototype = e2.prototype, t3.prototype = new n2(), t3.__super__ = e2.prototype, t3;
            }, s = {}.hasOwnProperty, a = [].slice;
            i = e.rangeIsCollapsed, o = e.rangesAreEqual, n = e.objectsAreEqual, t2 = e.getBlockConfig, e.EditorController = function(s2) {
              function u(t3) {
                var n2, i2;
                this.editorElement = t3.editorElement, n2 = t3.document, i2 = t3.html, this.selectionManager = new e.SelectionManager(this.editorElement), this.selectionManager.delegate = this, this.composition = new e.Composition(), this.composition.delegate = this, this.attachmentManager = new e.AttachmentManager(this.composition.getAttachments()), this.attachmentManager.delegate = this, this.inputController = new e["Level" + e.config.input.getLevel() + "InputController"](this.editorElement), this.inputController.delegate = this, this.inputController.responder = this.composition, this.compositionController = new e.CompositionController(this.editorElement, this.composition), this.compositionController.delegate = this, this.toolbarController = new e.ToolbarController(this.editorElement.toolbarElement), this.toolbarController.delegate = this, this.editor = new e.Editor(this.composition, this.selectionManager, this.editorElement), null != n2 ? this.editor.loadDocument(n2) : this.editor.loadHTML(i2);
              }
              var c;
              return r(u, s2), u.prototype.registerSelectionManager = function() {
                return e.selectionChangeObserver.registerSelectionManager(this.selectionManager);
              }, u.prototype.unregisterSelectionManager = function() {
                return e.selectionChangeObserver.unregisterSelectionManager(this.selectionManager);
              }, u.prototype.render = function() {
                return this.compositionController.render();
              }, u.prototype.reparse = function() {
                return this.composition.replaceHTML(this.editorElement.innerHTML);
              }, u.prototype.compositionDidChangeDocument = function() {
                return this.notifyEditorElement("document-change"), this.handlingInput ? void 0 : this.render();
              }, u.prototype.compositionDidChangeCurrentAttributes = function(t3) {
                return this.currentAttributes = t3, this.toolbarController.updateAttributes(this.currentAttributes), this.updateCurrentActions(), this.notifyEditorElement("attributes-change", { attributes: this.currentAttributes });
              }, u.prototype.compositionDidPerformInsertionAtRange = function(t3) {
                return this.pasting ? this.pastedRange = t3 : void 0;
              }, u.prototype.compositionShouldAcceptFile = function(t3) {
                return this.notifyEditorElement("file-accept", { file: t3 });
              }, u.prototype.compositionDidAddAttachment = function(t3) {
                var e2;
                return e2 = this.attachmentManager.manageAttachment(t3), this.notifyEditorElement("attachment-add", { attachment: e2 });
              }, u.prototype.compositionDidEditAttachment = function(t3) {
                var e2;
                return this.compositionController.rerenderViewForObject(t3), e2 = this.attachmentManager.manageAttachment(t3), this.notifyEditorElement("attachment-edit", { attachment: e2 }), this.notifyEditorElement("change");
              }, u.prototype.compositionDidChangeAttachmentPreviewURL = function(t3) {
                return this.compositionController.invalidateViewForObject(t3), this.notifyEditorElement("change");
              }, u.prototype.compositionDidRemoveAttachment = function(t3) {
                var e2;
                return e2 = this.attachmentManager.unmanageAttachment(t3), this.notifyEditorElement("attachment-remove", { attachment: e2 });
              }, u.prototype.compositionDidStartEditingAttachment = function(t3, e2) {
                return this.attachmentLocationRange = this.composition.document.getLocationRangeOfAttachment(t3), this.compositionController.installAttachmentEditorForAttachment(t3, e2), this.selectionManager.setLocationRange(this.attachmentLocationRange);
              }, u.prototype.compositionDidStopEditingAttachment = function() {
                return this.compositionController.uninstallAttachmentEditor(), this.attachmentLocationRange = null;
              }, u.prototype.compositionDidRequestChangingSelectionToLocationRange = function(t3) {
                return !this.loadingSnapshot || this.isFocused() ? (this.requestedLocationRange = t3, this.compositionRevisionWhenLocationRangeRequested = this.composition.revision, this.handlingInput ? void 0 : this.render()) : void 0;
              }, u.prototype.compositionWillLoadSnapshot = function() {
                return this.loadingSnapshot = true;
              }, u.prototype.compositionDidLoadSnapshot = function() {
                return this.compositionController.refreshViewCache(), this.render(), this.loadingSnapshot = false;
              }, u.prototype.getSelectionManager = function() {
                return this.selectionManager;
              }, u.proxyMethod("getSelectionManager().setLocationRange"), u.proxyMethod("getSelectionManager().getLocationRange"), u.prototype.attachmentManagerDidRequestRemovalOfAttachment = function(t3) {
                return this.removeAttachment(t3);
              }, u.prototype.compositionControllerWillSyncDocumentView = function() {
                return this.inputController.editorWillSyncDocumentView(), this.selectionManager.lock(), this.selectionManager.clearSelection();
              }, u.prototype.compositionControllerDidSyncDocumentView = function() {
                return this.inputController.editorDidSyncDocumentView(), this.selectionManager.unlock(), this.updateCurrentActions(), this.notifyEditorElement("sync");
              }, u.prototype.compositionControllerDidRender = function() {
                return null != this.requestedLocationRange && (this.compositionRevisionWhenLocationRangeRequested === this.composition.revision && this.selectionManager.setLocationRange(this.requestedLocationRange), this.requestedLocationRange = null, this.compositionRevisionWhenLocationRangeRequested = null), this.renderedCompositionRevision !== this.composition.revision && (this.runEditorFilters(), this.composition.updateCurrentAttributes(), this.notifyEditorElement("render")), this.renderedCompositionRevision = this.composition.revision;
              }, u.prototype.compositionControllerDidFocus = function() {
                return this.isFocusedInvisibly() && this.setLocationRange({ index: 0, offset: 0 }), this.toolbarController.hideDialog(), this.notifyEditorElement("focus");
              }, u.prototype.compositionControllerDidBlur = function() {
                return this.notifyEditorElement("blur");
              }, u.prototype.compositionControllerDidSelectAttachment = function(t3, e2) {
                return this.toolbarController.hideDialog(), this.composition.editAttachment(t3, e2);
              }, u.prototype.compositionControllerDidRequestDeselectingAttachment = function(t3) {
                var e2, n2;
                return e2 = null != (n2 = this.attachmentLocationRange) ? n2 : this.composition.document.getLocationRangeOfAttachment(t3), this.selectionManager.setLocationRange(e2[1]);
              }, u.prototype.compositionControllerWillUpdateAttachment = function(t3) {
                return this.editor.recordUndoEntry("Edit Attachment", { context: t3.id, consolidatable: true });
              }, u.prototype.compositionControllerDidRequestRemovalOfAttachment = function(t3) {
                return this.removeAttachment(t3);
              }, u.prototype.inputControllerWillHandleInput = function() {
                return this.handlingInput = true, this.requestedRender = false;
              }, u.prototype.inputControllerDidRequestRender = function() {
                return this.requestedRender = true;
              }, u.prototype.inputControllerDidHandleInput = function() {
                return this.handlingInput = false, this.requestedRender ? (this.requestedRender = false, this.render()) : void 0;
              }, u.prototype.inputControllerDidAllowUnhandledInput = function() {
                return this.notifyEditorElement("change");
              }, u.prototype.inputControllerDidRequestReparse = function() {
                return this.reparse();
              }, u.prototype.inputControllerWillPerformTyping = function() {
                return this.recordTypingUndoEntry();
              }, u.prototype.inputControllerWillPerformFormatting = function(t3) {
                return this.recordFormattingUndoEntry(t3);
              }, u.prototype.inputControllerWillCutText = function() {
                return this.editor.recordUndoEntry("Cut");
              }, u.prototype.inputControllerWillPaste = function(t3) {
                return this.editor.recordUndoEntry("Paste"), this.pasting = true, this.notifyEditorElement("before-paste", { paste: t3 });
              }, u.prototype.inputControllerDidPaste = function(t3) {
                return t3.range = this.pastedRange, this.pastedRange = null, this.pasting = null, this.notifyEditorElement("paste", { paste: t3 });
              }, u.prototype.inputControllerWillMoveText = function() {
                return this.editor.recordUndoEntry("Move");
              }, u.prototype.inputControllerWillAttachFiles = function() {
                return this.editor.recordUndoEntry("Drop Files");
              }, u.prototype.inputControllerWillPerformUndo = function() {
                return this.editor.undo();
              }, u.prototype.inputControllerWillPerformRedo = function() {
                return this.editor.redo();
              }, u.prototype.inputControllerDidReceiveKeyboardCommand = function(t3) {
                return this.toolbarController.applyKeyboardCommand(t3);
              }, u.prototype.inputControllerDidStartDrag = function() {
                return this.locationRangeBeforeDrag = this.selectionManager.getLocationRange();
              }, u.prototype.inputControllerDidReceiveDragOverPoint = function(t3) {
                return this.selectionManager.setLocationRangeFromPointRange(t3);
              }, u.prototype.inputControllerDidCancelDrag = function() {
                return this.selectionManager.setLocationRange(this.locationRangeBeforeDrag), this.locationRangeBeforeDrag = null;
              }, u.prototype.locationRangeDidChange = function(t3) {
                return this.composition.updateCurrentAttributes(), this.updateCurrentActions(), this.attachmentLocationRange && !o(this.attachmentLocationRange, t3) && this.composition.stopEditingAttachment(), this.notifyEditorElement("selection-change");
              }, u.prototype.toolbarDidClickButton = function() {
                return this.getLocationRange() ? void 0 : this.setLocationRange({ index: 0, offset: 0 });
              }, u.prototype.toolbarDidInvokeAction = function(t3) {
                return this.invokeAction(t3);
              }, u.prototype.toolbarDidToggleAttribute = function(t3) {
                return this.recordFormattingUndoEntry(t3), this.composition.toggleCurrentAttribute(t3), this.render(), this.selectionFrozen ? void 0 : this.editorElement.focus();
              }, u.prototype.toolbarDidUpdateAttribute = function(t3, e2) {
                return this.recordFormattingUndoEntry(t3), this.composition.setCurrentAttribute(t3, e2), this.render(), this.selectionFrozen ? void 0 : this.editorElement.focus();
              }, u.prototype.toolbarDidRemoveAttribute = function(t3) {
                return this.recordFormattingUndoEntry(t3), this.composition.removeCurrentAttribute(t3), this.render(), this.selectionFrozen ? void 0 : this.editorElement.focus();
              }, u.prototype.toolbarWillShowDialog = function() {
                return this.composition.expandSelectionForEditing(), this.freezeSelection();
              }, u.prototype.toolbarDidShowDialog = function(t3) {
                return this.notifyEditorElement("toolbar-dialog-show", { dialogName: t3 });
              }, u.prototype.toolbarDidHideDialog = function(t3) {
                return this.thawSelection(), this.editorElement.focus(), this.notifyEditorElement("toolbar-dialog-hide", { dialogName: t3 });
              }, u.prototype.freezeSelection = function() {
                return this.selectionFrozen ? void 0 : (this.selectionManager.lock(), this.composition.freezeSelection(), this.selectionFrozen = true, this.render());
              }, u.prototype.thawSelection = function() {
                return this.selectionFrozen ? (this.composition.thawSelection(), this.selectionManager.unlock(), this.selectionFrozen = false, this.render()) : void 0;
              }, u.prototype.actions = { undo: { test: function() {
                return this.editor.canUndo();
              }, perform: function() {
                return this.editor.undo();
              } }, redo: { test: function() {
                return this.editor.canRedo();
              }, perform: function() {
                return this.editor.redo();
              } }, link: { test: function() {
                return this.editor.canActivateAttribute("href");
              } }, increaseNestingLevel: { test: function() {
                return this.editor.canIncreaseNestingLevel();
              }, perform: function() {
                return this.editor.increaseNestingLevel() && this.render();
              } }, decreaseNestingLevel: { test: function() {
                return this.editor.canDecreaseNestingLevel();
              }, perform: function() {
                return this.editor.decreaseNestingLevel() && this.render();
              } }, attachFiles: { test: function() {
                return true;
              }, perform: function() {
                return e.config.input.pickFiles(this.editor.insertFiles);
              } } }, u.prototype.canInvokeAction = function(t3) {
                var e2, n2;
                return this.actionIsExternal(t3) ? true : !!(null != (e2 = this.actions[t3]) && null != (n2 = e2.test) ? n2.call(this) : void 0);
              }, u.prototype.invokeAction = function(t3) {
                var e2, n2;
                return this.actionIsExternal(t3) ? this.notifyEditorElement("action-invoke", { actionName: t3 }) : null != (e2 = this.actions[t3]) && null != (n2 = e2.perform) ? n2.call(this) : void 0;
              }, u.prototype.actionIsExternal = function(t3) {
                return /^x-./.test(t3);
              }, u.prototype.getCurrentActions = function() {
                var t3, e2;
                e2 = {};
                for (t3 in this.actions)
                  e2[t3] = this.canInvokeAction(t3);
                return e2;
              }, u.prototype.updateCurrentActions = function() {
                var t3;
                return t3 = this.getCurrentActions(), n(t3, this.currentActions) ? void 0 : (this.currentActions = t3, this.toolbarController.updateActions(this.currentActions), this.notifyEditorElement("actions-change", { actions: this.currentActions }));
              }, u.prototype.runEditorFilters = function() {
                var t3, e2, n2, i2, o2, r2, s3, a2;
                for (a2 = this.composition.getSnapshot(), o2 = this.editor.filters, n2 = 0, i2 = o2.length; i2 > n2; n2++)
                  e2 = o2[n2], t3 = a2.document, s3 = a2.selectedRange, a2 = null != (r2 = e2.call(this.editor, a2)) ? r2 : {}, null == a2.document && (a2.document = t3), null == a2.selectedRange && (a2.selectedRange = s3);
                return c(a2, this.composition.getSnapshot()) ? void 0 : this.composition.loadSnapshot(a2);
              }, c = function(t3, e2) {
                return o(t3.selectedRange, e2.selectedRange) && t3.document.isEqualTo(e2.document);
              }, u.prototype.updateInputElement = function() {
                var t3, n2;
                return t3 = this.compositionController.getSerializableElement(), n2 = e.serializeToContentType(t3, "text/html"), this.editorElement.setInputElementValue(n2);
              }, u.prototype.notifyEditorElement = function(t3, e2) {
                switch (t3) {
                  case "document-change":
                    this.documentChangedSinceLastRender = true;
                    break;
                  case "render":
                    this.documentChangedSinceLastRender && (this.documentChangedSinceLastRender = false, this.notifyEditorElement("change"));
                    break;
                  case "change":
                  case "attachment-add":
                  case "attachment-edit":
                  case "attachment-remove":
                    this.updateInputElement();
                }
                return this.editorElement.notify(t3, e2);
              }, u.prototype.removeAttachment = function(t3) {
                return this.editor.recordUndoEntry("Delete Attachment"), this.composition.removeAttachment(t3), this.render();
              }, u.prototype.recordFormattingUndoEntry = function(e2) {
                var n2, o2;
                return n2 = t2(e2), o2 = this.selectionManager.getLocationRange(), n2 || !i(o2) ? this.editor.recordUndoEntry("Formatting", { context: this.getUndoContext(), consolidatable: true }) : void 0;
              }, u.prototype.recordTypingUndoEntry = function() {
                return this.editor.recordUndoEntry("Typing", { context: this.getUndoContext(this.currentAttributes), consolidatable: true });
              }, u.prototype.getUndoContext = function() {
                var t3;
                return t3 = 1 <= arguments.length ? a.call(arguments, 0) : [], [this.getLocationContext(), this.getTimeContext()].concat(a.call(t3));
              }, u.prototype.getLocationContext = function() {
                var t3;
                return t3 = this.selectionManager.getLocationRange(), i(t3) ? t3[0].index : t3;
              }, u.prototype.getTimeContext = function() {
                return e.config.undoInterval > 0 ? Math.floor((/* @__PURE__ */ new Date()).getTime() / e.config.undoInterval) : 0;
              }, u.prototype.isFocused = function() {
                var t3;
                return this.editorElement === (null != (t3 = this.editorElement.ownerDocument) ? t3.activeElement : void 0);
              }, u.prototype.isFocusedInvisibly = function() {
                return this.isFocused() && !this.getLocationRange();
              }, u;
            }(e.Controller);
          }.call(this), function() {
            var t2, n, i, o, r, s, a, u = [].indexOf || function(t3) {
              for (var e2 = 0, n2 = this.length; n2 > e2; e2++)
                if (e2 in this && this[e2] === t3)
                  return e2;
              return -1;
            };
            n = e.browser, s = e.makeElement, a = e.triggerEvent, o = e.handleEvent, r = e.handleEventOnce, i = e.findClosestElementFromNode, t2 = e.AttachmentView.attachmentSelector, e.registerElement("trix-editor", function() {
              var c, l, h, p, d, f, g, m, v;
              return g = 0, l = function(t3) {
                return !document.querySelector(":focus") && t3.hasAttribute("autofocus") && document.querySelector("[autofocus]") === t3 ? t3.focus() : void 0;
              }, m = function(t3) {
                return t3.hasAttribute("contenteditable") ? void 0 : (t3.setAttribute("contenteditable", ""), r("focus", { onElement: t3, withCallback: function() {
                  return h(t3);
                } }));
              }, h = function(t3) {
                return d(t3), v(t3);
              }, d = function(t3) {
                return ("function" == typeof document.queryCommandSupported ? document.queryCommandSupported("enableObjectResizing") : void 0) ? (document.execCommand("enableObjectResizing", false, false), o("mscontrolselect", { onElement: t3, preventDefault: true })) : void 0;
              }, v = function() {
                var t3;
                return ("function" == typeof document.queryCommandSupported ? document.queryCommandSupported("DefaultParagraphSeparator") : void 0) && (t3 = e.config.blockAttributes["default"].tagName, "div" === t3 || "p" === t3) ? document.execCommand("DefaultParagraphSeparator", false, t3) : void 0;
              }, c = function(t3) {
                return t3.hasAttribute("role") ? void 0 : t3.setAttribute("role", "textbox");
              }, f = function(t3) {
                var e2;
                if (!t3.hasAttribute("aria-label") && !t3.hasAttribute("aria-labelledby"))
                  return (e2 = function() {
                    var e3, n2, i2;
                    return i2 = function() {
                      var n3, i3, o2, r2;
                      for (o2 = t3.labels, r2 = [], n3 = 0, i3 = o2.length; i3 > n3; n3++)
                        e3 = o2[n3], e3.contains(t3) || r2.push(e3.textContent);
                      return r2;
                    }(), (n2 = i2.join(" ")) ? t3.setAttribute("aria-label", n2) : t3.removeAttribute("aria-label");
                  })(), o("focus", { onElement: t3, withCallback: e2 });
              }, p = function() {
                return n.forcesObjectResizing ? { display: "inline", width: "auto" } : { display: "inline-block", width: "1px" };
              }(), { defaultCSS: "%t {\n  display: block;\n}\n\n%t:empty:not(:focus)::before {\n  content: attr(placeholder);\n  color: graytext;\n  cursor: text;\n  pointer-events: none;\n}\n\n%t a[contenteditable=false] {\n  cursor: text;\n}\n\n%t img {\n  max-width: 100%;\n  height: auto;\n}\n\n%t " + t2 + " figcaption textarea {\n  resize: none;\n}\n\n%t " + t2 + " figcaption textarea.trix-autoresize-clone {\n  position: absolute;\n  left: -9999px;\n  max-height: 0px;\n}\n\n%t " + t2 + " figcaption[data-trix-placeholder]:empty::before {\n  content: attr(data-trix-placeholder);\n  color: graytext;\n}\n\n%t [data-trix-cursor-target] {\n  display: " + p.display + " !important;\n  width: " + p.width + " !important;\n  padding: 0 !important;\n  margin: 0 !important;\n  border: none !important;\n}\n\n%t [data-trix-cursor-target=left] {\n  vertical-align: top !important;\n  margin-left: -1px !important;\n}\n\n%t [data-trix-cursor-target=right] {\n  vertical-align: bottom !important;\n  margin-right: -1px !important;\n}", trixId: { get: function() {
                return this.hasAttribute("trix-id") ? this.getAttribute("trix-id") : (this.setAttribute("trix-id", ++g), this.trixId);
              } }, labels: { get: function() {
                var t3, e2, n2;
                return e2 = [], this.id && this.ownerDocument && e2.push.apply(e2, this.ownerDocument.querySelectorAll("label[for='" + this.id + "']")), (t3 = i(this, { matchingSelector: "label" })) && ((n2 = t3.control) === this || null === n2) && e2.push(t3), e2;
              } }, toolbarElement: { get: function() {
                var t3, e2, n2;
                return this.hasAttribute("toolbar") ? null != (e2 = this.ownerDocument) ? e2.getElementById(this.getAttribute("toolbar")) : void 0 : this.parentNode ? (n2 = "trix-toolbar-" + this.trixId, this.setAttribute("toolbar", n2), t3 = s("trix-toolbar", { id: n2 }), this.parentNode.insertBefore(t3, this), t3) : void 0;
              } }, inputElement: { get: function() {
                var t3, e2, n2;
                return this.hasAttribute("input") ? null != (n2 = this.ownerDocument) ? n2.getElementById(this.getAttribute("input")) : void 0 : this.parentNode ? (e2 = "trix-input-" + this.trixId, this.setAttribute("input", e2), t3 = s("input", { type: "hidden", id: e2 }), this.parentNode.insertBefore(t3, this.nextElementSibling), t3) : void 0;
              } }, editor: { get: function() {
                var t3;
                return null != (t3 = this.editorController) ? t3.editor : void 0;
              } }, name: { get: function() {
                var t3;
                return null != (t3 = this.inputElement) ? t3.name : void 0;
              } }, value: { get: function() {
                var t3;
                return null != (t3 = this.inputElement) ? t3.value : void 0;
              }, set: function(t3) {
                var e2;
                return this.defaultValue = t3, null != (e2 = this.editor) ? e2.loadHTML(this.defaultValue) : void 0;
              } }, notify: function(t3, e2) {
                return this.editorController ? a("trix-" + t3, { onElement: this, attributes: e2 }) : void 0;
              }, setInputElementValue: function(t3) {
                var e2;
                return null != (e2 = this.inputElement) ? e2.value = t3 : void 0;
              }, initialize: function() {
                return this.hasAttribute("data-trix-internal") ? void 0 : (m(this), c(this), f(this));
              }, connect: function() {
                return this.hasAttribute("data-trix-internal") ? void 0 : (this.editorController || (a("trix-before-initialize", { onElement: this }), this.editorController = new e.EditorController({ editorElement: this, html: this.defaultValue = this.value }), requestAnimationFrame(/* @__PURE__ */ function(t3) {
                  return function() {
                    return a("trix-initialize", { onElement: t3 });
                  };
                }(this))), this.editorController.registerSelectionManager(), this.registerResetListener(), this.registerClickListener(), l(this));
              }, disconnect: function() {
                var t3;
                return null != (t3 = this.editorController) && t3.unregisterSelectionManager(), this.unregisterResetListener(), this.unregisterClickListener();
              }, registerResetListener: function() {
                return this.resetListener = this.resetBubbled.bind(this), window.addEventListener("reset", this.resetListener, false);
              }, unregisterResetListener: function() {
                return window.removeEventListener("reset", this.resetListener, false);
              }, registerClickListener: function() {
                return this.clickListener = this.clickBubbled.bind(this), window.addEventListener("click", this.clickListener, false);
              }, unregisterClickListener: function() {
                return window.removeEventListener("click", this.clickListener, false);
              }, resetBubbled: function(t3) {
                var e2;
                if (!t3.defaultPrevented && t3.target === (null != (e2 = this.inputElement) ? e2.form : void 0))
                  return this.reset();
              }, clickBubbled: function(t3) {
                var e2;
                if (!(t3.defaultPrevented || this.contains(t3.target) || !(e2 = i(t3.target, { matchingSelector: "label" })) || u.call(this.labels, e2) < 0))
                  return this.focus();
              }, reset: function() {
                return this.value = this.defaultValue;
              } };
            }());
          }.call(this), function() {
          }.call(this);
        }).call(this), "object" == typeof module && module.exports ? module.exports = e : "function" == typeof define && define.amd && define(e);
      }.call(exports);
    }
  });

  // node_modules/popper.js/dist/umd/popper.js
  var require_popper = __commonJS({
    "node_modules/popper.js/dist/umd/popper.js"(exports, module) {
      (function(global2, factory) {
        typeof exports === "object" && typeof module !== "undefined" ? module.exports = factory() : typeof define === "function" && define.amd ? define(factory) : global2.Popper = factory();
      })(exports, function() {
        "use strict";
        var isBrowser = typeof window !== "undefined" && typeof document !== "undefined" && typeof navigator !== "undefined";
        var timeoutDuration = function() {
          var longerTimeoutBrowsers = ["Edge", "Trident", "Firefox"];
          for (var i = 0; i < longerTimeoutBrowsers.length; i += 1) {
            if (isBrowser && navigator.userAgent.indexOf(longerTimeoutBrowsers[i]) >= 0) {
              return 1;
            }
          }
          return 0;
        }();
        function microtaskDebounce(fn) {
          var called = false;
          return function() {
            if (called) {
              return;
            }
            called = true;
            window.Promise.resolve().then(function() {
              called = false;
              fn();
            });
          };
        }
        function taskDebounce(fn) {
          var scheduled = false;
          return function() {
            if (!scheduled) {
              scheduled = true;
              setTimeout(function() {
                scheduled = false;
                fn();
              }, timeoutDuration);
            }
          };
        }
        var supportsMicroTasks = isBrowser && window.Promise;
        var debounce = supportsMicroTasks ? microtaskDebounce : taskDebounce;
        function isFunction(functionToCheck) {
          var getType = {};
          return functionToCheck && getType.toString.call(functionToCheck) === "[object Function]";
        }
        function getStyleComputedProperty(element, property) {
          if (element.nodeType !== 1) {
            return [];
          }
          var window2 = element.ownerDocument.defaultView;
          var css = window2.getComputedStyle(element, null);
          return property ? css[property] : css;
        }
        function getParentNode(element) {
          if (element.nodeName === "HTML") {
            return element;
          }
          return element.parentNode || element.host;
        }
        function getScrollParent(element) {
          if (!element) {
            return document.body;
          }
          switch (element.nodeName) {
            case "HTML":
            case "BODY":
              return element.ownerDocument.body;
            case "#document":
              return element.body;
          }
          var _getStyleComputedProp = getStyleComputedProperty(element), overflow = _getStyleComputedProp.overflow, overflowX = _getStyleComputedProp.overflowX, overflowY = _getStyleComputedProp.overflowY;
          if (/(auto|scroll|overlay)/.test(overflow + overflowY + overflowX)) {
            return element;
          }
          return getScrollParent(getParentNode(element));
        }
        function getReferenceNode(reference) {
          return reference && reference.referenceNode ? reference.referenceNode : reference;
        }
        var isIE11 = isBrowser && !!(window.MSInputMethodContext && document.documentMode);
        var isIE10 = isBrowser && /MSIE 10/.test(navigator.userAgent);
        function isIE(version) {
          if (version === 11) {
            return isIE11;
          }
          if (version === 10) {
            return isIE10;
          }
          return isIE11 || isIE10;
        }
        function getOffsetParent(element) {
          if (!element) {
            return document.documentElement;
          }
          var noOffsetParent = isIE(10) ? document.body : null;
          var offsetParent = element.offsetParent || null;
          while (offsetParent === noOffsetParent && element.nextElementSibling) {
            offsetParent = (element = element.nextElementSibling).offsetParent;
          }
          var nodeName = offsetParent && offsetParent.nodeName;
          if (!nodeName || nodeName === "BODY" || nodeName === "HTML") {
            return element ? element.ownerDocument.documentElement : document.documentElement;
          }
          if (["TH", "TD", "TABLE"].indexOf(offsetParent.nodeName) !== -1 && getStyleComputedProperty(offsetParent, "position") === "static") {
            return getOffsetParent(offsetParent);
          }
          return offsetParent;
        }
        function isOffsetContainer(element) {
          var nodeName = element.nodeName;
          if (nodeName === "BODY") {
            return false;
          }
          return nodeName === "HTML" || getOffsetParent(element.firstElementChild) === element;
        }
        function getRoot(node) {
          if (node.parentNode !== null) {
            return getRoot(node.parentNode);
          }
          return node;
        }
        function findCommonOffsetParent(element1, element2) {
          if (!element1 || !element1.nodeType || !element2 || !element2.nodeType) {
            return document.documentElement;
          }
          var order = element1.compareDocumentPosition(element2) & Node.DOCUMENT_POSITION_FOLLOWING;
          var start2 = order ? element1 : element2;
          var end = order ? element2 : element1;
          var range = document.createRange();
          range.setStart(start2, 0);
          range.setEnd(end, 0);
          var commonAncestorContainer = range.commonAncestorContainer;
          if (element1 !== commonAncestorContainer && element2 !== commonAncestorContainer || start2.contains(end)) {
            if (isOffsetContainer(commonAncestorContainer)) {
              return commonAncestorContainer;
            }
            return getOffsetParent(commonAncestorContainer);
          }
          var element1root = getRoot(element1);
          if (element1root.host) {
            return findCommonOffsetParent(element1root.host, element2);
          } else {
            return findCommonOffsetParent(element1, getRoot(element2).host);
          }
        }
        function getScroll(element) {
          var side = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "top";
          var upperSide = side === "top" ? "scrollTop" : "scrollLeft";
          var nodeName = element.nodeName;
          if (nodeName === "BODY" || nodeName === "HTML") {
            var html = element.ownerDocument.documentElement;
            var scrollingElement = element.ownerDocument.scrollingElement || html;
            return scrollingElement[upperSide];
          }
          return element[upperSide];
        }
        function includeScroll(rect, element) {
          var subtract = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
          var scrollTop = getScroll(element, "top");
          var scrollLeft = getScroll(element, "left");
          var modifier = subtract ? -1 : 1;
          rect.top += scrollTop * modifier;
          rect.bottom += scrollTop * modifier;
          rect.left += scrollLeft * modifier;
          rect.right += scrollLeft * modifier;
          return rect;
        }
        function getBordersSize(styles, axis) {
          var sideA = axis === "x" ? "Left" : "Top";
          var sideB = sideA === "Left" ? "Right" : "Bottom";
          return parseFloat(styles["border" + sideA + "Width"]) + parseFloat(styles["border" + sideB + "Width"]);
        }
        function getSize(axis, body, html, computedStyle) {
          return Math.max(body["offset" + axis], body["scroll" + axis], html["client" + axis], html["offset" + axis], html["scroll" + axis], isIE(10) ? parseInt(html["offset" + axis]) + parseInt(computedStyle["margin" + (axis === "Height" ? "Top" : "Left")]) + parseInt(computedStyle["margin" + (axis === "Height" ? "Bottom" : "Right")]) : 0);
        }
        function getWindowSizes(document2) {
          var body = document2.body;
          var html = document2.documentElement;
          var computedStyle = isIE(10) && getComputedStyle(html);
          return {
            height: getSize("Height", body, html, computedStyle),
            width: getSize("Width", body, html, computedStyle)
          };
        }
        var classCallCheck = function(instance, Constructor) {
          if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
          }
        };
        var createClass = /* @__PURE__ */ function() {
          function defineProperties(target, props) {
            for (var i = 0; i < props.length; i++) {
              var descriptor = props[i];
              descriptor.enumerable = descriptor.enumerable || false;
              descriptor.configurable = true;
              if ("value" in descriptor)
                descriptor.writable = true;
              Object.defineProperty(target, descriptor.key, descriptor);
            }
          }
          return function(Constructor, protoProps, staticProps) {
            if (protoProps)
              defineProperties(Constructor.prototype, protoProps);
            if (staticProps)
              defineProperties(Constructor, staticProps);
            return Constructor;
          };
        }();
        var defineProperty = function(obj, key, value) {
          if (key in obj) {
            Object.defineProperty(obj, key, {
              value,
              enumerable: true,
              configurable: true,
              writable: true
            });
          } else {
            obj[key] = value;
          }
          return obj;
        };
        var _extends = Object.assign || function(target) {
          for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i];
            for (var key in source) {
              if (Object.prototype.hasOwnProperty.call(source, key)) {
                target[key] = source[key];
              }
            }
          }
          return target;
        };
        function getClientRect(offsets) {
          return _extends({}, offsets, {
            right: offsets.left + offsets.width,
            bottom: offsets.top + offsets.height
          });
        }
        function getBoundingClientRect(element) {
          var rect = {};
          try {
            if (isIE(10)) {
              rect = element.getBoundingClientRect();
              var scrollTop = getScroll(element, "top");
              var scrollLeft = getScroll(element, "left");
              rect.top += scrollTop;
              rect.left += scrollLeft;
              rect.bottom += scrollTop;
              rect.right += scrollLeft;
            } else {
              rect = element.getBoundingClientRect();
            }
          } catch (e) {
          }
          var result = {
            left: rect.left,
            top: rect.top,
            width: rect.right - rect.left,
            height: rect.bottom - rect.top
          };
          var sizes = element.nodeName === "HTML" ? getWindowSizes(element.ownerDocument) : {};
          var width = sizes.width || element.clientWidth || result.width;
          var height = sizes.height || element.clientHeight || result.height;
          var horizScrollbar = element.offsetWidth - width;
          var vertScrollbar = element.offsetHeight - height;
          if (horizScrollbar || vertScrollbar) {
            var styles = getStyleComputedProperty(element);
            horizScrollbar -= getBordersSize(styles, "x");
            vertScrollbar -= getBordersSize(styles, "y");
            result.width -= horizScrollbar;
            result.height -= vertScrollbar;
          }
          return getClientRect(result);
        }
        function getOffsetRectRelativeToArbitraryNode(children, parent) {
          var fixedPosition = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
          var isIE102 = isIE(10);
          var isHTML = parent.nodeName === "HTML";
          var childrenRect = getBoundingClientRect(children);
          var parentRect = getBoundingClientRect(parent);
          var scrollParent = getScrollParent(children);
          var styles = getStyleComputedProperty(parent);
          var borderTopWidth = parseFloat(styles.borderTopWidth);
          var borderLeftWidth = parseFloat(styles.borderLeftWidth);
          if (fixedPosition && isHTML) {
            parentRect.top = Math.max(parentRect.top, 0);
            parentRect.left = Math.max(parentRect.left, 0);
          }
          var offsets = getClientRect({
            top: childrenRect.top - parentRect.top - borderTopWidth,
            left: childrenRect.left - parentRect.left - borderLeftWidth,
            width: childrenRect.width,
            height: childrenRect.height
          });
          offsets.marginTop = 0;
          offsets.marginLeft = 0;
          if (!isIE102 && isHTML) {
            var marginTop = parseFloat(styles.marginTop);
            var marginLeft = parseFloat(styles.marginLeft);
            offsets.top -= borderTopWidth - marginTop;
            offsets.bottom -= borderTopWidth - marginTop;
            offsets.left -= borderLeftWidth - marginLeft;
            offsets.right -= borderLeftWidth - marginLeft;
            offsets.marginTop = marginTop;
            offsets.marginLeft = marginLeft;
          }
          if (isIE102 && !fixedPosition ? parent.contains(scrollParent) : parent === scrollParent && scrollParent.nodeName !== "BODY") {
            offsets = includeScroll(offsets, parent);
          }
          return offsets;
        }
        function getViewportOffsetRectRelativeToArtbitraryNode(element) {
          var excludeScroll = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
          var html = element.ownerDocument.documentElement;
          var relativeOffset = getOffsetRectRelativeToArbitraryNode(element, html);
          var width = Math.max(html.clientWidth, window.innerWidth || 0);
          var height = Math.max(html.clientHeight, window.innerHeight || 0);
          var scrollTop = !excludeScroll ? getScroll(html) : 0;
          var scrollLeft = !excludeScroll ? getScroll(html, "left") : 0;
          var offset2 = {
            top: scrollTop - relativeOffset.top + relativeOffset.marginTop,
            left: scrollLeft - relativeOffset.left + relativeOffset.marginLeft,
            width,
            height
          };
          return getClientRect(offset2);
        }
        function isFixed(element) {
          var nodeName = element.nodeName;
          if (nodeName === "BODY" || nodeName === "HTML") {
            return false;
          }
          if (getStyleComputedProperty(element, "position") === "fixed") {
            return true;
          }
          var parentNode = getParentNode(element);
          if (!parentNode) {
            return false;
          }
          return isFixed(parentNode);
        }
        function getFixedPositionOffsetParent(element) {
          if (!element || !element.parentElement || isIE()) {
            return document.documentElement;
          }
          var el = element.parentElement;
          while (el && getStyleComputedProperty(el, "transform") === "none") {
            el = el.parentElement;
          }
          return el || document.documentElement;
        }
        function getBoundaries(popper, reference, padding, boundariesElement) {
          var fixedPosition = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : false;
          var boundaries = { top: 0, left: 0 };
          var offsetParent = fixedPosition ? getFixedPositionOffsetParent(popper) : findCommonOffsetParent(popper, getReferenceNode(reference));
          if (boundariesElement === "viewport") {
            boundaries = getViewportOffsetRectRelativeToArtbitraryNode(offsetParent, fixedPosition);
          } else {
            var boundariesNode = void 0;
            if (boundariesElement === "scrollParent") {
              boundariesNode = getScrollParent(getParentNode(reference));
              if (boundariesNode.nodeName === "BODY") {
                boundariesNode = popper.ownerDocument.documentElement;
              }
            } else if (boundariesElement === "window") {
              boundariesNode = popper.ownerDocument.documentElement;
            } else {
              boundariesNode = boundariesElement;
            }
            var offsets = getOffsetRectRelativeToArbitraryNode(boundariesNode, offsetParent, fixedPosition);
            if (boundariesNode.nodeName === "HTML" && !isFixed(offsetParent)) {
              var _getWindowSizes = getWindowSizes(popper.ownerDocument), height = _getWindowSizes.height, width = _getWindowSizes.width;
              boundaries.top += offsets.top - offsets.marginTop;
              boundaries.bottom = height + offsets.top;
              boundaries.left += offsets.left - offsets.marginLeft;
              boundaries.right = width + offsets.left;
            } else {
              boundaries = offsets;
            }
          }
          padding = padding || 0;
          var isPaddingNumber = typeof padding === "number";
          boundaries.left += isPaddingNumber ? padding : padding.left || 0;
          boundaries.top += isPaddingNumber ? padding : padding.top || 0;
          boundaries.right -= isPaddingNumber ? padding : padding.right || 0;
          boundaries.bottom -= isPaddingNumber ? padding : padding.bottom || 0;
          return boundaries;
        }
        function getArea(_ref) {
          var width = _ref.width, height = _ref.height;
          return width * height;
        }
        function computeAutoPlacement(placement, refRect, popper, reference, boundariesElement) {
          var padding = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : 0;
          if (placement.indexOf("auto") === -1) {
            return placement;
          }
          var boundaries = getBoundaries(popper, reference, padding, boundariesElement);
          var rects = {
            top: {
              width: boundaries.width,
              height: refRect.top - boundaries.top
            },
            right: {
              width: boundaries.right - refRect.right,
              height: boundaries.height
            },
            bottom: {
              width: boundaries.width,
              height: boundaries.bottom - refRect.bottom
            },
            left: {
              width: refRect.left - boundaries.left,
              height: boundaries.height
            }
          };
          var sortedAreas = Object.keys(rects).map(function(key) {
            return _extends({
              key
            }, rects[key], {
              area: getArea(rects[key])
            });
          }).sort(function(a, b) {
            return b.area - a.area;
          });
          var filteredAreas = sortedAreas.filter(function(_ref2) {
            var width = _ref2.width, height = _ref2.height;
            return width >= popper.clientWidth && height >= popper.clientHeight;
          });
          var computedPlacement = filteredAreas.length > 0 ? filteredAreas[0].key : sortedAreas[0].key;
          var variation = placement.split("-")[1];
          return computedPlacement + (variation ? "-" + variation : "");
        }
        function getReferenceOffsets(state, popper, reference) {
          var fixedPosition = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
          var commonOffsetParent = fixedPosition ? getFixedPositionOffsetParent(popper) : findCommonOffsetParent(popper, getReferenceNode(reference));
          return getOffsetRectRelativeToArbitraryNode(reference, commonOffsetParent, fixedPosition);
        }
        function getOuterSizes(element) {
          var window2 = element.ownerDocument.defaultView;
          var styles = window2.getComputedStyle(element);
          var x = parseFloat(styles.marginTop || 0) + parseFloat(styles.marginBottom || 0);
          var y = parseFloat(styles.marginLeft || 0) + parseFloat(styles.marginRight || 0);
          var result = {
            width: element.offsetWidth + y,
            height: element.offsetHeight + x
          };
          return result;
        }
        function getOppositePlacement(placement) {
          var hash = { left: "right", right: "left", bottom: "top", top: "bottom" };
          return placement.replace(/left|right|bottom|top/g, function(matched) {
            return hash[matched];
          });
        }
        function getPopperOffsets(popper, referenceOffsets, placement) {
          placement = placement.split("-")[0];
          var popperRect = getOuterSizes(popper);
          var popperOffsets = {
            width: popperRect.width,
            height: popperRect.height
          };
          var isHoriz = ["right", "left"].indexOf(placement) !== -1;
          var mainSide = isHoriz ? "top" : "left";
          var secondarySide = isHoriz ? "left" : "top";
          var measurement = isHoriz ? "height" : "width";
          var secondaryMeasurement = !isHoriz ? "height" : "width";
          popperOffsets[mainSide] = referenceOffsets[mainSide] + referenceOffsets[measurement] / 2 - popperRect[measurement] / 2;
          if (placement === secondarySide) {
            popperOffsets[secondarySide] = referenceOffsets[secondarySide] - popperRect[secondaryMeasurement];
          } else {
            popperOffsets[secondarySide] = referenceOffsets[getOppositePlacement(secondarySide)];
          }
          return popperOffsets;
        }
        function find(arr, check) {
          if (Array.prototype.find) {
            return arr.find(check);
          }
          return arr.filter(check)[0];
        }
        function findIndex(arr, prop, value) {
          if (Array.prototype.findIndex) {
            return arr.findIndex(function(cur) {
              return cur[prop] === value;
            });
          }
          var match = find(arr, function(obj) {
            return obj[prop] === value;
          });
          return arr.indexOf(match);
        }
        function runModifiers(modifiers2, data, ends) {
          var modifiersToRun = ends === void 0 ? modifiers2 : modifiers2.slice(0, findIndex(modifiers2, "name", ends));
          modifiersToRun.forEach(function(modifier) {
            if (modifier["function"]) {
              console.warn("`modifier.function` is deprecated, use `modifier.fn`!");
            }
            var fn = modifier["function"] || modifier.fn;
            if (modifier.enabled && isFunction(fn)) {
              data.offsets.popper = getClientRect(data.offsets.popper);
              data.offsets.reference = getClientRect(data.offsets.reference);
              data = fn(data, modifier);
            }
          });
          return data;
        }
        function update() {
          if (this.state.isDestroyed) {
            return;
          }
          var data = {
            instance: this,
            styles: {},
            arrowStyles: {},
            attributes: {},
            flipped: false,
            offsets: {}
          };
          data.offsets.reference = getReferenceOffsets(this.state, this.popper, this.reference, this.options.positionFixed);
          data.placement = computeAutoPlacement(this.options.placement, data.offsets.reference, this.popper, this.reference, this.options.modifiers.flip.boundariesElement, this.options.modifiers.flip.padding);
          data.originalPlacement = data.placement;
          data.positionFixed = this.options.positionFixed;
          data.offsets.popper = getPopperOffsets(this.popper, data.offsets.reference, data.placement);
          data.offsets.popper.position = this.options.positionFixed ? "fixed" : "absolute";
          data = runModifiers(this.modifiers, data);
          if (!this.state.isCreated) {
            this.state.isCreated = true;
            this.options.onCreate(data);
          } else {
            this.options.onUpdate(data);
          }
        }
        function isModifierEnabled(modifiers2, modifierName) {
          return modifiers2.some(function(_ref) {
            var name = _ref.name, enabled = _ref.enabled;
            return enabled && name === modifierName;
          });
        }
        function getSupportedPropertyName(property) {
          var prefixes = [false, "ms", "Webkit", "Moz", "O"];
          var upperProp = property.charAt(0).toUpperCase() + property.slice(1);
          for (var i = 0; i < prefixes.length; i++) {
            var prefix = prefixes[i];
            var toCheck = prefix ? "" + prefix + upperProp : property;
            if (typeof document.body.style[toCheck] !== "undefined") {
              return toCheck;
            }
          }
          return null;
        }
        function destroy() {
          this.state.isDestroyed = true;
          if (isModifierEnabled(this.modifiers, "applyStyle")) {
            this.popper.removeAttribute("x-placement");
            this.popper.style.position = "";
            this.popper.style.top = "";
            this.popper.style.left = "";
            this.popper.style.right = "";
            this.popper.style.bottom = "";
            this.popper.style.willChange = "";
            this.popper.style[getSupportedPropertyName("transform")] = "";
          }
          this.disableEventListeners();
          if (this.options.removeOnDestroy) {
            this.popper.parentNode.removeChild(this.popper);
          }
          return this;
        }
        function getWindow(element) {
          var ownerDocument = element.ownerDocument;
          return ownerDocument ? ownerDocument.defaultView : window;
        }
        function attachToScrollParents(scrollParent, event, callback, scrollParents) {
          var isBody = scrollParent.nodeName === "BODY";
          var target = isBody ? scrollParent.ownerDocument.defaultView : scrollParent;
          target.addEventListener(event, callback, { passive: true });
          if (!isBody) {
            attachToScrollParents(getScrollParent(target.parentNode), event, callback, scrollParents);
          }
          scrollParents.push(target);
        }
        function setupEventListeners(reference, options, state, updateBound) {
          state.updateBound = updateBound;
          getWindow(reference).addEventListener("resize", state.updateBound, { passive: true });
          var scrollElement = getScrollParent(reference);
          attachToScrollParents(scrollElement, "scroll", state.updateBound, state.scrollParents);
          state.scrollElement = scrollElement;
          state.eventsEnabled = true;
          return state;
        }
        function enableEventListeners() {
          if (!this.state.eventsEnabled) {
            this.state = setupEventListeners(this.reference, this.options, this.state, this.scheduleUpdate);
          }
        }
        function removeEventListeners(reference, state) {
          getWindow(reference).removeEventListener("resize", state.updateBound);
          state.scrollParents.forEach(function(target) {
            target.removeEventListener("scroll", state.updateBound);
          });
          state.updateBound = null;
          state.scrollParents = [];
          state.scrollElement = null;
          state.eventsEnabled = false;
          return state;
        }
        function disableEventListeners() {
          if (this.state.eventsEnabled) {
            cancelAnimationFrame(this.scheduleUpdate);
            this.state = removeEventListeners(this.reference, this.state);
          }
        }
        function isNumeric(n) {
          return n !== "" && !isNaN(parseFloat(n)) && isFinite(n);
        }
        function setStyles(element, styles) {
          Object.keys(styles).forEach(function(prop) {
            var unit = "";
            if (["width", "height", "top", "right", "bottom", "left"].indexOf(prop) !== -1 && isNumeric(styles[prop])) {
              unit = "px";
            }
            element.style[prop] = styles[prop] + unit;
          });
        }
        function setAttributes(element, attributes) {
          Object.keys(attributes).forEach(function(prop) {
            var value = attributes[prop];
            if (value !== false) {
              element.setAttribute(prop, attributes[prop]);
            } else {
              element.removeAttribute(prop);
            }
          });
        }
        function applyStyle(data) {
          setStyles(data.instance.popper, data.styles);
          setAttributes(data.instance.popper, data.attributes);
          if (data.arrowElement && Object.keys(data.arrowStyles).length) {
            setStyles(data.arrowElement, data.arrowStyles);
          }
          return data;
        }
        function applyStyleOnLoad(reference, popper, options, modifierOptions, state) {
          var referenceOffsets = getReferenceOffsets(state, popper, reference, options.positionFixed);
          var placement = computeAutoPlacement(options.placement, referenceOffsets, popper, reference, options.modifiers.flip.boundariesElement, options.modifiers.flip.padding);
          popper.setAttribute("x-placement", placement);
          setStyles(popper, { position: options.positionFixed ? "fixed" : "absolute" });
          return options;
        }
        function getRoundedOffsets(data, shouldRound) {
          var _data$offsets = data.offsets, popper = _data$offsets.popper, reference = _data$offsets.reference;
          var round = Math.round, floor = Math.floor;
          var noRound = function noRound2(v) {
            return v;
          };
          var referenceWidth = round(reference.width);
          var popperWidth = round(popper.width);
          var isVertical = ["left", "right"].indexOf(data.placement) !== -1;
          var isVariation = data.placement.indexOf("-") !== -1;
          var sameWidthParity = referenceWidth % 2 === popperWidth % 2;
          var bothOddWidth = referenceWidth % 2 === 1 && popperWidth % 2 === 1;
          var horizontalToInteger = !shouldRound ? noRound : isVertical || isVariation || sameWidthParity ? round : floor;
          var verticalToInteger = !shouldRound ? noRound : round;
          return {
            left: horizontalToInteger(bothOddWidth && !isVariation && shouldRound ? popper.left - 1 : popper.left),
            top: verticalToInteger(popper.top),
            bottom: verticalToInteger(popper.bottom),
            right: horizontalToInteger(popper.right)
          };
        }
        var isFirefox = isBrowser && /Firefox/i.test(navigator.userAgent);
        function computeStyle(data, options) {
          var x = options.x, y = options.y;
          var popper = data.offsets.popper;
          var legacyGpuAccelerationOption = find(data.instance.modifiers, function(modifier) {
            return modifier.name === "applyStyle";
          }).gpuAcceleration;
          if (legacyGpuAccelerationOption !== void 0) {
            console.warn("WARNING: `gpuAcceleration` option moved to `computeStyle` modifier and will not be supported in future versions of Popper.js!");
          }
          var gpuAcceleration = legacyGpuAccelerationOption !== void 0 ? legacyGpuAccelerationOption : options.gpuAcceleration;
          var offsetParent = getOffsetParent(data.instance.popper);
          var offsetParentRect = getBoundingClientRect(offsetParent);
          var styles = {
            position: popper.position
          };
          var offsets = getRoundedOffsets(data, window.devicePixelRatio < 2 || !isFirefox);
          var sideA = x === "bottom" ? "top" : "bottom";
          var sideB = y === "right" ? "left" : "right";
          var prefixedProperty = getSupportedPropertyName("transform");
          var left = void 0, top = void 0;
          if (sideA === "bottom") {
            if (offsetParent.nodeName === "HTML") {
              top = -offsetParent.clientHeight + offsets.bottom;
            } else {
              top = -offsetParentRect.height + offsets.bottom;
            }
          } else {
            top = offsets.top;
          }
          if (sideB === "right") {
            if (offsetParent.nodeName === "HTML") {
              left = -offsetParent.clientWidth + offsets.right;
            } else {
              left = -offsetParentRect.width + offsets.right;
            }
          } else {
            left = offsets.left;
          }
          if (gpuAcceleration && prefixedProperty) {
            styles[prefixedProperty] = "translate3d(" + left + "px, " + top + "px, 0)";
            styles[sideA] = 0;
            styles[sideB] = 0;
            styles.willChange = "transform";
          } else {
            var invertTop = sideA === "bottom" ? -1 : 1;
            var invertLeft = sideB === "right" ? -1 : 1;
            styles[sideA] = top * invertTop;
            styles[sideB] = left * invertLeft;
            styles.willChange = sideA + ", " + sideB;
          }
          var attributes = {
            "x-placement": data.placement
          };
          data.attributes = _extends({}, attributes, data.attributes);
          data.styles = _extends({}, styles, data.styles);
          data.arrowStyles = _extends({}, data.offsets.arrow, data.arrowStyles);
          return data;
        }
        function isModifierRequired(modifiers2, requestingName, requestedName) {
          var requesting = find(modifiers2, function(_ref) {
            var name = _ref.name;
            return name === requestingName;
          });
          var isRequired = !!requesting && modifiers2.some(function(modifier) {
            return modifier.name === requestedName && modifier.enabled && modifier.order < requesting.order;
          });
          if (!isRequired) {
            var _requesting = "`" + requestingName + "`";
            var requested = "`" + requestedName + "`";
            console.warn(requested + " modifier is required by " + _requesting + " modifier in order to work, be sure to include it before " + _requesting + "!");
          }
          return isRequired;
        }
        function arrow(data, options) {
          var _data$offsets$arrow;
          if (!isModifierRequired(data.instance.modifiers, "arrow", "keepTogether")) {
            return data;
          }
          var arrowElement = options.element;
          if (typeof arrowElement === "string") {
            arrowElement = data.instance.popper.querySelector(arrowElement);
            if (!arrowElement) {
              return data;
            }
          } else {
            if (!data.instance.popper.contains(arrowElement)) {
              console.warn("WARNING: `arrow.element` must be child of its popper element!");
              return data;
            }
          }
          var placement = data.placement.split("-")[0];
          var _data$offsets = data.offsets, popper = _data$offsets.popper, reference = _data$offsets.reference;
          var isVertical = ["left", "right"].indexOf(placement) !== -1;
          var len = isVertical ? "height" : "width";
          var sideCapitalized = isVertical ? "Top" : "Left";
          var side = sideCapitalized.toLowerCase();
          var altSide = isVertical ? "left" : "top";
          var opSide = isVertical ? "bottom" : "right";
          var arrowElementSize = getOuterSizes(arrowElement)[len];
          if (reference[opSide] - arrowElementSize < popper[side]) {
            data.offsets.popper[side] -= popper[side] - (reference[opSide] - arrowElementSize);
          }
          if (reference[side] + arrowElementSize > popper[opSide]) {
            data.offsets.popper[side] += reference[side] + arrowElementSize - popper[opSide];
          }
          data.offsets.popper = getClientRect(data.offsets.popper);
          var center = reference[side] + reference[len] / 2 - arrowElementSize / 2;
          var css = getStyleComputedProperty(data.instance.popper);
          var popperMarginSide = parseFloat(css["margin" + sideCapitalized]);
          var popperBorderSide = parseFloat(css["border" + sideCapitalized + "Width"]);
          var sideValue = center - data.offsets.popper[side] - popperMarginSide - popperBorderSide;
          sideValue = Math.max(Math.min(popper[len] - arrowElementSize, sideValue), 0);
          data.arrowElement = arrowElement;
          data.offsets.arrow = (_data$offsets$arrow = {}, defineProperty(_data$offsets$arrow, side, Math.round(sideValue)), defineProperty(_data$offsets$arrow, altSide, ""), _data$offsets$arrow);
          return data;
        }
        function getOppositeVariation(variation) {
          if (variation === "end") {
            return "start";
          } else if (variation === "start") {
            return "end";
          }
          return variation;
        }
        var placements = ["auto-start", "auto", "auto-end", "top-start", "top", "top-end", "right-start", "right", "right-end", "bottom-end", "bottom", "bottom-start", "left-end", "left", "left-start"];
        var validPlacements = placements.slice(3);
        function clockwise(placement) {
          var counter = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
          var index = validPlacements.indexOf(placement);
          var arr = validPlacements.slice(index + 1).concat(validPlacements.slice(0, index));
          return counter ? arr.reverse() : arr;
        }
        var BEHAVIORS = {
          FLIP: "flip",
          CLOCKWISE: "clockwise",
          COUNTERCLOCKWISE: "counterclockwise"
        };
        function flip(data, options) {
          if (isModifierEnabled(data.instance.modifiers, "inner")) {
            return data;
          }
          if (data.flipped && data.placement === data.originalPlacement) {
            return data;
          }
          var boundaries = getBoundaries(data.instance.popper, data.instance.reference, options.padding, options.boundariesElement, data.positionFixed);
          var placement = data.placement.split("-")[0];
          var placementOpposite = getOppositePlacement(placement);
          var variation = data.placement.split("-")[1] || "";
          var flipOrder = [];
          switch (options.behavior) {
            case BEHAVIORS.FLIP:
              flipOrder = [placement, placementOpposite];
              break;
            case BEHAVIORS.CLOCKWISE:
              flipOrder = clockwise(placement);
              break;
            case BEHAVIORS.COUNTERCLOCKWISE:
              flipOrder = clockwise(placement, true);
              break;
            default:
              flipOrder = options.behavior;
          }
          flipOrder.forEach(function(step, index) {
            if (placement !== step || flipOrder.length === index + 1) {
              return data;
            }
            placement = data.placement.split("-")[0];
            placementOpposite = getOppositePlacement(placement);
            var popperOffsets = data.offsets.popper;
            var refOffsets = data.offsets.reference;
            var floor = Math.floor;
            var overlapsRef = placement === "left" && floor(popperOffsets.right) > floor(refOffsets.left) || placement === "right" && floor(popperOffsets.left) < floor(refOffsets.right) || placement === "top" && floor(popperOffsets.bottom) > floor(refOffsets.top) || placement === "bottom" && floor(popperOffsets.top) < floor(refOffsets.bottom);
            var overflowsLeft = floor(popperOffsets.left) < floor(boundaries.left);
            var overflowsRight = floor(popperOffsets.right) > floor(boundaries.right);
            var overflowsTop = floor(popperOffsets.top) < floor(boundaries.top);
            var overflowsBottom = floor(popperOffsets.bottom) > floor(boundaries.bottom);
            var overflowsBoundaries = placement === "left" && overflowsLeft || placement === "right" && overflowsRight || placement === "top" && overflowsTop || placement === "bottom" && overflowsBottom;
            var isVertical = ["top", "bottom"].indexOf(placement) !== -1;
            var flippedVariationByRef = !!options.flipVariations && (isVertical && variation === "start" && overflowsLeft || isVertical && variation === "end" && overflowsRight || !isVertical && variation === "start" && overflowsTop || !isVertical && variation === "end" && overflowsBottom);
            var flippedVariationByContent = !!options.flipVariationsByContent && (isVertical && variation === "start" && overflowsRight || isVertical && variation === "end" && overflowsLeft || !isVertical && variation === "start" && overflowsBottom || !isVertical && variation === "end" && overflowsTop);
            var flippedVariation = flippedVariationByRef || flippedVariationByContent;
            if (overlapsRef || overflowsBoundaries || flippedVariation) {
              data.flipped = true;
              if (overlapsRef || overflowsBoundaries) {
                placement = flipOrder[index + 1];
              }
              if (flippedVariation) {
                variation = getOppositeVariation(variation);
              }
              data.placement = placement + (variation ? "-" + variation : "");
              data.offsets.popper = _extends({}, data.offsets.popper, getPopperOffsets(data.instance.popper, data.offsets.reference, data.placement));
              data = runModifiers(data.instance.modifiers, data, "flip");
            }
          });
          return data;
        }
        function keepTogether(data) {
          var _data$offsets = data.offsets, popper = _data$offsets.popper, reference = _data$offsets.reference;
          var placement = data.placement.split("-")[0];
          var floor = Math.floor;
          var isVertical = ["top", "bottom"].indexOf(placement) !== -1;
          var side = isVertical ? "right" : "bottom";
          var opSide = isVertical ? "left" : "top";
          var measurement = isVertical ? "width" : "height";
          if (popper[side] < floor(reference[opSide])) {
            data.offsets.popper[opSide] = floor(reference[opSide]) - popper[measurement];
          }
          if (popper[opSide] > floor(reference[side])) {
            data.offsets.popper[opSide] = floor(reference[side]);
          }
          return data;
        }
        function toValue(str, measurement, popperOffsets, referenceOffsets) {
          var split = str.match(/((?:\-|\+)?\d*\.?\d*)(.*)/);
          var value = +split[1];
          var unit = split[2];
          if (!value) {
            return str;
          }
          if (unit.indexOf("%") === 0) {
            var element = void 0;
            switch (unit) {
              case "%p":
                element = popperOffsets;
                break;
              case "%":
              case "%r":
              default:
                element = referenceOffsets;
            }
            var rect = getClientRect(element);
            return rect[measurement] / 100 * value;
          } else if (unit === "vh" || unit === "vw") {
            var size = void 0;
            if (unit === "vh") {
              size = Math.max(document.documentElement.clientHeight, window.innerHeight || 0);
            } else {
              size = Math.max(document.documentElement.clientWidth, window.innerWidth || 0);
            }
            return size / 100 * value;
          } else {
            return value;
          }
        }
        function parseOffset(offset2, popperOffsets, referenceOffsets, basePlacement) {
          var offsets = [0, 0];
          var useHeight = ["right", "left"].indexOf(basePlacement) !== -1;
          var fragments = offset2.split(/(\+|\-)/).map(function(frag) {
            return frag.trim();
          });
          var divider = fragments.indexOf(find(fragments, function(frag) {
            return frag.search(/,|\s/) !== -1;
          }));
          if (fragments[divider] && fragments[divider].indexOf(",") === -1) {
            console.warn("Offsets separated by white space(s) are deprecated, use a comma (,) instead.");
          }
          var splitRegex = /\s*,\s*|\s+/;
          var ops = divider !== -1 ? [fragments.slice(0, divider).concat([fragments[divider].split(splitRegex)[0]]), [fragments[divider].split(splitRegex)[1]].concat(fragments.slice(divider + 1))] : [fragments];
          ops = ops.map(function(op, index) {
            var measurement = (index === 1 ? !useHeight : useHeight) ? "height" : "width";
            var mergeWithPrevious = false;
            return op.reduce(function(a, b) {
              if (a[a.length - 1] === "" && ["+", "-"].indexOf(b) !== -1) {
                a[a.length - 1] = b;
                mergeWithPrevious = true;
                return a;
              } else if (mergeWithPrevious) {
                a[a.length - 1] += b;
                mergeWithPrevious = false;
                return a;
              } else {
                return a.concat(b);
              }
            }, []).map(function(str) {
              return toValue(str, measurement, popperOffsets, referenceOffsets);
            });
          });
          ops.forEach(function(op, index) {
            op.forEach(function(frag, index2) {
              if (isNumeric(frag)) {
                offsets[index] += frag * (op[index2 - 1] === "-" ? -1 : 1);
              }
            });
          });
          return offsets;
        }
        function offset(data, _ref) {
          var offset2 = _ref.offset;
          var placement = data.placement, _data$offsets = data.offsets, popper = _data$offsets.popper, reference = _data$offsets.reference;
          var basePlacement = placement.split("-")[0];
          var offsets = void 0;
          if (isNumeric(+offset2)) {
            offsets = [+offset2, 0];
          } else {
            offsets = parseOffset(offset2, popper, reference, basePlacement);
          }
          if (basePlacement === "left") {
            popper.top += offsets[0];
            popper.left -= offsets[1];
          } else if (basePlacement === "right") {
            popper.top += offsets[0];
            popper.left += offsets[1];
          } else if (basePlacement === "top") {
            popper.left += offsets[0];
            popper.top -= offsets[1];
          } else if (basePlacement === "bottom") {
            popper.left += offsets[0];
            popper.top += offsets[1];
          }
          data.popper = popper;
          return data;
        }
        function preventOverflow(data, options) {
          var boundariesElement = options.boundariesElement || getOffsetParent(data.instance.popper);
          if (data.instance.reference === boundariesElement) {
            boundariesElement = getOffsetParent(boundariesElement);
          }
          var transformProp = getSupportedPropertyName("transform");
          var popperStyles = data.instance.popper.style;
          var top = popperStyles.top, left = popperStyles.left, transform = popperStyles[transformProp];
          popperStyles.top = "";
          popperStyles.left = "";
          popperStyles[transformProp] = "";
          var boundaries = getBoundaries(data.instance.popper, data.instance.reference, options.padding, boundariesElement, data.positionFixed);
          popperStyles.top = top;
          popperStyles.left = left;
          popperStyles[transformProp] = transform;
          options.boundaries = boundaries;
          var order = options.priority;
          var popper = data.offsets.popper;
          var check = {
            primary: function primary(placement) {
              var value = popper[placement];
              if (popper[placement] < boundaries[placement] && !options.escapeWithReference) {
                value = Math.max(popper[placement], boundaries[placement]);
              }
              return defineProperty({}, placement, value);
            },
            secondary: function secondary(placement) {
              var mainSide = placement === "right" ? "left" : "top";
              var value = popper[mainSide];
              if (popper[placement] > boundaries[placement] && !options.escapeWithReference) {
                value = Math.min(popper[mainSide], boundaries[placement] - (placement === "right" ? popper.width : popper.height));
              }
              return defineProperty({}, mainSide, value);
            }
          };
          order.forEach(function(placement) {
            var side = ["left", "top"].indexOf(placement) !== -1 ? "primary" : "secondary";
            popper = _extends({}, popper, check[side](placement));
          });
          data.offsets.popper = popper;
          return data;
        }
        function shift(data) {
          var placement = data.placement;
          var basePlacement = placement.split("-")[0];
          var shiftvariation = placement.split("-")[1];
          if (shiftvariation) {
            var _data$offsets = data.offsets, reference = _data$offsets.reference, popper = _data$offsets.popper;
            var isVertical = ["bottom", "top"].indexOf(basePlacement) !== -1;
            var side = isVertical ? "left" : "top";
            var measurement = isVertical ? "width" : "height";
            var shiftOffsets = {
              start: defineProperty({}, side, reference[side]),
              end: defineProperty({}, side, reference[side] + reference[measurement] - popper[measurement])
            };
            data.offsets.popper = _extends({}, popper, shiftOffsets[shiftvariation]);
          }
          return data;
        }
        function hide(data) {
          if (!isModifierRequired(data.instance.modifiers, "hide", "preventOverflow")) {
            return data;
          }
          var refRect = data.offsets.reference;
          var bound = find(data.instance.modifiers, function(modifier) {
            return modifier.name === "preventOverflow";
          }).boundaries;
          if (refRect.bottom < bound.top || refRect.left > bound.right || refRect.top > bound.bottom || refRect.right < bound.left) {
            if (data.hide === true) {
              return data;
            }
            data.hide = true;
            data.attributes["x-out-of-boundaries"] = "";
          } else {
            if (data.hide === false) {
              return data;
            }
            data.hide = false;
            data.attributes["x-out-of-boundaries"] = false;
          }
          return data;
        }
        function inner(data) {
          var placement = data.placement;
          var basePlacement = placement.split("-")[0];
          var _data$offsets = data.offsets, popper = _data$offsets.popper, reference = _data$offsets.reference;
          var isHoriz = ["left", "right"].indexOf(basePlacement) !== -1;
          var subtractLength = ["top", "left"].indexOf(basePlacement) === -1;
          popper[isHoriz ? "left" : "top"] = reference[basePlacement] - (subtractLength ? popper[isHoriz ? "width" : "height"] : 0);
          data.placement = getOppositePlacement(placement);
          data.offsets.popper = getClientRect(popper);
          return data;
        }
        var modifiers = {
          /**
           * Modifier used to shift the popper on the start or end of its reference
           * element.<br />
           * It will read the variation of the `placement` property.<br />
           * It can be one either `-end` or `-start`.
           * @memberof modifiers
           * @inner
           */
          shift: {
            /** @prop {number} order=100 - Index used to define the order of execution */
            order: 100,
            /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
            enabled: true,
            /** @prop {ModifierFn} */
            fn: shift
          },
          /**
           * The `offset` modifier can shift your popper on both its axis.
           *
           * It accepts the following units:
           * - `px` or unit-less, interpreted as pixels
           * - `%` or `%r`, percentage relative to the length of the reference element
           * - `%p`, percentage relative to the length of the popper element
           * - `vw`, CSS viewport width unit
           * - `vh`, CSS viewport height unit
           *
           * For length is intended the main axis relative to the placement of the popper.<br />
           * This means that if the placement is `top` or `bottom`, the length will be the
           * `width`. In case of `left` or `right`, it will be the `height`.
           *
           * You can provide a single value (as `Number` or `String`), or a pair of values
           * as `String` divided by a comma or one (or more) white spaces.<br />
           * The latter is a deprecated method because it leads to confusion and will be
           * removed in v2.<br />
           * Additionally, it accepts additions and subtractions between different units.
           * Note that multiplications and divisions aren't supported.
           *
           * Valid examples are:
           * ```
           * 10
           * '10%'
           * '10, 10'
           * '10%, 10'
           * '10 + 10%'
           * '10 - 5vh + 3%'
           * '-10px + 5vh, 5px - 6%'
           * ```
           * > **NB**: If you desire to apply offsets to your poppers in a way that may make them overlap
           * > with their reference element, unfortunately, you will have to disable the `flip` modifier.
           * > You can read more on this at this [issue](https://github.com/FezVrasta/popper.js/issues/373).
           *
           * @memberof modifiers
           * @inner
           */
          offset: {
            /** @prop {number} order=200 - Index used to define the order of execution */
            order: 200,
            /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
            enabled: true,
            /** @prop {ModifierFn} */
            fn: offset,
            /** @prop {Number|String} offset=0
             * The offset value as described in the modifier description
             */
            offset: 0
          },
          /**
           * Modifier used to prevent the popper from being positioned outside the boundary.
           *
           * A scenario exists where the reference itself is not within the boundaries.<br />
           * We can say it has "escaped the boundaries" — or just "escaped".<br />
           * In this case we need to decide whether the popper should either:
           *
           * - detach from the reference and remain "trapped" in the boundaries, or
           * - if it should ignore the boundary and "escape with its reference"
           *
           * When `escapeWithReference` is set to`true` and reference is completely
           * outside its boundaries, the popper will overflow (or completely leave)
           * the boundaries in order to remain attached to the edge of the reference.
           *
           * @memberof modifiers
           * @inner
           */
          preventOverflow: {
            /** @prop {number} order=300 - Index used to define the order of execution */
            order: 300,
            /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
            enabled: true,
            /** @prop {ModifierFn} */
            fn: preventOverflow,
            /**
             * @prop {Array} [priority=['left','right','top','bottom']]
             * Popper will try to prevent overflow following these priorities by default,
             * then, it could overflow on the left and on top of the `boundariesElement`
             */
            priority: ["left", "right", "top", "bottom"],
            /**
             * @prop {number} padding=5
             * Amount of pixel used to define a minimum distance between the boundaries
             * and the popper. This makes sure the popper always has a little padding
             * between the edges of its container
             */
            padding: 5,
            /**
             * @prop {String|HTMLElement} boundariesElement='scrollParent'
             * Boundaries used by the modifier. Can be `scrollParent`, `window`,
             * `viewport` or any DOM element.
             */
            boundariesElement: "scrollParent"
          },
          /**
           * Modifier used to make sure the reference and its popper stay near each other
           * without leaving any gap between the two. Especially useful when the arrow is
           * enabled and you want to ensure that it points to its reference element.
           * It cares only about the first axis. You can still have poppers with margin
           * between the popper and its reference element.
           * @memberof modifiers
           * @inner
           */
          keepTogether: {
            /** @prop {number} order=400 - Index used to define the order of execution */
            order: 400,
            /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
            enabled: true,
            /** @prop {ModifierFn} */
            fn: keepTogether
          },
          /**
           * This modifier is used to move the `arrowElement` of the popper to make
           * sure it is positioned between the reference element and its popper element.
           * It will read the outer size of the `arrowElement` node to detect how many
           * pixels of conjunction are needed.
           *
           * It has no effect if no `arrowElement` is provided.
           * @memberof modifiers
           * @inner
           */
          arrow: {
            /** @prop {number} order=500 - Index used to define the order of execution */
            order: 500,
            /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
            enabled: true,
            /** @prop {ModifierFn} */
            fn: arrow,
            /** @prop {String|HTMLElement} element='[x-arrow]' - Selector or node used as arrow */
            element: "[x-arrow]"
          },
          /**
           * Modifier used to flip the popper's placement when it starts to overlap its
           * reference element.
           *
           * Requires the `preventOverflow` modifier before it in order to work.
           *
           * **NOTE:** this modifier will interrupt the current update cycle and will
           * restart it if it detects the need to flip the placement.
           * @memberof modifiers
           * @inner
           */
          flip: {
            /** @prop {number} order=600 - Index used to define the order of execution */
            order: 600,
            /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
            enabled: true,
            /** @prop {ModifierFn} */
            fn: flip,
            /**
             * @prop {String|Array} behavior='flip'
             * The behavior used to change the popper's placement. It can be one of
             * `flip`, `clockwise`, `counterclockwise` or an array with a list of valid
             * placements (with optional variations)
             */
            behavior: "flip",
            /**
             * @prop {number} padding=5
             * The popper will flip if it hits the edges of the `boundariesElement`
             */
            padding: 5,
            /**
             * @prop {String|HTMLElement} boundariesElement='viewport'
             * The element which will define the boundaries of the popper position.
             * The popper will never be placed outside of the defined boundaries
             * (except if `keepTogether` is enabled)
             */
            boundariesElement: "viewport",
            /**
             * @prop {Boolean} flipVariations=false
             * The popper will switch placement variation between `-start` and `-end` when
             * the reference element overlaps its boundaries.
             *
             * The original placement should have a set variation.
             */
            flipVariations: false,
            /**
             * @prop {Boolean} flipVariationsByContent=false
             * The popper will switch placement variation between `-start` and `-end` when
             * the popper element overlaps its reference boundaries.
             *
             * The original placement should have a set variation.
             */
            flipVariationsByContent: false
          },
          /**
           * Modifier used to make the popper flow toward the inner of the reference element.
           * By default, when this modifier is disabled, the popper will be placed outside
           * the reference element.
           * @memberof modifiers
           * @inner
           */
          inner: {
            /** @prop {number} order=700 - Index used to define the order of execution */
            order: 700,
            /** @prop {Boolean} enabled=false - Whether the modifier is enabled or not */
            enabled: false,
            /** @prop {ModifierFn} */
            fn: inner
          },
          /**
           * Modifier used to hide the popper when its reference element is outside of the
           * popper boundaries. It will set a `x-out-of-boundaries` attribute which can
           * be used to hide with a CSS selector the popper when its reference is
           * out of boundaries.
           *
           * Requires the `preventOverflow` modifier before it in order to work.
           * @memberof modifiers
           * @inner
           */
          hide: {
            /** @prop {number} order=800 - Index used to define the order of execution */
            order: 800,
            /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
            enabled: true,
            /** @prop {ModifierFn} */
            fn: hide
          },
          /**
           * Computes the style that will be applied to the popper element to gets
           * properly positioned.
           *
           * Note that this modifier will not touch the DOM, it just prepares the styles
           * so that `applyStyle` modifier can apply it. This separation is useful
           * in case you need to replace `applyStyle` with a custom implementation.
           *
           * This modifier has `850` as `order` value to maintain backward compatibility
           * with previous versions of Popper.js. Expect the modifiers ordering method
           * to change in future major versions of the library.
           *
           * @memberof modifiers
           * @inner
           */
          computeStyle: {
            /** @prop {number} order=850 - Index used to define the order of execution */
            order: 850,
            /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
            enabled: true,
            /** @prop {ModifierFn} */
            fn: computeStyle,
            /**
             * @prop {Boolean} gpuAcceleration=true
             * If true, it uses the CSS 3D transformation to position the popper.
             * Otherwise, it will use the `top` and `left` properties
             */
            gpuAcceleration: true,
            /**
             * @prop {string} [x='bottom']
             * Where to anchor the X axis (`bottom` or `top`). AKA X offset origin.
             * Change this if your popper should grow in a direction different from `bottom`
             */
            x: "bottom",
            /**
             * @prop {string} [x='left']
             * Where to anchor the Y axis (`left` or `right`). AKA Y offset origin.
             * Change this if your popper should grow in a direction different from `right`
             */
            y: "right"
          },
          /**
           * Applies the computed styles to the popper element.
           *
           * All the DOM manipulations are limited to this modifier. This is useful in case
           * you want to integrate Popper.js inside a framework or view library and you
           * want to delegate all the DOM manipulations to it.
           *
           * Note that if you disable this modifier, you must make sure the popper element
           * has its position set to `absolute` before Popper.js can do its work!
           *
           * Just disable this modifier and define your own to achieve the desired effect.
           *
           * @memberof modifiers
           * @inner
           */
          applyStyle: {
            /** @prop {number} order=900 - Index used to define the order of execution */
            order: 900,
            /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
            enabled: true,
            /** @prop {ModifierFn} */
            fn: applyStyle,
            /** @prop {Function} */
            onLoad: applyStyleOnLoad,
            /**
             * @deprecated since version 1.10.0, the property moved to `computeStyle` modifier
             * @prop {Boolean} gpuAcceleration=true
             * If true, it uses the CSS 3D transformation to position the popper.
             * Otherwise, it will use the `top` and `left` properties
             */
            gpuAcceleration: void 0
          }
        };
        var Defaults = {
          /**
           * Popper's placement.
           * @prop {Popper.placements} placement='bottom'
           */
          placement: "bottom",
          /**
           * Set this to true if you want popper to position it self in 'fixed' mode
           * @prop {Boolean} positionFixed=false
           */
          positionFixed: false,
          /**
           * Whether events (resize, scroll) are initially enabled.
           * @prop {Boolean} eventsEnabled=true
           */
          eventsEnabled: true,
          /**
           * Set to true if you want to automatically remove the popper when
           * you call the `destroy` method.
           * @prop {Boolean} removeOnDestroy=false
           */
          removeOnDestroy: false,
          /**
           * Callback called when the popper is created.<br />
           * By default, it is set to no-op.<br />
           * Access Popper.js instance with `data.instance`.
           * @prop {onCreate}
           */
          onCreate: function onCreate() {
          },
          /**
           * Callback called when the popper is updated. This callback is not called
           * on the initialization/creation of the popper, but only on subsequent
           * updates.<br />
           * By default, it is set to no-op.<br />
           * Access Popper.js instance with `data.instance`.
           * @prop {onUpdate}
           */
          onUpdate: function onUpdate() {
          },
          /**
           * List of modifiers used to modify the offsets before they are applied to the popper.
           * They provide most of the functionalities of Popper.js.
           * @prop {modifiers}
           */
          modifiers
        };
        var Popper = function() {
          function Popper2(reference, popper) {
            var _this = this;
            var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
            classCallCheck(this, Popper2);
            this.scheduleUpdate = function() {
              return requestAnimationFrame(_this.update);
            };
            this.update = debounce(this.update.bind(this));
            this.options = _extends({}, Popper2.Defaults, options);
            this.state = {
              isDestroyed: false,
              isCreated: false,
              scrollParents: []
            };
            this.reference = reference && reference.jquery ? reference[0] : reference;
            this.popper = popper && popper.jquery ? popper[0] : popper;
            this.options.modifiers = {};
            Object.keys(_extends({}, Popper2.Defaults.modifiers, options.modifiers)).forEach(function(name) {
              _this.options.modifiers[name] = _extends({}, Popper2.Defaults.modifiers[name] || {}, options.modifiers ? options.modifiers[name] : {});
            });
            this.modifiers = Object.keys(this.options.modifiers).map(function(name) {
              return _extends({
                name
              }, _this.options.modifiers[name]);
            }).sort(function(a, b) {
              return a.order - b.order;
            });
            this.modifiers.forEach(function(modifierOptions) {
              if (modifierOptions.enabled && isFunction(modifierOptions.onLoad)) {
                modifierOptions.onLoad(_this.reference, _this.popper, _this.options, modifierOptions, _this.state);
              }
            });
            this.update();
            var eventsEnabled = this.options.eventsEnabled;
            if (eventsEnabled) {
              this.enableEventListeners();
            }
            this.state.eventsEnabled = eventsEnabled;
          }
          createClass(Popper2, [{
            key: "update",
            value: function update$$1() {
              return update.call(this);
            }
          }, {
            key: "destroy",
            value: function destroy$$1() {
              return destroy.call(this);
            }
          }, {
            key: "enableEventListeners",
            value: function enableEventListeners$$1() {
              return enableEventListeners.call(this);
            }
          }, {
            key: "disableEventListeners",
            value: function disableEventListeners$$1() {
              return disableEventListeners.call(this);
            }
            /**
             * Schedules an update. It will run on the next UI update available.
             * @method scheduleUpdate
             * @memberof Popper
             */
            /**
             * Collection of utilities useful when writing custom modifiers.
             * Starting from version 1.7, this method is available only if you
             * include `popper-utils.js` before `popper.js`.
             *
             * **DEPRECATION**: This way to access PopperUtils is deprecated
             * and will be removed in v2! Use the PopperUtils module directly instead.
             * Due to the high instability of the methods contained in Utils, we can't
             * guarantee them to follow semver. Use them at your own risk!
             * @static
             * @private
             * @type {Object}
             * @deprecated since version 1.8
             * @member Utils
             * @memberof Popper
             */
          }]);
          return Popper2;
        }();
        Popper.Utils = (typeof window !== "undefined" ? window : global).PopperUtils;
        Popper.placements = placements;
        Popper.Defaults = Defaults;
        return Popper;
      });
    }
  });

  // node_modules/bootstrap/dist/js/bootstrap.js
  var require_bootstrap = __commonJS({
    "node_modules/bootstrap/dist/js/bootstrap.js"(exports, module) {
      (function(global2, factory) {
        typeof exports === "object" && typeof module !== "undefined" ? factory(exports, require_jquery(), require_popper()) : typeof define === "function" && define.amd ? define(["exports", "jquery", "popper.js"], factory) : (global2 = typeof globalThis !== "undefined" ? globalThis : global2 || self, factory(global2.bootstrap = {}, global2.jQuery, global2.Popper));
      })(exports, function(exports2, $2, Popper) {
        "use strict";
        function _interopDefaultLegacy(e) {
          return e && typeof e === "object" && "default" in e ? e : { "default": e };
        }
        var $__default = /* @__PURE__ */ _interopDefaultLegacy($2);
        var Popper__default = /* @__PURE__ */ _interopDefaultLegacy(Popper);
        function _defineProperties(target, props) {
          for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor)
              descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
          }
        }
        function _createClass(Constructor, protoProps, staticProps) {
          if (protoProps)
            _defineProperties(Constructor.prototype, protoProps);
          if (staticProps)
            _defineProperties(Constructor, staticProps);
          Object.defineProperty(Constructor, "prototype", {
            writable: false
          });
          return Constructor;
        }
        function _extends() {
          _extends = Object.assign ? Object.assign.bind() : function(target) {
            for (var i = 1; i < arguments.length; i++) {
              var source = arguments[i];
              for (var key in source) {
                if (Object.prototype.hasOwnProperty.call(source, key)) {
                  target[key] = source[key];
                }
              }
            }
            return target;
          };
          return _extends.apply(this, arguments);
        }
        function _inheritsLoose(subClass, superClass) {
          subClass.prototype = Object.create(superClass.prototype);
          subClass.prototype.constructor = subClass;
          _setPrototypeOf(subClass, superClass);
        }
        function _setPrototypeOf(o, p) {
          _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf2(o2, p2) {
            o2.__proto__ = p2;
            return o2;
          };
          return _setPrototypeOf(o, p);
        }
        var TRANSITION_END = "transitionend";
        var MAX_UID = 1e6;
        var MILLISECONDS_MULTIPLIER = 1e3;
        function toType(obj) {
          if (obj === null || typeof obj === "undefined") {
            return "" + obj;
          }
          return {}.toString.call(obj).match(/\s([a-z]+)/i)[1].toLowerCase();
        }
        function getSpecialTransitionEndEvent() {
          return {
            bindType: TRANSITION_END,
            delegateType: TRANSITION_END,
            handle: function handle(event) {
              if ($__default["default"](event.target).is(this)) {
                return event.handleObj.handler.apply(this, arguments);
              }
              return void 0;
            }
          };
        }
        function transitionEndEmulator(duration) {
          var _this = this;
          var called = false;
          $__default["default"](this).one(Util.TRANSITION_END, function() {
            called = true;
          });
          setTimeout(function() {
            if (!called) {
              Util.triggerTransitionEnd(_this);
            }
          }, duration);
          return this;
        }
        function setTransitionEndSupport() {
          $__default["default"].fn.emulateTransitionEnd = transitionEndEmulator;
          $__default["default"].event.special[Util.TRANSITION_END] = getSpecialTransitionEndEvent();
        }
        var Util = {
          TRANSITION_END: "bsTransitionEnd",
          getUID: function getUID(prefix) {
            do {
              prefix += ~~(Math.random() * MAX_UID);
            } while (document.getElementById(prefix));
            return prefix;
          },
          getSelectorFromElement: function getSelectorFromElement(element) {
            var selector = element.getAttribute("data-target");
            if (!selector || selector === "#") {
              var hrefAttr = element.getAttribute("href");
              selector = hrefAttr && hrefAttr !== "#" ? hrefAttr.trim() : "";
            }
            try {
              return document.querySelector(selector) ? selector : null;
            } catch (_) {
              return null;
            }
          },
          getTransitionDurationFromElement: function getTransitionDurationFromElement(element) {
            if (!element) {
              return 0;
            }
            var transitionDuration = $__default["default"](element).css("transition-duration");
            var transitionDelay = $__default["default"](element).css("transition-delay");
            var floatTransitionDuration = parseFloat(transitionDuration);
            var floatTransitionDelay = parseFloat(transitionDelay);
            if (!floatTransitionDuration && !floatTransitionDelay) {
              return 0;
            }
            transitionDuration = transitionDuration.split(",")[0];
            transitionDelay = transitionDelay.split(",")[0];
            return (parseFloat(transitionDuration) + parseFloat(transitionDelay)) * MILLISECONDS_MULTIPLIER;
          },
          reflow: function reflow(element) {
            return element.offsetHeight;
          },
          triggerTransitionEnd: function triggerTransitionEnd(element) {
            $__default["default"](element).trigger(TRANSITION_END);
          },
          supportsTransitionEnd: function supportsTransitionEnd() {
            return Boolean(TRANSITION_END);
          },
          isElement: function isElement(obj) {
            return (obj[0] || obj).nodeType;
          },
          typeCheckConfig: function typeCheckConfig(componentName, config, configTypes) {
            for (var property in configTypes) {
              if (Object.prototype.hasOwnProperty.call(configTypes, property)) {
                var expectedTypes = configTypes[property];
                var value = config[property];
                var valueType = value && Util.isElement(value) ? "element" : toType(value);
                if (!new RegExp(expectedTypes).test(valueType)) {
                  throw new Error(componentName.toUpperCase() + ": " + ('Option "' + property + '" provided type "' + valueType + '" ') + ('but expected type "' + expectedTypes + '".'));
                }
              }
            }
          },
          findShadowRoot: function findShadowRoot(element) {
            if (!document.documentElement.attachShadow) {
              return null;
            }
            if (typeof element.getRootNode === "function") {
              var root = element.getRootNode();
              return root instanceof ShadowRoot ? root : null;
            }
            if (element instanceof ShadowRoot) {
              return element;
            }
            if (!element.parentNode) {
              return null;
            }
            return Util.findShadowRoot(element.parentNode);
          },
          jQueryDetection: function jQueryDetection() {
            if (typeof $__default["default"] === "undefined") {
              throw new TypeError("Bootstrap's JavaScript requires jQuery. jQuery must be included before Bootstrap's JavaScript.");
            }
            var version = $__default["default"].fn.jquery.split(" ")[0].split(".");
            var minMajor = 1;
            var ltMajor = 2;
            var minMinor = 9;
            var minPatch = 1;
            var maxMajor = 4;
            if (version[0] < ltMajor && version[1] < minMinor || version[0] === minMajor && version[1] === minMinor && version[2] < minPatch || version[0] >= maxMajor) {
              throw new Error("Bootstrap's JavaScript requires at least jQuery v1.9.1 but less than v4.0.0");
            }
          }
        };
        Util.jQueryDetection();
        setTransitionEndSupport();
        var NAME$a = "alert";
        var VERSION$a = "4.6.2";
        var DATA_KEY$a = "bs.alert";
        var EVENT_KEY$a = "." + DATA_KEY$a;
        var DATA_API_KEY$7 = ".data-api";
        var JQUERY_NO_CONFLICT$a = $__default["default"].fn[NAME$a];
        var CLASS_NAME_ALERT = "alert";
        var CLASS_NAME_FADE$5 = "fade";
        var CLASS_NAME_SHOW$7 = "show";
        var EVENT_CLOSE = "close" + EVENT_KEY$a;
        var EVENT_CLOSED = "closed" + EVENT_KEY$a;
        var EVENT_CLICK_DATA_API$6 = "click" + EVENT_KEY$a + DATA_API_KEY$7;
        var SELECTOR_DISMISS = '[data-dismiss="alert"]';
        var Alert = /* @__PURE__ */ function() {
          function Alert2(element) {
            this._element = element;
          }
          var _proto = Alert2.prototype;
          _proto.close = function close(element) {
            var rootElement = this._element;
            if (element) {
              rootElement = this._getRootElement(element);
            }
            var customEvent = this._triggerCloseEvent(rootElement);
            if (customEvent.isDefaultPrevented()) {
              return;
            }
            this._removeElement(rootElement);
          };
          _proto.dispose = function dispose() {
            $__default["default"].removeData(this._element, DATA_KEY$a);
            this._element = null;
          };
          _proto._getRootElement = function _getRootElement(element) {
            var selector = Util.getSelectorFromElement(element);
            var parent = false;
            if (selector) {
              parent = document.querySelector(selector);
            }
            if (!parent) {
              parent = $__default["default"](element).closest("." + CLASS_NAME_ALERT)[0];
            }
            return parent;
          };
          _proto._triggerCloseEvent = function _triggerCloseEvent(element) {
            var closeEvent = $__default["default"].Event(EVENT_CLOSE);
            $__default["default"](element).trigger(closeEvent);
            return closeEvent;
          };
          _proto._removeElement = function _removeElement(element) {
            var _this = this;
            $__default["default"](element).removeClass(CLASS_NAME_SHOW$7);
            if (!$__default["default"](element).hasClass(CLASS_NAME_FADE$5)) {
              this._destroyElement(element);
              return;
            }
            var transitionDuration = Util.getTransitionDurationFromElement(element);
            $__default["default"](element).one(Util.TRANSITION_END, function(event) {
              return _this._destroyElement(element, event);
            }).emulateTransitionEnd(transitionDuration);
          };
          _proto._destroyElement = function _destroyElement(element) {
            $__default["default"](element).detach().trigger(EVENT_CLOSED).remove();
          };
          Alert2._jQueryInterface = function _jQueryInterface(config) {
            return this.each(function() {
              var $element = $__default["default"](this);
              var data = $element.data(DATA_KEY$a);
              if (!data) {
                data = new Alert2(this);
                $element.data(DATA_KEY$a, data);
              }
              if (config === "close") {
                data[config](this);
              }
            });
          };
          Alert2._handleDismiss = function _handleDismiss(alertInstance) {
            return function(event) {
              if (event) {
                event.preventDefault();
              }
              alertInstance.close(this);
            };
          };
          _createClass(Alert2, null, [{
            key: "VERSION",
            get: function get() {
              return VERSION$a;
            }
          }]);
          return Alert2;
        }();
        $__default["default"](document).on(EVENT_CLICK_DATA_API$6, SELECTOR_DISMISS, Alert._handleDismiss(new Alert()));
        $__default["default"].fn[NAME$a] = Alert._jQueryInterface;
        $__default["default"].fn[NAME$a].Constructor = Alert;
        $__default["default"].fn[NAME$a].noConflict = function() {
          $__default["default"].fn[NAME$a] = JQUERY_NO_CONFLICT$a;
          return Alert._jQueryInterface;
        };
        var NAME$9 = "button";
        var VERSION$9 = "4.6.2";
        var DATA_KEY$9 = "bs.button";
        var EVENT_KEY$9 = "." + DATA_KEY$9;
        var DATA_API_KEY$6 = ".data-api";
        var JQUERY_NO_CONFLICT$9 = $__default["default"].fn[NAME$9];
        var CLASS_NAME_ACTIVE$3 = "active";
        var CLASS_NAME_BUTTON = "btn";
        var CLASS_NAME_FOCUS = "focus";
        var EVENT_CLICK_DATA_API$5 = "click" + EVENT_KEY$9 + DATA_API_KEY$6;
        var EVENT_FOCUS_BLUR_DATA_API = "focus" + EVENT_KEY$9 + DATA_API_KEY$6 + " " + ("blur" + EVENT_KEY$9 + DATA_API_KEY$6);
        var EVENT_LOAD_DATA_API$2 = "load" + EVENT_KEY$9 + DATA_API_KEY$6;
        var SELECTOR_DATA_TOGGLE_CARROT = '[data-toggle^="button"]';
        var SELECTOR_DATA_TOGGLES = '[data-toggle="buttons"]';
        var SELECTOR_DATA_TOGGLE$4 = '[data-toggle="button"]';
        var SELECTOR_DATA_TOGGLES_BUTTONS = '[data-toggle="buttons"] .btn';
        var SELECTOR_INPUT = 'input:not([type="hidden"])';
        var SELECTOR_ACTIVE$2 = ".active";
        var SELECTOR_BUTTON = ".btn";
        var Button = /* @__PURE__ */ function() {
          function Button2(element) {
            this._element = element;
            this.shouldAvoidTriggerChange = false;
          }
          var _proto = Button2.prototype;
          _proto.toggle = function toggle() {
            var triggerChangeEvent = true;
            var addAriaPressed = true;
            var rootElement = $__default["default"](this._element).closest(SELECTOR_DATA_TOGGLES)[0];
            if (rootElement) {
              var input = this._element.querySelector(SELECTOR_INPUT);
              if (input) {
                if (input.type === "radio") {
                  if (input.checked && this._element.classList.contains(CLASS_NAME_ACTIVE$3)) {
                    triggerChangeEvent = false;
                  } else {
                    var activeElement = rootElement.querySelector(SELECTOR_ACTIVE$2);
                    if (activeElement) {
                      $__default["default"](activeElement).removeClass(CLASS_NAME_ACTIVE$3);
                    }
                  }
                }
                if (triggerChangeEvent) {
                  if (input.type === "checkbox" || input.type === "radio") {
                    input.checked = !this._element.classList.contains(CLASS_NAME_ACTIVE$3);
                  }
                  if (!this.shouldAvoidTriggerChange) {
                    $__default["default"](input).trigger("change");
                  }
                }
                input.focus();
                addAriaPressed = false;
              }
            }
            if (!(this._element.hasAttribute("disabled") || this._element.classList.contains("disabled"))) {
              if (addAriaPressed) {
                this._element.setAttribute("aria-pressed", !this._element.classList.contains(CLASS_NAME_ACTIVE$3));
              }
              if (triggerChangeEvent) {
                $__default["default"](this._element).toggleClass(CLASS_NAME_ACTIVE$3);
              }
            }
          };
          _proto.dispose = function dispose() {
            $__default["default"].removeData(this._element, DATA_KEY$9);
            this._element = null;
          };
          Button2._jQueryInterface = function _jQueryInterface(config, avoidTriggerChange) {
            return this.each(function() {
              var $element = $__default["default"](this);
              var data = $element.data(DATA_KEY$9);
              if (!data) {
                data = new Button2(this);
                $element.data(DATA_KEY$9, data);
              }
              data.shouldAvoidTriggerChange = avoidTriggerChange;
              if (config === "toggle") {
                data[config]();
              }
            });
          };
          _createClass(Button2, null, [{
            key: "VERSION",
            get: function get() {
              return VERSION$9;
            }
          }]);
          return Button2;
        }();
        $__default["default"](document).on(EVENT_CLICK_DATA_API$5, SELECTOR_DATA_TOGGLE_CARROT, function(event) {
          var button = event.target;
          var initialButton = button;
          if (!$__default["default"](button).hasClass(CLASS_NAME_BUTTON)) {
            button = $__default["default"](button).closest(SELECTOR_BUTTON)[0];
          }
          if (!button || button.hasAttribute("disabled") || button.classList.contains("disabled")) {
            event.preventDefault();
          } else {
            var inputBtn = button.querySelector(SELECTOR_INPUT);
            if (inputBtn && (inputBtn.hasAttribute("disabled") || inputBtn.classList.contains("disabled"))) {
              event.preventDefault();
              return;
            }
            if (initialButton.tagName === "INPUT" || button.tagName !== "LABEL") {
              Button._jQueryInterface.call($__default["default"](button), "toggle", initialButton.tagName === "INPUT");
            }
          }
        }).on(EVENT_FOCUS_BLUR_DATA_API, SELECTOR_DATA_TOGGLE_CARROT, function(event) {
          var button = $__default["default"](event.target).closest(SELECTOR_BUTTON)[0];
          $__default["default"](button).toggleClass(CLASS_NAME_FOCUS, /^focus(in)?$/.test(event.type));
        });
        $__default["default"](window).on(EVENT_LOAD_DATA_API$2, function() {
          var buttons = [].slice.call(document.querySelectorAll(SELECTOR_DATA_TOGGLES_BUTTONS));
          for (var i = 0, len = buttons.length; i < len; i++) {
            var button = buttons[i];
            var input = button.querySelector(SELECTOR_INPUT);
            if (input.checked || input.hasAttribute("checked")) {
              button.classList.add(CLASS_NAME_ACTIVE$3);
            } else {
              button.classList.remove(CLASS_NAME_ACTIVE$3);
            }
          }
          buttons = [].slice.call(document.querySelectorAll(SELECTOR_DATA_TOGGLE$4));
          for (var _i = 0, _len = buttons.length; _i < _len; _i++) {
            var _button = buttons[_i];
            if (_button.getAttribute("aria-pressed") === "true") {
              _button.classList.add(CLASS_NAME_ACTIVE$3);
            } else {
              _button.classList.remove(CLASS_NAME_ACTIVE$3);
            }
          }
        });
        $__default["default"].fn[NAME$9] = Button._jQueryInterface;
        $__default["default"].fn[NAME$9].Constructor = Button;
        $__default["default"].fn[NAME$9].noConflict = function() {
          $__default["default"].fn[NAME$9] = JQUERY_NO_CONFLICT$9;
          return Button._jQueryInterface;
        };
        var NAME$8 = "carousel";
        var VERSION$8 = "4.6.2";
        var DATA_KEY$8 = "bs.carousel";
        var EVENT_KEY$8 = "." + DATA_KEY$8;
        var DATA_API_KEY$5 = ".data-api";
        var JQUERY_NO_CONFLICT$8 = $__default["default"].fn[NAME$8];
        var ARROW_LEFT_KEYCODE = 37;
        var ARROW_RIGHT_KEYCODE = 39;
        var TOUCHEVENT_COMPAT_WAIT = 500;
        var SWIPE_THRESHOLD = 40;
        var CLASS_NAME_CAROUSEL = "carousel";
        var CLASS_NAME_ACTIVE$2 = "active";
        var CLASS_NAME_SLIDE = "slide";
        var CLASS_NAME_RIGHT = "carousel-item-right";
        var CLASS_NAME_LEFT = "carousel-item-left";
        var CLASS_NAME_NEXT = "carousel-item-next";
        var CLASS_NAME_PREV = "carousel-item-prev";
        var CLASS_NAME_POINTER_EVENT = "pointer-event";
        var DIRECTION_NEXT = "next";
        var DIRECTION_PREV = "prev";
        var DIRECTION_LEFT = "left";
        var DIRECTION_RIGHT = "right";
        var EVENT_SLIDE = "slide" + EVENT_KEY$8;
        var EVENT_SLID = "slid" + EVENT_KEY$8;
        var EVENT_KEYDOWN = "keydown" + EVENT_KEY$8;
        var EVENT_MOUSEENTER = "mouseenter" + EVENT_KEY$8;
        var EVENT_MOUSELEAVE = "mouseleave" + EVENT_KEY$8;
        var EVENT_TOUCHSTART = "touchstart" + EVENT_KEY$8;
        var EVENT_TOUCHMOVE = "touchmove" + EVENT_KEY$8;
        var EVENT_TOUCHEND = "touchend" + EVENT_KEY$8;
        var EVENT_POINTERDOWN = "pointerdown" + EVENT_KEY$8;
        var EVENT_POINTERUP = "pointerup" + EVENT_KEY$8;
        var EVENT_DRAG_START = "dragstart" + EVENT_KEY$8;
        var EVENT_LOAD_DATA_API$1 = "load" + EVENT_KEY$8 + DATA_API_KEY$5;
        var EVENT_CLICK_DATA_API$4 = "click" + EVENT_KEY$8 + DATA_API_KEY$5;
        var SELECTOR_ACTIVE$1 = ".active";
        var SELECTOR_ACTIVE_ITEM = ".active.carousel-item";
        var SELECTOR_ITEM = ".carousel-item";
        var SELECTOR_ITEM_IMG = ".carousel-item img";
        var SELECTOR_NEXT_PREV = ".carousel-item-next, .carousel-item-prev";
        var SELECTOR_INDICATORS = ".carousel-indicators";
        var SELECTOR_DATA_SLIDE = "[data-slide], [data-slide-to]";
        var SELECTOR_DATA_RIDE = '[data-ride="carousel"]';
        var Default$7 = {
          interval: 5e3,
          keyboard: true,
          slide: false,
          pause: "hover",
          wrap: true,
          touch: true
        };
        var DefaultType$7 = {
          interval: "(number|boolean)",
          keyboard: "boolean",
          slide: "(boolean|string)",
          pause: "(string|boolean)",
          wrap: "boolean",
          touch: "boolean"
        };
        var PointerType = {
          TOUCH: "touch",
          PEN: "pen"
        };
        var Carousel = /* @__PURE__ */ function() {
          function Carousel2(element, config) {
            this._items = null;
            this._interval = null;
            this._activeElement = null;
            this._isPaused = false;
            this._isSliding = false;
            this.touchTimeout = null;
            this.touchStartX = 0;
            this.touchDeltaX = 0;
            this._config = this._getConfig(config);
            this._element = element;
            this._indicatorsElement = this._element.querySelector(SELECTOR_INDICATORS);
            this._touchSupported = "ontouchstart" in document.documentElement || navigator.maxTouchPoints > 0;
            this._pointerEvent = Boolean(window.PointerEvent || window.MSPointerEvent);
            this._addEventListeners();
          }
          var _proto = Carousel2.prototype;
          _proto.next = function next() {
            if (!this._isSliding) {
              this._slide(DIRECTION_NEXT);
            }
          };
          _proto.nextWhenVisible = function nextWhenVisible() {
            var $element = $__default["default"](this._element);
            if (!document.hidden && $element.is(":visible") && $element.css("visibility") !== "hidden") {
              this.next();
            }
          };
          _proto.prev = function prev() {
            if (!this._isSliding) {
              this._slide(DIRECTION_PREV);
            }
          };
          _proto.pause = function pause(event) {
            if (!event) {
              this._isPaused = true;
            }
            if (this._element.querySelector(SELECTOR_NEXT_PREV)) {
              Util.triggerTransitionEnd(this._element);
              this.cycle(true);
            }
            clearInterval(this._interval);
            this._interval = null;
          };
          _proto.cycle = function cycle(event) {
            if (!event) {
              this._isPaused = false;
            }
            if (this._interval) {
              clearInterval(this._interval);
              this._interval = null;
            }
            if (this._config.interval && !this._isPaused) {
              this._updateInterval();
              this._interval = setInterval((document.visibilityState ? this.nextWhenVisible : this.next).bind(this), this._config.interval);
            }
          };
          _proto.to = function to(index) {
            var _this = this;
            this._activeElement = this._element.querySelector(SELECTOR_ACTIVE_ITEM);
            var activeIndex = this._getItemIndex(this._activeElement);
            if (index > this._items.length - 1 || index < 0) {
              return;
            }
            if (this._isSliding) {
              $__default["default"](this._element).one(EVENT_SLID, function() {
                return _this.to(index);
              });
              return;
            }
            if (activeIndex === index) {
              this.pause();
              this.cycle();
              return;
            }
            var direction = index > activeIndex ? DIRECTION_NEXT : DIRECTION_PREV;
            this._slide(direction, this._items[index]);
          };
          _proto.dispose = function dispose() {
            $__default["default"](this._element).off(EVENT_KEY$8);
            $__default["default"].removeData(this._element, DATA_KEY$8);
            this._items = null;
            this._config = null;
            this._element = null;
            this._interval = null;
            this._isPaused = null;
            this._isSliding = null;
            this._activeElement = null;
            this._indicatorsElement = null;
          };
          _proto._getConfig = function _getConfig(config) {
            config = _extends({}, Default$7, config);
            Util.typeCheckConfig(NAME$8, config, DefaultType$7);
            return config;
          };
          _proto._handleSwipe = function _handleSwipe() {
            var absDeltax = Math.abs(this.touchDeltaX);
            if (absDeltax <= SWIPE_THRESHOLD) {
              return;
            }
            var direction = absDeltax / this.touchDeltaX;
            this.touchDeltaX = 0;
            if (direction > 0) {
              this.prev();
            }
            if (direction < 0) {
              this.next();
            }
          };
          _proto._addEventListeners = function _addEventListeners() {
            var _this2 = this;
            if (this._config.keyboard) {
              $__default["default"](this._element).on(EVENT_KEYDOWN, function(event) {
                return _this2._keydown(event);
              });
            }
            if (this._config.pause === "hover") {
              $__default["default"](this._element).on(EVENT_MOUSEENTER, function(event) {
                return _this2.pause(event);
              }).on(EVENT_MOUSELEAVE, function(event) {
                return _this2.cycle(event);
              });
            }
            if (this._config.touch) {
              this._addTouchEventListeners();
            }
          };
          _proto._addTouchEventListeners = function _addTouchEventListeners() {
            var _this3 = this;
            if (!this._touchSupported) {
              return;
            }
            var start2 = function start3(event) {
              if (_this3._pointerEvent && PointerType[event.originalEvent.pointerType.toUpperCase()]) {
                _this3.touchStartX = event.originalEvent.clientX;
              } else if (!_this3._pointerEvent) {
                _this3.touchStartX = event.originalEvent.touches[0].clientX;
              }
            };
            var move = function move2(event) {
              _this3.touchDeltaX = event.originalEvent.touches && event.originalEvent.touches.length > 1 ? 0 : event.originalEvent.touches[0].clientX - _this3.touchStartX;
            };
            var end = function end2(event) {
              if (_this3._pointerEvent && PointerType[event.originalEvent.pointerType.toUpperCase()]) {
                _this3.touchDeltaX = event.originalEvent.clientX - _this3.touchStartX;
              }
              _this3._handleSwipe();
              if (_this3._config.pause === "hover") {
                _this3.pause();
                if (_this3.touchTimeout) {
                  clearTimeout(_this3.touchTimeout);
                }
                _this3.touchTimeout = setTimeout(function(event2) {
                  return _this3.cycle(event2);
                }, TOUCHEVENT_COMPAT_WAIT + _this3._config.interval);
              }
            };
            $__default["default"](this._element.querySelectorAll(SELECTOR_ITEM_IMG)).on(EVENT_DRAG_START, function(e) {
              return e.preventDefault();
            });
            if (this._pointerEvent) {
              $__default["default"](this._element).on(EVENT_POINTERDOWN, function(event) {
                return start2(event);
              });
              $__default["default"](this._element).on(EVENT_POINTERUP, function(event) {
                return end(event);
              });
              this._element.classList.add(CLASS_NAME_POINTER_EVENT);
            } else {
              $__default["default"](this._element).on(EVENT_TOUCHSTART, function(event) {
                return start2(event);
              });
              $__default["default"](this._element).on(EVENT_TOUCHMOVE, function(event) {
                return move(event);
              });
              $__default["default"](this._element).on(EVENT_TOUCHEND, function(event) {
                return end(event);
              });
            }
          };
          _proto._keydown = function _keydown(event) {
            if (/input|textarea/i.test(event.target.tagName)) {
              return;
            }
            switch (event.which) {
              case ARROW_LEFT_KEYCODE:
                event.preventDefault();
                this.prev();
                break;
              case ARROW_RIGHT_KEYCODE:
                event.preventDefault();
                this.next();
                break;
            }
          };
          _proto._getItemIndex = function _getItemIndex(element) {
            this._items = element && element.parentNode ? [].slice.call(element.parentNode.querySelectorAll(SELECTOR_ITEM)) : [];
            return this._items.indexOf(element);
          };
          _proto._getItemByDirection = function _getItemByDirection(direction, activeElement) {
            var isNextDirection = direction === DIRECTION_NEXT;
            var isPrevDirection = direction === DIRECTION_PREV;
            var activeIndex = this._getItemIndex(activeElement);
            var lastItemIndex = this._items.length - 1;
            var isGoingToWrap = isPrevDirection && activeIndex === 0 || isNextDirection && activeIndex === lastItemIndex;
            if (isGoingToWrap && !this._config.wrap) {
              return activeElement;
            }
            var delta = direction === DIRECTION_PREV ? -1 : 1;
            var itemIndex = (activeIndex + delta) % this._items.length;
            return itemIndex === -1 ? this._items[this._items.length - 1] : this._items[itemIndex];
          };
          _proto._triggerSlideEvent = function _triggerSlideEvent(relatedTarget, eventDirectionName) {
            var targetIndex = this._getItemIndex(relatedTarget);
            var fromIndex = this._getItemIndex(this._element.querySelector(SELECTOR_ACTIVE_ITEM));
            var slideEvent = $__default["default"].Event(EVENT_SLIDE, {
              relatedTarget,
              direction: eventDirectionName,
              from: fromIndex,
              to: targetIndex
            });
            $__default["default"](this._element).trigger(slideEvent);
            return slideEvent;
          };
          _proto._setActiveIndicatorElement = function _setActiveIndicatorElement(element) {
            if (this._indicatorsElement) {
              var indicators = [].slice.call(this._indicatorsElement.querySelectorAll(SELECTOR_ACTIVE$1));
              $__default["default"](indicators).removeClass(CLASS_NAME_ACTIVE$2);
              var nextIndicator = this._indicatorsElement.children[this._getItemIndex(element)];
              if (nextIndicator) {
                $__default["default"](nextIndicator).addClass(CLASS_NAME_ACTIVE$2);
              }
            }
          };
          _proto._updateInterval = function _updateInterval() {
            var element = this._activeElement || this._element.querySelector(SELECTOR_ACTIVE_ITEM);
            if (!element) {
              return;
            }
            var elementInterval = parseInt(element.getAttribute("data-interval"), 10);
            if (elementInterval) {
              this._config.defaultInterval = this._config.defaultInterval || this._config.interval;
              this._config.interval = elementInterval;
            } else {
              this._config.interval = this._config.defaultInterval || this._config.interval;
            }
          };
          _proto._slide = function _slide(direction, element) {
            var _this4 = this;
            var activeElement = this._element.querySelector(SELECTOR_ACTIVE_ITEM);
            var activeElementIndex = this._getItemIndex(activeElement);
            var nextElement = element || activeElement && this._getItemByDirection(direction, activeElement);
            var nextElementIndex = this._getItemIndex(nextElement);
            var isCycling = Boolean(this._interval);
            var directionalClassName;
            var orderClassName;
            var eventDirectionName;
            if (direction === DIRECTION_NEXT) {
              directionalClassName = CLASS_NAME_LEFT;
              orderClassName = CLASS_NAME_NEXT;
              eventDirectionName = DIRECTION_LEFT;
            } else {
              directionalClassName = CLASS_NAME_RIGHT;
              orderClassName = CLASS_NAME_PREV;
              eventDirectionName = DIRECTION_RIGHT;
            }
            if (nextElement && $__default["default"](nextElement).hasClass(CLASS_NAME_ACTIVE$2)) {
              this._isSliding = false;
              return;
            }
            var slideEvent = this._triggerSlideEvent(nextElement, eventDirectionName);
            if (slideEvent.isDefaultPrevented()) {
              return;
            }
            if (!activeElement || !nextElement) {
              return;
            }
            this._isSliding = true;
            if (isCycling) {
              this.pause();
            }
            this._setActiveIndicatorElement(nextElement);
            this._activeElement = nextElement;
            var slidEvent = $__default["default"].Event(EVENT_SLID, {
              relatedTarget: nextElement,
              direction: eventDirectionName,
              from: activeElementIndex,
              to: nextElementIndex
            });
            if ($__default["default"](this._element).hasClass(CLASS_NAME_SLIDE)) {
              $__default["default"](nextElement).addClass(orderClassName);
              Util.reflow(nextElement);
              $__default["default"](activeElement).addClass(directionalClassName);
              $__default["default"](nextElement).addClass(directionalClassName);
              var transitionDuration = Util.getTransitionDurationFromElement(activeElement);
              $__default["default"](activeElement).one(Util.TRANSITION_END, function() {
                $__default["default"](nextElement).removeClass(directionalClassName + " " + orderClassName).addClass(CLASS_NAME_ACTIVE$2);
                $__default["default"](activeElement).removeClass(CLASS_NAME_ACTIVE$2 + " " + orderClassName + " " + directionalClassName);
                _this4._isSliding = false;
                setTimeout(function() {
                  return $__default["default"](_this4._element).trigger(slidEvent);
                }, 0);
              }).emulateTransitionEnd(transitionDuration);
            } else {
              $__default["default"](activeElement).removeClass(CLASS_NAME_ACTIVE$2);
              $__default["default"](nextElement).addClass(CLASS_NAME_ACTIVE$2);
              this._isSliding = false;
              $__default["default"](this._element).trigger(slidEvent);
            }
            if (isCycling) {
              this.cycle();
            }
          };
          Carousel2._jQueryInterface = function _jQueryInterface(config) {
            return this.each(function() {
              var data = $__default["default"](this).data(DATA_KEY$8);
              var _config = _extends({}, Default$7, $__default["default"](this).data());
              if (typeof config === "object") {
                _config = _extends({}, _config, config);
              }
              var action = typeof config === "string" ? config : _config.slide;
              if (!data) {
                data = new Carousel2(this, _config);
                $__default["default"](this).data(DATA_KEY$8, data);
              }
              if (typeof config === "number") {
                data.to(config);
              } else if (typeof action === "string") {
                if (typeof data[action] === "undefined") {
                  throw new TypeError('No method named "' + action + '"');
                }
                data[action]();
              } else if (_config.interval && _config.ride) {
                data.pause();
                data.cycle();
              }
            });
          };
          Carousel2._dataApiClickHandler = function _dataApiClickHandler(event) {
            var selector = Util.getSelectorFromElement(this);
            if (!selector) {
              return;
            }
            var target = $__default["default"](selector)[0];
            if (!target || !$__default["default"](target).hasClass(CLASS_NAME_CAROUSEL)) {
              return;
            }
            var config = _extends({}, $__default["default"](target).data(), $__default["default"](this).data());
            var slideIndex = this.getAttribute("data-slide-to");
            if (slideIndex) {
              config.interval = false;
            }
            Carousel2._jQueryInterface.call($__default["default"](target), config);
            if (slideIndex) {
              $__default["default"](target).data(DATA_KEY$8).to(slideIndex);
            }
            event.preventDefault();
          };
          _createClass(Carousel2, null, [{
            key: "VERSION",
            get: function get() {
              return VERSION$8;
            }
          }, {
            key: "Default",
            get: function get() {
              return Default$7;
            }
          }]);
          return Carousel2;
        }();
        $__default["default"](document).on(EVENT_CLICK_DATA_API$4, SELECTOR_DATA_SLIDE, Carousel._dataApiClickHandler);
        $__default["default"](window).on(EVENT_LOAD_DATA_API$1, function() {
          var carousels = [].slice.call(document.querySelectorAll(SELECTOR_DATA_RIDE));
          for (var i = 0, len = carousels.length; i < len; i++) {
            var $carousel = $__default["default"](carousels[i]);
            Carousel._jQueryInterface.call($carousel, $carousel.data());
          }
        });
        $__default["default"].fn[NAME$8] = Carousel._jQueryInterface;
        $__default["default"].fn[NAME$8].Constructor = Carousel;
        $__default["default"].fn[NAME$8].noConflict = function() {
          $__default["default"].fn[NAME$8] = JQUERY_NO_CONFLICT$8;
          return Carousel._jQueryInterface;
        };
        var NAME$7 = "collapse";
        var VERSION$7 = "4.6.2";
        var DATA_KEY$7 = "bs.collapse";
        var EVENT_KEY$7 = "." + DATA_KEY$7;
        var DATA_API_KEY$4 = ".data-api";
        var JQUERY_NO_CONFLICT$7 = $__default["default"].fn[NAME$7];
        var CLASS_NAME_SHOW$6 = "show";
        var CLASS_NAME_COLLAPSE = "collapse";
        var CLASS_NAME_COLLAPSING = "collapsing";
        var CLASS_NAME_COLLAPSED = "collapsed";
        var DIMENSION_WIDTH = "width";
        var DIMENSION_HEIGHT = "height";
        var EVENT_SHOW$4 = "show" + EVENT_KEY$7;
        var EVENT_SHOWN$4 = "shown" + EVENT_KEY$7;
        var EVENT_HIDE$4 = "hide" + EVENT_KEY$7;
        var EVENT_HIDDEN$4 = "hidden" + EVENT_KEY$7;
        var EVENT_CLICK_DATA_API$3 = "click" + EVENT_KEY$7 + DATA_API_KEY$4;
        var SELECTOR_ACTIVES = ".show, .collapsing";
        var SELECTOR_DATA_TOGGLE$3 = '[data-toggle="collapse"]';
        var Default$6 = {
          toggle: true,
          parent: ""
        };
        var DefaultType$6 = {
          toggle: "boolean",
          parent: "(string|element)"
        };
        var Collapse = /* @__PURE__ */ function() {
          function Collapse2(element, config) {
            this._isTransitioning = false;
            this._element = element;
            this._config = this._getConfig(config);
            this._triggerArray = [].slice.call(document.querySelectorAll('[data-toggle="collapse"][href="#' + element.id + '"],' + ('[data-toggle="collapse"][data-target="#' + element.id + '"]')));
            var toggleList = [].slice.call(document.querySelectorAll(SELECTOR_DATA_TOGGLE$3));
            for (var i = 0, len = toggleList.length; i < len; i++) {
              var elem = toggleList[i];
              var selector = Util.getSelectorFromElement(elem);
              var filterElement = [].slice.call(document.querySelectorAll(selector)).filter(function(foundElem) {
                return foundElem === element;
              });
              if (selector !== null && filterElement.length > 0) {
                this._selector = selector;
                this._triggerArray.push(elem);
              }
            }
            this._parent = this._config.parent ? this._getParent() : null;
            if (!this._config.parent) {
              this._addAriaAndCollapsedClass(this._element, this._triggerArray);
            }
            if (this._config.toggle) {
              this.toggle();
            }
          }
          var _proto = Collapse2.prototype;
          _proto.toggle = function toggle() {
            if ($__default["default"](this._element).hasClass(CLASS_NAME_SHOW$6)) {
              this.hide();
            } else {
              this.show();
            }
          };
          _proto.show = function show() {
            var _this = this;
            if (this._isTransitioning || $__default["default"](this._element).hasClass(CLASS_NAME_SHOW$6)) {
              return;
            }
            var actives;
            var activesData;
            if (this._parent) {
              actives = [].slice.call(this._parent.querySelectorAll(SELECTOR_ACTIVES)).filter(function(elem) {
                if (typeof _this._config.parent === "string") {
                  return elem.getAttribute("data-parent") === _this._config.parent;
                }
                return elem.classList.contains(CLASS_NAME_COLLAPSE);
              });
              if (actives.length === 0) {
                actives = null;
              }
            }
            if (actives) {
              activesData = $__default["default"](actives).not(this._selector).data(DATA_KEY$7);
              if (activesData && activesData._isTransitioning) {
                return;
              }
            }
            var startEvent = $__default["default"].Event(EVENT_SHOW$4);
            $__default["default"](this._element).trigger(startEvent);
            if (startEvent.isDefaultPrevented()) {
              return;
            }
            if (actives) {
              Collapse2._jQueryInterface.call($__default["default"](actives).not(this._selector), "hide");
              if (!activesData) {
                $__default["default"](actives).data(DATA_KEY$7, null);
              }
            }
            var dimension = this._getDimension();
            $__default["default"](this._element).removeClass(CLASS_NAME_COLLAPSE).addClass(CLASS_NAME_COLLAPSING);
            this._element.style[dimension] = 0;
            if (this._triggerArray.length) {
              $__default["default"](this._triggerArray).removeClass(CLASS_NAME_COLLAPSED).attr("aria-expanded", true);
            }
            this.setTransitioning(true);
            var complete = function complete2() {
              $__default["default"](_this._element).removeClass(CLASS_NAME_COLLAPSING).addClass(CLASS_NAME_COLLAPSE + " " + CLASS_NAME_SHOW$6);
              _this._element.style[dimension] = "";
              _this.setTransitioning(false);
              $__default["default"](_this._element).trigger(EVENT_SHOWN$4);
            };
            var capitalizedDimension = dimension[0].toUpperCase() + dimension.slice(1);
            var scrollSize = "scroll" + capitalizedDimension;
            var transitionDuration = Util.getTransitionDurationFromElement(this._element);
            $__default["default"](this._element).one(Util.TRANSITION_END, complete).emulateTransitionEnd(transitionDuration);
            this._element.style[dimension] = this._element[scrollSize] + "px";
          };
          _proto.hide = function hide() {
            var _this2 = this;
            if (this._isTransitioning || !$__default["default"](this._element).hasClass(CLASS_NAME_SHOW$6)) {
              return;
            }
            var startEvent = $__default["default"].Event(EVENT_HIDE$4);
            $__default["default"](this._element).trigger(startEvent);
            if (startEvent.isDefaultPrevented()) {
              return;
            }
            var dimension = this._getDimension();
            this._element.style[dimension] = this._element.getBoundingClientRect()[dimension] + "px";
            Util.reflow(this._element);
            $__default["default"](this._element).addClass(CLASS_NAME_COLLAPSING).removeClass(CLASS_NAME_COLLAPSE + " " + CLASS_NAME_SHOW$6);
            var triggerArrayLength = this._triggerArray.length;
            if (triggerArrayLength > 0) {
              for (var i = 0; i < triggerArrayLength; i++) {
                var trigger = this._triggerArray[i];
                var selector = Util.getSelectorFromElement(trigger);
                if (selector !== null) {
                  var $elem = $__default["default"]([].slice.call(document.querySelectorAll(selector)));
                  if (!$elem.hasClass(CLASS_NAME_SHOW$6)) {
                    $__default["default"](trigger).addClass(CLASS_NAME_COLLAPSED).attr("aria-expanded", false);
                  }
                }
              }
            }
            this.setTransitioning(true);
            var complete = function complete2() {
              _this2.setTransitioning(false);
              $__default["default"](_this2._element).removeClass(CLASS_NAME_COLLAPSING).addClass(CLASS_NAME_COLLAPSE).trigger(EVENT_HIDDEN$4);
            };
            this._element.style[dimension] = "";
            var transitionDuration = Util.getTransitionDurationFromElement(this._element);
            $__default["default"](this._element).one(Util.TRANSITION_END, complete).emulateTransitionEnd(transitionDuration);
          };
          _proto.setTransitioning = function setTransitioning(isTransitioning) {
            this._isTransitioning = isTransitioning;
          };
          _proto.dispose = function dispose() {
            $__default["default"].removeData(this._element, DATA_KEY$7);
            this._config = null;
            this._parent = null;
            this._element = null;
            this._triggerArray = null;
            this._isTransitioning = null;
          };
          _proto._getConfig = function _getConfig(config) {
            config = _extends({}, Default$6, config);
            config.toggle = Boolean(config.toggle);
            Util.typeCheckConfig(NAME$7, config, DefaultType$6);
            return config;
          };
          _proto._getDimension = function _getDimension() {
            var hasWidth = $__default["default"](this._element).hasClass(DIMENSION_WIDTH);
            return hasWidth ? DIMENSION_WIDTH : DIMENSION_HEIGHT;
          };
          _proto._getParent = function _getParent() {
            var _this3 = this;
            var parent;
            if (Util.isElement(this._config.parent)) {
              parent = this._config.parent;
              if (typeof this._config.parent.jquery !== "undefined") {
                parent = this._config.parent[0];
              }
            } else {
              parent = document.querySelector(this._config.parent);
            }
            var selector = '[data-toggle="collapse"][data-parent="' + this._config.parent + '"]';
            var children = [].slice.call(parent.querySelectorAll(selector));
            $__default["default"](children).each(function(i, element) {
              _this3._addAriaAndCollapsedClass(Collapse2._getTargetFromElement(element), [element]);
            });
            return parent;
          };
          _proto._addAriaAndCollapsedClass = function _addAriaAndCollapsedClass(element, triggerArray) {
            var isOpen = $__default["default"](element).hasClass(CLASS_NAME_SHOW$6);
            if (triggerArray.length) {
              $__default["default"](triggerArray).toggleClass(CLASS_NAME_COLLAPSED, !isOpen).attr("aria-expanded", isOpen);
            }
          };
          Collapse2._getTargetFromElement = function _getTargetFromElement(element) {
            var selector = Util.getSelectorFromElement(element);
            return selector ? document.querySelector(selector) : null;
          };
          Collapse2._jQueryInterface = function _jQueryInterface(config) {
            return this.each(function() {
              var $element = $__default["default"](this);
              var data = $element.data(DATA_KEY$7);
              var _config = _extends({}, Default$6, $element.data(), typeof config === "object" && config ? config : {});
              if (!data && _config.toggle && typeof config === "string" && /show|hide/.test(config)) {
                _config.toggle = false;
              }
              if (!data) {
                data = new Collapse2(this, _config);
                $element.data(DATA_KEY$7, data);
              }
              if (typeof config === "string") {
                if (typeof data[config] === "undefined") {
                  throw new TypeError('No method named "' + config + '"');
                }
                data[config]();
              }
            });
          };
          _createClass(Collapse2, null, [{
            key: "VERSION",
            get: function get() {
              return VERSION$7;
            }
          }, {
            key: "Default",
            get: function get() {
              return Default$6;
            }
          }]);
          return Collapse2;
        }();
        $__default["default"](document).on(EVENT_CLICK_DATA_API$3, SELECTOR_DATA_TOGGLE$3, function(event) {
          if (event.currentTarget.tagName === "A") {
            event.preventDefault();
          }
          var $trigger = $__default["default"](this);
          var selector = Util.getSelectorFromElement(this);
          var selectors = [].slice.call(document.querySelectorAll(selector));
          $__default["default"](selectors).each(function() {
            var $target = $__default["default"](this);
            var data = $target.data(DATA_KEY$7);
            var config = data ? "toggle" : $trigger.data();
            Collapse._jQueryInterface.call($target, config);
          });
        });
        $__default["default"].fn[NAME$7] = Collapse._jQueryInterface;
        $__default["default"].fn[NAME$7].Constructor = Collapse;
        $__default["default"].fn[NAME$7].noConflict = function() {
          $__default["default"].fn[NAME$7] = JQUERY_NO_CONFLICT$7;
          return Collapse._jQueryInterface;
        };
        var NAME$6 = "dropdown";
        var VERSION$6 = "4.6.2";
        var DATA_KEY$6 = "bs.dropdown";
        var EVENT_KEY$6 = "." + DATA_KEY$6;
        var DATA_API_KEY$3 = ".data-api";
        var JQUERY_NO_CONFLICT$6 = $__default["default"].fn[NAME$6];
        var ESCAPE_KEYCODE$1 = 27;
        var SPACE_KEYCODE = 32;
        var TAB_KEYCODE = 9;
        var ARROW_UP_KEYCODE = 38;
        var ARROW_DOWN_KEYCODE = 40;
        var RIGHT_MOUSE_BUTTON_WHICH = 3;
        var REGEXP_KEYDOWN = new RegExp(ARROW_UP_KEYCODE + "|" + ARROW_DOWN_KEYCODE + "|" + ESCAPE_KEYCODE$1);
        var CLASS_NAME_DISABLED$1 = "disabled";
        var CLASS_NAME_SHOW$5 = "show";
        var CLASS_NAME_DROPUP = "dropup";
        var CLASS_NAME_DROPRIGHT = "dropright";
        var CLASS_NAME_DROPLEFT = "dropleft";
        var CLASS_NAME_MENURIGHT = "dropdown-menu-right";
        var CLASS_NAME_POSITION_STATIC = "position-static";
        var EVENT_HIDE$3 = "hide" + EVENT_KEY$6;
        var EVENT_HIDDEN$3 = "hidden" + EVENT_KEY$6;
        var EVENT_SHOW$3 = "show" + EVENT_KEY$6;
        var EVENT_SHOWN$3 = "shown" + EVENT_KEY$6;
        var EVENT_CLICK = "click" + EVENT_KEY$6;
        var EVENT_CLICK_DATA_API$2 = "click" + EVENT_KEY$6 + DATA_API_KEY$3;
        var EVENT_KEYDOWN_DATA_API = "keydown" + EVENT_KEY$6 + DATA_API_KEY$3;
        var EVENT_KEYUP_DATA_API = "keyup" + EVENT_KEY$6 + DATA_API_KEY$3;
        var SELECTOR_DATA_TOGGLE$2 = '[data-toggle="dropdown"]';
        var SELECTOR_FORM_CHILD = ".dropdown form";
        var SELECTOR_MENU = ".dropdown-menu";
        var SELECTOR_NAVBAR_NAV = ".navbar-nav";
        var SELECTOR_VISIBLE_ITEMS = ".dropdown-menu .dropdown-item:not(.disabled):not(:disabled)";
        var PLACEMENT_TOP = "top-start";
        var PLACEMENT_TOPEND = "top-end";
        var PLACEMENT_BOTTOM = "bottom-start";
        var PLACEMENT_BOTTOMEND = "bottom-end";
        var PLACEMENT_RIGHT = "right-start";
        var PLACEMENT_LEFT = "left-start";
        var Default$5 = {
          offset: 0,
          flip: true,
          boundary: "scrollParent",
          reference: "toggle",
          display: "dynamic",
          popperConfig: null
        };
        var DefaultType$5 = {
          offset: "(number|string|function)",
          flip: "boolean",
          boundary: "(string|element)",
          reference: "(string|element)",
          display: "string",
          popperConfig: "(null|object)"
        };
        var Dropdown = /* @__PURE__ */ function() {
          function Dropdown2(element, config) {
            this._element = element;
            this._popper = null;
            this._config = this._getConfig(config);
            this._menu = this._getMenuElement();
            this._inNavbar = this._detectNavbar();
            this._addEventListeners();
          }
          var _proto = Dropdown2.prototype;
          _proto.toggle = function toggle() {
            if (this._element.disabled || $__default["default"](this._element).hasClass(CLASS_NAME_DISABLED$1)) {
              return;
            }
            var isActive = $__default["default"](this._menu).hasClass(CLASS_NAME_SHOW$5);
            Dropdown2._clearMenus();
            if (isActive) {
              return;
            }
            this.show(true);
          };
          _proto.show = function show(usePopper) {
            if (usePopper === void 0) {
              usePopper = false;
            }
            if (this._element.disabled || $__default["default"](this._element).hasClass(CLASS_NAME_DISABLED$1) || $__default["default"](this._menu).hasClass(CLASS_NAME_SHOW$5)) {
              return;
            }
            var relatedTarget = {
              relatedTarget: this._element
            };
            var showEvent = $__default["default"].Event(EVENT_SHOW$3, relatedTarget);
            var parent = Dropdown2._getParentFromElement(this._element);
            $__default["default"](parent).trigger(showEvent);
            if (showEvent.isDefaultPrevented()) {
              return;
            }
            if (!this._inNavbar && usePopper) {
              if (typeof Popper__default["default"] === "undefined") {
                throw new TypeError("Bootstrap's dropdowns require Popper (https://popper.js.org)");
              }
              var referenceElement = this._element;
              if (this._config.reference === "parent") {
                referenceElement = parent;
              } else if (Util.isElement(this._config.reference)) {
                referenceElement = this._config.reference;
                if (typeof this._config.reference.jquery !== "undefined") {
                  referenceElement = this._config.reference[0];
                }
              }
              if (this._config.boundary !== "scrollParent") {
                $__default["default"](parent).addClass(CLASS_NAME_POSITION_STATIC);
              }
              this._popper = new Popper__default["default"](referenceElement, this._menu, this._getPopperConfig());
            }
            if ("ontouchstart" in document.documentElement && $__default["default"](parent).closest(SELECTOR_NAVBAR_NAV).length === 0) {
              $__default["default"](document.body).children().on("mouseover", null, $__default["default"].noop);
            }
            this._element.focus();
            this._element.setAttribute("aria-expanded", true);
            $__default["default"](this._menu).toggleClass(CLASS_NAME_SHOW$5);
            $__default["default"](parent).toggleClass(CLASS_NAME_SHOW$5).trigger($__default["default"].Event(EVENT_SHOWN$3, relatedTarget));
          };
          _proto.hide = function hide() {
            if (this._element.disabled || $__default["default"](this._element).hasClass(CLASS_NAME_DISABLED$1) || !$__default["default"](this._menu).hasClass(CLASS_NAME_SHOW$5)) {
              return;
            }
            var relatedTarget = {
              relatedTarget: this._element
            };
            var hideEvent = $__default["default"].Event(EVENT_HIDE$3, relatedTarget);
            var parent = Dropdown2._getParentFromElement(this._element);
            $__default["default"](parent).trigger(hideEvent);
            if (hideEvent.isDefaultPrevented()) {
              return;
            }
            if (this._popper) {
              this._popper.destroy();
            }
            $__default["default"](this._menu).toggleClass(CLASS_NAME_SHOW$5);
            $__default["default"](parent).toggleClass(CLASS_NAME_SHOW$5).trigger($__default["default"].Event(EVENT_HIDDEN$3, relatedTarget));
          };
          _proto.dispose = function dispose() {
            $__default["default"].removeData(this._element, DATA_KEY$6);
            $__default["default"](this._element).off(EVENT_KEY$6);
            this._element = null;
            this._menu = null;
            if (this._popper !== null) {
              this._popper.destroy();
              this._popper = null;
            }
          };
          _proto.update = function update() {
            this._inNavbar = this._detectNavbar();
            if (this._popper !== null) {
              this._popper.scheduleUpdate();
            }
          };
          _proto._addEventListeners = function _addEventListeners() {
            var _this = this;
            $__default["default"](this._element).on(EVENT_CLICK, function(event) {
              event.preventDefault();
              event.stopPropagation();
              _this.toggle();
            });
          };
          _proto._getConfig = function _getConfig(config) {
            config = _extends({}, this.constructor.Default, $__default["default"](this._element).data(), config);
            Util.typeCheckConfig(NAME$6, config, this.constructor.DefaultType);
            return config;
          };
          _proto._getMenuElement = function _getMenuElement() {
            if (!this._menu) {
              var parent = Dropdown2._getParentFromElement(this._element);
              if (parent) {
                this._menu = parent.querySelector(SELECTOR_MENU);
              }
            }
            return this._menu;
          };
          _proto._getPlacement = function _getPlacement() {
            var $parentDropdown = $__default["default"](this._element.parentNode);
            var placement = PLACEMENT_BOTTOM;
            if ($parentDropdown.hasClass(CLASS_NAME_DROPUP)) {
              placement = $__default["default"](this._menu).hasClass(CLASS_NAME_MENURIGHT) ? PLACEMENT_TOPEND : PLACEMENT_TOP;
            } else if ($parentDropdown.hasClass(CLASS_NAME_DROPRIGHT)) {
              placement = PLACEMENT_RIGHT;
            } else if ($parentDropdown.hasClass(CLASS_NAME_DROPLEFT)) {
              placement = PLACEMENT_LEFT;
            } else if ($__default["default"](this._menu).hasClass(CLASS_NAME_MENURIGHT)) {
              placement = PLACEMENT_BOTTOMEND;
            }
            return placement;
          };
          _proto._detectNavbar = function _detectNavbar() {
            return $__default["default"](this._element).closest(".navbar").length > 0;
          };
          _proto._getOffset = function _getOffset() {
            var _this2 = this;
            var offset = {};
            if (typeof this._config.offset === "function") {
              offset.fn = function(data) {
                data.offsets = _extends({}, data.offsets, _this2._config.offset(data.offsets, _this2._element));
                return data;
              };
            } else {
              offset.offset = this._config.offset;
            }
            return offset;
          };
          _proto._getPopperConfig = function _getPopperConfig() {
            var popperConfig = {
              placement: this._getPlacement(),
              modifiers: {
                offset: this._getOffset(),
                flip: {
                  enabled: this._config.flip
                },
                preventOverflow: {
                  boundariesElement: this._config.boundary
                }
              }
            };
            if (this._config.display === "static") {
              popperConfig.modifiers.applyStyle = {
                enabled: false
              };
            }
            return _extends({}, popperConfig, this._config.popperConfig);
          };
          Dropdown2._jQueryInterface = function _jQueryInterface(config) {
            return this.each(function() {
              var data = $__default["default"](this).data(DATA_KEY$6);
              var _config = typeof config === "object" ? config : null;
              if (!data) {
                data = new Dropdown2(this, _config);
                $__default["default"](this).data(DATA_KEY$6, data);
              }
              if (typeof config === "string") {
                if (typeof data[config] === "undefined") {
                  throw new TypeError('No method named "' + config + '"');
                }
                data[config]();
              }
            });
          };
          Dropdown2._clearMenus = function _clearMenus(event) {
            if (event && (event.which === RIGHT_MOUSE_BUTTON_WHICH || event.type === "keyup" && event.which !== TAB_KEYCODE)) {
              return;
            }
            var toggles = [].slice.call(document.querySelectorAll(SELECTOR_DATA_TOGGLE$2));
            for (var i = 0, len = toggles.length; i < len; i++) {
              var parent = Dropdown2._getParentFromElement(toggles[i]);
              var context = $__default["default"](toggles[i]).data(DATA_KEY$6);
              var relatedTarget = {
                relatedTarget: toggles[i]
              };
              if (event && event.type === "click") {
                relatedTarget.clickEvent = event;
              }
              if (!context) {
                continue;
              }
              var dropdownMenu = context._menu;
              if (!$__default["default"](parent).hasClass(CLASS_NAME_SHOW$5)) {
                continue;
              }
              if (event && (event.type === "click" && /input|textarea/i.test(event.target.tagName) || event.type === "keyup" && event.which === TAB_KEYCODE) && $__default["default"].contains(parent, event.target)) {
                continue;
              }
              var hideEvent = $__default["default"].Event(EVENT_HIDE$3, relatedTarget);
              $__default["default"](parent).trigger(hideEvent);
              if (hideEvent.isDefaultPrevented()) {
                continue;
              }
              if ("ontouchstart" in document.documentElement) {
                $__default["default"](document.body).children().off("mouseover", null, $__default["default"].noop);
              }
              toggles[i].setAttribute("aria-expanded", "false");
              if (context._popper) {
                context._popper.destroy();
              }
              $__default["default"](dropdownMenu).removeClass(CLASS_NAME_SHOW$5);
              $__default["default"](parent).removeClass(CLASS_NAME_SHOW$5).trigger($__default["default"].Event(EVENT_HIDDEN$3, relatedTarget));
            }
          };
          Dropdown2._getParentFromElement = function _getParentFromElement(element) {
            var parent;
            var selector = Util.getSelectorFromElement(element);
            if (selector) {
              parent = document.querySelector(selector);
            }
            return parent || element.parentNode;
          };
          Dropdown2._dataApiKeydownHandler = function _dataApiKeydownHandler(event) {
            if (/input|textarea/i.test(event.target.tagName) ? event.which === SPACE_KEYCODE || event.which !== ESCAPE_KEYCODE$1 && (event.which !== ARROW_DOWN_KEYCODE && event.which !== ARROW_UP_KEYCODE || $__default["default"](event.target).closest(SELECTOR_MENU).length) : !REGEXP_KEYDOWN.test(event.which)) {
              return;
            }
            if (this.disabled || $__default["default"](this).hasClass(CLASS_NAME_DISABLED$1)) {
              return;
            }
            var parent = Dropdown2._getParentFromElement(this);
            var isActive = $__default["default"](parent).hasClass(CLASS_NAME_SHOW$5);
            if (!isActive && event.which === ESCAPE_KEYCODE$1) {
              return;
            }
            event.preventDefault();
            event.stopPropagation();
            if (!isActive || event.which === ESCAPE_KEYCODE$1 || event.which === SPACE_KEYCODE) {
              if (event.which === ESCAPE_KEYCODE$1) {
                $__default["default"](parent.querySelector(SELECTOR_DATA_TOGGLE$2)).trigger("focus");
              }
              $__default["default"](this).trigger("click");
              return;
            }
            var items = [].slice.call(parent.querySelectorAll(SELECTOR_VISIBLE_ITEMS)).filter(function(item) {
              return $__default["default"](item).is(":visible");
            });
            if (items.length === 0) {
              return;
            }
            var index = items.indexOf(event.target);
            if (event.which === ARROW_UP_KEYCODE && index > 0) {
              index--;
            }
            if (event.which === ARROW_DOWN_KEYCODE && index < items.length - 1) {
              index++;
            }
            if (index < 0) {
              index = 0;
            }
            items[index].focus();
          };
          _createClass(Dropdown2, null, [{
            key: "VERSION",
            get: function get() {
              return VERSION$6;
            }
          }, {
            key: "Default",
            get: function get() {
              return Default$5;
            }
          }, {
            key: "DefaultType",
            get: function get() {
              return DefaultType$5;
            }
          }]);
          return Dropdown2;
        }();
        $__default["default"](document).on(EVENT_KEYDOWN_DATA_API, SELECTOR_DATA_TOGGLE$2, Dropdown._dataApiKeydownHandler).on(EVENT_KEYDOWN_DATA_API, SELECTOR_MENU, Dropdown._dataApiKeydownHandler).on(EVENT_CLICK_DATA_API$2 + " " + EVENT_KEYUP_DATA_API, Dropdown._clearMenus).on(EVENT_CLICK_DATA_API$2, SELECTOR_DATA_TOGGLE$2, function(event) {
          event.preventDefault();
          event.stopPropagation();
          Dropdown._jQueryInterface.call($__default["default"](this), "toggle");
        }).on(EVENT_CLICK_DATA_API$2, SELECTOR_FORM_CHILD, function(e) {
          e.stopPropagation();
        });
        $__default["default"].fn[NAME$6] = Dropdown._jQueryInterface;
        $__default["default"].fn[NAME$6].Constructor = Dropdown;
        $__default["default"].fn[NAME$6].noConflict = function() {
          $__default["default"].fn[NAME$6] = JQUERY_NO_CONFLICT$6;
          return Dropdown._jQueryInterface;
        };
        var NAME$5 = "modal";
        var VERSION$5 = "4.6.2";
        var DATA_KEY$5 = "bs.modal";
        var EVENT_KEY$5 = "." + DATA_KEY$5;
        var DATA_API_KEY$2 = ".data-api";
        var JQUERY_NO_CONFLICT$5 = $__default["default"].fn[NAME$5];
        var ESCAPE_KEYCODE = 27;
        var CLASS_NAME_SCROLLABLE = "modal-dialog-scrollable";
        var CLASS_NAME_SCROLLBAR_MEASURER = "modal-scrollbar-measure";
        var CLASS_NAME_BACKDROP = "modal-backdrop";
        var CLASS_NAME_OPEN = "modal-open";
        var CLASS_NAME_FADE$4 = "fade";
        var CLASS_NAME_SHOW$4 = "show";
        var CLASS_NAME_STATIC = "modal-static";
        var EVENT_HIDE$2 = "hide" + EVENT_KEY$5;
        var EVENT_HIDE_PREVENTED = "hidePrevented" + EVENT_KEY$5;
        var EVENT_HIDDEN$2 = "hidden" + EVENT_KEY$5;
        var EVENT_SHOW$2 = "show" + EVENT_KEY$5;
        var EVENT_SHOWN$2 = "shown" + EVENT_KEY$5;
        var EVENT_FOCUSIN = "focusin" + EVENT_KEY$5;
        var EVENT_RESIZE = "resize" + EVENT_KEY$5;
        var EVENT_CLICK_DISMISS$1 = "click.dismiss" + EVENT_KEY$5;
        var EVENT_KEYDOWN_DISMISS = "keydown.dismiss" + EVENT_KEY$5;
        var EVENT_MOUSEUP_DISMISS = "mouseup.dismiss" + EVENT_KEY$5;
        var EVENT_MOUSEDOWN_DISMISS = "mousedown.dismiss" + EVENT_KEY$5;
        var EVENT_CLICK_DATA_API$1 = "click" + EVENT_KEY$5 + DATA_API_KEY$2;
        var SELECTOR_DIALOG = ".modal-dialog";
        var SELECTOR_MODAL_BODY = ".modal-body";
        var SELECTOR_DATA_TOGGLE$1 = '[data-toggle="modal"]';
        var SELECTOR_DATA_DISMISS$1 = '[data-dismiss="modal"]';
        var SELECTOR_FIXED_CONTENT = ".fixed-top, .fixed-bottom, .is-fixed, .sticky-top";
        var SELECTOR_STICKY_CONTENT = ".sticky-top";
        var Default$4 = {
          backdrop: true,
          keyboard: true,
          focus: true,
          show: true
        };
        var DefaultType$4 = {
          backdrop: "(boolean|string)",
          keyboard: "boolean",
          focus: "boolean",
          show: "boolean"
        };
        var Modal = /* @__PURE__ */ function() {
          function Modal2(element, config) {
            this._config = this._getConfig(config);
            this._element = element;
            this._dialog = element.querySelector(SELECTOR_DIALOG);
            this._backdrop = null;
            this._isShown = false;
            this._isBodyOverflowing = false;
            this._ignoreBackdropClick = false;
            this._isTransitioning = false;
            this._scrollbarWidth = 0;
          }
          var _proto = Modal2.prototype;
          _proto.toggle = function toggle(relatedTarget) {
            return this._isShown ? this.hide() : this.show(relatedTarget);
          };
          _proto.show = function show(relatedTarget) {
            var _this = this;
            if (this._isShown || this._isTransitioning) {
              return;
            }
            var showEvent = $__default["default"].Event(EVENT_SHOW$2, {
              relatedTarget
            });
            $__default["default"](this._element).trigger(showEvent);
            if (showEvent.isDefaultPrevented()) {
              return;
            }
            this._isShown = true;
            if ($__default["default"](this._element).hasClass(CLASS_NAME_FADE$4)) {
              this._isTransitioning = true;
            }
            this._checkScrollbar();
            this._setScrollbar();
            this._adjustDialog();
            this._setEscapeEvent();
            this._setResizeEvent();
            $__default["default"](this._element).on(EVENT_CLICK_DISMISS$1, SELECTOR_DATA_DISMISS$1, function(event) {
              return _this.hide(event);
            });
            $__default["default"](this._dialog).on(EVENT_MOUSEDOWN_DISMISS, function() {
              $__default["default"](_this._element).one(EVENT_MOUSEUP_DISMISS, function(event) {
                if ($__default["default"](event.target).is(_this._element)) {
                  _this._ignoreBackdropClick = true;
                }
              });
            });
            this._showBackdrop(function() {
              return _this._showElement(relatedTarget);
            });
          };
          _proto.hide = function hide(event) {
            var _this2 = this;
            if (event) {
              event.preventDefault();
            }
            if (!this._isShown || this._isTransitioning) {
              return;
            }
            var hideEvent = $__default["default"].Event(EVENT_HIDE$2);
            $__default["default"](this._element).trigger(hideEvent);
            if (!this._isShown || hideEvent.isDefaultPrevented()) {
              return;
            }
            this._isShown = false;
            var transition = $__default["default"](this._element).hasClass(CLASS_NAME_FADE$4);
            if (transition) {
              this._isTransitioning = true;
            }
            this._setEscapeEvent();
            this._setResizeEvent();
            $__default["default"](document).off(EVENT_FOCUSIN);
            $__default["default"](this._element).removeClass(CLASS_NAME_SHOW$4);
            $__default["default"](this._element).off(EVENT_CLICK_DISMISS$1);
            $__default["default"](this._dialog).off(EVENT_MOUSEDOWN_DISMISS);
            if (transition) {
              var transitionDuration = Util.getTransitionDurationFromElement(this._element);
              $__default["default"](this._element).one(Util.TRANSITION_END, function(event2) {
                return _this2._hideModal(event2);
              }).emulateTransitionEnd(transitionDuration);
            } else {
              this._hideModal();
            }
          };
          _proto.dispose = function dispose() {
            [window, this._element, this._dialog].forEach(function(htmlElement) {
              return $__default["default"](htmlElement).off(EVENT_KEY$5);
            });
            $__default["default"](document).off(EVENT_FOCUSIN);
            $__default["default"].removeData(this._element, DATA_KEY$5);
            this._config = null;
            this._element = null;
            this._dialog = null;
            this._backdrop = null;
            this._isShown = null;
            this._isBodyOverflowing = null;
            this._ignoreBackdropClick = null;
            this._isTransitioning = null;
            this._scrollbarWidth = null;
          };
          _proto.handleUpdate = function handleUpdate() {
            this._adjustDialog();
          };
          _proto._getConfig = function _getConfig(config) {
            config = _extends({}, Default$4, config);
            Util.typeCheckConfig(NAME$5, config, DefaultType$4);
            return config;
          };
          _proto._triggerBackdropTransition = function _triggerBackdropTransition() {
            var _this3 = this;
            var hideEventPrevented = $__default["default"].Event(EVENT_HIDE_PREVENTED);
            $__default["default"](this._element).trigger(hideEventPrevented);
            if (hideEventPrevented.isDefaultPrevented()) {
              return;
            }
            var isModalOverflowing = this._element.scrollHeight > document.documentElement.clientHeight;
            if (!isModalOverflowing) {
              this._element.style.overflowY = "hidden";
            }
            this._element.classList.add(CLASS_NAME_STATIC);
            var modalTransitionDuration = Util.getTransitionDurationFromElement(this._dialog);
            $__default["default"](this._element).off(Util.TRANSITION_END);
            $__default["default"](this._element).one(Util.TRANSITION_END, function() {
              _this3._element.classList.remove(CLASS_NAME_STATIC);
              if (!isModalOverflowing) {
                $__default["default"](_this3._element).one(Util.TRANSITION_END, function() {
                  _this3._element.style.overflowY = "";
                }).emulateTransitionEnd(_this3._element, modalTransitionDuration);
              }
            }).emulateTransitionEnd(modalTransitionDuration);
            this._element.focus();
          };
          _proto._showElement = function _showElement(relatedTarget) {
            var _this4 = this;
            var transition = $__default["default"](this._element).hasClass(CLASS_NAME_FADE$4);
            var modalBody = this._dialog ? this._dialog.querySelector(SELECTOR_MODAL_BODY) : null;
            if (!this._element.parentNode || this._element.parentNode.nodeType !== Node.ELEMENT_NODE) {
              document.body.appendChild(this._element);
            }
            this._element.style.display = "block";
            this._element.removeAttribute("aria-hidden");
            this._element.setAttribute("aria-modal", true);
            this._element.setAttribute("role", "dialog");
            if ($__default["default"](this._dialog).hasClass(CLASS_NAME_SCROLLABLE) && modalBody) {
              modalBody.scrollTop = 0;
            } else {
              this._element.scrollTop = 0;
            }
            if (transition) {
              Util.reflow(this._element);
            }
            $__default["default"](this._element).addClass(CLASS_NAME_SHOW$4);
            if (this._config.focus) {
              this._enforceFocus();
            }
            var shownEvent = $__default["default"].Event(EVENT_SHOWN$2, {
              relatedTarget
            });
            var transitionComplete = function transitionComplete2() {
              if (_this4._config.focus) {
                _this4._element.focus();
              }
              _this4._isTransitioning = false;
              $__default["default"](_this4._element).trigger(shownEvent);
            };
            if (transition) {
              var transitionDuration = Util.getTransitionDurationFromElement(this._dialog);
              $__default["default"](this._dialog).one(Util.TRANSITION_END, transitionComplete).emulateTransitionEnd(transitionDuration);
            } else {
              transitionComplete();
            }
          };
          _proto._enforceFocus = function _enforceFocus() {
            var _this5 = this;
            $__default["default"](document).off(EVENT_FOCUSIN).on(EVENT_FOCUSIN, function(event) {
              if (document !== event.target && _this5._element !== event.target && $__default["default"](_this5._element).has(event.target).length === 0) {
                _this5._element.focus();
              }
            });
          };
          _proto._setEscapeEvent = function _setEscapeEvent() {
            var _this6 = this;
            if (this._isShown) {
              $__default["default"](this._element).on(EVENT_KEYDOWN_DISMISS, function(event) {
                if (_this6._config.keyboard && event.which === ESCAPE_KEYCODE) {
                  event.preventDefault();
                  _this6.hide();
                } else if (!_this6._config.keyboard && event.which === ESCAPE_KEYCODE) {
                  _this6._triggerBackdropTransition();
                }
              });
            } else if (!this._isShown) {
              $__default["default"](this._element).off(EVENT_KEYDOWN_DISMISS);
            }
          };
          _proto._setResizeEvent = function _setResizeEvent() {
            var _this7 = this;
            if (this._isShown) {
              $__default["default"](window).on(EVENT_RESIZE, function(event) {
                return _this7.handleUpdate(event);
              });
            } else {
              $__default["default"](window).off(EVENT_RESIZE);
            }
          };
          _proto._hideModal = function _hideModal() {
            var _this8 = this;
            this._element.style.display = "none";
            this._element.setAttribute("aria-hidden", true);
            this._element.removeAttribute("aria-modal");
            this._element.removeAttribute("role");
            this._isTransitioning = false;
            this._showBackdrop(function() {
              $__default["default"](document.body).removeClass(CLASS_NAME_OPEN);
              _this8._resetAdjustments();
              _this8._resetScrollbar();
              $__default["default"](_this8._element).trigger(EVENT_HIDDEN$2);
            });
          };
          _proto._removeBackdrop = function _removeBackdrop() {
            if (this._backdrop) {
              $__default["default"](this._backdrop).remove();
              this._backdrop = null;
            }
          };
          _proto._showBackdrop = function _showBackdrop(callback) {
            var _this9 = this;
            var animate = $__default["default"](this._element).hasClass(CLASS_NAME_FADE$4) ? CLASS_NAME_FADE$4 : "";
            if (this._isShown && this._config.backdrop) {
              this._backdrop = document.createElement("div");
              this._backdrop.className = CLASS_NAME_BACKDROP;
              if (animate) {
                this._backdrop.classList.add(animate);
              }
              $__default["default"](this._backdrop).appendTo(document.body);
              $__default["default"](this._element).on(EVENT_CLICK_DISMISS$1, function(event) {
                if (_this9._ignoreBackdropClick) {
                  _this9._ignoreBackdropClick = false;
                  return;
                }
                if (event.target !== event.currentTarget) {
                  return;
                }
                if (_this9._config.backdrop === "static") {
                  _this9._triggerBackdropTransition();
                } else {
                  _this9.hide();
                }
              });
              if (animate) {
                Util.reflow(this._backdrop);
              }
              $__default["default"](this._backdrop).addClass(CLASS_NAME_SHOW$4);
              if (!callback) {
                return;
              }
              if (!animate) {
                callback();
                return;
              }
              var backdropTransitionDuration = Util.getTransitionDurationFromElement(this._backdrop);
              $__default["default"](this._backdrop).one(Util.TRANSITION_END, callback).emulateTransitionEnd(backdropTransitionDuration);
            } else if (!this._isShown && this._backdrop) {
              $__default["default"](this._backdrop).removeClass(CLASS_NAME_SHOW$4);
              var callbackRemove = function callbackRemove2() {
                _this9._removeBackdrop();
                if (callback) {
                  callback();
                }
              };
              if ($__default["default"](this._element).hasClass(CLASS_NAME_FADE$4)) {
                var _backdropTransitionDuration = Util.getTransitionDurationFromElement(this._backdrop);
                $__default["default"](this._backdrop).one(Util.TRANSITION_END, callbackRemove).emulateTransitionEnd(_backdropTransitionDuration);
              } else {
                callbackRemove();
              }
            } else if (callback) {
              callback();
            }
          };
          _proto._adjustDialog = function _adjustDialog() {
            var isModalOverflowing = this._element.scrollHeight > document.documentElement.clientHeight;
            if (!this._isBodyOverflowing && isModalOverflowing) {
              this._element.style.paddingLeft = this._scrollbarWidth + "px";
            }
            if (this._isBodyOverflowing && !isModalOverflowing) {
              this._element.style.paddingRight = this._scrollbarWidth + "px";
            }
          };
          _proto._resetAdjustments = function _resetAdjustments() {
            this._element.style.paddingLeft = "";
            this._element.style.paddingRight = "";
          };
          _proto._checkScrollbar = function _checkScrollbar() {
            var rect = document.body.getBoundingClientRect();
            this._isBodyOverflowing = Math.round(rect.left + rect.right) < window.innerWidth;
            this._scrollbarWidth = this._getScrollbarWidth();
          };
          _proto._setScrollbar = function _setScrollbar() {
            var _this10 = this;
            if (this._isBodyOverflowing) {
              var fixedContent = [].slice.call(document.querySelectorAll(SELECTOR_FIXED_CONTENT));
              var stickyContent = [].slice.call(document.querySelectorAll(SELECTOR_STICKY_CONTENT));
              $__default["default"](fixedContent).each(function(index, element) {
                var actualPadding2 = element.style.paddingRight;
                var calculatedPadding2 = $__default["default"](element).css("padding-right");
                $__default["default"](element).data("padding-right", actualPadding2).css("padding-right", parseFloat(calculatedPadding2) + _this10._scrollbarWidth + "px");
              });
              $__default["default"](stickyContent).each(function(index, element) {
                var actualMargin = element.style.marginRight;
                var calculatedMargin = $__default["default"](element).css("margin-right");
                $__default["default"](element).data("margin-right", actualMargin).css("margin-right", parseFloat(calculatedMargin) - _this10._scrollbarWidth + "px");
              });
              var actualPadding = document.body.style.paddingRight;
              var calculatedPadding = $__default["default"](document.body).css("padding-right");
              $__default["default"](document.body).data("padding-right", actualPadding).css("padding-right", parseFloat(calculatedPadding) + this._scrollbarWidth + "px");
            }
            $__default["default"](document.body).addClass(CLASS_NAME_OPEN);
          };
          _proto._resetScrollbar = function _resetScrollbar() {
            var fixedContent = [].slice.call(document.querySelectorAll(SELECTOR_FIXED_CONTENT));
            $__default["default"](fixedContent).each(function(index, element) {
              var padding2 = $__default["default"](element).data("padding-right");
              $__default["default"](element).removeData("padding-right");
              element.style.paddingRight = padding2 ? padding2 : "";
            });
            var elements = [].slice.call(document.querySelectorAll("" + SELECTOR_STICKY_CONTENT));
            $__default["default"](elements).each(function(index, element) {
              var margin = $__default["default"](element).data("margin-right");
              if (typeof margin !== "undefined") {
                $__default["default"](element).css("margin-right", margin).removeData("margin-right");
              }
            });
            var padding = $__default["default"](document.body).data("padding-right");
            $__default["default"](document.body).removeData("padding-right");
            document.body.style.paddingRight = padding ? padding : "";
          };
          _proto._getScrollbarWidth = function _getScrollbarWidth() {
            var scrollDiv = document.createElement("div");
            scrollDiv.className = CLASS_NAME_SCROLLBAR_MEASURER;
            document.body.appendChild(scrollDiv);
            var scrollbarWidth = scrollDiv.getBoundingClientRect().width - scrollDiv.clientWidth;
            document.body.removeChild(scrollDiv);
            return scrollbarWidth;
          };
          Modal2._jQueryInterface = function _jQueryInterface(config, relatedTarget) {
            return this.each(function() {
              var data = $__default["default"](this).data(DATA_KEY$5);
              var _config = _extends({}, Default$4, $__default["default"](this).data(), typeof config === "object" && config ? config : {});
              if (!data) {
                data = new Modal2(this, _config);
                $__default["default"](this).data(DATA_KEY$5, data);
              }
              if (typeof config === "string") {
                if (typeof data[config] === "undefined") {
                  throw new TypeError('No method named "' + config + '"');
                }
                data[config](relatedTarget);
              } else if (_config.show) {
                data.show(relatedTarget);
              }
            });
          };
          _createClass(Modal2, null, [{
            key: "VERSION",
            get: function get() {
              return VERSION$5;
            }
          }, {
            key: "Default",
            get: function get() {
              return Default$4;
            }
          }]);
          return Modal2;
        }();
        $__default["default"](document).on(EVENT_CLICK_DATA_API$1, SELECTOR_DATA_TOGGLE$1, function(event) {
          var _this11 = this;
          var target;
          var selector = Util.getSelectorFromElement(this);
          if (selector) {
            target = document.querySelector(selector);
          }
          var config = $__default["default"](target).data(DATA_KEY$5) ? "toggle" : _extends({}, $__default["default"](target).data(), $__default["default"](this).data());
          if (this.tagName === "A" || this.tagName === "AREA") {
            event.preventDefault();
          }
          var $target = $__default["default"](target).one(EVENT_SHOW$2, function(showEvent) {
            if (showEvent.isDefaultPrevented()) {
              return;
            }
            $target.one(EVENT_HIDDEN$2, function() {
              if ($__default["default"](_this11).is(":visible")) {
                _this11.focus();
              }
            });
          });
          Modal._jQueryInterface.call($__default["default"](target), config, this);
        });
        $__default["default"].fn[NAME$5] = Modal._jQueryInterface;
        $__default["default"].fn[NAME$5].Constructor = Modal;
        $__default["default"].fn[NAME$5].noConflict = function() {
          $__default["default"].fn[NAME$5] = JQUERY_NO_CONFLICT$5;
          return Modal._jQueryInterface;
        };
        var uriAttrs = ["background", "cite", "href", "itemtype", "longdesc", "poster", "src", "xlink:href"];
        var ARIA_ATTRIBUTE_PATTERN = /^aria-[\w-]*$/i;
        var DefaultWhitelist = {
          // Global attributes allowed on any supplied element below.
          "*": ["class", "dir", "id", "lang", "role", ARIA_ATTRIBUTE_PATTERN],
          a: ["target", "href", "title", "rel"],
          area: [],
          b: [],
          br: [],
          col: [],
          code: [],
          div: [],
          em: [],
          hr: [],
          h1: [],
          h2: [],
          h3: [],
          h4: [],
          h5: [],
          h6: [],
          i: [],
          img: ["src", "srcset", "alt", "title", "width", "height"],
          li: [],
          ol: [],
          p: [],
          pre: [],
          s: [],
          small: [],
          span: [],
          sub: [],
          sup: [],
          strong: [],
          u: [],
          ul: []
        };
        var SAFE_URL_PATTERN = /^(?:(?:https?|mailto|ftp|tel|file|sms):|[^#&/:?]*(?:[#/?]|$))/i;
        var DATA_URL_PATTERN = /^data:(?:image\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\/(?:mpeg|mp4|ogg|webm)|audio\/(?:mp3|oga|ogg|opus));base64,[\d+/a-z]+=*$/i;
        function allowedAttribute(attr, allowedAttributeList) {
          var attrName = attr.nodeName.toLowerCase();
          if (allowedAttributeList.indexOf(attrName) !== -1) {
            if (uriAttrs.indexOf(attrName) !== -1) {
              return Boolean(SAFE_URL_PATTERN.test(attr.nodeValue) || DATA_URL_PATTERN.test(attr.nodeValue));
            }
            return true;
          }
          var regExp = allowedAttributeList.filter(function(attrRegex) {
            return attrRegex instanceof RegExp;
          });
          for (var i = 0, len = regExp.length; i < len; i++) {
            if (regExp[i].test(attrName)) {
              return true;
            }
          }
          return false;
        }
        function sanitizeHtml(unsafeHtml, whiteList, sanitizeFn) {
          if (unsafeHtml.length === 0) {
            return unsafeHtml;
          }
          if (sanitizeFn && typeof sanitizeFn === "function") {
            return sanitizeFn(unsafeHtml);
          }
          var domParser = new window.DOMParser();
          var createdDocument = domParser.parseFromString(unsafeHtml, "text/html");
          var whitelistKeys = Object.keys(whiteList);
          var elements = [].slice.call(createdDocument.body.querySelectorAll("*"));
          var _loop = function _loop2(i2, len2) {
            var el = elements[i2];
            var elName = el.nodeName.toLowerCase();
            if (whitelistKeys.indexOf(el.nodeName.toLowerCase()) === -1) {
              el.parentNode.removeChild(el);
              return "continue";
            }
            var attributeList = [].slice.call(el.attributes);
            var whitelistedAttributes = [].concat(whiteList["*"] || [], whiteList[elName] || []);
            attributeList.forEach(function(attr) {
              if (!allowedAttribute(attr, whitelistedAttributes)) {
                el.removeAttribute(attr.nodeName);
              }
            });
          };
          for (var i = 0, len = elements.length; i < len; i++) {
            var _ret = _loop(i);
            if (_ret === "continue")
              continue;
          }
          return createdDocument.body.innerHTML;
        }
        var NAME$4 = "tooltip";
        var VERSION$4 = "4.6.2";
        var DATA_KEY$4 = "bs.tooltip";
        var EVENT_KEY$4 = "." + DATA_KEY$4;
        var JQUERY_NO_CONFLICT$4 = $__default["default"].fn[NAME$4];
        var CLASS_PREFIX$1 = "bs-tooltip";
        var BSCLS_PREFIX_REGEX$1 = new RegExp("(^|\\s)" + CLASS_PREFIX$1 + "\\S+", "g");
        var DISALLOWED_ATTRIBUTES = ["sanitize", "whiteList", "sanitizeFn"];
        var CLASS_NAME_FADE$3 = "fade";
        var CLASS_NAME_SHOW$3 = "show";
        var HOVER_STATE_SHOW = "show";
        var HOVER_STATE_OUT = "out";
        var SELECTOR_TOOLTIP_INNER = ".tooltip-inner";
        var SELECTOR_ARROW = ".arrow";
        var TRIGGER_HOVER = "hover";
        var TRIGGER_FOCUS = "focus";
        var TRIGGER_CLICK = "click";
        var TRIGGER_MANUAL = "manual";
        var AttachmentMap = {
          AUTO: "auto",
          TOP: "top",
          RIGHT: "right",
          BOTTOM: "bottom",
          LEFT: "left"
        };
        var Default$3 = {
          animation: true,
          template: '<div class="tooltip" role="tooltip"><div class="arrow"></div><div class="tooltip-inner"></div></div>',
          trigger: "hover focus",
          title: "",
          delay: 0,
          html: false,
          selector: false,
          placement: "top",
          offset: 0,
          container: false,
          fallbackPlacement: "flip",
          boundary: "scrollParent",
          customClass: "",
          sanitize: true,
          sanitizeFn: null,
          whiteList: DefaultWhitelist,
          popperConfig: null
        };
        var DefaultType$3 = {
          animation: "boolean",
          template: "string",
          title: "(string|element|function)",
          trigger: "string",
          delay: "(number|object)",
          html: "boolean",
          selector: "(string|boolean)",
          placement: "(string|function)",
          offset: "(number|string|function)",
          container: "(string|element|boolean)",
          fallbackPlacement: "(string|array)",
          boundary: "(string|element)",
          customClass: "(string|function)",
          sanitize: "boolean",
          sanitizeFn: "(null|function)",
          whiteList: "object",
          popperConfig: "(null|object)"
        };
        var Event$1 = {
          HIDE: "hide" + EVENT_KEY$4,
          HIDDEN: "hidden" + EVENT_KEY$4,
          SHOW: "show" + EVENT_KEY$4,
          SHOWN: "shown" + EVENT_KEY$4,
          INSERTED: "inserted" + EVENT_KEY$4,
          CLICK: "click" + EVENT_KEY$4,
          FOCUSIN: "focusin" + EVENT_KEY$4,
          FOCUSOUT: "focusout" + EVENT_KEY$4,
          MOUSEENTER: "mouseenter" + EVENT_KEY$4,
          MOUSELEAVE: "mouseleave" + EVENT_KEY$4
        };
        var Tooltip = /* @__PURE__ */ function() {
          function Tooltip2(element, config) {
            if (typeof Popper__default["default"] === "undefined") {
              throw new TypeError("Bootstrap's tooltips require Popper (https://popper.js.org)");
            }
            this._isEnabled = true;
            this._timeout = 0;
            this._hoverState = "";
            this._activeTrigger = {};
            this._popper = null;
            this.element = element;
            this.config = this._getConfig(config);
            this.tip = null;
            this._setListeners();
          }
          var _proto = Tooltip2.prototype;
          _proto.enable = function enable() {
            this._isEnabled = true;
          };
          _proto.disable = function disable() {
            this._isEnabled = false;
          };
          _proto.toggleEnabled = function toggleEnabled() {
            this._isEnabled = !this._isEnabled;
          };
          _proto.toggle = function toggle(event) {
            if (!this._isEnabled) {
              return;
            }
            if (event) {
              var dataKey = this.constructor.DATA_KEY;
              var context = $__default["default"](event.currentTarget).data(dataKey);
              if (!context) {
                context = new this.constructor(event.currentTarget, this._getDelegateConfig());
                $__default["default"](event.currentTarget).data(dataKey, context);
              }
              context._activeTrigger.click = !context._activeTrigger.click;
              if (context._isWithActiveTrigger()) {
                context._enter(null, context);
              } else {
                context._leave(null, context);
              }
            } else {
              if ($__default["default"](this.getTipElement()).hasClass(CLASS_NAME_SHOW$3)) {
                this._leave(null, this);
                return;
              }
              this._enter(null, this);
            }
          };
          _proto.dispose = function dispose() {
            clearTimeout(this._timeout);
            $__default["default"].removeData(this.element, this.constructor.DATA_KEY);
            $__default["default"](this.element).off(this.constructor.EVENT_KEY);
            $__default["default"](this.element).closest(".modal").off("hide.bs.modal", this._hideModalHandler);
            if (this.tip) {
              $__default["default"](this.tip).remove();
            }
            this._isEnabled = null;
            this._timeout = null;
            this._hoverState = null;
            this._activeTrigger = null;
            if (this._popper) {
              this._popper.destroy();
            }
            this._popper = null;
            this.element = null;
            this.config = null;
            this.tip = null;
          };
          _proto.show = function show() {
            var _this = this;
            if ($__default["default"](this.element).css("display") === "none") {
              throw new Error("Please use show on visible elements");
            }
            var showEvent = $__default["default"].Event(this.constructor.Event.SHOW);
            if (this.isWithContent() && this._isEnabled) {
              $__default["default"](this.element).trigger(showEvent);
              var shadowRoot = Util.findShadowRoot(this.element);
              var isInTheDom = $__default["default"].contains(shadowRoot !== null ? shadowRoot : this.element.ownerDocument.documentElement, this.element);
              if (showEvent.isDefaultPrevented() || !isInTheDom) {
                return;
              }
              var tip = this.getTipElement();
              var tipId = Util.getUID(this.constructor.NAME);
              tip.setAttribute("id", tipId);
              this.element.setAttribute("aria-describedby", tipId);
              this.setContent();
              if (this.config.animation) {
                $__default["default"](tip).addClass(CLASS_NAME_FADE$3);
              }
              var placement = typeof this.config.placement === "function" ? this.config.placement.call(this, tip, this.element) : this.config.placement;
              var attachment = this._getAttachment(placement);
              this.addAttachmentClass(attachment);
              var container = this._getContainer();
              $__default["default"](tip).data(this.constructor.DATA_KEY, this);
              if (!$__default["default"].contains(this.element.ownerDocument.documentElement, this.tip)) {
                $__default["default"](tip).appendTo(container);
              }
              $__default["default"](this.element).trigger(this.constructor.Event.INSERTED);
              this._popper = new Popper__default["default"](this.element, tip, this._getPopperConfig(attachment));
              $__default["default"](tip).addClass(CLASS_NAME_SHOW$3);
              $__default["default"](tip).addClass(this.config.customClass);
              if ("ontouchstart" in document.documentElement) {
                $__default["default"](document.body).children().on("mouseover", null, $__default["default"].noop);
              }
              var complete = function complete2() {
                if (_this.config.animation) {
                  _this._fixTransition();
                }
                var prevHoverState = _this._hoverState;
                _this._hoverState = null;
                $__default["default"](_this.element).trigger(_this.constructor.Event.SHOWN);
                if (prevHoverState === HOVER_STATE_OUT) {
                  _this._leave(null, _this);
                }
              };
              if ($__default["default"](this.tip).hasClass(CLASS_NAME_FADE$3)) {
                var transitionDuration = Util.getTransitionDurationFromElement(this.tip);
                $__default["default"](this.tip).one(Util.TRANSITION_END, complete).emulateTransitionEnd(transitionDuration);
              } else {
                complete();
              }
            }
          };
          _proto.hide = function hide(callback) {
            var _this2 = this;
            var tip = this.getTipElement();
            var hideEvent = $__default["default"].Event(this.constructor.Event.HIDE);
            var complete = function complete2() {
              if (_this2._hoverState !== HOVER_STATE_SHOW && tip.parentNode) {
                tip.parentNode.removeChild(tip);
              }
              _this2._cleanTipClass();
              _this2.element.removeAttribute("aria-describedby");
              $__default["default"](_this2.element).trigger(_this2.constructor.Event.HIDDEN);
              if (_this2._popper !== null) {
                _this2._popper.destroy();
              }
              if (callback) {
                callback();
              }
            };
            $__default["default"](this.element).trigger(hideEvent);
            if (hideEvent.isDefaultPrevented()) {
              return;
            }
            $__default["default"](tip).removeClass(CLASS_NAME_SHOW$3);
            if ("ontouchstart" in document.documentElement) {
              $__default["default"](document.body).children().off("mouseover", null, $__default["default"].noop);
            }
            this._activeTrigger[TRIGGER_CLICK] = false;
            this._activeTrigger[TRIGGER_FOCUS] = false;
            this._activeTrigger[TRIGGER_HOVER] = false;
            if ($__default["default"](this.tip).hasClass(CLASS_NAME_FADE$3)) {
              var transitionDuration = Util.getTransitionDurationFromElement(tip);
              $__default["default"](tip).one(Util.TRANSITION_END, complete).emulateTransitionEnd(transitionDuration);
            } else {
              complete();
            }
            this._hoverState = "";
          };
          _proto.update = function update() {
            if (this._popper !== null) {
              this._popper.scheduleUpdate();
            }
          };
          _proto.isWithContent = function isWithContent() {
            return Boolean(this.getTitle());
          };
          _proto.addAttachmentClass = function addAttachmentClass(attachment) {
            $__default["default"](this.getTipElement()).addClass(CLASS_PREFIX$1 + "-" + attachment);
          };
          _proto.getTipElement = function getTipElement() {
            this.tip = this.tip || $__default["default"](this.config.template)[0];
            return this.tip;
          };
          _proto.setContent = function setContent() {
            var tip = this.getTipElement();
            this.setElementContent($__default["default"](tip.querySelectorAll(SELECTOR_TOOLTIP_INNER)), this.getTitle());
            $__default["default"](tip).removeClass(CLASS_NAME_FADE$3 + " " + CLASS_NAME_SHOW$3);
          };
          _proto.setElementContent = function setElementContent($element, content) {
            if (typeof content === "object" && (content.nodeType || content.jquery)) {
              if (this.config.html) {
                if (!$__default["default"](content).parent().is($element)) {
                  $element.empty().append(content);
                }
              } else {
                $element.text($__default["default"](content).text());
              }
              return;
            }
            if (this.config.html) {
              if (this.config.sanitize) {
                content = sanitizeHtml(content, this.config.whiteList, this.config.sanitizeFn);
              }
              $element.html(content);
            } else {
              $element.text(content);
            }
          };
          _proto.getTitle = function getTitle() {
            var title = this.element.getAttribute("data-original-title");
            if (!title) {
              title = typeof this.config.title === "function" ? this.config.title.call(this.element) : this.config.title;
            }
            return title;
          };
          _proto._getPopperConfig = function _getPopperConfig(attachment) {
            var _this3 = this;
            var defaultBsConfig = {
              placement: attachment,
              modifiers: {
                offset: this._getOffset(),
                flip: {
                  behavior: this.config.fallbackPlacement
                },
                arrow: {
                  element: SELECTOR_ARROW
                },
                preventOverflow: {
                  boundariesElement: this.config.boundary
                }
              },
              onCreate: function onCreate(data) {
                if (data.originalPlacement !== data.placement) {
                  _this3._handlePopperPlacementChange(data);
                }
              },
              onUpdate: function onUpdate(data) {
                return _this3._handlePopperPlacementChange(data);
              }
            };
            return _extends({}, defaultBsConfig, this.config.popperConfig);
          };
          _proto._getOffset = function _getOffset() {
            var _this4 = this;
            var offset = {};
            if (typeof this.config.offset === "function") {
              offset.fn = function(data) {
                data.offsets = _extends({}, data.offsets, _this4.config.offset(data.offsets, _this4.element));
                return data;
              };
            } else {
              offset.offset = this.config.offset;
            }
            return offset;
          };
          _proto._getContainer = function _getContainer() {
            if (this.config.container === false) {
              return document.body;
            }
            if (Util.isElement(this.config.container)) {
              return $__default["default"](this.config.container);
            }
            return $__default["default"](document).find(this.config.container);
          };
          _proto._getAttachment = function _getAttachment(placement) {
            return AttachmentMap[placement.toUpperCase()];
          };
          _proto._setListeners = function _setListeners() {
            var _this5 = this;
            var triggers = this.config.trigger.split(" ");
            triggers.forEach(function(trigger) {
              if (trigger === "click") {
                $__default["default"](_this5.element).on(_this5.constructor.Event.CLICK, _this5.config.selector, function(event) {
                  return _this5.toggle(event);
                });
              } else if (trigger !== TRIGGER_MANUAL) {
                var eventIn = trigger === TRIGGER_HOVER ? _this5.constructor.Event.MOUSEENTER : _this5.constructor.Event.FOCUSIN;
                var eventOut = trigger === TRIGGER_HOVER ? _this5.constructor.Event.MOUSELEAVE : _this5.constructor.Event.FOCUSOUT;
                $__default["default"](_this5.element).on(eventIn, _this5.config.selector, function(event) {
                  return _this5._enter(event);
                }).on(eventOut, _this5.config.selector, function(event) {
                  return _this5._leave(event);
                });
              }
            });
            this._hideModalHandler = function() {
              if (_this5.element) {
                _this5.hide();
              }
            };
            $__default["default"](this.element).closest(".modal").on("hide.bs.modal", this._hideModalHandler);
            if (this.config.selector) {
              this.config = _extends({}, this.config, {
                trigger: "manual",
                selector: ""
              });
            } else {
              this._fixTitle();
            }
          };
          _proto._fixTitle = function _fixTitle() {
            var titleType = typeof this.element.getAttribute("data-original-title");
            if (this.element.getAttribute("title") || titleType !== "string") {
              this.element.setAttribute("data-original-title", this.element.getAttribute("title") || "");
              this.element.setAttribute("title", "");
            }
          };
          _proto._enter = function _enter(event, context) {
            var dataKey = this.constructor.DATA_KEY;
            context = context || $__default["default"](event.currentTarget).data(dataKey);
            if (!context) {
              context = new this.constructor(event.currentTarget, this._getDelegateConfig());
              $__default["default"](event.currentTarget).data(dataKey, context);
            }
            if (event) {
              context._activeTrigger[event.type === "focusin" ? TRIGGER_FOCUS : TRIGGER_HOVER] = true;
            }
            if ($__default["default"](context.getTipElement()).hasClass(CLASS_NAME_SHOW$3) || context._hoverState === HOVER_STATE_SHOW) {
              context._hoverState = HOVER_STATE_SHOW;
              return;
            }
            clearTimeout(context._timeout);
            context._hoverState = HOVER_STATE_SHOW;
            if (!context.config.delay || !context.config.delay.show) {
              context.show();
              return;
            }
            context._timeout = setTimeout(function() {
              if (context._hoverState === HOVER_STATE_SHOW) {
                context.show();
              }
            }, context.config.delay.show);
          };
          _proto._leave = function _leave(event, context) {
            var dataKey = this.constructor.DATA_KEY;
            context = context || $__default["default"](event.currentTarget).data(dataKey);
            if (!context) {
              context = new this.constructor(event.currentTarget, this._getDelegateConfig());
              $__default["default"](event.currentTarget).data(dataKey, context);
            }
            if (event) {
              context._activeTrigger[event.type === "focusout" ? TRIGGER_FOCUS : TRIGGER_HOVER] = false;
            }
            if (context._isWithActiveTrigger()) {
              return;
            }
            clearTimeout(context._timeout);
            context._hoverState = HOVER_STATE_OUT;
            if (!context.config.delay || !context.config.delay.hide) {
              context.hide();
              return;
            }
            context._timeout = setTimeout(function() {
              if (context._hoverState === HOVER_STATE_OUT) {
                context.hide();
              }
            }, context.config.delay.hide);
          };
          _proto._isWithActiveTrigger = function _isWithActiveTrigger() {
            for (var trigger in this._activeTrigger) {
              if (this._activeTrigger[trigger]) {
                return true;
              }
            }
            return false;
          };
          _proto._getConfig = function _getConfig(config) {
            var dataAttributes = $__default["default"](this.element).data();
            Object.keys(dataAttributes).forEach(function(dataAttr) {
              if (DISALLOWED_ATTRIBUTES.indexOf(dataAttr) !== -1) {
                delete dataAttributes[dataAttr];
              }
            });
            config = _extends({}, this.constructor.Default, dataAttributes, typeof config === "object" && config ? config : {});
            if (typeof config.delay === "number") {
              config.delay = {
                show: config.delay,
                hide: config.delay
              };
            }
            if (typeof config.title === "number") {
              config.title = config.title.toString();
            }
            if (typeof config.content === "number") {
              config.content = config.content.toString();
            }
            Util.typeCheckConfig(NAME$4, config, this.constructor.DefaultType);
            if (config.sanitize) {
              config.template = sanitizeHtml(config.template, config.whiteList, config.sanitizeFn);
            }
            return config;
          };
          _proto._getDelegateConfig = function _getDelegateConfig() {
            var config = {};
            if (this.config) {
              for (var key in this.config) {
                if (this.constructor.Default[key] !== this.config[key]) {
                  config[key] = this.config[key];
                }
              }
            }
            return config;
          };
          _proto._cleanTipClass = function _cleanTipClass() {
            var $tip = $__default["default"](this.getTipElement());
            var tabClass = $tip.attr("class").match(BSCLS_PREFIX_REGEX$1);
            if (tabClass !== null && tabClass.length) {
              $tip.removeClass(tabClass.join(""));
            }
          };
          _proto._handlePopperPlacementChange = function _handlePopperPlacementChange(popperData) {
            this.tip = popperData.instance.popper;
            this._cleanTipClass();
            this.addAttachmentClass(this._getAttachment(popperData.placement));
          };
          _proto._fixTransition = function _fixTransition() {
            var tip = this.getTipElement();
            var initConfigAnimation = this.config.animation;
            if (tip.getAttribute("x-placement") !== null) {
              return;
            }
            $__default["default"](tip).removeClass(CLASS_NAME_FADE$3);
            this.config.animation = false;
            this.hide();
            this.show();
            this.config.animation = initConfigAnimation;
          };
          Tooltip2._jQueryInterface = function _jQueryInterface(config) {
            return this.each(function() {
              var $element = $__default["default"](this);
              var data = $element.data(DATA_KEY$4);
              var _config = typeof config === "object" && config;
              if (!data && /dispose|hide/.test(config)) {
                return;
              }
              if (!data) {
                data = new Tooltip2(this, _config);
                $element.data(DATA_KEY$4, data);
              }
              if (typeof config === "string") {
                if (typeof data[config] === "undefined") {
                  throw new TypeError('No method named "' + config + '"');
                }
                data[config]();
              }
            });
          };
          _createClass(Tooltip2, null, [{
            key: "VERSION",
            get: function get() {
              return VERSION$4;
            }
          }, {
            key: "Default",
            get: function get() {
              return Default$3;
            }
          }, {
            key: "NAME",
            get: function get() {
              return NAME$4;
            }
          }, {
            key: "DATA_KEY",
            get: function get() {
              return DATA_KEY$4;
            }
          }, {
            key: "Event",
            get: function get() {
              return Event$1;
            }
          }, {
            key: "EVENT_KEY",
            get: function get() {
              return EVENT_KEY$4;
            }
          }, {
            key: "DefaultType",
            get: function get() {
              return DefaultType$3;
            }
          }]);
          return Tooltip2;
        }();
        $__default["default"].fn[NAME$4] = Tooltip._jQueryInterface;
        $__default["default"].fn[NAME$4].Constructor = Tooltip;
        $__default["default"].fn[NAME$4].noConflict = function() {
          $__default["default"].fn[NAME$4] = JQUERY_NO_CONFLICT$4;
          return Tooltip._jQueryInterface;
        };
        var NAME$3 = "popover";
        var VERSION$3 = "4.6.2";
        var DATA_KEY$3 = "bs.popover";
        var EVENT_KEY$3 = "." + DATA_KEY$3;
        var JQUERY_NO_CONFLICT$3 = $__default["default"].fn[NAME$3];
        var CLASS_PREFIX = "bs-popover";
        var BSCLS_PREFIX_REGEX = new RegExp("(^|\\s)" + CLASS_PREFIX + "\\S+", "g");
        var CLASS_NAME_FADE$2 = "fade";
        var CLASS_NAME_SHOW$2 = "show";
        var SELECTOR_TITLE = ".popover-header";
        var SELECTOR_CONTENT = ".popover-body";
        var Default$2 = _extends({}, Tooltip.Default, {
          placement: "right",
          trigger: "click",
          content: "",
          template: '<div class="popover" role="tooltip"><div class="arrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>'
        });
        var DefaultType$2 = _extends({}, Tooltip.DefaultType, {
          content: "(string|element|function)"
        });
        var Event2 = {
          HIDE: "hide" + EVENT_KEY$3,
          HIDDEN: "hidden" + EVENT_KEY$3,
          SHOW: "show" + EVENT_KEY$3,
          SHOWN: "shown" + EVENT_KEY$3,
          INSERTED: "inserted" + EVENT_KEY$3,
          CLICK: "click" + EVENT_KEY$3,
          FOCUSIN: "focusin" + EVENT_KEY$3,
          FOCUSOUT: "focusout" + EVENT_KEY$3,
          MOUSEENTER: "mouseenter" + EVENT_KEY$3,
          MOUSELEAVE: "mouseleave" + EVENT_KEY$3
        };
        var Popover = /* @__PURE__ */ function(_Tooltip) {
          _inheritsLoose(Popover2, _Tooltip);
          function Popover2() {
            return _Tooltip.apply(this, arguments) || this;
          }
          var _proto = Popover2.prototype;
          _proto.isWithContent = function isWithContent() {
            return this.getTitle() || this._getContent();
          };
          _proto.addAttachmentClass = function addAttachmentClass(attachment) {
            $__default["default"](this.getTipElement()).addClass(CLASS_PREFIX + "-" + attachment);
          };
          _proto.getTipElement = function getTipElement() {
            this.tip = this.tip || $__default["default"](this.config.template)[0];
            return this.tip;
          };
          _proto.setContent = function setContent() {
            var $tip = $__default["default"](this.getTipElement());
            this.setElementContent($tip.find(SELECTOR_TITLE), this.getTitle());
            var content = this._getContent();
            if (typeof content === "function") {
              content = content.call(this.element);
            }
            this.setElementContent($tip.find(SELECTOR_CONTENT), content);
            $tip.removeClass(CLASS_NAME_FADE$2 + " " + CLASS_NAME_SHOW$2);
          };
          _proto._getContent = function _getContent() {
            return this.element.getAttribute("data-content") || this.config.content;
          };
          _proto._cleanTipClass = function _cleanTipClass() {
            var $tip = $__default["default"](this.getTipElement());
            var tabClass = $tip.attr("class").match(BSCLS_PREFIX_REGEX);
            if (tabClass !== null && tabClass.length > 0) {
              $tip.removeClass(tabClass.join(""));
            }
          };
          Popover2._jQueryInterface = function _jQueryInterface(config) {
            return this.each(function() {
              var data = $__default["default"](this).data(DATA_KEY$3);
              var _config = typeof config === "object" ? config : null;
              if (!data && /dispose|hide/.test(config)) {
                return;
              }
              if (!data) {
                data = new Popover2(this, _config);
                $__default["default"](this).data(DATA_KEY$3, data);
              }
              if (typeof config === "string") {
                if (typeof data[config] === "undefined") {
                  throw new TypeError('No method named "' + config + '"');
                }
                data[config]();
              }
            });
          };
          _createClass(Popover2, null, [{
            key: "VERSION",
            get: (
              // Getters
              function get() {
                return VERSION$3;
              }
            )
          }, {
            key: "Default",
            get: function get() {
              return Default$2;
            }
          }, {
            key: "NAME",
            get: function get() {
              return NAME$3;
            }
          }, {
            key: "DATA_KEY",
            get: function get() {
              return DATA_KEY$3;
            }
          }, {
            key: "Event",
            get: function get() {
              return Event2;
            }
          }, {
            key: "EVENT_KEY",
            get: function get() {
              return EVENT_KEY$3;
            }
          }, {
            key: "DefaultType",
            get: function get() {
              return DefaultType$2;
            }
          }]);
          return Popover2;
        }(Tooltip);
        $__default["default"].fn[NAME$3] = Popover._jQueryInterface;
        $__default["default"].fn[NAME$3].Constructor = Popover;
        $__default["default"].fn[NAME$3].noConflict = function() {
          $__default["default"].fn[NAME$3] = JQUERY_NO_CONFLICT$3;
          return Popover._jQueryInterface;
        };
        var NAME$2 = "scrollspy";
        var VERSION$2 = "4.6.2";
        var DATA_KEY$2 = "bs.scrollspy";
        var EVENT_KEY$2 = "." + DATA_KEY$2;
        var DATA_API_KEY$1 = ".data-api";
        var JQUERY_NO_CONFLICT$2 = $__default["default"].fn[NAME$2];
        var CLASS_NAME_DROPDOWN_ITEM = "dropdown-item";
        var CLASS_NAME_ACTIVE$1 = "active";
        var EVENT_ACTIVATE = "activate" + EVENT_KEY$2;
        var EVENT_SCROLL = "scroll" + EVENT_KEY$2;
        var EVENT_LOAD_DATA_API = "load" + EVENT_KEY$2 + DATA_API_KEY$1;
        var METHOD_OFFSET = "offset";
        var METHOD_POSITION = "position";
        var SELECTOR_DATA_SPY = '[data-spy="scroll"]';
        var SELECTOR_NAV_LIST_GROUP$1 = ".nav, .list-group";
        var SELECTOR_NAV_LINKS = ".nav-link";
        var SELECTOR_NAV_ITEMS = ".nav-item";
        var SELECTOR_LIST_ITEMS = ".list-group-item";
        var SELECTOR_DROPDOWN$1 = ".dropdown";
        var SELECTOR_DROPDOWN_ITEMS = ".dropdown-item";
        var SELECTOR_DROPDOWN_TOGGLE$1 = ".dropdown-toggle";
        var Default$1 = {
          offset: 10,
          method: "auto",
          target: ""
        };
        var DefaultType$1 = {
          offset: "number",
          method: "string",
          target: "(string|element)"
        };
        var ScrollSpy = /* @__PURE__ */ function() {
          function ScrollSpy2(element, config) {
            var _this = this;
            this._element = element;
            this._scrollElement = element.tagName === "BODY" ? window : element;
            this._config = this._getConfig(config);
            this._selector = this._config.target + " " + SELECTOR_NAV_LINKS + "," + (this._config.target + " " + SELECTOR_LIST_ITEMS + ",") + (this._config.target + " " + SELECTOR_DROPDOWN_ITEMS);
            this._offsets = [];
            this._targets = [];
            this._activeTarget = null;
            this._scrollHeight = 0;
            $__default["default"](this._scrollElement).on(EVENT_SCROLL, function(event) {
              return _this._process(event);
            });
            this.refresh();
            this._process();
          }
          var _proto = ScrollSpy2.prototype;
          _proto.refresh = function refresh() {
            var _this2 = this;
            var autoMethod = this._scrollElement === this._scrollElement.window ? METHOD_OFFSET : METHOD_POSITION;
            var offsetMethod = this._config.method === "auto" ? autoMethod : this._config.method;
            var offsetBase = offsetMethod === METHOD_POSITION ? this._getScrollTop() : 0;
            this._offsets = [];
            this._targets = [];
            this._scrollHeight = this._getScrollHeight();
            var targets = [].slice.call(document.querySelectorAll(this._selector));
            targets.map(function(element) {
              var target;
              var targetSelector = Util.getSelectorFromElement(element);
              if (targetSelector) {
                target = document.querySelector(targetSelector);
              }
              if (target) {
                var targetBCR = target.getBoundingClientRect();
                if (targetBCR.width || targetBCR.height) {
                  return [$__default["default"](target)[offsetMethod]().top + offsetBase, targetSelector];
                }
              }
              return null;
            }).filter(Boolean).sort(function(a, b) {
              return a[0] - b[0];
            }).forEach(function(item) {
              _this2._offsets.push(item[0]);
              _this2._targets.push(item[1]);
            });
          };
          _proto.dispose = function dispose() {
            $__default["default"].removeData(this._element, DATA_KEY$2);
            $__default["default"](this._scrollElement).off(EVENT_KEY$2);
            this._element = null;
            this._scrollElement = null;
            this._config = null;
            this._selector = null;
            this._offsets = null;
            this._targets = null;
            this._activeTarget = null;
            this._scrollHeight = null;
          };
          _proto._getConfig = function _getConfig(config) {
            config = _extends({}, Default$1, typeof config === "object" && config ? config : {});
            if (typeof config.target !== "string" && Util.isElement(config.target)) {
              var id = $__default["default"](config.target).attr("id");
              if (!id) {
                id = Util.getUID(NAME$2);
                $__default["default"](config.target).attr("id", id);
              }
              config.target = "#" + id;
            }
            Util.typeCheckConfig(NAME$2, config, DefaultType$1);
            return config;
          };
          _proto._getScrollTop = function _getScrollTop() {
            return this._scrollElement === window ? this._scrollElement.pageYOffset : this._scrollElement.scrollTop;
          };
          _proto._getScrollHeight = function _getScrollHeight() {
            return this._scrollElement.scrollHeight || Math.max(document.body.scrollHeight, document.documentElement.scrollHeight);
          };
          _proto._getOffsetHeight = function _getOffsetHeight() {
            return this._scrollElement === window ? window.innerHeight : this._scrollElement.getBoundingClientRect().height;
          };
          _proto._process = function _process() {
            var scrollTop = this._getScrollTop() + this._config.offset;
            var scrollHeight = this._getScrollHeight();
            var maxScroll = this._config.offset + scrollHeight - this._getOffsetHeight();
            if (this._scrollHeight !== scrollHeight) {
              this.refresh();
            }
            if (scrollTop >= maxScroll) {
              var target = this._targets[this._targets.length - 1];
              if (this._activeTarget !== target) {
                this._activate(target);
              }
              return;
            }
            if (this._activeTarget && scrollTop < this._offsets[0] && this._offsets[0] > 0) {
              this._activeTarget = null;
              this._clear();
              return;
            }
            for (var i = this._offsets.length; i--; ) {
              var isActiveTarget = this._activeTarget !== this._targets[i] && scrollTop >= this._offsets[i] && (typeof this._offsets[i + 1] === "undefined" || scrollTop < this._offsets[i + 1]);
              if (isActiveTarget) {
                this._activate(this._targets[i]);
              }
            }
          };
          _proto._activate = function _activate(target) {
            this._activeTarget = target;
            this._clear();
            var queries = this._selector.split(",").map(function(selector) {
              return selector + '[data-target="' + target + '"],' + selector + '[href="' + target + '"]';
            });
            var $link = $__default["default"]([].slice.call(document.querySelectorAll(queries.join(","))));
            if ($link.hasClass(CLASS_NAME_DROPDOWN_ITEM)) {
              $link.closest(SELECTOR_DROPDOWN$1).find(SELECTOR_DROPDOWN_TOGGLE$1).addClass(CLASS_NAME_ACTIVE$1);
              $link.addClass(CLASS_NAME_ACTIVE$1);
            } else {
              $link.addClass(CLASS_NAME_ACTIVE$1);
              $link.parents(SELECTOR_NAV_LIST_GROUP$1).prev(SELECTOR_NAV_LINKS + ", " + SELECTOR_LIST_ITEMS).addClass(CLASS_NAME_ACTIVE$1);
              $link.parents(SELECTOR_NAV_LIST_GROUP$1).prev(SELECTOR_NAV_ITEMS).children(SELECTOR_NAV_LINKS).addClass(CLASS_NAME_ACTIVE$1);
            }
            $__default["default"](this._scrollElement).trigger(EVENT_ACTIVATE, {
              relatedTarget: target
            });
          };
          _proto._clear = function _clear() {
            [].slice.call(document.querySelectorAll(this._selector)).filter(function(node) {
              return node.classList.contains(CLASS_NAME_ACTIVE$1);
            }).forEach(function(node) {
              return node.classList.remove(CLASS_NAME_ACTIVE$1);
            });
          };
          ScrollSpy2._jQueryInterface = function _jQueryInterface(config) {
            return this.each(function() {
              var data = $__default["default"](this).data(DATA_KEY$2);
              var _config = typeof config === "object" && config;
              if (!data) {
                data = new ScrollSpy2(this, _config);
                $__default["default"](this).data(DATA_KEY$2, data);
              }
              if (typeof config === "string") {
                if (typeof data[config] === "undefined") {
                  throw new TypeError('No method named "' + config + '"');
                }
                data[config]();
              }
            });
          };
          _createClass(ScrollSpy2, null, [{
            key: "VERSION",
            get: function get() {
              return VERSION$2;
            }
          }, {
            key: "Default",
            get: function get() {
              return Default$1;
            }
          }]);
          return ScrollSpy2;
        }();
        $__default["default"](window).on(EVENT_LOAD_DATA_API, function() {
          var scrollSpys = [].slice.call(document.querySelectorAll(SELECTOR_DATA_SPY));
          var scrollSpysLength = scrollSpys.length;
          for (var i = scrollSpysLength; i--; ) {
            var $spy = $__default["default"](scrollSpys[i]);
            ScrollSpy._jQueryInterface.call($spy, $spy.data());
          }
        });
        $__default["default"].fn[NAME$2] = ScrollSpy._jQueryInterface;
        $__default["default"].fn[NAME$2].Constructor = ScrollSpy;
        $__default["default"].fn[NAME$2].noConflict = function() {
          $__default["default"].fn[NAME$2] = JQUERY_NO_CONFLICT$2;
          return ScrollSpy._jQueryInterface;
        };
        var NAME$1 = "tab";
        var VERSION$1 = "4.6.2";
        var DATA_KEY$1 = "bs.tab";
        var EVENT_KEY$1 = "." + DATA_KEY$1;
        var DATA_API_KEY = ".data-api";
        var JQUERY_NO_CONFLICT$1 = $__default["default"].fn[NAME$1];
        var CLASS_NAME_DROPDOWN_MENU = "dropdown-menu";
        var CLASS_NAME_ACTIVE = "active";
        var CLASS_NAME_DISABLED = "disabled";
        var CLASS_NAME_FADE$1 = "fade";
        var CLASS_NAME_SHOW$1 = "show";
        var EVENT_HIDE$1 = "hide" + EVENT_KEY$1;
        var EVENT_HIDDEN$1 = "hidden" + EVENT_KEY$1;
        var EVENT_SHOW$1 = "show" + EVENT_KEY$1;
        var EVENT_SHOWN$1 = "shown" + EVENT_KEY$1;
        var EVENT_CLICK_DATA_API = "click" + EVENT_KEY$1 + DATA_API_KEY;
        var SELECTOR_DROPDOWN = ".dropdown";
        var SELECTOR_NAV_LIST_GROUP = ".nav, .list-group";
        var SELECTOR_ACTIVE = ".active";
        var SELECTOR_ACTIVE_UL = "> li > .active";
        var SELECTOR_DATA_TOGGLE = '[data-toggle="tab"], [data-toggle="pill"], [data-toggle="list"]';
        var SELECTOR_DROPDOWN_TOGGLE = ".dropdown-toggle";
        var SELECTOR_DROPDOWN_ACTIVE_CHILD = "> .dropdown-menu .active";
        var Tab = /* @__PURE__ */ function() {
          function Tab2(element) {
            this._element = element;
          }
          var _proto = Tab2.prototype;
          _proto.show = function show() {
            var _this = this;
            if (this._element.parentNode && this._element.parentNode.nodeType === Node.ELEMENT_NODE && $__default["default"](this._element).hasClass(CLASS_NAME_ACTIVE) || $__default["default"](this._element).hasClass(CLASS_NAME_DISABLED) || this._element.hasAttribute("disabled")) {
              return;
            }
            var target;
            var previous;
            var listElement = $__default["default"](this._element).closest(SELECTOR_NAV_LIST_GROUP)[0];
            var selector = Util.getSelectorFromElement(this._element);
            if (listElement) {
              var itemSelector = listElement.nodeName === "UL" || listElement.nodeName === "OL" ? SELECTOR_ACTIVE_UL : SELECTOR_ACTIVE;
              previous = $__default["default"].makeArray($__default["default"](listElement).find(itemSelector));
              previous = previous[previous.length - 1];
            }
            var hideEvent = $__default["default"].Event(EVENT_HIDE$1, {
              relatedTarget: this._element
            });
            var showEvent = $__default["default"].Event(EVENT_SHOW$1, {
              relatedTarget: previous
            });
            if (previous) {
              $__default["default"](previous).trigger(hideEvent);
            }
            $__default["default"](this._element).trigger(showEvent);
            if (showEvent.isDefaultPrevented() || hideEvent.isDefaultPrevented()) {
              return;
            }
            if (selector) {
              target = document.querySelector(selector);
            }
            this._activate(this._element, listElement);
            var complete = function complete2() {
              var hiddenEvent = $__default["default"].Event(EVENT_HIDDEN$1, {
                relatedTarget: _this._element
              });
              var shownEvent = $__default["default"].Event(EVENT_SHOWN$1, {
                relatedTarget: previous
              });
              $__default["default"](previous).trigger(hiddenEvent);
              $__default["default"](_this._element).trigger(shownEvent);
            };
            if (target) {
              this._activate(target, target.parentNode, complete);
            } else {
              complete();
            }
          };
          _proto.dispose = function dispose() {
            $__default["default"].removeData(this._element, DATA_KEY$1);
            this._element = null;
          };
          _proto._activate = function _activate(element, container, callback) {
            var _this2 = this;
            var activeElements = container && (container.nodeName === "UL" || container.nodeName === "OL") ? $__default["default"](container).find(SELECTOR_ACTIVE_UL) : $__default["default"](container).children(SELECTOR_ACTIVE);
            var active = activeElements[0];
            var isTransitioning = callback && active && $__default["default"](active).hasClass(CLASS_NAME_FADE$1);
            var complete = function complete2() {
              return _this2._transitionComplete(element, active, callback);
            };
            if (active && isTransitioning) {
              var transitionDuration = Util.getTransitionDurationFromElement(active);
              $__default["default"](active).removeClass(CLASS_NAME_SHOW$1).one(Util.TRANSITION_END, complete).emulateTransitionEnd(transitionDuration);
            } else {
              complete();
            }
          };
          _proto._transitionComplete = function _transitionComplete(element, active, callback) {
            if (active) {
              $__default["default"](active).removeClass(CLASS_NAME_ACTIVE);
              var dropdownChild = $__default["default"](active.parentNode).find(SELECTOR_DROPDOWN_ACTIVE_CHILD)[0];
              if (dropdownChild) {
                $__default["default"](dropdownChild).removeClass(CLASS_NAME_ACTIVE);
              }
              if (active.getAttribute("role") === "tab") {
                active.setAttribute("aria-selected", false);
              }
            }
            $__default["default"](element).addClass(CLASS_NAME_ACTIVE);
            if (element.getAttribute("role") === "tab") {
              element.setAttribute("aria-selected", true);
            }
            Util.reflow(element);
            if (element.classList.contains(CLASS_NAME_FADE$1)) {
              element.classList.add(CLASS_NAME_SHOW$1);
            }
            var parent = element.parentNode;
            if (parent && parent.nodeName === "LI") {
              parent = parent.parentNode;
            }
            if (parent && $__default["default"](parent).hasClass(CLASS_NAME_DROPDOWN_MENU)) {
              var dropdownElement = $__default["default"](element).closest(SELECTOR_DROPDOWN)[0];
              if (dropdownElement) {
                var dropdownToggleList = [].slice.call(dropdownElement.querySelectorAll(SELECTOR_DROPDOWN_TOGGLE));
                $__default["default"](dropdownToggleList).addClass(CLASS_NAME_ACTIVE);
              }
              element.setAttribute("aria-expanded", true);
            }
            if (callback) {
              callback();
            }
          };
          Tab2._jQueryInterface = function _jQueryInterface(config) {
            return this.each(function() {
              var $this = $__default["default"](this);
              var data = $this.data(DATA_KEY$1);
              if (!data) {
                data = new Tab2(this);
                $this.data(DATA_KEY$1, data);
              }
              if (typeof config === "string") {
                if (typeof data[config] === "undefined") {
                  throw new TypeError('No method named "' + config + '"');
                }
                data[config]();
              }
            });
          };
          _createClass(Tab2, null, [{
            key: "VERSION",
            get: function get() {
              return VERSION$1;
            }
          }]);
          return Tab2;
        }();
        $__default["default"](document).on(EVENT_CLICK_DATA_API, SELECTOR_DATA_TOGGLE, function(event) {
          event.preventDefault();
          Tab._jQueryInterface.call($__default["default"](this), "show");
        });
        $__default["default"].fn[NAME$1] = Tab._jQueryInterface;
        $__default["default"].fn[NAME$1].Constructor = Tab;
        $__default["default"].fn[NAME$1].noConflict = function() {
          $__default["default"].fn[NAME$1] = JQUERY_NO_CONFLICT$1;
          return Tab._jQueryInterface;
        };
        var NAME = "toast";
        var VERSION = "4.6.2";
        var DATA_KEY = "bs.toast";
        var EVENT_KEY = "." + DATA_KEY;
        var JQUERY_NO_CONFLICT = $__default["default"].fn[NAME];
        var CLASS_NAME_FADE = "fade";
        var CLASS_NAME_HIDE = "hide";
        var CLASS_NAME_SHOW = "show";
        var CLASS_NAME_SHOWING = "showing";
        var EVENT_CLICK_DISMISS = "click.dismiss" + EVENT_KEY;
        var EVENT_HIDE = "hide" + EVENT_KEY;
        var EVENT_HIDDEN = "hidden" + EVENT_KEY;
        var EVENT_SHOW = "show" + EVENT_KEY;
        var EVENT_SHOWN = "shown" + EVENT_KEY;
        var SELECTOR_DATA_DISMISS = '[data-dismiss="toast"]';
        var Default = {
          animation: true,
          autohide: true,
          delay: 500
        };
        var DefaultType = {
          animation: "boolean",
          autohide: "boolean",
          delay: "number"
        };
        var Toast = /* @__PURE__ */ function() {
          function Toast2(element, config) {
            this._element = element;
            this._config = this._getConfig(config);
            this._timeout = null;
            this._setListeners();
          }
          var _proto = Toast2.prototype;
          _proto.show = function show() {
            var _this = this;
            var showEvent = $__default["default"].Event(EVENT_SHOW);
            $__default["default"](this._element).trigger(showEvent);
            if (showEvent.isDefaultPrevented()) {
              return;
            }
            this._clearTimeout();
            if (this._config.animation) {
              this._element.classList.add(CLASS_NAME_FADE);
            }
            var complete = function complete2() {
              _this._element.classList.remove(CLASS_NAME_SHOWING);
              _this._element.classList.add(CLASS_NAME_SHOW);
              $__default["default"](_this._element).trigger(EVENT_SHOWN);
              if (_this._config.autohide) {
                _this._timeout = setTimeout(function() {
                  _this.hide();
                }, _this._config.delay);
              }
            };
            this._element.classList.remove(CLASS_NAME_HIDE);
            Util.reflow(this._element);
            this._element.classList.add(CLASS_NAME_SHOWING);
            if (this._config.animation) {
              var transitionDuration = Util.getTransitionDurationFromElement(this._element);
              $__default["default"](this._element).one(Util.TRANSITION_END, complete).emulateTransitionEnd(transitionDuration);
            } else {
              complete();
            }
          };
          _proto.hide = function hide() {
            if (!this._element.classList.contains(CLASS_NAME_SHOW)) {
              return;
            }
            var hideEvent = $__default["default"].Event(EVENT_HIDE);
            $__default["default"](this._element).trigger(hideEvent);
            if (hideEvent.isDefaultPrevented()) {
              return;
            }
            this._close();
          };
          _proto.dispose = function dispose() {
            this._clearTimeout();
            if (this._element.classList.contains(CLASS_NAME_SHOW)) {
              this._element.classList.remove(CLASS_NAME_SHOW);
            }
            $__default["default"](this._element).off(EVENT_CLICK_DISMISS);
            $__default["default"].removeData(this._element, DATA_KEY);
            this._element = null;
            this._config = null;
          };
          _proto._getConfig = function _getConfig(config) {
            config = _extends({}, Default, $__default["default"](this._element).data(), typeof config === "object" && config ? config : {});
            Util.typeCheckConfig(NAME, config, this.constructor.DefaultType);
            return config;
          };
          _proto._setListeners = function _setListeners() {
            var _this2 = this;
            $__default["default"](this._element).on(EVENT_CLICK_DISMISS, SELECTOR_DATA_DISMISS, function() {
              return _this2.hide();
            });
          };
          _proto._close = function _close() {
            var _this3 = this;
            var complete = function complete2() {
              _this3._element.classList.add(CLASS_NAME_HIDE);
              $__default["default"](_this3._element).trigger(EVENT_HIDDEN);
            };
            this._element.classList.remove(CLASS_NAME_SHOW);
            if (this._config.animation) {
              var transitionDuration = Util.getTransitionDurationFromElement(this._element);
              $__default["default"](this._element).one(Util.TRANSITION_END, complete).emulateTransitionEnd(transitionDuration);
            } else {
              complete();
            }
          };
          _proto._clearTimeout = function _clearTimeout() {
            clearTimeout(this._timeout);
            this._timeout = null;
          };
          Toast2._jQueryInterface = function _jQueryInterface(config) {
            return this.each(function() {
              var $element = $__default["default"](this);
              var data = $element.data(DATA_KEY);
              var _config = typeof config === "object" && config;
              if (!data) {
                data = new Toast2(this, _config);
                $element.data(DATA_KEY, data);
              }
              if (typeof config === "string") {
                if (typeof data[config] === "undefined") {
                  throw new TypeError('No method named "' + config + '"');
                }
                data[config](this);
              }
            });
          };
          _createClass(Toast2, null, [{
            key: "VERSION",
            get: function get() {
              return VERSION;
            }
          }, {
            key: "DefaultType",
            get: function get() {
              return DefaultType;
            }
          }, {
            key: "Default",
            get: function get() {
              return Default;
            }
          }]);
          return Toast2;
        }();
        $__default["default"].fn[NAME] = Toast._jQueryInterface;
        $__default["default"].fn[NAME].Constructor = Toast;
        $__default["default"].fn[NAME].noConflict = function() {
          $__default["default"].fn[NAME] = JQUERY_NO_CONFLICT;
          return Toast._jQueryInterface;
        };
        exports2.Alert = Alert;
        exports2.Button = Button;
        exports2.Carousel = Carousel;
        exports2.Collapse = Collapse;
        exports2.Dropdown = Dropdown;
        exports2.Modal = Modal;
        exports2.Popover = Popover;
        exports2.Scrollspy = ScrollSpy;
        exports2.Tab = Tab;
        exports2.Toast = Toast;
        exports2.Tooltip = Tooltip;
        exports2.Util = Util;
        Object.defineProperty(exports2, "__esModule", { value: true });
      });
    }
  });

  // node_modules/sifter/sifter.js
  var require_sifter = __commonJS({
    "node_modules/sifter/sifter.js"(exports, module) {
      (function(root, factory) {
        if (typeof define === "function" && define.amd) {
          define(factory);
        } else if (typeof exports === "object") {
          module.exports = factory();
        } else {
          root.Sifter = factory();
        }
      })(exports, function() {
        var Sifter = function(items, settings) {
          this.items = items;
          this.settings = settings || { diacritics: true };
        };
        Sifter.prototype.tokenize = function(query) {
          query = trim(String(query || "").toLowerCase());
          if (!query || !query.length)
            return [];
          var i, n, regex, letter;
          var tokens = [];
          var words = query.split(/ +/);
          for (i = 0, n = words.length; i < n; i++) {
            regex = escape_regex(words[i]);
            if (this.settings.diacritics) {
              for (letter in DIACRITICS) {
                if (DIACRITICS.hasOwnProperty(letter)) {
                  regex = regex.replace(new RegExp(letter, "g"), DIACRITICS[letter]);
                }
              }
            }
            tokens.push({
              string: words[i],
              regex: new RegExp(regex, "i")
            });
          }
          return tokens;
        };
        Sifter.prototype.iterator = function(object, callback) {
          var iterator;
          if (is_array(object)) {
            iterator = Array.prototype.forEach || function(callback2) {
              for (var i = 0, n = this.length; i < n; i++) {
                callback2(this[i], i, this);
              }
            };
          } else {
            iterator = function(callback2) {
              for (var key in this) {
                if (this.hasOwnProperty(key)) {
                  callback2(this[key], key, this);
                }
              }
            };
          }
          iterator.apply(object, [callback]);
        };
        Sifter.prototype.getScoreFunction = function(search, options) {
          var self2, fields, tokens, token_count, nesting;
          self2 = this;
          search = self2.prepareSearch(search, options);
          tokens = search.tokens;
          fields = search.options.fields;
          token_count = tokens.length;
          nesting = search.options.nesting;
          var scoreValue = function(value, token) {
            var score, pos;
            if (!value)
              return 0;
            value = String(value || "");
            pos = value.search(token.regex);
            if (pos === -1)
              return 0;
            score = token.string.length / value.length;
            if (pos === 0)
              score += 0.5;
            return score;
          };
          var scoreObject = function() {
            var field_count = fields.length;
            if (!field_count) {
              return function() {
                return 0;
              };
            }
            if (field_count === 1) {
              return function(token, data) {
                return scoreValue(getattr(data, fields[0], nesting), token);
              };
            }
            return function(token, data) {
              for (var i = 0, sum = 0; i < field_count; i++) {
                sum += scoreValue(getattr(data, fields[i], nesting), token);
              }
              return sum / field_count;
            };
          }();
          if (!token_count) {
            return function() {
              return 0;
            };
          }
          if (token_count === 1) {
            return function(data) {
              return scoreObject(tokens[0], data);
            };
          }
          if (search.options.conjunction === "and") {
            return function(data) {
              var score;
              for (var i = 0, sum = 0; i < token_count; i++) {
                score = scoreObject(tokens[i], data);
                if (score <= 0)
                  return 0;
                sum += score;
              }
              return sum / token_count;
            };
          } else {
            return function(data) {
              for (var i = 0, sum = 0; i < token_count; i++) {
                sum += scoreObject(tokens[i], data);
              }
              return sum / token_count;
            };
          }
        };
        Sifter.prototype.getSortFunction = function(search, options) {
          var i, n, self2, field, fields, fields_count, multiplier, multipliers, get_field, implicit_score, sort;
          self2 = this;
          search = self2.prepareSearch(search, options);
          sort = !search.query && options.sort_empty || options.sort;
          get_field = function(name, result) {
            if (name === "$score")
              return result.score;
            return getattr(self2.items[result.id], name, options.nesting);
          };
          fields = [];
          if (sort) {
            for (i = 0, n = sort.length; i < n; i++) {
              if (search.query || sort[i].field !== "$score") {
                fields.push(sort[i]);
              }
            }
          }
          if (search.query) {
            implicit_score = true;
            for (i = 0, n = fields.length; i < n; i++) {
              if (fields[i].field === "$score") {
                implicit_score = false;
                break;
              }
            }
            if (implicit_score) {
              fields.unshift({ field: "$score", direction: "desc" });
            }
          } else {
            for (i = 0, n = fields.length; i < n; i++) {
              if (fields[i].field === "$score") {
                fields.splice(i, 1);
                break;
              }
            }
          }
          multipliers = [];
          for (i = 0, n = fields.length; i < n; i++) {
            multipliers.push(fields[i].direction === "desc" ? -1 : 1);
          }
          fields_count = fields.length;
          if (!fields_count) {
            return null;
          } else if (fields_count === 1) {
            field = fields[0].field;
            multiplier = multipliers[0];
            return function(a, b) {
              return multiplier * cmp(
                get_field(field, a),
                get_field(field, b)
              );
            };
          } else {
            return function(a, b) {
              var i2, result, a_value, b_value, field2;
              for (i2 = 0; i2 < fields_count; i2++) {
                field2 = fields[i2].field;
                result = multipliers[i2] * cmp(
                  get_field(field2, a),
                  get_field(field2, b)
                );
                if (result)
                  return result;
              }
              return 0;
            };
          }
        };
        Sifter.prototype.prepareSearch = function(query, options) {
          if (typeof query === "object")
            return query;
          options = extend({}, options);
          var option_fields = options.fields;
          var option_sort = options.sort;
          var option_sort_empty = options.sort_empty;
          if (option_fields && !is_array(option_fields))
            options.fields = [option_fields];
          if (option_sort && !is_array(option_sort))
            options.sort = [option_sort];
          if (option_sort_empty && !is_array(option_sort_empty))
            options.sort_empty = [option_sort_empty];
          return {
            options,
            query: String(query || "").toLowerCase(),
            tokens: this.tokenize(query),
            total: 0,
            items: []
          };
        };
        Sifter.prototype.search = function(query, options) {
          var self2 = this, value, score, search, calculateScore;
          var fn_sort;
          var fn_score;
          search = this.prepareSearch(query, options);
          options = search.options;
          query = search.query;
          fn_score = options.score || self2.getScoreFunction(search);
          if (query.length) {
            self2.iterator(self2.items, function(item, id) {
              score = fn_score(item);
              if (options.filter === false || score > 0) {
                search.items.push({ "score": score, "id": id });
              }
            });
          } else {
            self2.iterator(self2.items, function(item, id) {
              search.items.push({ "score": 1, "id": id });
            });
          }
          fn_sort = self2.getSortFunction(search, options);
          if (fn_sort)
            search.items.sort(fn_sort);
          search.total = search.items.length;
          if (typeof options.limit === "number") {
            search.items = search.items.slice(0, options.limit);
          }
          return search;
        };
        var cmp = function(a, b) {
          if (typeof a === "number" && typeof b === "number") {
            return a > b ? 1 : a < b ? -1 : 0;
          }
          a = asciifold(String(a || ""));
          b = asciifold(String(b || ""));
          if (a > b)
            return 1;
          if (b > a)
            return -1;
          return 0;
        };
        var extend = function(a, b) {
          var i, n, k, object;
          for (i = 1, n = arguments.length; i < n; i++) {
            object = arguments[i];
            if (!object)
              continue;
            for (k in object) {
              if (object.hasOwnProperty(k)) {
                a[k] = object[k];
              }
            }
          }
          return a;
        };
        var getattr = function(obj, name, nesting) {
          if (!obj || !name)
            return;
          if (!nesting)
            return obj[name];
          var names = name.split(".");
          while (names.length && (obj = obj[names.shift()]))
            ;
          return obj;
        };
        var trim = function(str) {
          return (str + "").replace(/^\s+|\s+$|/g, "");
        };
        var escape_regex = function(str) {
          return (str + "").replace(/([.?*+^$[\]\\(){}|-])/g, "\\$1");
        };
        var is_array = Array.isArray || typeof $ !== "undefined" && $.isArray || function(object) {
          return Object.prototype.toString.call(object) === "[object Array]";
        };
        var DIACRITICS = {
          "a": "[a\u1E00\u1E01\u0102\u0103\xC2\xE2\u01CD\u01CE\u023A\u2C65\u0226\u0227\u1EA0\u1EA1\xC4\xE4\xC0\xE0\xC1\xE1\u0100\u0101\xC3\xE3\xC5\xE5\u0105\u0104\xC3\u0105\u0104]",
          "b": "[b\u2422\u03B2\u0392B\u0E3F\u{10301}\u16D2]",
          "c": "[c\u0106\u0107\u0108\u0109\u010C\u010D\u010A\u010BC\u0304c\u0304\xC7\xE7\u1E08\u1E09\u023B\u023C\u0187\u0188\u0255\u1D04\uFF23\uFF43]",
          "d": "[d\u010E\u010F\u1E0A\u1E0B\u1E10\u1E11\u1E0C\u1E0D\u1E12\u1E13\u1E0E\u1E0F\u0110\u0111D\u0326d\u0326\u0189\u0256\u018A\u0257\u018B\u018C\u1D6D\u1D81\u1D91\u0221\u1D05\uFF24\uFF44\xF0]",
          "e": "[e\xC9\xE9\xC8\xE8\xCA\xEA\u1E18\u1E19\u011A\u011B\u0114\u0115\u1EBC\u1EBD\u1E1A\u1E1B\u1EBA\u1EBB\u0116\u0117\xCB\xEB\u0112\u0113\u0228\u0229\u0118\u0119\u1D92\u0246\u0247\u0204\u0205\u1EBE\u1EBF\u1EC0\u1EC1\u1EC4\u1EC5\u1EC2\u1EC3\u1E1C\u1E1D\u1E16\u1E17\u1E14\u1E15\u0206\u0207\u1EB8\u1EB9\u1EC6\u1EC7\u2C78\u1D07\uFF25\uFF45\u0258\u01DD\u018F\u0190\u03B5]",
          "f": "[f\u0191\u0192\u1E1E\u1E1F]",
          "g": "[g\u0262\u20B2\u01E4\u01E5\u011C\u011D\u011E\u011F\u0122\u0123\u0193\u0260\u0120\u0121]",
          "h": "[h\u0124\u0125\u0126\u0127\u1E28\u1E29\u1E96\u1E96\u1E24\u1E25\u1E22\u1E23\u0266\u02B0\u01F6\u0195]",
          "i": "[i\xCD\xED\xCC\xEC\u012C\u012D\xCE\xEE\u01CF\u01D0\xCF\xEF\u1E2E\u1E2F\u0128\u0129\u012E\u012F\u012A\u012B\u1EC8\u1EC9\u0208\u0209\u020A\u020B\u1ECA\u1ECB\u1E2C\u1E2D\u0197\u0268\u0268\u0306\u1D7B\u1D96\u0130iI\u0131\u026A\uFF29\uFF49]",
          "j": "[j\u0237\u0134\u0135\u0248\u0249\u029D\u025F\u02B2]",
          "k": "[k\u0198\u0199\uA740\uA741\u1E30\u1E31\u01E8\u01E9\u1E32\u1E33\u1E34\u1E35\u03BA\u03F0\u20AD]",
          "l": "[l\u0141\u0142\u013D\u013E\u013B\u013C\u0139\u013A\u1E36\u1E37\u1E38\u1E39\u1E3C\u1E3D\u1E3A\u1E3B\u013F\u0140\u023D\u019A\u2C60\u2C61\u2C62\u026B\u026C\u1D85\u026D\u0234\u029F\uFF2C\uFF4C]",
          "n": "[n\u0143\u0144\u01F8\u01F9\u0147\u0148\xD1\xF1\u1E44\u1E45\u0145\u0146\u1E46\u1E47\u1E4A\u1E4B\u1E48\u1E49N\u0308n\u0308\u019D\u0272\u0220\u019E\u1D70\u1D87\u0273\u0235\u0274\uFF2E\uFF4E\u014A\u014B]",
          "o": "[o\xD8\xF8\xD6\xF6\xD3\xF3\xD2\xF2\xD4\xF4\u01D1\u01D2\u0150\u0151\u014E\u014F\u022E\u022F\u1ECC\u1ECD\u019F\u0275\u01A0\u01A1\u1ECE\u1ECF\u014C\u014D\xD5\xF5\u01EA\u01EB\u020C\u020D\u0555\u0585]",
          "p": "[p\u1E54\u1E55\u1E56\u1E57\u2C63\u1D7D\u01A4\u01A5\u1D71]",
          "q": "[q\uA756\uA757\u02A0\u024A\u024B\uA758\uA759q\u0303]",
          "r": "[r\u0154\u0155\u024C\u024D\u0158\u0159\u0156\u0157\u1E58\u1E59\u0210\u0211\u0212\u0213\u1E5A\u1E5B\u2C64\u027D]",
          "s": "[s\u015A\u015B\u1E60\u1E61\u1E62\u1E63\uA7A8\uA7A9\u015C\u015D\u0160\u0161\u015E\u015F\u0218\u0219S\u0308s\u0308]",
          "t": "[t\u0164\u0165\u1E6A\u1E6B\u0162\u0163\u1E6C\u1E6D\u01AE\u0288\u021A\u021B\u1E70\u1E71\u1E6E\u1E6F\u01AC\u01AD]",
          "u": "[u\u016C\u016D\u0244\u0289\u1EE4\u1EE5\xDC\xFC\xDA\xFA\xD9\xF9\xDB\xFB\u01D3\u01D4\u0170\u0171\u016C\u016D\u01AF\u01B0\u1EE6\u1EE7\u016A\u016B\u0168\u0169\u0172\u0173\u0214\u0215\u222A]",
          "v": "[v\u1E7C\u1E7D\u1E7E\u1E7F\u01B2\u028B\uA75E\uA75F\u2C71\u028B]",
          "w": "[w\u1E82\u1E83\u1E80\u1E81\u0174\u0175\u1E84\u1E85\u1E86\u1E87\u1E88\u1E89]",
          "x": "[x\u1E8C\u1E8D\u1E8A\u1E8B\u03C7]",
          "y": "[y\xDD\xFD\u1EF2\u1EF3\u0176\u0177\u0178\xFF\u1EF8\u1EF9\u1E8E\u1E8F\u1EF4\u1EF5\u024E\u024F\u01B3\u01B4]",
          "z": "[z\u0179\u017A\u1E90\u1E91\u017D\u017E\u017B\u017C\u1E92\u1E93\u1E94\u1E95\u01B5\u01B6]"
        };
        var asciifold = function() {
          var i, n, k, chunk;
          var foreignletters = "";
          var lookup = {};
          for (k in DIACRITICS) {
            if (DIACRITICS.hasOwnProperty(k)) {
              chunk = DIACRITICS[k].substring(2, DIACRITICS[k].length - 1);
              foreignletters += chunk;
              for (i = 0, n = chunk.length; i < n; i++) {
                lookup[chunk.charAt(i)] = k;
              }
            }
          }
          var regexp = new RegExp("[" + foreignletters + "]", "g");
          return function(str) {
            return str.replace(regexp, function(foreignletter) {
              return lookup[foreignletter];
            }).toLowerCase();
          };
        }();
        return Sifter;
      });
    }
  });

  // node_modules/microplugin/src/microplugin.js
  var require_microplugin = __commonJS({
    "node_modules/microplugin/src/microplugin.js"(exports, module) {
      (function(root, factory) {
        if (typeof define === "function" && define.amd) {
          define(factory);
        } else if (typeof exports === "object") {
          module.exports = factory();
        } else {
          root.MicroPlugin = factory();
        }
      })(exports, function() {
        var MicroPlugin = {};
        MicroPlugin.mixin = function(Interface) {
          Interface.plugins = {};
          Interface.prototype.initializePlugins = function(plugins) {
            var i, n, key;
            var self2 = this;
            var queue = [];
            self2.plugins = {
              names: [],
              settings: {},
              requested: {},
              loaded: {}
            };
            if (utils.isArray(plugins)) {
              for (i = 0, n = plugins.length; i < n; i++) {
                if (typeof plugins[i] === "string") {
                  queue.push(plugins[i]);
                } else {
                  self2.plugins.settings[plugins[i].name] = plugins[i].options;
                  queue.push(plugins[i].name);
                }
              }
            } else if (plugins) {
              for (key in plugins) {
                if (plugins.hasOwnProperty(key)) {
                  self2.plugins.settings[key] = plugins[key];
                  queue.push(key);
                }
              }
            }
            while (queue.length) {
              self2.require(queue.shift());
            }
          };
          Interface.prototype.loadPlugin = function(name) {
            var self2 = this;
            var plugins = self2.plugins;
            var plugin = Interface.plugins[name];
            if (!Interface.plugins.hasOwnProperty(name)) {
              throw new Error('Unable to find "' + name + '" plugin');
            }
            plugins.requested[name] = true;
            plugins.loaded[name] = plugin.fn.apply(self2, [self2.plugins.settings[name] || {}]);
            plugins.names.push(name);
          };
          Interface.prototype.require = function(name) {
            var self2 = this;
            var plugins = self2.plugins;
            if (!self2.plugins.loaded.hasOwnProperty(name)) {
              if (plugins.requested[name]) {
                throw new Error('Plugin has circular dependency ("' + name + '")');
              }
              self2.loadPlugin(name);
            }
            return plugins.loaded[name];
          };
          Interface.define = function(name, fn) {
            Interface.plugins[name] = {
              "name": name,
              "fn": fn
            };
          };
        };
        var utils = {
          isArray: Array.isArray || function(vArg) {
            return Object.prototype.toString.call(vArg) === "[object Array]";
          }
        };
        return MicroPlugin;
      });
    }
  });

  // node_modules/selectize/dist/js/standalone/selectize.js
  var require_selectize = __commonJS({
    "node_modules/selectize/dist/js/standalone/selectize.js"(exports, module) {
      (function(root, factory) {
        if (typeof define === "function" && define.amd) {
          define("sifter", factory);
        } else if (typeof exports === "object") {
          module.exports = factory();
        } else {
          root.Sifter = factory();
        }
      })(exports, function() {
        var Sifter = function(items, settings) {
          this.items = items;
          this.settings = settings || { diacritics: true };
        };
        Sifter.prototype.tokenize = function(query) {
          query = trim(String(query || "").toLowerCase());
          if (!query || !query.length)
            return [];
          var i, n, regex, letter;
          var tokens = [];
          var words = query.split(/ +/);
          for (i = 0, n = words.length; i < n; i++) {
            regex = escape_regex(words[i]);
            if (this.settings.diacritics) {
              for (letter in DIACRITICS) {
                if (DIACRITICS.hasOwnProperty(letter)) {
                  regex = regex.replace(new RegExp(letter, "g"), DIACRITICS[letter]);
                }
              }
            }
            tokens.push({
              string: words[i],
              regex: new RegExp(regex, "i")
            });
          }
          return tokens;
        };
        Sifter.prototype.iterator = function(object, callback) {
          var iterator;
          if (is_array(object)) {
            iterator = Array.prototype.forEach || function(callback2) {
              for (var i = 0, n = this.length; i < n; i++) {
                callback2(this[i], i, this);
              }
            };
          } else {
            iterator = function(callback2) {
              for (var key in this) {
                if (this.hasOwnProperty(key)) {
                  callback2(this[key], key, this);
                }
              }
            };
          }
          iterator.apply(object, [callback]);
        };
        Sifter.prototype.getScoreFunction = function(search, options) {
          var self2, fields, tokens, token_count, nesting;
          self2 = this;
          search = self2.prepareSearch(search, options);
          tokens = search.tokens;
          fields = search.options.fields;
          token_count = tokens.length;
          nesting = search.options.nesting;
          var scoreValue = function(value, token) {
            var score, pos;
            if (!value)
              return 0;
            value = String(value || "");
            pos = value.search(token.regex);
            if (pos === -1)
              return 0;
            score = token.string.length / value.length;
            if (pos === 0)
              score += 0.5;
            return score;
          };
          var scoreObject = function() {
            var field_count = fields.length;
            if (!field_count) {
              return function() {
                return 0;
              };
            }
            if (field_count === 1) {
              return function(token, data) {
                return scoreValue(getattr(data, fields[0], nesting), token);
              };
            }
            return function(token, data) {
              for (var i = 0, sum = 0; i < field_count; i++) {
                sum += scoreValue(getattr(data, fields[i], nesting), token);
              }
              return sum / field_count;
            };
          }();
          if (!token_count) {
            return function() {
              return 0;
            };
          }
          if (token_count === 1) {
            return function(data) {
              return scoreObject(tokens[0], data);
            };
          }
          if (search.options.conjunction === "and") {
            return function(data) {
              var score;
              for (var i = 0, sum = 0; i < token_count; i++) {
                score = scoreObject(tokens[i], data);
                if (score <= 0)
                  return 0;
                sum += score;
              }
              return sum / token_count;
            };
          } else {
            return function(data) {
              for (var i = 0, sum = 0; i < token_count; i++) {
                sum += scoreObject(tokens[i], data);
              }
              return sum / token_count;
            };
          }
        };
        Sifter.prototype.getSortFunction = function(search, options) {
          var i, n, self2, field, fields, fields_count, multiplier, multipliers, get_field, implicit_score, sort;
          self2 = this;
          search = self2.prepareSearch(search, options);
          sort = !search.query && options.sort_empty || options.sort;
          get_field = function(name, result) {
            if (name === "$score")
              return result.score;
            return getattr(self2.items[result.id], name, options.nesting);
          };
          fields = [];
          if (sort) {
            for (i = 0, n = sort.length; i < n; i++) {
              if (search.query || sort[i].field !== "$score") {
                fields.push(sort[i]);
              }
            }
          }
          if (search.query) {
            implicit_score = true;
            for (i = 0, n = fields.length; i < n; i++) {
              if (fields[i].field === "$score") {
                implicit_score = false;
                break;
              }
            }
            if (implicit_score) {
              fields.unshift({ field: "$score", direction: "desc" });
            }
          } else {
            for (i = 0, n = fields.length; i < n; i++) {
              if (fields[i].field === "$score") {
                fields.splice(i, 1);
                break;
              }
            }
          }
          multipliers = [];
          for (i = 0, n = fields.length; i < n; i++) {
            multipliers.push(fields[i].direction === "desc" ? -1 : 1);
          }
          fields_count = fields.length;
          if (!fields_count) {
            return null;
          } else if (fields_count === 1) {
            field = fields[0].field;
            multiplier = multipliers[0];
            return function(a, b) {
              return multiplier * cmp(
                get_field(field, a),
                get_field(field, b)
              );
            };
          } else {
            return function(a, b) {
              var i2, result, a_value, b_value, field2;
              for (i2 = 0; i2 < fields_count; i2++) {
                field2 = fields[i2].field;
                result = multipliers[i2] * cmp(
                  get_field(field2, a),
                  get_field(field2, b)
                );
                if (result)
                  return result;
              }
              return 0;
            };
          }
        };
        Sifter.prototype.prepareSearch = function(query, options) {
          if (typeof query === "object")
            return query;
          options = extend({}, options);
          var option_fields = options.fields;
          var option_sort = options.sort;
          var option_sort_empty = options.sort_empty;
          if (option_fields && !is_array(option_fields))
            options.fields = [option_fields];
          if (option_sort && !is_array(option_sort))
            options.sort = [option_sort];
          if (option_sort_empty && !is_array(option_sort_empty))
            options.sort_empty = [option_sort_empty];
          return {
            options,
            query: String(query || "").toLowerCase(),
            tokens: this.tokenize(query),
            total: 0,
            items: []
          };
        };
        Sifter.prototype.search = function(query, options) {
          var self2 = this, value, score, search, calculateScore;
          var fn_sort;
          var fn_score;
          search = this.prepareSearch(query, options);
          options = search.options;
          query = search.query;
          fn_score = options.score || self2.getScoreFunction(search);
          if (query.length) {
            self2.iterator(self2.items, function(item, id) {
              score = fn_score(item);
              if (options.filter === false || score > 0) {
                search.items.push({ "score": score, "id": id });
              }
            });
          } else {
            self2.iterator(self2.items, function(item, id) {
              search.items.push({ "score": 1, "id": id });
            });
          }
          fn_sort = self2.getSortFunction(search, options);
          if (fn_sort)
            search.items.sort(fn_sort);
          search.total = search.items.length;
          if (typeof options.limit === "number") {
            search.items = search.items.slice(0, options.limit);
          }
          return search;
        };
        var cmp = function(a, b) {
          if (typeof a === "number" && typeof b === "number") {
            return a > b ? 1 : a < b ? -1 : 0;
          }
          a = asciifold(String(a || ""));
          b = asciifold(String(b || ""));
          if (a > b)
            return 1;
          if (b > a)
            return -1;
          return 0;
        };
        var extend = function(a, b) {
          var i, n, k, object;
          for (i = 1, n = arguments.length; i < n; i++) {
            object = arguments[i];
            if (!object)
              continue;
            for (k in object) {
              if (object.hasOwnProperty(k)) {
                a[k] = object[k];
              }
            }
          }
          return a;
        };
        var getattr = function(obj, name, nesting) {
          if (!obj || !name)
            return;
          if (!nesting)
            return obj[name];
          var names = name.split(".");
          while (names.length && (obj = obj[names.shift()]))
            ;
          return obj;
        };
        var trim = function(str) {
          return (str + "").replace(/^\s+|\s+$|/g, "");
        };
        var escape_regex = function(str) {
          return (str + "").replace(/([.?*+^$[\]\\(){}|-])/g, "\\$1");
        };
        var is_array = Array.isArray || typeof $ !== "undefined" && $.isArray || function(object) {
          return Object.prototype.toString.call(object) === "[object Array]";
        };
        var DIACRITICS = {
          "a": "[a\u1E00\u1E01\u0102\u0103\xC2\xE2\u01CD\u01CE\u023A\u2C65\u0226\u0227\u1EA0\u1EA1\xC4\xE4\xC0\xE0\xC1\xE1\u0100\u0101\xC3\xE3\xC5\xE5\u0105\u0104\xC3\u0105\u0104]",
          "b": "[b\u2422\u03B2\u0392B\u0E3F\u{10301}\u16D2]",
          "c": "[c\u0106\u0107\u0108\u0109\u010C\u010D\u010A\u010BC\u0304c\u0304\xC7\xE7\u1E08\u1E09\u023B\u023C\u0187\u0188\u0255\u1D04\uFF23\uFF43]",
          "d": "[d\u010E\u010F\u1E0A\u1E0B\u1E10\u1E11\u1E0C\u1E0D\u1E12\u1E13\u1E0E\u1E0F\u0110\u0111D\u0326d\u0326\u0189\u0256\u018A\u0257\u018B\u018C\u1D6D\u1D81\u1D91\u0221\u1D05\uFF24\uFF44\xF0]",
          "e": "[e\xC9\xE9\xC8\xE8\xCA\xEA\u1E18\u1E19\u011A\u011B\u0114\u0115\u1EBC\u1EBD\u1E1A\u1E1B\u1EBA\u1EBB\u0116\u0117\xCB\xEB\u0112\u0113\u0228\u0229\u0118\u0119\u1D92\u0246\u0247\u0204\u0205\u1EBE\u1EBF\u1EC0\u1EC1\u1EC4\u1EC5\u1EC2\u1EC3\u1E1C\u1E1D\u1E16\u1E17\u1E14\u1E15\u0206\u0207\u1EB8\u1EB9\u1EC6\u1EC7\u2C78\u1D07\uFF25\uFF45\u0258\u01DD\u018F\u0190\u03B5]",
          "f": "[f\u0191\u0192\u1E1E\u1E1F]",
          "g": "[g\u0262\u20B2\u01E4\u01E5\u011C\u011D\u011E\u011F\u0122\u0123\u0193\u0260\u0120\u0121]",
          "h": "[h\u0124\u0125\u0126\u0127\u1E28\u1E29\u1E96\u1E96\u1E24\u1E25\u1E22\u1E23\u0266\u02B0\u01F6\u0195]",
          "i": "[i\xCD\xED\xCC\xEC\u012C\u012D\xCE\xEE\u01CF\u01D0\xCF\xEF\u1E2E\u1E2F\u0128\u0129\u012E\u012F\u012A\u012B\u1EC8\u1EC9\u0208\u0209\u020A\u020B\u1ECA\u1ECB\u1E2C\u1E2D\u0197\u0268\u0268\u0306\u1D7B\u1D96\u0130iI\u0131\u026A\uFF29\uFF49]",
          "j": "[j\u0237\u0134\u0135\u0248\u0249\u029D\u025F\u02B2]",
          "k": "[k\u0198\u0199\uA740\uA741\u1E30\u1E31\u01E8\u01E9\u1E32\u1E33\u1E34\u1E35\u03BA\u03F0\u20AD]",
          "l": "[l\u0141\u0142\u013D\u013E\u013B\u013C\u0139\u013A\u1E36\u1E37\u1E38\u1E39\u1E3C\u1E3D\u1E3A\u1E3B\u013F\u0140\u023D\u019A\u2C60\u2C61\u2C62\u026B\u026C\u1D85\u026D\u0234\u029F\uFF2C\uFF4C]",
          "n": "[n\u0143\u0144\u01F8\u01F9\u0147\u0148\xD1\xF1\u1E44\u1E45\u0145\u0146\u1E46\u1E47\u1E4A\u1E4B\u1E48\u1E49N\u0308n\u0308\u019D\u0272\u0220\u019E\u1D70\u1D87\u0273\u0235\u0274\uFF2E\uFF4E\u014A\u014B]",
          "o": "[o\xD8\xF8\xD6\xF6\xD3\xF3\xD2\xF2\xD4\xF4\u01D1\u01D2\u0150\u0151\u014E\u014F\u022E\u022F\u1ECC\u1ECD\u019F\u0275\u01A0\u01A1\u1ECE\u1ECF\u014C\u014D\xD5\xF5\u01EA\u01EB\u020C\u020D\u0555\u0585]",
          "p": "[p\u1E54\u1E55\u1E56\u1E57\u2C63\u1D7D\u01A4\u01A5\u1D71]",
          "q": "[q\uA756\uA757\u02A0\u024A\u024B\uA758\uA759q\u0303]",
          "r": "[r\u0154\u0155\u024C\u024D\u0158\u0159\u0156\u0157\u1E58\u1E59\u0210\u0211\u0212\u0213\u1E5A\u1E5B\u2C64\u027D]",
          "s": "[s\u015A\u015B\u1E60\u1E61\u1E62\u1E63\uA7A8\uA7A9\u015C\u015D\u0160\u0161\u015E\u015F\u0218\u0219S\u0308s\u0308]",
          "t": "[t\u0164\u0165\u1E6A\u1E6B\u0162\u0163\u1E6C\u1E6D\u01AE\u0288\u021A\u021B\u1E70\u1E71\u1E6E\u1E6F\u01AC\u01AD]",
          "u": "[u\u016C\u016D\u0244\u0289\u1EE4\u1EE5\xDC\xFC\xDA\xFA\xD9\xF9\xDB\xFB\u01D3\u01D4\u0170\u0171\u016C\u016D\u01AF\u01B0\u1EE6\u1EE7\u016A\u016B\u0168\u0169\u0172\u0173\u0214\u0215\u222A]",
          "v": "[v\u1E7C\u1E7D\u1E7E\u1E7F\u01B2\u028B\uA75E\uA75F\u2C71\u028B]",
          "w": "[w\u1E82\u1E83\u1E80\u1E81\u0174\u0175\u1E84\u1E85\u1E86\u1E87\u1E88\u1E89]",
          "x": "[x\u1E8C\u1E8D\u1E8A\u1E8B\u03C7]",
          "y": "[y\xDD\xFD\u1EF2\u1EF3\u0176\u0177\u0178\xFF\u1EF8\u1EF9\u1E8E\u1E8F\u1EF4\u1EF5\u024E\u024F\u01B3\u01B4]",
          "z": "[z\u0179\u017A\u1E90\u1E91\u017D\u017E\u017B\u017C\u1E92\u1E93\u1E94\u1E95\u01B5\u01B6]"
        };
        var asciifold = function() {
          var i, n, k, chunk;
          var foreignletters = "";
          var lookup = {};
          for (k in DIACRITICS) {
            if (DIACRITICS.hasOwnProperty(k)) {
              chunk = DIACRITICS[k].substring(2, DIACRITICS[k].length - 1);
              foreignletters += chunk;
              for (i = 0, n = chunk.length; i < n; i++) {
                lookup[chunk.charAt(i)] = k;
              }
            }
          }
          var regexp = new RegExp("[" + foreignletters + "]", "g");
          return function(str) {
            return str.replace(regexp, function(foreignletter) {
              return lookup[foreignletter];
            }).toLowerCase();
          };
        }();
        return Sifter;
      });
      (function(root, factory) {
        if (typeof define === "function" && define.amd) {
          define("microplugin", factory);
        } else if (typeof exports === "object") {
          module.exports = factory();
        } else {
          root.MicroPlugin = factory();
        }
      })(exports, function() {
        var MicroPlugin = {};
        MicroPlugin.mixin = function(Interface) {
          Interface.plugins = {};
          Interface.prototype.initializePlugins = function(plugins) {
            var i, n, key;
            var self2 = this;
            var queue = [];
            self2.plugins = {
              names: [],
              settings: {},
              requested: {},
              loaded: {}
            };
            if (utils.isArray(plugins)) {
              for (i = 0, n = plugins.length; i < n; i++) {
                if (typeof plugins[i] === "string") {
                  queue.push(plugins[i]);
                } else {
                  self2.plugins.settings[plugins[i].name] = plugins[i].options;
                  queue.push(plugins[i].name);
                }
              }
            } else if (plugins) {
              for (key in plugins) {
                if (plugins.hasOwnProperty(key)) {
                  self2.plugins.settings[key] = plugins[key];
                  queue.push(key);
                }
              }
            }
            while (queue.length) {
              self2.require(queue.shift());
            }
          };
          Interface.prototype.loadPlugin = function(name) {
            var self2 = this;
            var plugins = self2.plugins;
            var plugin = Interface.plugins[name];
            if (!Interface.plugins.hasOwnProperty(name)) {
              throw new Error('Unable to find "' + name + '" plugin');
            }
            plugins.requested[name] = true;
            plugins.loaded[name] = plugin.fn.apply(self2, [self2.plugins.settings[name] || {}]);
            plugins.names.push(name);
          };
          Interface.prototype.require = function(name) {
            var self2 = this;
            var plugins = self2.plugins;
            if (!self2.plugins.loaded.hasOwnProperty(name)) {
              if (plugins.requested[name]) {
                throw new Error('Plugin has circular dependency ("' + name + '")');
              }
              self2.loadPlugin(name);
            }
            return plugins.loaded[name];
          };
          Interface.define = function(name, fn) {
            Interface.plugins[name] = {
              "name": name,
              "fn": fn
            };
          };
        };
        var utils = {
          isArray: Array.isArray || function(vArg) {
            return Object.prototype.toString.call(vArg) === "[object Array]";
          }
        };
        return MicroPlugin;
      });
      (function(root, factory) {
        if (typeof define === "function" && define.amd) {
          define("selectize", ["jquery", "sifter", "microplugin"], factory);
        } else if (typeof exports === "object") {
          module.exports = factory(require_jquery(), require_sifter(), require_microplugin());
        } else {
          root.Selectize = factory(root.jQuery, root.Sifter, root.MicroPlugin);
        }
      })(exports, function($2, Sifter, MicroPlugin) {
        "use strict";
        var highlight = function($element, pattern) {
          if (typeof pattern === "string" && !pattern.length)
            return;
          var regex = typeof pattern === "string" ? new RegExp(pattern, "i") : pattern;
          var highlight2 = function(node) {
            var skip = 0;
            if (node.nodeType === 3) {
              var pos = node.data.search(regex);
              if (pos >= 0 && node.data.length > 0) {
                var match = node.data.match(regex);
                var spannode = document.createElement("span");
                spannode.className = "highlight";
                var middlebit = node.splitText(pos);
                var endbit = middlebit.splitText(match[0].length);
                var middleclone = middlebit.cloneNode(true);
                spannode.appendChild(middleclone);
                middlebit.parentNode.replaceChild(spannode, middlebit);
                skip = 1;
              }
            } else if (node.nodeType === 1 && node.childNodes && !/(script|style)/i.test(node.tagName) && (node.className !== "highlight" || node.tagName !== "SPAN")) {
              for (var i = 0; i < node.childNodes.length; ++i) {
                i += highlight2(node.childNodes[i]);
              }
            }
            return skip;
          };
          return $element.each(function() {
            highlight2(this);
          });
        };
        $2.fn.removeHighlight = function() {
          return this.find("span.highlight").each(function() {
            this.parentNode.firstChild.nodeName;
            var parent = this.parentNode;
            parent.replaceChild(this.firstChild, this);
            parent.normalize();
          }).end();
        };
        var MicroEvent = function() {
        };
        MicroEvent.prototype = {
          on: function(event, fct) {
            this._events = this._events || {};
            this._events[event] = this._events[event] || [];
            this._events[event].push(fct);
          },
          off: function(event, fct) {
            var n = arguments.length;
            if (n === 0)
              return delete this._events;
            if (n === 1)
              return delete this._events[event];
            this._events = this._events || {};
            if (event in this._events === false)
              return;
            this._events[event].splice(this._events[event].indexOf(fct), 1);
          },
          trigger: function(event) {
            this._events = this._events || {};
            if (event in this._events === false)
              return;
            for (var i = 0; i < this._events[event].length; i++) {
              this._events[event][i].apply(this, Array.prototype.slice.call(arguments, 1));
            }
          }
        };
        MicroEvent.mixin = function(destObject) {
          var props = ["on", "off", "trigger"];
          for (var i = 0; i < props.length; i++) {
            destObject.prototype[props[i]] = MicroEvent.prototype[props[i]];
          }
        };
        var IS_MAC = /Mac/.test(navigator.userAgent);
        var KEY_A = 65;
        var KEY_COMMA = 188;
        var KEY_RETURN = 13;
        var KEY_ESC = 27;
        var KEY_LEFT = 37;
        var KEY_UP = 38;
        var KEY_P = 80;
        var KEY_RIGHT = 39;
        var KEY_DOWN = 40;
        var KEY_N = 78;
        var KEY_BACKSPACE = 8;
        var KEY_DELETE = 46;
        var KEY_SHIFT = 16;
        var KEY_CMD = IS_MAC ? 91 : 17;
        var KEY_CTRL = IS_MAC ? 18 : 17;
        var KEY_TAB = 9;
        var TAG_SELECT = 1;
        var TAG_INPUT = 2;
        var SUPPORTS_VALIDITY_API = !/android/i.test(window.navigator.userAgent) && !!document.createElement("input").validity;
        var isset = function(object) {
          return typeof object !== "undefined";
        };
        var hash_key = function(value) {
          if (typeof value === "undefined" || value === null)
            return null;
          if (typeof value === "boolean")
            return value ? "1" : "0";
          return value + "";
        };
        var escape_html = function(str) {
          return (str + "").replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;");
        };
        var escape_replace = function(str) {
          return (str + "").replace(/\$/g, "$$$$");
        };
        var hook = {};
        hook.before = function(self2, method, fn) {
          var original = self2[method];
          self2[method] = function() {
            fn.apply(self2, arguments);
            return original.apply(self2, arguments);
          };
        };
        hook.after = function(self2, method, fn) {
          var original = self2[method];
          self2[method] = function() {
            var result = original.apply(self2, arguments);
            fn.apply(self2, arguments);
            return result;
          };
        };
        var once = function(fn) {
          var called = false;
          return function() {
            if (called)
              return;
            called = true;
            fn.apply(this, arguments);
          };
        };
        var debounce = function(fn, delay) {
          var timeout;
          return function() {
            var self2 = this;
            var args = arguments;
            window.clearTimeout(timeout);
            timeout = window.setTimeout(function() {
              fn.apply(self2, args);
            }, delay);
          };
        };
        var debounce_events = function(self2, types, fn) {
          var type;
          var trigger = self2.trigger;
          var event_args = {};
          self2.trigger = function() {
            var type2 = arguments[0];
            if (types.indexOf(type2) !== -1) {
              event_args[type2] = arguments;
            } else {
              return trigger.apply(self2, arguments);
            }
          };
          fn.apply(self2, []);
          self2.trigger = trigger;
          for (type in event_args) {
            if (event_args.hasOwnProperty(type)) {
              trigger.apply(self2, event_args[type]);
            }
          }
        };
        var watchChildEvent = function($parent, event, selector, fn) {
          $parent.on(event, selector, function(e) {
            var child = e.target;
            while (child && child.parentNode !== $parent[0]) {
              child = child.parentNode;
            }
            e.currentTarget = child;
            return fn.apply(this, [e]);
          });
        };
        var getSelection = function(input) {
          var result = {};
          if ("selectionStart" in input) {
            result.start = input.selectionStart;
            result.length = input.selectionEnd - result.start;
          } else if (document.selection) {
            input.focus();
            var sel = document.selection.createRange();
            var selLen = document.selection.createRange().text.length;
            sel.moveStart("character", -input.value.length);
            result.start = sel.text.length - selLen;
            result.length = selLen;
          }
          return result;
        };
        var transferStyles = function($from, $to, properties) {
          var i, n, styles = {};
          if (properties) {
            for (i = 0, n = properties.length; i < n; i++) {
              styles[properties[i]] = $from.css(properties[i]);
            }
          } else {
            styles = $from.css();
          }
          $to.css(styles);
        };
        var measureString = function(str, $parent) {
          if (!str) {
            return 0;
          }
          if (!Selectize.$testInput) {
            Selectize.$testInput = $2("<span />").css({
              position: "absolute",
              top: -99999,
              left: -99999,
              width: "auto",
              padding: 0,
              whiteSpace: "pre"
            }).appendTo("body");
          }
          Selectize.$testInput.text(str);
          transferStyles($parent, Selectize.$testInput, [
            "letterSpacing",
            "fontSize",
            "fontFamily",
            "fontWeight",
            "textTransform"
          ]);
          return Selectize.$testInput.width();
        };
        var autoGrow = function($input) {
          var currentWidth = null;
          var update = function(e, options) {
            var value, keyCode, printable, placeholder, width;
            var shift, character, selection;
            e = e || window.event || {};
            options = options || {};
            if (e.metaKey || e.altKey)
              return;
            if (!options.force && $input.data("grow") === false)
              return;
            value = $input.val();
            if (e.type && e.type.toLowerCase() === "keydown") {
              keyCode = e.keyCode;
              printable = keyCode >= 48 && keyCode <= 57 || // 0-9
              keyCode >= 65 && keyCode <= 90 || // a-z
              keyCode >= 96 && keyCode <= 111 || // numpad 0-9, numeric operators
              keyCode >= 186 && keyCode <= 222 || // semicolon, equal, comma, dash, etc.
              keyCode === 32;
              if (keyCode === KEY_DELETE || keyCode === KEY_BACKSPACE) {
                selection = getSelection($input[0]);
                if (selection.length) {
                  value = value.substring(0, selection.start) + value.substring(selection.start + selection.length);
                } else if (keyCode === KEY_BACKSPACE && selection.start) {
                  value = value.substring(0, selection.start - 1) + value.substring(selection.start + 1);
                } else if (keyCode === KEY_DELETE && typeof selection.start !== "undefined") {
                  value = value.substring(0, selection.start) + value.substring(selection.start + 1);
                }
              } else if (printable) {
                shift = e.shiftKey;
                character = String.fromCharCode(e.keyCode);
                if (shift)
                  character = character.toUpperCase();
                else
                  character = character.toLowerCase();
                value += character;
              }
            }
            placeholder = $input.attr("placeholder");
            if (!value && placeholder) {
              value = placeholder;
            }
            width = measureString(value, $input) + 4;
            if (width !== currentWidth) {
              currentWidth = width;
              $input.width(width);
              $input.triggerHandler("resize");
            }
          };
          $input.on("keydown keyup update blur", update);
          update();
        };
        var domToString = function(d) {
          var tmp = document.createElement("div");
          tmp.appendChild(d.cloneNode(true));
          return tmp.innerHTML;
        };
        var logError = function(message, options) {
          if (!options)
            options = {};
          var component = "Selectize";
          console.error(component + ": " + message);
          if (options.explanation) {
            if (console.group)
              console.group();
            console.error(options.explanation);
            if (console.group)
              console.groupEnd();
          }
        };
        var Selectize = function($input, settings) {
          var key, i, n, dir, input, self2 = this;
          input = $input[0];
          input.selectize = self2;
          var computedStyle = window.getComputedStyle && window.getComputedStyle(input, null);
          dir = computedStyle ? computedStyle.getPropertyValue("direction") : input.currentStyle && input.currentStyle.direction;
          dir = dir || $input.parents("[dir]:first").attr("dir") || "";
          $2.extend(self2, {
            order: 0,
            settings,
            $input,
            tabIndex: $input.attr("tabindex") || "",
            tagType: input.tagName.toLowerCase() === "select" ? TAG_SELECT : TAG_INPUT,
            rtl: /rtl/i.test(dir),
            eventNS: ".selectize" + ++Selectize.count,
            highlightedValue: null,
            isBlurring: false,
            isOpen: false,
            isDisabled: false,
            isRequired: $input.is("[required]"),
            isInvalid: false,
            isLocked: false,
            isFocused: false,
            isInputHidden: false,
            isSetup: false,
            isShiftDown: false,
            isCmdDown: false,
            isCtrlDown: false,
            ignoreFocus: false,
            ignoreBlur: false,
            ignoreHover: false,
            hasOptions: false,
            currentResults: null,
            lastValue: "",
            caretPos: 0,
            loading: 0,
            loadedSearches: {},
            $activeOption: null,
            $activeItems: [],
            optgroups: {},
            options: {},
            userOptions: {},
            items: [],
            renderCache: {},
            onSearchChange: settings.loadThrottle === null ? self2.onSearchChange : debounce(self2.onSearchChange, settings.loadThrottle)
          });
          self2.sifter = new Sifter(this.options, { diacritics: settings.diacritics });
          if (self2.settings.options) {
            for (i = 0, n = self2.settings.options.length; i < n; i++) {
              self2.registerOption(self2.settings.options[i]);
            }
            delete self2.settings.options;
          }
          if (self2.settings.optgroups) {
            for (i = 0, n = self2.settings.optgroups.length; i < n; i++) {
              self2.registerOptionGroup(self2.settings.optgroups[i]);
            }
            delete self2.settings.optgroups;
          }
          self2.settings.mode = self2.settings.mode || (self2.settings.maxItems === 1 ? "single" : "multi");
          if (typeof self2.settings.hideSelected !== "boolean") {
            self2.settings.hideSelected = self2.settings.mode === "multi";
          }
          self2.initializePlugins(self2.settings.plugins);
          self2.setupCallbacks();
          self2.setupTemplates();
          self2.setup();
        };
        MicroEvent.mixin(Selectize);
        if (typeof MicroPlugin !== "undefined") {
          MicroPlugin.mixin(Selectize);
        } else {
          logError(
            "Dependency MicroPlugin is missing",
            { explanation: 'Make sure you either: (1) are using the "standalone" version of Selectize, or (2) require MicroPlugin before you load Selectize.' }
          );
        }
        $2.extend(Selectize.prototype, {
          /**
           * Creates all elements and sets up event bindings.
           */
          setup: function() {
            var self2 = this;
            var settings = self2.settings;
            var eventNS = self2.eventNS;
            var $window = $2(window);
            var $document = $2(document);
            var $input = self2.$input;
            var $wrapper;
            var $control;
            var $control_input;
            var $dropdown;
            var $dropdown_content;
            var $dropdown_parent;
            var inputMode;
            var timeout_blur;
            var timeout_focus;
            var classes;
            var classes_plugins;
            var inputId;
            inputMode = self2.settings.mode;
            classes = $input.attr("class") || "";
            $wrapper = $2("<div>").addClass(settings.wrapperClass).addClass(classes).addClass(inputMode);
            $control = $2("<div>").addClass(settings.inputClass).addClass("items").appendTo($wrapper);
            $control_input = $2('<input type="text" autocomplete="off" />').appendTo($control).attr("tabindex", $input.is(":disabled") ? "-1" : self2.tabIndex);
            $dropdown_parent = $2(settings.dropdownParent || $wrapper);
            $dropdown = $2("<div>").addClass(settings.dropdownClass).addClass(inputMode).hide().appendTo($dropdown_parent);
            $dropdown_content = $2("<div>").addClass(settings.dropdownContentClass).appendTo($dropdown);
            if (inputId = $input.attr("id")) {
              $control_input.attr("id", inputId + "-selectized");
              $2("label[for='" + inputId + "']").attr("for", inputId + "-selectized");
            }
            if (self2.settings.copyClassesToDropdown) {
              $dropdown.addClass(classes);
            }
            $wrapper.css({
              width: $input[0].style.width
            });
            if (self2.plugins.names.length) {
              classes_plugins = "plugin-" + self2.plugins.names.join(" plugin-");
              $wrapper.addClass(classes_plugins);
              $dropdown.addClass(classes_plugins);
            }
            if ((settings.maxItems === null || settings.maxItems > 1) && self2.tagType === TAG_SELECT) {
              $input.attr("multiple", "multiple");
            }
            if (self2.settings.placeholder) {
              $control_input.attr("placeholder", settings.placeholder);
            }
            if (!self2.settings.splitOn && self2.settings.delimiter) {
              var delimiterEscaped = self2.settings.delimiter.replace(/[-\/\\^$*+?.()|[\]{}]/g, "\\$&");
              self2.settings.splitOn = new RegExp("\\s*" + delimiterEscaped + "+\\s*");
            }
            if ($input.attr("autocorrect")) {
              $control_input.attr("autocorrect", $input.attr("autocorrect"));
            }
            if ($input.attr("autocapitalize")) {
              $control_input.attr("autocapitalize", $input.attr("autocapitalize"));
            }
            $control_input[0].type = $input[0].type;
            self2.$wrapper = $wrapper;
            self2.$control = $control;
            self2.$control_input = $control_input;
            self2.$dropdown = $dropdown;
            self2.$dropdown_content = $dropdown_content;
            $dropdown.on("mouseenter mousedown click", "[data-disabled]>[data-selectable]", function(e) {
              e.stopImmediatePropagation();
            });
            $dropdown.on("mouseenter", "[data-selectable]", function() {
              return self2.onOptionHover.apply(self2, arguments);
            });
            $dropdown.on("mousedown click", "[data-selectable]", function() {
              return self2.onOptionSelect.apply(self2, arguments);
            });
            watchChildEvent($control, "mousedown", "*:not(input)", function() {
              return self2.onItemSelect.apply(self2, arguments);
            });
            autoGrow($control_input);
            $control.on({
              mousedown: function() {
                return self2.onMouseDown.apply(self2, arguments);
              },
              click: function() {
                return self2.onClick.apply(self2, arguments);
              }
            });
            $control_input.on({
              mousedown: function(e) {
                e.stopPropagation();
              },
              keydown: function() {
                return self2.onKeyDown.apply(self2, arguments);
              },
              keyup: function() {
                return self2.onKeyUp.apply(self2, arguments);
              },
              keypress: function() {
                return self2.onKeyPress.apply(self2, arguments);
              },
              resize: function() {
                self2.positionDropdown.apply(self2, []);
              },
              blur: function() {
                return self2.onBlur.apply(self2, arguments);
              },
              focus: function() {
                self2.ignoreBlur = false;
                return self2.onFocus.apply(self2, arguments);
              },
              paste: function() {
                return self2.onPaste.apply(self2, arguments);
              }
            });
            $document.on("keydown" + eventNS, function(e) {
              self2.isCmdDown = e[IS_MAC ? "metaKey" : "ctrlKey"];
              self2.isCtrlDown = e[IS_MAC ? "altKey" : "ctrlKey"];
              self2.isShiftDown = e.shiftKey;
            });
            $document.on("keyup" + eventNS, function(e) {
              if (e.keyCode === KEY_CTRL)
                self2.isCtrlDown = false;
              if (e.keyCode === KEY_SHIFT)
                self2.isShiftDown = false;
              if (e.keyCode === KEY_CMD)
                self2.isCmdDown = false;
            });
            $document.on("mousedown" + eventNS, function(e) {
              if (self2.isFocused) {
                if (e.target === self2.$dropdown[0] || e.target.parentNode === self2.$dropdown[0]) {
                  return false;
                }
                if (!self2.$control.has(e.target).length && e.target !== self2.$control[0]) {
                  self2.blur(e.target);
                }
              }
            });
            $window.on(["scroll" + eventNS, "resize" + eventNS].join(" "), function() {
              if (self2.isOpen) {
                self2.positionDropdown.apply(self2, arguments);
              }
            });
            $window.on("mousemove" + eventNS, function() {
              self2.ignoreHover = false;
            });
            this.revertSettings = {
              $children: $input.children().detach(),
              tabindex: $input.attr("tabindex")
            };
            $input.attr("tabindex", -1).hide().after(self2.$wrapper);
            if ($2.isArray(settings.items)) {
              self2.setValue(settings.items);
              delete settings.items;
            }
            if (SUPPORTS_VALIDITY_API) {
              $input.on("invalid" + eventNS, function(e) {
                e.preventDefault();
                self2.isInvalid = true;
                self2.refreshState();
              });
            }
            self2.updateOriginalInput();
            self2.refreshItems();
            self2.refreshState();
            self2.updatePlaceholder();
            self2.isSetup = true;
            if ($input.is(":disabled")) {
              self2.disable();
            }
            self2.on("change", this.onChange);
            $input.data("selectize", self2);
            $input.addClass("selectized");
            self2.trigger("initialize");
            if (settings.preload === true) {
              self2.onSearchChange("");
            }
          },
          /**
           * Sets up default rendering functions.
           */
          setupTemplates: function() {
            var self2 = this;
            var field_label = self2.settings.labelField;
            var field_optgroup = self2.settings.optgroupLabelField;
            var templates = {
              "optgroup": function(data) {
                return '<div class="optgroup">' + data.html + "</div>";
              },
              "optgroup_header": function(data, escape) {
                return '<div class="optgroup-header">' + escape(data[field_optgroup]) + "</div>";
              },
              "option": function(data, escape) {
                return '<div class="option">' + escape(data[field_label]) + "</div>";
              },
              "item": function(data, escape) {
                return '<div class="item">' + escape(data[field_label]) + "</div>";
              },
              "option_create": function(data, escape) {
                return '<div class="create">Add <strong>' + escape(data.input) + "</strong>&hellip;</div>";
              }
            };
            self2.settings.render = $2.extend({}, templates, self2.settings.render);
          },
          /**
           * Maps fired events to callbacks provided
           * in the settings used when creating the control.
           */
          setupCallbacks: function() {
            var key, fn, callbacks = {
              "initialize": "onInitialize",
              "change": "onChange",
              "item_add": "onItemAdd",
              "item_remove": "onItemRemove",
              "clear": "onClear",
              "option_add": "onOptionAdd",
              "option_remove": "onOptionRemove",
              "option_clear": "onOptionClear",
              "optgroup_add": "onOptionGroupAdd",
              "optgroup_remove": "onOptionGroupRemove",
              "optgroup_clear": "onOptionGroupClear",
              "dropdown_open": "onDropdownOpen",
              "dropdown_close": "onDropdownClose",
              "type": "onType",
              "load": "onLoad",
              "focus": "onFocus",
              "blur": "onBlur"
            };
            for (key in callbacks) {
              if (callbacks.hasOwnProperty(key)) {
                fn = this.settings[callbacks[key]];
                if (fn)
                  this.on(key, fn);
              }
            }
          },
          /**
           * Triggered when the main control element
           * has a click event.
           *
           * @param {object} e
           * @return {boolean}
           */
          onClick: function(e) {
            var self2 = this;
            if (!self2.isFocused || !self2.isOpen) {
              self2.focus();
              e.preventDefault();
            }
          },
          /**
           * Triggered when the main control element
           * has a mouse down event.
           *
           * @param {object} e
           * @return {boolean}
           */
          onMouseDown: function(e) {
            var self2 = this;
            var defaultPrevented = e.isDefaultPrevented();
            var $target = $2(e.target);
            if (self2.isFocused) {
              if (e.target !== self2.$control_input[0]) {
                if (self2.settings.mode === "single") {
                  self2.isOpen ? self2.close() : self2.open();
                } else if (!defaultPrevented) {
                  self2.setActiveItem(null);
                }
                return false;
              }
            } else {
              if (!defaultPrevented) {
                window.setTimeout(function() {
                  self2.focus();
                }, 0);
              }
            }
          },
          /**
           * Triggered when the value of the control has been changed.
           * This should propagate the event to the original DOM
           * input / select element.
           */
          onChange: function() {
            this.$input.trigger("change");
          },
          /**
           * Triggered on <input> paste.
           *
           * @param {object} e
           * @returns {boolean}
           */
          onPaste: function(e) {
            var self2 = this;
            if (self2.isFull() || self2.isInputHidden || self2.isLocked) {
              e.preventDefault();
              return;
            }
            if (self2.settings.splitOn) {
              setTimeout(function() {
                var pastedText = self2.$control_input.val();
                if (!pastedText.match(self2.settings.splitOn)) {
                  return;
                }
                var splitInput = $2.trim(pastedText).split(self2.settings.splitOn);
                for (var i = 0, n = splitInput.length; i < n; i++) {
                  self2.createItem(splitInput[i]);
                }
              }, 0);
            }
          },
          /**
           * Triggered on <input> keypress.
           *
           * @param {object} e
           * @returns {boolean}
           */
          onKeyPress: function(e) {
            if (this.isLocked)
              return e && e.preventDefault();
            var character = String.fromCharCode(e.keyCode || e.which);
            if (this.settings.create && this.settings.mode === "multi" && character === this.settings.delimiter) {
              this.createItem();
              e.preventDefault();
              return false;
            }
          },
          /**
           * Triggered on <input> keydown.
           *
           * @param {object} e
           * @returns {boolean}
           */
          onKeyDown: function(e) {
            var isInput = e.target === this.$control_input[0];
            var self2 = this;
            if (self2.isLocked) {
              if (e.keyCode !== KEY_TAB) {
                e.preventDefault();
              }
              return;
            }
            switch (e.keyCode) {
              case KEY_A:
                if (self2.isCmdDown) {
                  self2.selectAll();
                  return;
                }
                break;
              case KEY_ESC:
                if (self2.isOpen) {
                  e.preventDefault();
                  e.stopPropagation();
                  self2.close();
                }
                return;
              case KEY_N:
                if (!e.ctrlKey || e.altKey)
                  break;
              case KEY_DOWN:
                if (!self2.isOpen && self2.hasOptions) {
                  self2.open();
                } else if (self2.$activeOption) {
                  self2.ignoreHover = true;
                  var $next = self2.getAdjacentOption(self2.$activeOption, 1);
                  if ($next.length)
                    self2.setActiveOption($next, true, true);
                }
                e.preventDefault();
                return;
              case KEY_P:
                if (!e.ctrlKey || e.altKey)
                  break;
              case KEY_UP:
                if (self2.$activeOption) {
                  self2.ignoreHover = true;
                  var $prev = self2.getAdjacentOption(self2.$activeOption, -1);
                  if ($prev.length)
                    self2.setActiveOption($prev, true, true);
                }
                e.preventDefault();
                return;
              case KEY_RETURN:
                if (self2.isOpen && self2.$activeOption) {
                  self2.onOptionSelect({ currentTarget: self2.$activeOption });
                  e.preventDefault();
                }
                return;
              case KEY_LEFT:
                self2.advanceSelection(-1, e);
                return;
              case KEY_RIGHT:
                self2.advanceSelection(1, e);
                return;
              case KEY_TAB:
                if (self2.settings.selectOnTab && self2.isOpen && self2.$activeOption) {
                  self2.onOptionSelect({ currentTarget: self2.$activeOption });
                  if (!self2.isFull()) {
                    e.preventDefault();
                  }
                }
                if (self2.settings.create && self2.createItem()) {
                  e.preventDefault();
                }
                return;
              case KEY_BACKSPACE:
              case KEY_DELETE:
                self2.deleteSelection(e);
                return;
            }
            if ((self2.isFull() || self2.isInputHidden) && !(IS_MAC ? e.metaKey : e.ctrlKey)) {
              e.preventDefault();
              return;
            }
          },
          /**
           * Triggered on <input> keyup.
           *
           * @param {object} e
           * @returns {boolean}
           */
          onKeyUp: function(e) {
            var self2 = this;
            if (self2.isLocked)
              return e && e.preventDefault();
            var value = self2.$control_input.val() || "";
            if (self2.lastValue !== value) {
              self2.lastValue = value;
              self2.onSearchChange(value);
              self2.refreshOptions();
              self2.trigger("type", value);
            }
          },
          /**
           * Invokes the user-provide option provider / loader.
           *
           * Note: this function is debounced in the Selectize
           * constructor (by `settings.loadThrottle` milliseconds)
           *
           * @param {string} value
           */
          onSearchChange: function(value) {
            var self2 = this;
            var fn = self2.settings.load;
            if (!fn)
              return;
            if (self2.loadedSearches.hasOwnProperty(value))
              return;
            self2.loadedSearches[value] = true;
            self2.load(function(callback) {
              fn.apply(self2, [value, callback]);
            });
          },
          /**
           * Triggered on <input> focus.
           *
           * @param {object} e (optional)
           * @returns {boolean}
           */
          onFocus: function(e) {
            var self2 = this;
            var wasFocused = self2.isFocused;
            if (self2.isDisabled) {
              self2.blur();
              e && e.preventDefault();
              return false;
            }
            if (self2.ignoreFocus)
              return;
            self2.isFocused = true;
            if (self2.settings.preload === "focus")
              self2.onSearchChange("");
            if (!wasFocused)
              self2.trigger("focus");
            if (!self2.$activeItems.length) {
              self2.showInput();
              self2.setActiveItem(null);
              self2.refreshOptions(!!self2.settings.openOnFocus);
            }
            self2.refreshState();
          },
          /**
           * Triggered on <input> blur.
           *
           * @param {object} e
           * @param {Element} dest
           */
          onBlur: function(e, dest) {
            var self2 = this;
            if (!self2.isFocused)
              return;
            self2.isFocused = false;
            if (self2.ignoreFocus) {
              return;
            } else if (!self2.ignoreBlur && document.activeElement === self2.$dropdown_content[0]) {
              self2.ignoreBlur = true;
              self2.onFocus(e);
              return;
            }
            var deactivate = function() {
              self2.close();
              self2.setTextboxValue("");
              self2.setActiveItem(null);
              self2.setActiveOption(null);
              self2.setCaret(self2.items.length);
              self2.refreshState();
              dest && dest.focus && dest.focus();
              self2.isBlurring = false;
              self2.ignoreFocus = false;
              self2.trigger("blur");
            };
            self2.isBlurring = true;
            self2.ignoreFocus = true;
            if (self2.settings.create && self2.settings.createOnBlur) {
              self2.createItem(null, false, deactivate);
            } else {
              deactivate();
            }
          },
          /**
           * Triggered when the user rolls over
           * an option in the autocomplete dropdown menu.
           *
           * @param {object} e
           * @returns {boolean}
           */
          onOptionHover: function(e) {
            if (this.ignoreHover)
              return;
            this.setActiveOption(e.currentTarget, false);
          },
          /**
           * Triggered when the user clicks on an option
           * in the autocomplete dropdown menu.
           *
           * @param {object} e
           * @returns {boolean}
           */
          onOptionSelect: function(e) {
            var value, $target, $option, self2 = this;
            if (e.preventDefault) {
              e.preventDefault();
              e.stopPropagation();
            }
            $target = $2(e.currentTarget);
            if ($target.hasClass("create")) {
              self2.createItem(null, function() {
                if (self2.settings.closeAfterSelect) {
                  self2.close();
                }
              });
            } else {
              value = $target.attr("data-value");
              if (typeof value !== "undefined") {
                self2.lastQuery = null;
                self2.setTextboxValue("");
                self2.addItem(value);
                if (self2.settings.closeAfterSelect) {
                  self2.close();
                } else if (!self2.settings.hideSelected && e.type && /mouse/.test(e.type)) {
                  self2.setActiveOption(self2.getOption(value));
                }
              }
            }
          },
          /**
           * Triggered when the user clicks on an item
           * that has been selected.
           *
           * @param {object} e
           * @returns {boolean}
           */
          onItemSelect: function(e) {
            var self2 = this;
            if (self2.isLocked)
              return;
            if (self2.settings.mode === "multi") {
              e.preventDefault();
              self2.setActiveItem(e.currentTarget, e);
            }
          },
          /**
           * Invokes the provided method that provides
           * results to a callback---which are then added
           * as options to the control.
           *
           * @param {function} fn
           */
          load: function(fn) {
            var self2 = this;
            var $wrapper = self2.$wrapper.addClass(self2.settings.loadingClass);
            self2.loading++;
            fn.apply(self2, [function(results) {
              self2.loading = Math.max(self2.loading - 1, 0);
              if (results && results.length) {
                self2.addOption(results);
                self2.refreshOptions(self2.isFocused && !self2.isInputHidden);
              }
              if (!self2.loading) {
                $wrapper.removeClass(self2.settings.loadingClass);
              }
              self2.trigger("load", results);
            }]);
          },
          /**
           * Sets the input field of the control to the specified value.
           *
           * @param {string} value
           */
          setTextboxValue: function(value) {
            var $input = this.$control_input;
            var changed = $input.val() !== value;
            if (changed) {
              $input.val(value).triggerHandler("update");
              this.lastValue = value;
            }
          },
          /**
           * Returns the value of the control. If multiple items
           * can be selected (e.g. <select multiple>), this returns
           * an array. If only one item can be selected, this
           * returns a string.
           *
           * @returns {mixed}
           */
          getValue: function() {
            if (this.tagType === TAG_SELECT && this.$input.attr("multiple")) {
              return this.items;
            } else {
              return this.items.join(this.settings.delimiter);
            }
          },
          /**
           * Resets the selected items to the given value.
           *
           * @param {mixed} value
           */
          setValue: function(value, silent) {
            var events = silent ? [] : ["change"];
            debounce_events(this, events, function() {
              this.clear(silent);
              this.addItems(value, silent);
            });
          },
          /**
           * Sets the selected item.
           *
           * @param {object} $item
           * @param {object} e (optional)
           */
          setActiveItem: function($item, e) {
            var self2 = this;
            var eventName;
            var i, idx, begin, end, item, swap;
            var $last;
            if (self2.settings.mode === "single")
              return;
            $item = $2($item);
            if (!$item.length) {
              $2(self2.$activeItems).removeClass("active");
              self2.$activeItems = [];
              if (self2.isFocused) {
                self2.showInput();
              }
              return;
            }
            eventName = e && e.type.toLowerCase();
            if (eventName === "mousedown" && self2.isShiftDown && self2.$activeItems.length) {
              $last = self2.$control.children(".active:last");
              begin = Array.prototype.indexOf.apply(self2.$control[0].childNodes, [$last[0]]);
              end = Array.prototype.indexOf.apply(self2.$control[0].childNodes, [$item[0]]);
              if (begin > end) {
                swap = begin;
                begin = end;
                end = swap;
              }
              for (i = begin; i <= end; i++) {
                item = self2.$control[0].childNodes[i];
                if (self2.$activeItems.indexOf(item) === -1) {
                  $2(item).addClass("active");
                  self2.$activeItems.push(item);
                }
              }
              e.preventDefault();
            } else if (eventName === "mousedown" && self2.isCtrlDown || eventName === "keydown" && this.isShiftDown) {
              if ($item.hasClass("active")) {
                idx = self2.$activeItems.indexOf($item[0]);
                self2.$activeItems.splice(idx, 1);
                $item.removeClass("active");
              } else {
                self2.$activeItems.push($item.addClass("active")[0]);
              }
            } else {
              $2(self2.$activeItems).removeClass("active");
              self2.$activeItems = [$item.addClass("active")[0]];
            }
            self2.hideInput();
            if (!this.isFocused) {
              self2.focus();
            }
          },
          /**
           * Sets the selected item in the dropdown menu
           * of available options.
           *
           * @param {object} $object
           * @param {boolean} scroll
           * @param {boolean} animate
           */
          setActiveOption: function($option, scroll, animate) {
            var height_menu, height_item, y;
            var scroll_top, scroll_bottom;
            var self2 = this;
            if (self2.$activeOption)
              self2.$activeOption.removeClass("active");
            self2.$activeOption = null;
            $option = $2($option);
            if (!$option.length)
              return;
            self2.$activeOption = $option.addClass("active");
            if (scroll || !isset(scroll)) {
              height_menu = self2.$dropdown_content.height();
              height_item = self2.$activeOption.outerHeight(true);
              scroll = self2.$dropdown_content.scrollTop() || 0;
              y = self2.$activeOption.offset().top - self2.$dropdown_content.offset().top + scroll;
              scroll_top = y;
              scroll_bottom = y - height_menu + height_item;
              if (y + height_item > height_menu + scroll) {
                self2.$dropdown_content.stop().animate({ scrollTop: scroll_bottom }, animate ? self2.settings.scrollDuration : 0);
              } else if (y < scroll) {
                self2.$dropdown_content.stop().animate({ scrollTop: scroll_top }, animate ? self2.settings.scrollDuration : 0);
              }
            }
          },
          /**
           * Selects all items (CTRL + A).
           */
          selectAll: function() {
            var self2 = this;
            if (self2.settings.mode === "single")
              return;
            self2.$activeItems = Array.prototype.slice.apply(self2.$control.children(":not(input)").addClass("active"));
            if (self2.$activeItems.length) {
              self2.hideInput();
              self2.close();
            }
            self2.focus();
          },
          /**
           * Hides the input element out of view, while
           * retaining its focus.
           */
          hideInput: function() {
            var self2 = this;
            self2.setTextboxValue("");
            self2.$control_input.css({ opacity: 0, position: "absolute", left: self2.rtl ? 1e4 : -1e4 });
            self2.isInputHidden = true;
          },
          /**
           * Restores input visibility.
           */
          showInput: function() {
            this.$control_input.css({ opacity: 1, position: "relative", left: 0 });
            this.isInputHidden = false;
          },
          /**
           * Gives the control focus.
           */
          focus: function() {
            var self2 = this;
            if (self2.isDisabled)
              return;
            self2.ignoreFocus = true;
            self2.$control_input[0].focus();
            window.setTimeout(function() {
              self2.ignoreFocus = false;
              self2.onFocus();
            }, 0);
          },
          /**
           * Forces the control out of focus.
           *
           * @param {Element} dest
           */
          blur: function(dest) {
            this.$control_input[0].blur();
            this.onBlur(null, dest);
          },
          /**
           * Returns a function that scores an object
           * to show how good of a match it is to the
           * provided query.
           *
           * @param {string} query
           * @param {object} options
           * @return {function}
           */
          getScoreFunction: function(query) {
            return this.sifter.getScoreFunction(query, this.getSearchOptions());
          },
          /**
           * Returns search options for sifter (the system
           * for scoring and sorting results).
           *
           * @see https://github.com/brianreavis/sifter.js
           * @return {object}
           */
          getSearchOptions: function() {
            var settings = this.settings;
            var sort = settings.sortField;
            if (typeof sort === "string") {
              sort = [{ field: sort }];
            }
            return {
              fields: settings.searchField,
              conjunction: settings.searchConjunction,
              sort,
              nesting: settings.nesting
            };
          },
          /**
           * Searches through available options and returns
           * a sorted array of matches.
           *
           * Returns an object containing:
           *
           *   - query {string}
           *   - tokens {array}
           *   - total {int}
           *   - items {array}
           *
           * @param {string} query
           * @returns {object}
           */
          search: function(query) {
            var i, value, score, result, calculateScore;
            var self2 = this;
            var settings = self2.settings;
            var options = this.getSearchOptions();
            if (settings.score) {
              calculateScore = self2.settings.score.apply(this, [query]);
              if (typeof calculateScore !== "function") {
                throw new Error('Selectize "score" setting must be a function that returns a function');
              }
            }
            if (query !== self2.lastQuery) {
              self2.lastQuery = query;
              result = self2.sifter.search(query, $2.extend(options, { score: calculateScore }));
              self2.currentResults = result;
            } else {
              result = $2.extend(true, {}, self2.currentResults);
            }
            if (settings.hideSelected) {
              for (i = result.items.length - 1; i >= 0; i--) {
                if (self2.items.indexOf(hash_key(result.items[i].id)) !== -1) {
                  result.items.splice(i, 1);
                }
              }
            }
            return result;
          },
          /**
           * Refreshes the list of available options shown
           * in the autocomplete dropdown menu.
           *
           * @param {boolean} triggerDropdown
           */
          refreshOptions: function(triggerDropdown) {
            var i, j, k, n, groups, groups_order, option, option_html, optgroup, optgroups, html, html_children, has_create_option;
            var $active, $active_before, $create;
            if (typeof triggerDropdown === "undefined") {
              triggerDropdown = true;
            }
            var self2 = this;
            var query = $2.trim(self2.$control_input.val());
            var results = self2.search(query);
            var $dropdown_content = self2.$dropdown_content;
            var active_before = self2.$activeOption && hash_key(self2.$activeOption.attr("data-value"));
            n = results.items.length;
            if (typeof self2.settings.maxOptions === "number") {
              n = Math.min(n, self2.settings.maxOptions);
            }
            groups = {};
            groups_order = [];
            for (i = 0; i < n; i++) {
              option = self2.options[results.items[i].id];
              option_html = self2.render("option", option);
              optgroup = option[self2.settings.optgroupField] || "";
              optgroups = $2.isArray(optgroup) ? optgroup : [optgroup];
              for (j = 0, k = optgroups && optgroups.length; j < k; j++) {
                optgroup = optgroups[j];
                if (!self2.optgroups.hasOwnProperty(optgroup)) {
                  optgroup = "";
                }
                if (!groups.hasOwnProperty(optgroup)) {
                  groups[optgroup] = document.createDocumentFragment();
                  groups_order.push(optgroup);
                }
                groups[optgroup].appendChild(option_html);
              }
            }
            if (this.settings.lockOptgroupOrder) {
              groups_order.sort(function(a, b) {
                var a_order = self2.optgroups[a].$order || 0;
                var b_order = self2.optgroups[b].$order || 0;
                return a_order - b_order;
              });
            }
            html = document.createDocumentFragment();
            for (i = 0, n = groups_order.length; i < n; i++) {
              optgroup = groups_order[i];
              if (self2.optgroups.hasOwnProperty(optgroup) && groups[optgroup].childNodes.length) {
                html_children = document.createDocumentFragment();
                html_children.appendChild(self2.render("optgroup_header", self2.optgroups[optgroup]));
                html_children.appendChild(groups[optgroup]);
                html.appendChild(self2.render("optgroup", $2.extend({}, self2.optgroups[optgroup], {
                  html: domToString(html_children),
                  dom: html_children
                })));
              } else {
                html.appendChild(groups[optgroup]);
              }
            }
            $dropdown_content.html(html);
            if (self2.settings.highlight) {
              $dropdown_content.removeHighlight();
              if (results.query.length && results.tokens.length) {
                for (i = 0, n = results.tokens.length; i < n; i++) {
                  highlight($dropdown_content, results.tokens[i].regex);
                }
              }
            }
            if (!self2.settings.hideSelected) {
              for (i = 0, n = self2.items.length; i < n; i++) {
                self2.getOption(self2.items[i]).addClass("selected");
              }
            }
            has_create_option = self2.canCreate(query);
            if (has_create_option) {
              $dropdown_content.prepend(self2.render("option_create", { input: query }));
              $create = $2($dropdown_content[0].childNodes[0]);
            }
            self2.hasOptions = results.items.length > 0 || has_create_option;
            if (self2.hasOptions) {
              if (results.items.length > 0) {
                $active_before = active_before && self2.getOption(active_before);
                if ($active_before && $active_before.length) {
                  $active = $active_before;
                } else if (self2.settings.mode === "single" && self2.items.length) {
                  $active = self2.getOption(self2.items[0]);
                }
                if (!$active || !$active.length) {
                  if ($create && !self2.settings.addPrecedence) {
                    $active = self2.getAdjacentOption($create, 1);
                  } else {
                    $active = $dropdown_content.find("[data-selectable]:first");
                  }
                }
              } else {
                $active = $create;
              }
              self2.setActiveOption($active);
              if (triggerDropdown && !self2.isOpen) {
                self2.open();
              }
            } else {
              self2.setActiveOption(null);
              if (triggerDropdown && self2.isOpen) {
                self2.close();
              }
            }
          },
          /**
           * Adds an available option. If it already exists,
           * nothing will happen. Note: this does not refresh
           * the options list dropdown (use `refreshOptions`
           * for that).
           *
           * Usage:
           *
           *   this.addOption(data)
           *
           * @param {object|array} data
           */
          addOption: function(data) {
            var i, n, value, self2 = this;
            if ($2.isArray(data)) {
              for (i = 0, n = data.length; i < n; i++) {
                self2.addOption(data[i]);
              }
              return;
            }
            if (value = self2.registerOption(data)) {
              self2.userOptions[value] = true;
              self2.lastQuery = null;
              self2.trigger("option_add", value, data);
            }
          },
          /**
           * Registers an option to the pool of options.
           *
           * @param {object} data
           * @return {boolean|string}
           */
          registerOption: function(data) {
            var key = hash_key(data[this.settings.valueField]);
            if (typeof key === "undefined" || key === null || this.options.hasOwnProperty(key))
              return false;
            data.$order = data.$order || ++this.order;
            this.options[key] = data;
            return key;
          },
          /**
           * Registers an option group to the pool of option groups.
           *
           * @param {object} data
           * @return {boolean|string}
           */
          registerOptionGroup: function(data) {
            var key = hash_key(data[this.settings.optgroupValueField]);
            if (!key)
              return false;
            data.$order = data.$order || ++this.order;
            this.optgroups[key] = data;
            return key;
          },
          /**
           * Registers a new optgroup for options
           * to be bucketed into.
           *
           * @param {string} id
           * @param {object} data
           */
          addOptionGroup: function(id, data) {
            data[this.settings.optgroupValueField] = id;
            if (id = this.registerOptionGroup(data)) {
              this.trigger("optgroup_add", id, data);
            }
          },
          /**
           * Removes an existing option group.
           *
           * @param {string} id
           */
          removeOptionGroup: function(id) {
            if (this.optgroups.hasOwnProperty(id)) {
              delete this.optgroups[id];
              this.renderCache = {};
              this.trigger("optgroup_remove", id);
            }
          },
          /**
           * Clears all existing option groups.
           */
          clearOptionGroups: function() {
            this.optgroups = {};
            this.renderCache = {};
            this.trigger("optgroup_clear");
          },
          /**
           * Updates an option available for selection. If
           * it is visible in the selected items or options
           * dropdown, it will be re-rendered automatically.
           *
           * @param {string} value
           * @param {object} data
           */
          updateOption: function(value, data) {
            var self2 = this;
            var $item, $item_new;
            var value_new, index_item, cache_items, cache_options, order_old;
            value = hash_key(value);
            value_new = hash_key(data[self2.settings.valueField]);
            if (value === null)
              return;
            if (!self2.options.hasOwnProperty(value))
              return;
            if (typeof value_new !== "string")
              throw new Error("Value must be set in option data");
            order_old = self2.options[value].$order;
            if (value_new !== value) {
              delete self2.options[value];
              index_item = self2.items.indexOf(value);
              if (index_item !== -1) {
                self2.items.splice(index_item, 1, value_new);
              }
            }
            data.$order = data.$order || order_old;
            self2.options[value_new] = data;
            cache_items = self2.renderCache["item"];
            cache_options = self2.renderCache["option"];
            if (cache_items) {
              delete cache_items[value];
              delete cache_items[value_new];
            }
            if (cache_options) {
              delete cache_options[value];
              delete cache_options[value_new];
            }
            if (self2.items.indexOf(value_new) !== -1) {
              $item = self2.getItem(value);
              $item_new = $2(self2.render("item", data));
              if ($item.hasClass("active"))
                $item_new.addClass("active");
              $item.replaceWith($item_new);
            }
            self2.lastQuery = null;
            if (self2.isOpen) {
              self2.refreshOptions(false);
            }
          },
          /**
           * Removes a single option.
           *
           * @param {string} value
           * @param {boolean} silent
           */
          removeOption: function(value, silent) {
            var self2 = this;
            value = hash_key(value);
            var cache_items = self2.renderCache["item"];
            var cache_options = self2.renderCache["option"];
            if (cache_items)
              delete cache_items[value];
            if (cache_options)
              delete cache_options[value];
            delete self2.userOptions[value];
            delete self2.options[value];
            self2.lastQuery = null;
            self2.trigger("option_remove", value);
            self2.removeItem(value, silent);
          },
          /**
           * Clears all options.
           */
          clearOptions: function() {
            var self2 = this;
            self2.loadedSearches = {};
            self2.userOptions = {};
            self2.renderCache = {};
            var options = self2.options;
            $2.each(self2.options, function(key, value) {
              if (self2.items.indexOf(key) == -1) {
                delete options[key];
              }
            });
            self2.options = self2.sifter.items = options;
            self2.lastQuery = null;
            self2.trigger("option_clear");
          },
          /**
           * Returns the jQuery element of the option
           * matching the given value.
           *
           * @param {string} value
           * @returns {object}
           */
          getOption: function(value) {
            return this.getElementWithValue(value, this.$dropdown_content.find("[data-selectable]"));
          },
          /**
           * Returns the jQuery element of the next or
           * previous selectable option.
           *
           * @param {object} $option
           * @param {int} direction  can be 1 for next or -1 for previous
           * @return {object}
           */
          getAdjacentOption: function($option, direction) {
            var $options = this.$dropdown.find("[data-selectable]");
            var index = $options.index($option) + direction;
            return index >= 0 && index < $options.length ? $options.eq(index) : $2();
          },
          /**
           * Finds the first element with a "data-value" attribute
           * that matches the given value.
           *
           * @param {mixed} value
           * @param {object} $els
           * @return {object}
           */
          getElementWithValue: function(value, $els) {
            value = hash_key(value);
            if (typeof value !== "undefined" && value !== null) {
              for (var i = 0, n = $els.length; i < n; i++) {
                if ($els[i].getAttribute("data-value") === value) {
                  return $2($els[i]);
                }
              }
            }
            return $2();
          },
          /**
           * Returns the jQuery element of the item
           * matching the given value.
           *
           * @param {string} value
           * @returns {object}
           */
          getItem: function(value) {
            return this.getElementWithValue(value, this.$control.children());
          },
          /**
           * "Selects" multiple items at once. Adds them to the list
           * at the current caret position.
           *
           * @param {string} value
           * @param {boolean} silent
           */
          addItems: function(values, silent) {
            this.buffer = document.createDocumentFragment();
            var childNodes = this.$control[0].childNodes;
            for (var i = 0; i < childNodes.length; i++) {
              this.buffer.appendChild(childNodes[i]);
            }
            var items = $2.isArray(values) ? values : [values];
            for (var i = 0, n = items.length; i < n; i++) {
              this.isPending = i < n - 1;
              this.addItem(items[i], silent);
            }
            var control = this.$control[0];
            control.insertBefore(this.buffer, control.firstChild);
            this.buffer = null;
          },
          /**
           * "Selects" an item. Adds it to the list
           * at the current caret position.
           *
           * @param {string} value
           * @param {boolean} silent
           */
          addItem: function(value, silent) {
            var events = silent ? [] : ["change"];
            debounce_events(this, events, function() {
              var $item, $option, $options;
              var self2 = this;
              var inputMode = self2.settings.mode;
              var i, active, value_next, wasFull;
              value = hash_key(value);
              if (self2.items.indexOf(value) !== -1) {
                if (inputMode === "single")
                  self2.close();
                return;
              }
              if (!self2.options.hasOwnProperty(value))
                return;
              if (inputMode === "single")
                self2.clear(silent);
              if (inputMode === "multi" && self2.isFull())
                return;
              $item = $2(self2.render("item", self2.options[value]));
              wasFull = self2.isFull();
              self2.items.splice(self2.caretPos, 0, value);
              self2.insertAtCaret($item);
              if (!self2.isPending || !wasFull && self2.isFull()) {
                self2.refreshState();
              }
              if (self2.isSetup) {
                $options = self2.$dropdown_content.find("[data-selectable]");
                if (!self2.isPending) {
                  $option = self2.getOption(value);
                  value_next = self2.getAdjacentOption($option, 1).attr("data-value");
                  self2.refreshOptions(self2.isFocused && inputMode !== "single");
                  if (value_next) {
                    self2.setActiveOption(self2.getOption(value_next));
                  }
                }
                if (!$options.length || self2.isFull()) {
                  self2.close();
                } else if (!self2.isPending) {
                  self2.positionDropdown();
                }
                self2.updatePlaceholder();
                self2.trigger("item_add", value, $item);
                if (!self2.isPending) {
                  self2.updateOriginalInput({ silent });
                }
              }
            });
          },
          /**
           * Removes the selected item matching
           * the provided value.
           *
           * @param {string} value
           */
          removeItem: function(value, silent) {
            var self2 = this;
            var $item, i, idx;
            $item = value instanceof $2 ? value : self2.getItem(value);
            value = hash_key($item.attr("data-value"));
            i = self2.items.indexOf(value);
            if (i !== -1) {
              $item.remove();
              if ($item.hasClass("active")) {
                idx = self2.$activeItems.indexOf($item[0]);
                self2.$activeItems.splice(idx, 1);
              }
              self2.items.splice(i, 1);
              self2.lastQuery = null;
              if (!self2.settings.persist && self2.userOptions.hasOwnProperty(value)) {
                self2.removeOption(value, silent);
              }
              if (i < self2.caretPos) {
                self2.setCaret(self2.caretPos - 1);
              }
              self2.refreshState();
              self2.updatePlaceholder();
              self2.updateOriginalInput({ silent });
              self2.positionDropdown();
              self2.trigger("item_remove", value, $item);
            }
          },
          /**
           * Invokes the `create` method provided in the
           * selectize options that should provide the data
           * for the new item, given the user input.
           *
           * Once this completes, it will be added
           * to the item list.
           *
           * @param {string} value
           * @param {boolean} [triggerDropdown]
           * @param {function} [callback]
           * @return {boolean}
           */
          createItem: function(input, triggerDropdown) {
            var self2 = this;
            var caret = self2.caretPos;
            input = input || $2.trim(self2.$control_input.val() || "");
            var callback = arguments[arguments.length - 1];
            if (typeof callback !== "function")
              callback = function() {
              };
            if (typeof triggerDropdown !== "boolean") {
              triggerDropdown = true;
            }
            if (!self2.canCreate(input)) {
              callback();
              return false;
            }
            self2.lock();
            var setup = typeof self2.settings.create === "function" ? this.settings.create : function(input2) {
              var data = {};
              data[self2.settings.labelField] = input2;
              data[self2.settings.valueField] = input2;
              return data;
            };
            var create = once(function(data) {
              self2.unlock();
              if (!data || typeof data !== "object")
                return callback();
              var value = hash_key(data[self2.settings.valueField]);
              if (typeof value !== "string")
                return callback();
              self2.setTextboxValue("");
              self2.addOption(data);
              self2.setCaret(caret);
              self2.addItem(value);
              self2.refreshOptions(triggerDropdown && self2.settings.mode !== "single");
              callback(data);
            });
            var output = setup.apply(this, [input, create]);
            if (typeof output !== "undefined") {
              create(output);
            }
            return true;
          },
          /**
           * Re-renders the selected item lists.
           */
          refreshItems: function() {
            this.lastQuery = null;
            if (this.isSetup) {
              this.addItem(this.items);
            }
            this.refreshState();
            this.updateOriginalInput();
          },
          /**
           * Updates all state-dependent attributes
           * and CSS classes.
           */
          refreshState: function() {
            this.refreshValidityState();
            this.refreshClasses();
          },
          /**
           * Update the `required` attribute of both input and control input.
           *
           * The `required` property needs to be activated on the control input
           * for the error to be displayed at the right place. `required` also
           * needs to be temporarily deactivated on the input since the input is
           * hidden and can't show errors.
           */
          refreshValidityState: function() {
            if (!this.isRequired)
              return false;
            var invalid = !this.items.length;
            this.isInvalid = invalid;
            this.$control_input.prop("required", invalid);
            this.$input.prop("required", !invalid);
          },
          /**
           * Updates all state-dependent CSS classes.
           */
          refreshClasses: function() {
            var self2 = this;
            var isFull = self2.isFull();
            var isLocked = self2.isLocked;
            self2.$wrapper.toggleClass("rtl", self2.rtl);
            self2.$control.toggleClass("focus", self2.isFocused).toggleClass("disabled", self2.isDisabled).toggleClass("required", self2.isRequired).toggleClass("invalid", self2.isInvalid).toggleClass("locked", isLocked).toggleClass("full", isFull).toggleClass("not-full", !isFull).toggleClass("input-active", self2.isFocused && !self2.isInputHidden).toggleClass("dropdown-active", self2.isOpen).toggleClass("has-options", !$2.isEmptyObject(self2.options)).toggleClass("has-items", self2.items.length > 0);
            self2.$control_input.data("grow", !isFull && !isLocked);
          },
          /**
           * Determines whether or not more items can be added
           * to the control without exceeding the user-defined maximum.
           *
           * @returns {boolean}
           */
          isFull: function() {
            return this.settings.maxItems !== null && this.items.length >= this.settings.maxItems;
          },
          /**
           * Refreshes the original <select> or <input>
           * element to reflect the current state.
           */
          updateOriginalInput: function(opts) {
            var i, n, options, label, self2 = this;
            opts = opts || {};
            if (self2.tagType === TAG_SELECT) {
              options = [];
              for (i = 0, n = self2.items.length; i < n; i++) {
                label = self2.options[self2.items[i]][self2.settings.labelField] || "";
                options.push('<option value="' + escape_html(self2.items[i]) + '" selected="selected">' + escape_html(label) + "</option>");
              }
              if (!options.length && !this.$input.attr("multiple")) {
                options.push('<option value="" selected="selected"></option>');
              }
              self2.$input.html(options.join(""));
            } else {
              self2.$input.val(self2.getValue());
              self2.$input.attr("value", self2.$input.val());
            }
            if (self2.isSetup) {
              if (!opts.silent) {
                self2.trigger("change", self2.$input.val());
              }
            }
          },
          /**
           * Shows/hide the input placeholder depending
           * on if there items in the list already.
           */
          updatePlaceholder: function() {
            if (!this.settings.placeholder)
              return;
            var $input = this.$control_input;
            if (this.items.length) {
              $input.removeAttr("placeholder");
            } else {
              $input.attr("placeholder", this.settings.placeholder);
            }
            $input.triggerHandler("update", { force: true });
          },
          /**
           * Shows the autocomplete dropdown containing
           * the available options.
           */
          open: function() {
            var self2 = this;
            if (self2.isLocked || self2.isOpen || self2.settings.mode === "multi" && self2.isFull())
              return;
            self2.focus();
            self2.isOpen = true;
            self2.refreshState();
            self2.$dropdown.css({ visibility: "hidden", display: "block" });
            self2.positionDropdown();
            self2.$dropdown.css({ visibility: "visible" });
            self2.trigger("dropdown_open", self2.$dropdown);
          },
          /**
           * Closes the autocomplete dropdown menu.
           */
          close: function() {
            var self2 = this;
            var trigger = self2.isOpen;
            if (self2.settings.mode === "single" && self2.items.length) {
              self2.hideInput();
              if (!self2.isBlurring) {
                self2.$control_input.blur();
              }
            }
            self2.isOpen = false;
            self2.$dropdown.hide();
            self2.setActiveOption(null);
            self2.refreshState();
            if (trigger)
              self2.trigger("dropdown_close", self2.$dropdown);
          },
          /**
           * Calculates and applies the appropriate
           * position of the dropdown.
           */
          positionDropdown: function() {
            var $control = this.$control;
            var offset = this.settings.dropdownParent === "body" ? $control.offset() : $control.position();
            offset.top += $control.outerHeight(true);
            this.$dropdown.css({
              width: $control[0].getBoundingClientRect().width,
              top: offset.top,
              left: offset.left
            });
          },
          /**
           * Resets / clears all selected items
           * from the control.
           *
           * @param {boolean} silent
           */
          clear: function(silent) {
            var self2 = this;
            if (!self2.items.length)
              return;
            self2.$control.children(":not(input)").remove();
            self2.items = [];
            self2.lastQuery = null;
            self2.setCaret(0);
            self2.setActiveItem(null);
            self2.updatePlaceholder();
            self2.updateOriginalInput({ silent });
            self2.refreshState();
            self2.showInput();
            self2.trigger("clear");
          },
          /**
           * A helper method for inserting an element
           * at the current caret position.
           *
           * @param {object} $el
           */
          insertAtCaret: function($el) {
            var caret = Math.min(this.caretPos, this.items.length);
            var el = $el[0];
            var target = this.buffer || this.$control[0];
            if (caret === 0) {
              target.insertBefore(el, target.firstChild);
            } else {
              target.insertBefore(el, target.childNodes[caret]);
            }
            this.setCaret(caret + 1);
          },
          /**
           * Removes the current selected item(s).
           *
           * @param {object} e (optional)
           * @returns {boolean}
           */
          deleteSelection: function(e) {
            var i, n, direction, selection, values, caret, option_select, $option_select, $tail;
            var self2 = this;
            direction = e && e.keyCode === KEY_BACKSPACE ? -1 : 1;
            selection = getSelection(self2.$control_input[0]);
            if (self2.$activeOption && !self2.settings.hideSelected) {
              option_select = self2.getAdjacentOption(self2.$activeOption, -1).attr("data-value");
            }
            values = [];
            if (self2.$activeItems.length) {
              $tail = self2.$control.children(".active:" + (direction > 0 ? "last" : "first"));
              caret = self2.$control.children(":not(input)").index($tail);
              if (direction > 0) {
                caret++;
              }
              for (i = 0, n = self2.$activeItems.length; i < n; i++) {
                values.push($2(self2.$activeItems[i]).attr("data-value"));
              }
              if (e) {
                e.preventDefault();
                e.stopPropagation();
              }
            } else if ((self2.isFocused || self2.settings.mode === "single") && self2.items.length) {
              if (direction < 0 && selection.start === 0 && selection.length === 0) {
                values.push(self2.items[self2.caretPos - 1]);
              } else if (direction > 0 && selection.start === self2.$control_input.val().length) {
                values.push(self2.items[self2.caretPos]);
              }
            }
            if (!values.length || typeof self2.settings.onDelete === "function" && self2.settings.onDelete.apply(self2, [values]) === false) {
              return false;
            }
            if (typeof caret !== "undefined") {
              self2.setCaret(caret);
            }
            while (values.length) {
              self2.removeItem(values.pop());
            }
            self2.showInput();
            self2.positionDropdown();
            self2.refreshOptions(true);
            if (option_select) {
              $option_select = self2.getOption(option_select);
              if ($option_select.length) {
                self2.setActiveOption($option_select);
              }
            }
            return true;
          },
          /**
           * Selects the previous / next item (depending
           * on the `direction` argument).
           *
           * > 0 - right
           * < 0 - left
           *
           * @param {int} direction
           * @param {object} e (optional)
           */
          advanceSelection: function(direction, e) {
            var tail, selection, idx, valueLength, cursorAtEdge, $tail;
            var self2 = this;
            if (direction === 0)
              return;
            if (self2.rtl)
              direction *= -1;
            tail = direction > 0 ? "last" : "first";
            selection = getSelection(self2.$control_input[0]);
            if (self2.isFocused && !self2.isInputHidden) {
              valueLength = self2.$control_input.val().length;
              cursorAtEdge = direction < 0 ? selection.start === 0 && selection.length === 0 : selection.start === valueLength;
              if (cursorAtEdge && !valueLength) {
                self2.advanceCaret(direction, e);
              }
            } else {
              $tail = self2.$control.children(".active:" + tail);
              if ($tail.length) {
                idx = self2.$control.children(":not(input)").index($tail);
                self2.setActiveItem(null);
                self2.setCaret(direction > 0 ? idx + 1 : idx);
              }
            }
          },
          /**
           * Moves the caret left / right.
           *
           * @param {int} direction
           * @param {object} e (optional)
           */
          advanceCaret: function(direction, e) {
            var self2 = this, fn, $adj;
            if (direction === 0)
              return;
            fn = direction > 0 ? "next" : "prev";
            if (self2.isShiftDown) {
              $adj = self2.$control_input[fn]();
              if ($adj.length) {
                self2.hideInput();
                self2.setActiveItem($adj);
                e && e.preventDefault();
              }
            } else {
              self2.setCaret(self2.caretPos + direction);
            }
          },
          /**
           * Moves the caret to the specified index.
           *
           * @param {int} i
           */
          setCaret: function(i) {
            var self2 = this;
            if (self2.settings.mode === "single") {
              i = self2.items.length;
            } else {
              i = Math.max(0, Math.min(self2.items.length, i));
            }
            if (!self2.isPending) {
              var j, n, fn, $children, $child;
              $children = self2.$control.children(":not(input)");
              for (j = 0, n = $children.length; j < n; j++) {
                $child = $2($children[j]).detach();
                if (j < i) {
                  self2.$control_input.before($child);
                } else {
                  self2.$control.append($child);
                }
              }
            }
            self2.caretPos = i;
          },
          /**
           * Disables user input on the control. Used while
           * items are being asynchronously created.
           */
          lock: function() {
            this.close();
            this.isLocked = true;
            this.refreshState();
          },
          /**
           * Re-enables user input on the control.
           */
          unlock: function() {
            this.isLocked = false;
            this.refreshState();
          },
          /**
           * Disables user input on the control completely.
           * While disabled, it cannot receive focus.
           */
          disable: function() {
            var self2 = this;
            self2.$input.prop("disabled", true);
            self2.$control_input.prop("disabled", true).prop("tabindex", -1);
            self2.isDisabled = true;
            self2.lock();
          },
          /**
           * Enables the control so that it can respond
           * to focus and user input.
           */
          enable: function() {
            var self2 = this;
            self2.$input.prop("disabled", false);
            self2.$control_input.prop("disabled", false).prop("tabindex", self2.tabIndex);
            self2.isDisabled = false;
            self2.unlock();
          },
          /**
           * Completely destroys the control and
           * unbinds all event listeners so that it can
           * be garbage collected.
           */
          destroy: function() {
            var self2 = this;
            var eventNS = self2.eventNS;
            var revertSettings = self2.revertSettings;
            self2.trigger("destroy");
            self2.off();
            self2.$wrapper.remove();
            self2.$dropdown.remove();
            self2.$input.html("").append(revertSettings.$children).removeAttr("tabindex").removeClass("selectized").attr({ tabindex: revertSettings.tabindex }).show();
            self2.$control_input.removeData("grow");
            self2.$input.removeData("selectize");
            if (--Selectize.count == 0 && Selectize.$testInput) {
              Selectize.$testInput.remove();
              Selectize.$testInput = void 0;
            }
            $2(window).off(eventNS);
            $2(document).off(eventNS);
            $2(document.body).off(eventNS);
            delete self2.$input[0].selectize;
          },
          /**
           * A helper method for rendering "item" and
           * "option" templates, given the data.
           *
           * @param {string} templateName
           * @param {object} data
           * @returns {string}
           */
          render: function(templateName, data) {
            var value, id, label;
            var html = "";
            var cache = false;
            var self2 = this;
            var regex_tag = /^[\t \r\n]*<([a-z][a-z0-9\-_]*(?:\:[a-z][a-z0-9\-_]*)?)/i;
            if (templateName === "option" || templateName === "item") {
              value = hash_key(data[self2.settings.valueField]);
              cache = !!value;
            }
            if (cache) {
              if (!isset(self2.renderCache[templateName])) {
                self2.renderCache[templateName] = {};
              }
              if (self2.renderCache[templateName].hasOwnProperty(value)) {
                return self2.renderCache[templateName][value];
              }
            }
            html = $2(self2.settings.render[templateName].apply(this, [data, escape_html]));
            if (templateName === "option" || templateName === "option_create") {
              if (!data[self2.settings.disabledField]) {
                html.attr("data-selectable", "");
              }
            } else if (templateName === "optgroup") {
              id = data[self2.settings.optgroupValueField] || "";
              html.attr("data-group", id);
              if (data[self2.settings.disabledField]) {
                html.attr("data-disabled", "");
              }
            }
            if (templateName === "option" || templateName === "item") {
              html.attr("data-value", value || "");
            }
            if (cache) {
              self2.renderCache[templateName][value] = html[0];
            }
            return html[0];
          },
          /**
           * Clears the render cache for a template. If
           * no template is given, clears all render
           * caches.
           *
           * @param {string} templateName
           */
          clearCache: function(templateName) {
            var self2 = this;
            if (typeof templateName === "undefined") {
              self2.renderCache = {};
            } else {
              delete self2.renderCache[templateName];
            }
          },
          /**
           * Determines whether or not to display the
           * create item prompt, given a user input.
           *
           * @param {string} input
           * @return {boolean}
           */
          canCreate: function(input) {
            var self2 = this;
            if (!self2.settings.create)
              return false;
            var filter = self2.settings.createFilter;
            return input.length && (typeof filter !== "function" || filter.apply(self2, [input])) && (typeof filter !== "string" || new RegExp(filter).test(input)) && (!(filter instanceof RegExp) || filter.test(input));
          }
        });
        Selectize.count = 0;
        Selectize.defaults = {
          options: [],
          optgroups: [],
          plugins: [],
          delimiter: ",",
          splitOn: null,
          // regexp or string for splitting up values from a paste command
          persist: true,
          diacritics: true,
          create: false,
          createOnBlur: false,
          createFilter: null,
          highlight: true,
          openOnFocus: true,
          maxOptions: 1e3,
          maxItems: null,
          hideSelected: null,
          addPrecedence: false,
          selectOnTab: false,
          preload: false,
          allowEmptyOption: false,
          closeAfterSelect: false,
          scrollDuration: 60,
          loadThrottle: 300,
          loadingClass: "loading",
          dataAttr: "data-data",
          optgroupField: "optgroup",
          valueField: "value",
          labelField: "text",
          disabledField: "disabled",
          optgroupLabelField: "label",
          optgroupValueField: "value",
          lockOptgroupOrder: false,
          sortField: "$order",
          searchField: ["text"],
          searchConjunction: "and",
          mode: null,
          wrapperClass: "selectize-control",
          inputClass: "selectize-input",
          dropdownClass: "selectize-dropdown",
          dropdownContentClass: "selectize-dropdown-content",
          dropdownParent: null,
          copyClassesToDropdown: true,
          /*
          load                 : null, // function(query, callback) { ... }
          score                : null, // function(search) { ... }
          onInitialize         : null, // function() { ... }
          onChange             : null, // function(value) { ... }
          onItemAdd            : null, // function(value, $item) { ... }
          onItemRemove         : null, // function(value) { ... }
          onClear              : null, // function() { ... }
          onOptionAdd          : null, // function(value, data) { ... }
          onOptionRemove       : null, // function(value) { ... }
          onOptionClear        : null, // function() { ... }
          onOptionGroupAdd     : null, // function(id, data) { ... }
          onOptionGroupRemove  : null, // function(id) { ... }
          onOptionGroupClear   : null, // function() { ... }
          onDropdownOpen       : null, // function($dropdown) { ... }
          onDropdownClose      : null, // function($dropdown) { ... }
          onType               : null, // function(str) { ... }
          onDelete             : null, // function(values) { ... }
          */
          render: {
            /*
            item: null,
            optgroup: null,
            optgroup_header: null,
            option: null,
            option_create: null
            */
          }
        };
        $2.fn.selectize = function(settings_user) {
          var defaults = $2.fn.selectize.defaults;
          var settings = $2.extend({}, defaults, settings_user);
          var attr_data = settings.dataAttr;
          var field_label = settings.labelField;
          var field_value = settings.valueField;
          var field_disabled = settings.disabledField;
          var field_optgroup = settings.optgroupField;
          var field_optgroup_label = settings.optgroupLabelField;
          var field_optgroup_value = settings.optgroupValueField;
          var init_textbox = function($input, settings_element) {
            var i, n, values, option;
            var data_raw = $input.attr(attr_data);
            if (!data_raw) {
              var value = $2.trim($input.val() || "");
              if (!settings.allowEmptyOption && !value.length)
                return;
              values = value.split(settings.delimiter);
              for (i = 0, n = values.length; i < n; i++) {
                option = {};
                option[field_label] = values[i];
                option[field_value] = values[i];
                settings_element.options.push(option);
              }
              settings_element.items = values;
            } else {
              settings_element.options = JSON.parse(data_raw);
              for (i = 0, n = settings_element.options.length; i < n; i++) {
                settings_element.items.push(settings_element.options[i][field_value]);
              }
            }
          };
          var init_select = function($input, settings_element) {
            var i, n, tagName, $children, order = 0;
            var options = settings_element.options;
            var optionsMap = {};
            var readData = function($el) {
              var data = attr_data && $el.attr(attr_data);
              if (typeof data === "string" && data.length) {
                return JSON.parse(data);
              }
              return null;
            };
            var addOption = function($option, group) {
              $option = $2($option);
              var value = hash_key($option.val());
              if (!value && !settings.allowEmptyOption)
                return;
              if (optionsMap.hasOwnProperty(value)) {
                if (group) {
                  var arr = optionsMap[value][field_optgroup];
                  if (!arr) {
                    optionsMap[value][field_optgroup] = group;
                  } else if (!$2.isArray(arr)) {
                    optionsMap[value][field_optgroup] = [arr, group];
                  } else {
                    arr.push(group);
                  }
                }
                return;
              }
              var option = readData($option) || {};
              option[field_label] = option[field_label] || $option.text();
              option[field_value] = option[field_value] || value;
              option[field_disabled] = option[field_disabled] || $option.prop("disabled");
              option[field_optgroup] = option[field_optgroup] || group;
              optionsMap[value] = option;
              options.push(option);
              if ($option.is(":selected")) {
                settings_element.items.push(value);
              }
            };
            var addGroup = function($optgroup) {
              var i2, n2, id, optgroup, $options;
              $optgroup = $2($optgroup);
              id = $optgroup.attr("label");
              if (id) {
                optgroup = readData($optgroup) || {};
                optgroup[field_optgroup_label] = id;
                optgroup[field_optgroup_value] = id;
                optgroup[field_disabled] = $optgroup.prop("disabled");
                settings_element.optgroups.push(optgroup);
              }
              $options = $2("option", $optgroup);
              for (i2 = 0, n2 = $options.length; i2 < n2; i2++) {
                addOption($options[i2], id);
              }
            };
            settings_element.maxItems = $input.attr("multiple") ? null : 1;
            $children = $input.children();
            for (i = 0, n = $children.length; i < n; i++) {
              tagName = $children[i].tagName.toLowerCase();
              if (tagName === "optgroup") {
                addGroup($children[i]);
              } else if (tagName === "option") {
                addOption($children[i]);
              }
            }
          };
          return this.each(function() {
            if (this.selectize)
              return;
            var instance;
            var $input = $2(this);
            var tag_name = this.tagName.toLowerCase();
            var placeholder = $input.attr("placeholder") || $input.attr("data-placeholder");
            if (!placeholder && !settings.allowEmptyOption) {
              placeholder = $input.children('option[value=""]').text();
            }
            var settings_element = {
              "placeholder": placeholder,
              "options": [],
              "optgroups": [],
              "items": []
            };
            if (tag_name === "select") {
              init_select($input, settings_element);
            } else {
              init_textbox($input, settings_element);
            }
            instance = new Selectize($input, $2.extend(true, {}, defaults, settings_element, settings_user));
          });
        };
        $2.fn.selectize.defaults = Selectize.defaults;
        $2.fn.selectize.support = {
          validity: SUPPORTS_VALIDITY_API
        };
        Selectize.define("drag_drop", function(options) {
          if (!$2.fn.sortable)
            throw new Error('The "drag_drop" plugin requires jQuery UI "sortable".');
          if (this.settings.mode !== "multi")
            return;
          var self2 = this;
          self2.lock = function() {
            var original = self2.lock;
            return function() {
              var sortable = self2.$control.data("sortable");
              if (sortable)
                sortable.disable();
              return original.apply(self2, arguments);
            };
          }();
          self2.unlock = function() {
            var original = self2.unlock;
            return function() {
              var sortable = self2.$control.data("sortable");
              if (sortable)
                sortable.enable();
              return original.apply(self2, arguments);
            };
          }();
          self2.setup = function() {
            var original = self2.setup;
            return function() {
              original.apply(this, arguments);
              var $control = self2.$control.sortable({
                items: "[data-value]",
                forcePlaceholderSize: true,
                disabled: self2.isLocked,
                start: function(e, ui) {
                  ui.placeholder.css("width", ui.helper.css("width"));
                  $control.css({ overflow: "visible" });
                },
                stop: function() {
                  $control.css({ overflow: "hidden" });
                  var active = self2.$activeItems ? self2.$activeItems.slice() : null;
                  var values = [];
                  $control.children("[data-value]").each(function() {
                    values.push($2(this).attr("data-value"));
                  });
                  self2.setValue(values);
                  self2.setActiveItem(active);
                }
              });
            };
          }();
        });
        Selectize.define("dropdown_header", function(options) {
          var self2 = this;
          options = $2.extend({
            title: "Untitled",
            headerClass: "selectize-dropdown-header",
            titleRowClass: "selectize-dropdown-header-title",
            labelClass: "selectize-dropdown-header-label",
            closeClass: "selectize-dropdown-header-close",
            html: function(data) {
              return '<div class="' + data.headerClass + '"><div class="' + data.titleRowClass + '"><span class="' + data.labelClass + '">' + data.title + '</span><a href="javascript:void(0)" class="' + data.closeClass + '">&times;</a></div></div>';
            }
          }, options);
          self2.setup = function() {
            var original = self2.setup;
            return function() {
              original.apply(self2, arguments);
              self2.$dropdown_header = $2(options.html(options));
              self2.$dropdown.prepend(self2.$dropdown_header);
            };
          }();
        });
        Selectize.define("optgroup_columns", function(options) {
          var self2 = this;
          options = $2.extend({
            equalizeWidth: true,
            equalizeHeight: true
          }, options);
          this.getAdjacentOption = function($option, direction) {
            var $options = $option.closest("[data-group]").find("[data-selectable]");
            var index = $options.index($option) + direction;
            return index >= 0 && index < $options.length ? $options.eq(index) : $2();
          };
          this.onKeyDown = function() {
            var original = self2.onKeyDown;
            return function(e) {
              var index, $option, $options, $optgroup;
              if (this.isOpen && (e.keyCode === KEY_LEFT || e.keyCode === KEY_RIGHT)) {
                self2.ignoreHover = true;
                $optgroup = this.$activeOption.closest("[data-group]");
                index = $optgroup.find("[data-selectable]").index(this.$activeOption);
                if (e.keyCode === KEY_LEFT) {
                  $optgroup = $optgroup.prev("[data-group]");
                } else {
                  $optgroup = $optgroup.next("[data-group]");
                }
                $options = $optgroup.find("[data-selectable]");
                $option = $options.eq(Math.min($options.length - 1, index));
                if ($option.length) {
                  this.setActiveOption($option);
                }
                return;
              }
              return original.apply(this, arguments);
            };
          }();
          var getScrollbarWidth = function() {
            var div;
            var width = getScrollbarWidth.width;
            var doc = document;
            if (typeof width === "undefined") {
              div = doc.createElement("div");
              div.innerHTML = '<div style="width:50px;height:50px;position:absolute;left:-50px;top:-50px;overflow:auto;"><div style="width:1px;height:100px;"></div></div>';
              div = div.firstChild;
              doc.body.appendChild(div);
              width = getScrollbarWidth.width = div.offsetWidth - div.clientWidth;
              doc.body.removeChild(div);
            }
            return width;
          };
          var equalizeSizes = function() {
            var i, n, height_max, width, width_last, width_parent, $optgroups;
            $optgroups = $2("[data-group]", self2.$dropdown_content);
            n = $optgroups.length;
            if (!n || !self2.$dropdown_content.width())
              return;
            if (options.equalizeHeight) {
              height_max = 0;
              for (i = 0; i < n; i++) {
                height_max = Math.max(height_max, $optgroups.eq(i).height());
              }
              $optgroups.css({ height: height_max });
            }
            if (options.equalizeWidth) {
              width_parent = self2.$dropdown_content.innerWidth() - getScrollbarWidth();
              width = Math.round(width_parent / n);
              $optgroups.css({ width });
              if (n > 1) {
                width_last = width_parent - width * (n - 1);
                $optgroups.eq(n - 1).css({ width: width_last });
              }
            }
          };
          if (options.equalizeHeight || options.equalizeWidth) {
            hook.after(this, "positionDropdown", equalizeSizes);
            hook.after(this, "refreshOptions", equalizeSizes);
          }
        });
        Selectize.define("remove_button", function(options) {
          options = $2.extend({
            label: "&times;",
            title: "Remove",
            className: "remove",
            append: true
          }, options);
          var singleClose = function(thisRef, options2) {
            options2.className = "remove-single";
            var self2 = thisRef;
            var html = '<a href="javascript:void(0)" class="' + options2.className + '" tabindex="-1" title="' + escape_html(options2.title) + '">' + options2.label + "</a>";
            var append = function(html_container, html_element) {
              return $2("<span>").append(html_container).append(html_element);
            };
            thisRef.setup = function() {
              var original = self2.setup;
              return function() {
                if (options2.append) {
                  var id = $2(self2.$input.context).attr("id");
                  var selectizer = $2("#" + id);
                  var render_item = self2.settings.render.item;
                  self2.settings.render.item = function(data) {
                    return append(render_item.apply(thisRef, arguments), html);
                  };
                }
                original.apply(thisRef, arguments);
                thisRef.$control.on("click", "." + options2.className, function(e) {
                  e.preventDefault();
                  if (self2.isLocked)
                    return;
                  self2.clear();
                });
              };
            }();
          };
          var multiClose = function(thisRef, options2) {
            var self2 = thisRef;
            var html = '<a href="javascript:void(0)" class="' + options2.className + '" tabindex="-1" title="' + escape_html(options2.title) + '">' + options2.label + "</a>";
            var append = function(html_container, html_element) {
              var pos = html_container.search(/(<\/[^>]+>\s*)$/);
              return html_container.substring(0, pos) + html_element + html_container.substring(pos);
            };
            thisRef.setup = function() {
              var original = self2.setup;
              return function() {
                if (options2.append) {
                  var render_item = self2.settings.render.item;
                  self2.settings.render.item = function(data) {
                    return append(render_item.apply(thisRef, arguments), html);
                  };
                }
                original.apply(thisRef, arguments);
                thisRef.$control.on("click", "." + options2.className, function(e) {
                  e.preventDefault();
                  if (self2.isLocked)
                    return;
                  var $item = $2(e.currentTarget).parent();
                  self2.setActiveItem($item);
                  if (self2.deleteSelection()) {
                    self2.setCaret(self2.items.length);
                  }
                });
              };
            }();
          };
          if (this.settings.mode === "single") {
            singleClose(this, options);
            return;
          } else {
            multiClose(this, options);
          }
        });
        Selectize.define("restore_on_backspace", function(options) {
          var self2 = this;
          options.text = options.text || function(option) {
            return option[this.settings.labelField];
          };
          this.onKeyDown = function() {
            var original = self2.onKeyDown;
            return function(e) {
              var index, option;
              if (e.keyCode === KEY_BACKSPACE && this.$control_input.val() === "" && !this.$activeItems.length) {
                index = this.caretPos - 1;
                if (index >= 0 && index < this.items.length) {
                  option = this.options[this.items[index]];
                  if (this.deleteSelection(e)) {
                    this.setTextboxValue(options.text.apply(this, [option]));
                    this.refreshOptions(true);
                  }
                  e.preventDefault();
                  return;
                }
              }
              return original.apply(this, arguments);
            };
          }();
        });
        return Selectize;
      });
    }
  });

  // node_modules/dropzone/dist/dropzone.js
  var require_dropzone = __commonJS({
    "node_modules/dropzone/dist/dropzone.js"(exports, module) {
      (function webpackUniversalModuleDefinition(root, factory) {
        if (typeof exports === "object" && typeof module === "object")
          module.exports = factory();
        else if (typeof define === "function" && define.amd)
          define([], factory);
        else {
          var a = factory();
          for (var i in a)
            (typeof exports === "object" ? exports : root)[i] = a[i];
        }
      })(self, function() {
        return (
          /******/
          function() {
            var __webpack_modules__ = {
              /***/
              3099: (
                /***/
                function(module2) {
                  module2.exports = function(it) {
                    if (typeof it != "function") {
                      throw TypeError(String(it) + " is not a function");
                    }
                    return it;
                  };
                }
              ),
              /***/
              6077: (
                /***/
                function(module2, __unused_webpack_exports, __webpack_require__2) {
                  var isObject = __webpack_require__2(111);
                  module2.exports = function(it) {
                    if (!isObject(it) && it !== null) {
                      throw TypeError("Can't set " + String(it) + " as a prototype");
                    }
                    return it;
                  };
                }
              ),
              /***/
              1223: (
                /***/
                function(module2, __unused_webpack_exports, __webpack_require__2) {
                  var wellKnownSymbol = __webpack_require__2(5112);
                  var create = __webpack_require__2(30);
                  var definePropertyModule = __webpack_require__2(3070);
                  var UNSCOPABLES = wellKnownSymbol("unscopables");
                  var ArrayPrototype = Array.prototype;
                  if (ArrayPrototype[UNSCOPABLES] == void 0) {
                    definePropertyModule.f(ArrayPrototype, UNSCOPABLES, {
                      configurable: true,
                      value: create(null)
                    });
                  }
                  module2.exports = function(key) {
                    ArrayPrototype[UNSCOPABLES][key] = true;
                  };
                }
              ),
              /***/
              1530: (
                /***/
                function(module2, __unused_webpack_exports, __webpack_require__2) {
                  "use strict";
                  var charAt = __webpack_require__2(8710).charAt;
                  module2.exports = function(S, index, unicode) {
                    return index + (unicode ? charAt(S, index).length : 1);
                  };
                }
              ),
              /***/
              5787: (
                /***/
                function(module2) {
                  module2.exports = function(it, Constructor, name) {
                    if (!(it instanceof Constructor)) {
                      throw TypeError("Incorrect " + (name ? name + " " : "") + "invocation");
                    }
                    return it;
                  };
                }
              ),
              /***/
              9670: (
                /***/
                function(module2, __unused_webpack_exports, __webpack_require__2) {
                  var isObject = __webpack_require__2(111);
                  module2.exports = function(it) {
                    if (!isObject(it)) {
                      throw TypeError(String(it) + " is not an object");
                    }
                    return it;
                  };
                }
              ),
              /***/
              4019: (
                /***/
                function(module2) {
                  module2.exports = typeof ArrayBuffer !== "undefined" && typeof DataView !== "undefined";
                }
              ),
              /***/
              260: (
                /***/
                function(module2, __unused_webpack_exports, __webpack_require__2) {
                  "use strict";
                  var NATIVE_ARRAY_BUFFER = __webpack_require__2(4019);
                  var DESCRIPTORS = __webpack_require__2(9781);
                  var global2 = __webpack_require__2(7854);
                  var isObject = __webpack_require__2(111);
                  var has = __webpack_require__2(6656);
                  var classof = __webpack_require__2(648);
                  var createNonEnumerableProperty = __webpack_require__2(8880);
                  var redefine = __webpack_require__2(1320);
                  var defineProperty = __webpack_require__2(3070).f;
                  var getPrototypeOf = __webpack_require__2(9518);
                  var setPrototypeOf = __webpack_require__2(7674);
                  var wellKnownSymbol = __webpack_require__2(5112);
                  var uid = __webpack_require__2(9711);
                  var Int8Array2 = global2.Int8Array;
                  var Int8ArrayPrototype = Int8Array2 && Int8Array2.prototype;
                  var Uint8ClampedArray = global2.Uint8ClampedArray;
                  var Uint8ClampedArrayPrototype = Uint8ClampedArray && Uint8ClampedArray.prototype;
                  var TypedArray = Int8Array2 && getPrototypeOf(Int8Array2);
                  var TypedArrayPrototype = Int8ArrayPrototype && getPrototypeOf(Int8ArrayPrototype);
                  var ObjectPrototype = Object.prototype;
                  var isPrototypeOf = ObjectPrototype.isPrototypeOf;
                  var TO_STRING_TAG = wellKnownSymbol("toStringTag");
                  var TYPED_ARRAY_TAG = uid("TYPED_ARRAY_TAG");
                  var NATIVE_ARRAY_BUFFER_VIEWS = NATIVE_ARRAY_BUFFER && !!setPrototypeOf && classof(global2.opera) !== "Opera";
                  var TYPED_ARRAY_TAG_REQIRED = false;
                  var NAME;
                  var TypedArrayConstructorsList = {
                    Int8Array: 1,
                    Uint8Array: 1,
                    Uint8ClampedArray: 1,
                    Int16Array: 2,
                    Uint16Array: 2,
                    Int32Array: 4,
                    Uint32Array: 4,
                    Float32Array: 4,
                    Float64Array: 8
                  };
                  var BigIntArrayConstructorsList = {
                    BigInt64Array: 8,
                    BigUint64Array: 8
                  };
                  var isView = function isView2(it) {
                    if (!isObject(it))
                      return false;
                    var klass = classof(it);
                    return klass === "DataView" || has(TypedArrayConstructorsList, klass) || has(BigIntArrayConstructorsList, klass);
                  };
                  var isTypedArray = function(it) {
                    if (!isObject(it))
                      return false;
                    var klass = classof(it);
                    return has(TypedArrayConstructorsList, klass) || has(BigIntArrayConstructorsList, klass);
                  };
                  var aTypedArray = function(it) {
                    if (isTypedArray(it))
                      return it;
                    throw TypeError("Target is not a typed array");
                  };
                  var aTypedArrayConstructor = function(C) {
                    if (setPrototypeOf) {
                      if (isPrototypeOf.call(TypedArray, C))
                        return C;
                    } else
                      for (var ARRAY in TypedArrayConstructorsList)
                        if (has(TypedArrayConstructorsList, NAME)) {
                          var TypedArrayConstructor = global2[ARRAY];
                          if (TypedArrayConstructor && (C === TypedArrayConstructor || isPrototypeOf.call(TypedArrayConstructor, C))) {
                            return C;
                          }
                        }
                    throw TypeError("Target is not a typed array constructor");
                  };
                  var exportTypedArrayMethod = function(KEY, property, forced) {
                    if (!DESCRIPTORS)
                      return;
                    if (forced)
                      for (var ARRAY in TypedArrayConstructorsList) {
                        var TypedArrayConstructor = global2[ARRAY];
                        if (TypedArrayConstructor && has(TypedArrayConstructor.prototype, KEY)) {
                          delete TypedArrayConstructor.prototype[KEY];
                        }
                      }
                    if (!TypedArrayPrototype[KEY] || forced) {
                      redefine(TypedArrayPrototype, KEY, forced ? property : NATIVE_ARRAY_BUFFER_VIEWS && Int8ArrayPrototype[KEY] || property);
                    }
                  };
                  var exportTypedArrayStaticMethod = function(KEY, property, forced) {
                    var ARRAY, TypedArrayConstructor;
                    if (!DESCRIPTORS)
                      return;
                    if (setPrototypeOf) {
                      if (forced)
                        for (ARRAY in TypedArrayConstructorsList) {
                          TypedArrayConstructor = global2[ARRAY];
                          if (TypedArrayConstructor && has(TypedArrayConstructor, KEY)) {
                            delete TypedArrayConstructor[KEY];
                          }
                        }
                      if (!TypedArray[KEY] || forced) {
                        try {
                          return redefine(TypedArray, KEY, forced ? property : NATIVE_ARRAY_BUFFER_VIEWS && Int8Array2[KEY] || property);
                        } catch (error) {
                        }
                      } else
                        return;
                    }
                    for (ARRAY in TypedArrayConstructorsList) {
                      TypedArrayConstructor = global2[ARRAY];
                      if (TypedArrayConstructor && (!TypedArrayConstructor[KEY] || forced)) {
                        redefine(TypedArrayConstructor, KEY, property);
                      }
                    }
                  };
                  for (NAME in TypedArrayConstructorsList) {
                    if (!global2[NAME])
                      NATIVE_ARRAY_BUFFER_VIEWS = false;
                  }
                  if (!NATIVE_ARRAY_BUFFER_VIEWS || typeof TypedArray != "function" || TypedArray === Function.prototype) {
                    TypedArray = function TypedArray2() {
                      throw TypeError("Incorrect invocation");
                    };
                    if (NATIVE_ARRAY_BUFFER_VIEWS)
                      for (NAME in TypedArrayConstructorsList) {
                        if (global2[NAME])
                          setPrototypeOf(global2[NAME], TypedArray);
                      }
                  }
                  if (!NATIVE_ARRAY_BUFFER_VIEWS || !TypedArrayPrototype || TypedArrayPrototype === ObjectPrototype) {
                    TypedArrayPrototype = TypedArray.prototype;
                    if (NATIVE_ARRAY_BUFFER_VIEWS)
                      for (NAME in TypedArrayConstructorsList) {
                        if (global2[NAME])
                          setPrototypeOf(global2[NAME].prototype, TypedArrayPrototype);
                      }
                  }
                  if (NATIVE_ARRAY_BUFFER_VIEWS && getPrototypeOf(Uint8ClampedArrayPrototype) !== TypedArrayPrototype) {
                    setPrototypeOf(Uint8ClampedArrayPrototype, TypedArrayPrototype);
                  }
                  if (DESCRIPTORS && !has(TypedArrayPrototype, TO_STRING_TAG)) {
                    TYPED_ARRAY_TAG_REQIRED = true;
                    defineProperty(TypedArrayPrototype, TO_STRING_TAG, { get: function() {
                      return isObject(this) ? this[TYPED_ARRAY_TAG] : void 0;
                    } });
                    for (NAME in TypedArrayConstructorsList)
                      if (global2[NAME]) {
                        createNonEnumerableProperty(global2[NAME], TYPED_ARRAY_TAG, NAME);
                      }
                  }
                  module2.exports = {
                    NATIVE_ARRAY_BUFFER_VIEWS,
                    TYPED_ARRAY_TAG: TYPED_ARRAY_TAG_REQIRED && TYPED_ARRAY_TAG,
                    aTypedArray,
                    aTypedArrayConstructor,
                    exportTypedArrayMethod,
                    exportTypedArrayStaticMethod,
                    isView,
                    isTypedArray,
                    TypedArray,
                    TypedArrayPrototype
                  };
                }
              ),
              /***/
              3331: (
                /***/
                function(module2, __unused_webpack_exports, __webpack_require__2) {
                  "use strict";
                  var global2 = __webpack_require__2(7854);
                  var DESCRIPTORS = __webpack_require__2(9781);
                  var NATIVE_ARRAY_BUFFER = __webpack_require__2(4019);
                  var createNonEnumerableProperty = __webpack_require__2(8880);
                  var redefineAll = __webpack_require__2(2248);
                  var fails = __webpack_require__2(7293);
                  var anInstance = __webpack_require__2(5787);
                  var toInteger = __webpack_require__2(9958);
                  var toLength = __webpack_require__2(7466);
                  var toIndex = __webpack_require__2(7067);
                  var IEEE754 = __webpack_require__2(1179);
                  var getPrototypeOf = __webpack_require__2(9518);
                  var setPrototypeOf = __webpack_require__2(7674);
                  var getOwnPropertyNames = __webpack_require__2(8006).f;
                  var defineProperty = __webpack_require__2(3070).f;
                  var arrayFill = __webpack_require__2(1285);
                  var setToStringTag = __webpack_require__2(8003);
                  var InternalStateModule = __webpack_require__2(9909);
                  var getInternalState = InternalStateModule.get;
                  var setInternalState = InternalStateModule.set;
                  var ARRAY_BUFFER = "ArrayBuffer";
                  var DATA_VIEW = "DataView";
                  var PROTOTYPE = "prototype";
                  var WRONG_LENGTH = "Wrong length";
                  var WRONG_INDEX = "Wrong index";
                  var NativeArrayBuffer = global2[ARRAY_BUFFER];
                  var $ArrayBuffer = NativeArrayBuffer;
                  var $DataView = global2[DATA_VIEW];
                  var $DataViewPrototype = $DataView && $DataView[PROTOTYPE];
                  var ObjectPrototype = Object.prototype;
                  var RangeError2 = global2.RangeError;
                  var packIEEE754 = IEEE754.pack;
                  var unpackIEEE754 = IEEE754.unpack;
                  var packInt8 = function(number) {
                    return [number & 255];
                  };
                  var packInt16 = function(number) {
                    return [number & 255, number >> 8 & 255];
                  };
                  var packInt32 = function(number) {
                    return [number & 255, number >> 8 & 255, number >> 16 & 255, number >> 24 & 255];
                  };
                  var unpackInt32 = function(buffer) {
                    return buffer[3] << 24 | buffer[2] << 16 | buffer[1] << 8 | buffer[0];
                  };
                  var packFloat32 = function(number) {
                    return packIEEE754(number, 23, 4);
                  };
                  var packFloat64 = function(number) {
                    return packIEEE754(number, 52, 8);
                  };
                  var addGetter = function(Constructor, key2) {
                    defineProperty(Constructor[PROTOTYPE], key2, { get: function() {
                      return getInternalState(this)[key2];
                    } });
                  };
                  var get = function(view, count, index, isLittleEndian) {
                    var intIndex = toIndex(index);
                    var store = getInternalState(view);
                    if (intIndex + count > store.byteLength)
                      throw RangeError2(WRONG_INDEX);
                    var bytes = getInternalState(store.buffer).bytes;
                    var start2 = intIndex + store.byteOffset;
                    var pack = bytes.slice(start2, start2 + count);
                    return isLittleEndian ? pack : pack.reverse();
                  };
                  var set = function(view, count, index, conversion, value, isLittleEndian) {
                    var intIndex = toIndex(index);
                    var store = getInternalState(view);
                    if (intIndex + count > store.byteLength)
                      throw RangeError2(WRONG_INDEX);
                    var bytes = getInternalState(store.buffer).bytes;
                    var start2 = intIndex + store.byteOffset;
                    var pack = conversion(+value);
                    for (var i = 0; i < count; i++)
                      bytes[start2 + i] = pack[isLittleEndian ? i : count - i - 1];
                  };
                  if (!NATIVE_ARRAY_BUFFER) {
                    $ArrayBuffer = function ArrayBuffer2(length) {
                      anInstance(this, $ArrayBuffer, ARRAY_BUFFER);
                      var byteLength = toIndex(length);
                      setInternalState(this, {
                        bytes: arrayFill.call(new Array(byteLength), 0),
                        byteLength
                      });
                      if (!DESCRIPTORS)
                        this.byteLength = byteLength;
                    };
                    $DataView = function DataView2(buffer, byteOffset, byteLength) {
                      anInstance(this, $DataView, DATA_VIEW);
                      anInstance(buffer, $ArrayBuffer, DATA_VIEW);
                      var bufferLength = getInternalState(buffer).byteLength;
                      var offset = toInteger(byteOffset);
                      if (offset < 0 || offset > bufferLength)
                        throw RangeError2("Wrong offset");
                      byteLength = byteLength === void 0 ? bufferLength - offset : toLength(byteLength);
                      if (offset + byteLength > bufferLength)
                        throw RangeError2(WRONG_LENGTH);
                      setInternalState(this, {
                        buffer,
                        byteLength,
                        byteOffset: offset
                      });
                      if (!DESCRIPTORS) {
                        this.buffer = buffer;
                        this.byteLength = byteLength;
                        this.byteOffset = offset;
                      }
                    };
                    if (DESCRIPTORS) {
                      addGetter($ArrayBuffer, "byteLength");
                      addGetter($DataView, "buffer");
                      addGetter($DataView, "byteLength");
                      addGetter($DataView, "byteOffset");
                    }
                    redefineAll($DataView[PROTOTYPE], {
                      getInt8: function getInt8(byteOffset) {
                        return get(this, 1, byteOffset)[0] << 24 >> 24;
                      },
                      getUint8: function getUint8(byteOffset) {
                        return get(this, 1, byteOffset)[0];
                      },
                      getInt16: function getInt16(byteOffset) {
                        var bytes = get(this, 2, byteOffset, arguments.length > 1 ? arguments[1] : void 0);
                        return (bytes[1] << 8 | bytes[0]) << 16 >> 16;
                      },
                      getUint16: function getUint16(byteOffset) {
                        var bytes = get(this, 2, byteOffset, arguments.length > 1 ? arguments[1] : void 0);
                        return bytes[1] << 8 | bytes[0];
                      },
                      getInt32: function getInt32(byteOffset) {
                        return unpackInt32(get(this, 4, byteOffset, arguments.length > 1 ? arguments[1] : void 0));
                      },
                      getUint32: function getUint32(byteOffset) {
                        return unpackInt32(get(this, 4, byteOffset, arguments.length > 1 ? arguments[1] : void 0)) >>> 0;
                      },
                      getFloat32: function getFloat32(byteOffset) {
                        return unpackIEEE754(get(this, 4, byteOffset, arguments.length > 1 ? arguments[1] : void 0), 23);
                      },
                      getFloat64: function getFloat64(byteOffset) {
                        return unpackIEEE754(get(this, 8, byteOffset, arguments.length > 1 ? arguments[1] : void 0), 52);
                      },
                      setInt8: function setInt8(byteOffset, value) {
                        set(this, 1, byteOffset, packInt8, value);
                      },
                      setUint8: function setUint8(byteOffset, value) {
                        set(this, 1, byteOffset, packInt8, value);
                      },
                      setInt16: function setInt16(byteOffset, value) {
                        set(this, 2, byteOffset, packInt16, value, arguments.length > 2 ? arguments[2] : void 0);
                      },
                      setUint16: function setUint16(byteOffset, value) {
                        set(this, 2, byteOffset, packInt16, value, arguments.length > 2 ? arguments[2] : void 0);
                      },
                      setInt32: function setInt32(byteOffset, value) {
                        set(this, 4, byteOffset, packInt32, value, arguments.length > 2 ? arguments[2] : void 0);
                      },
                      setUint32: function setUint32(byteOffset, value) {
                        set(this, 4, byteOffset, packInt32, value, arguments.length > 2 ? arguments[2] : void 0);
                      },
                      setFloat32: function setFloat32(byteOffset, value) {
                        set(this, 4, byteOffset, packFloat32, value, arguments.length > 2 ? arguments[2] : void 0);
                      },
                      setFloat64: function setFloat64(byteOffset, value) {
                        set(this, 8, byteOffset, packFloat64, value, arguments.length > 2 ? arguments[2] : void 0);
                      }
                    });
                  } else {
                    if (!fails(function() {
                      NativeArrayBuffer(1);
                    }) || !fails(function() {
                      new NativeArrayBuffer(-1);
                    }) || fails(function() {
                      new NativeArrayBuffer();
                      new NativeArrayBuffer(1.5);
                      new NativeArrayBuffer(NaN);
                      return NativeArrayBuffer.name != ARRAY_BUFFER;
                    })) {
                      $ArrayBuffer = function ArrayBuffer2(length) {
                        anInstance(this, $ArrayBuffer);
                        return new NativeArrayBuffer(toIndex(length));
                      };
                      var ArrayBufferPrototype = $ArrayBuffer[PROTOTYPE] = NativeArrayBuffer[PROTOTYPE];
                      for (var keys = getOwnPropertyNames(NativeArrayBuffer), j = 0, key; keys.length > j; ) {
                        if (!((key = keys[j++]) in $ArrayBuffer)) {
                          createNonEnumerableProperty($ArrayBuffer, key, NativeArrayBuffer[key]);
                        }
                      }
                      ArrayBufferPrototype.constructor = $ArrayBuffer;
                    }
                    if (setPrototypeOf && getPrototypeOf($DataViewPrototype) !== ObjectPrototype) {
                      setPrototypeOf($DataViewPrototype, ObjectPrototype);
                    }
                    var testView = new $DataView(new $ArrayBuffer(2));
                    var nativeSetInt8 = $DataViewPrototype.setInt8;
                    testView.setInt8(0, 2147483648);
                    testView.setInt8(1, 2147483649);
                    if (testView.getInt8(0) || !testView.getInt8(1))
                      redefineAll($DataViewPrototype, {
                        setInt8: function setInt8(byteOffset, value) {
                          nativeSetInt8.call(this, byteOffset, value << 24 >> 24);
                        },
                        setUint8: function setUint8(byteOffset, value) {
                          nativeSetInt8.call(this, byteOffset, value << 24 >> 24);
                        }
                      }, { unsafe: true });
                  }
                  setToStringTag($ArrayBuffer, ARRAY_BUFFER);
                  setToStringTag($DataView, DATA_VIEW);
                  module2.exports = {
                    ArrayBuffer: $ArrayBuffer,
                    DataView: $DataView
                  };
                }
              ),
              /***/
              1048: (
                /***/
                function(module2, __unused_webpack_exports, __webpack_require__2) {
                  "use strict";
                  var toObject = __webpack_require__2(7908);
                  var toAbsoluteIndex = __webpack_require__2(1400);
                  var toLength = __webpack_require__2(7466);
                  var min = Math.min;
                  module2.exports = [].copyWithin || function copyWithin(target, start2) {
                    var O = toObject(this);
                    var len = toLength(O.length);
                    var to = toAbsoluteIndex(target, len);
                    var from = toAbsoluteIndex(start2, len);
                    var end = arguments.length > 2 ? arguments[2] : void 0;
                    var count = min((end === void 0 ? len : toAbsoluteIndex(end, len)) - from, len - to);
                    var inc = 1;
                    if (from < to && to < from + count) {
                      inc = -1;
                      from += count - 1;
                      to += count - 1;
                    }
                    while (count-- > 0) {
                      if (from in O)
                        O[to] = O[from];
                      else
                        delete O[to];
                      to += inc;
                      from += inc;
                    }
                    return O;
                  };
                }
              ),
              /***/
              1285: (
                /***/
                function(module2, __unused_webpack_exports, __webpack_require__2) {
                  "use strict";
                  var toObject = __webpack_require__2(7908);
                  var toAbsoluteIndex = __webpack_require__2(1400);
                  var toLength = __webpack_require__2(7466);
                  module2.exports = function fill(value) {
                    var O = toObject(this);
                    var length = toLength(O.length);
                    var argumentsLength = arguments.length;
                    var index = toAbsoluteIndex(argumentsLength > 1 ? arguments[1] : void 0, length);
                    var end = argumentsLength > 2 ? arguments[2] : void 0;
                    var endPos = end === void 0 ? length : toAbsoluteIndex(end, length);
                    while (endPos > index)
                      O[index++] = value;
                    return O;
                  };
                }
              ),
              /***/
              8533: (
                /***/
                function(module2, __unused_webpack_exports, __webpack_require__2) {
                  "use strict";
                  var $forEach = __webpack_require__2(2092).forEach;
                  var arrayMethodIsStrict = __webpack_require__2(9341);
                  var STRICT_METHOD = arrayMethodIsStrict("forEach");
                  module2.exports = !STRICT_METHOD ? function forEach(callbackfn) {
                    return $forEach(this, callbackfn, arguments.length > 1 ? arguments[1] : void 0);
                  } : [].forEach;
                }
              ),
              /***/
              8457: (
                /***/
                function(module2, __unused_webpack_exports, __webpack_require__2) {
                  "use strict";
                  var bind = __webpack_require__2(9974);
                  var toObject = __webpack_require__2(7908);
                  var callWithSafeIterationClosing = __webpack_require__2(3411);
                  var isArrayIteratorMethod = __webpack_require__2(7659);
                  var toLength = __webpack_require__2(7466);
                  var createProperty = __webpack_require__2(6135);
                  var getIteratorMethod = __webpack_require__2(1246);
                  module2.exports = function from(arrayLike) {
                    var O = toObject(arrayLike);
                    var C = typeof this == "function" ? this : Array;
                    var argumentsLength = arguments.length;
                    var mapfn = argumentsLength > 1 ? arguments[1] : void 0;
                    var mapping = mapfn !== void 0;
                    var iteratorMethod = getIteratorMethod(O);
                    var index = 0;
                    var length, result, step, iterator, next, value;
                    if (mapping)
                      mapfn = bind(mapfn, argumentsLength > 2 ? arguments[2] : void 0, 2);
                    if (iteratorMethod != void 0 && !(C == Array && isArrayIteratorMethod(iteratorMethod))) {
                      iterator = iteratorMethod.call(O);
                      next = iterator.next;
                      result = new C();
                      for (; !(step = next.call(iterator)).done; index++) {
                        value = mapping ? callWithSafeIterationClosing(iterator, mapfn, [step.value, index], true) : step.value;
                        createProperty(result, index, value);
                      }
                    } else {
                      length = toLength(O.length);
                      result = new C(length);
                      for (; length > index; index++) {
                        value = mapping ? mapfn(O[index], index) : O[index];
                        createProperty(result, index, value);
                      }
                    }
                    result.length = index;
                    return result;
                  };
                }
              ),
              /***/
              1318: (
                /***/
                function(module2, __unused_webpack_exports, __webpack_require__2) {
                  var toIndexedObject = __webpack_require__2(5656);
                  var toLength = __webpack_require__2(7466);
                  var toAbsoluteIndex = __webpack_require__2(1400);
                  var createMethod = function(IS_INCLUDES) {
                    return function($this, el, fromIndex) {
                      var O = toIndexedObject($this);
                      var length = toLength(O.length);
                      var index = toAbsoluteIndex(fromIndex, length);
                      var value;
                      if (IS_INCLUDES && el != el)
                        while (length > index) {
                          value = O[index++];
                          if (value != value)
                            return true;
                        }
                      else
                        for (; length > index; index++) {
                          if ((IS_INCLUDES || index in O) && O[index] === el)
                            return IS_INCLUDES || index || 0;
                        }
                      return !IS_INCLUDES && -1;
                    };
                  };
                  module2.exports = {
                    // `Array.prototype.includes` method
                    // https://tc39.es/ecma262/#sec-array.prototype.includes
                    includes: createMethod(true),
                    // `Array.prototype.indexOf` method
                    // https://tc39.es/ecma262/#sec-array.prototype.indexof
                    indexOf: createMethod(false)
                  };
                }
              ),
              /***/
              2092: (
                /***/
                function(module2, __unused_webpack_exports, __webpack_require__2) {
                  var bind = __webpack_require__2(9974);
                  var IndexedObject = __webpack_require__2(8361);
                  var toObject = __webpack_require__2(7908);
                  var toLength = __webpack_require__2(7466);
                  var arraySpeciesCreate = __webpack_require__2(5417);
                  var push = [].push;
                  var createMethod = function(TYPE) {
                    var IS_MAP = TYPE == 1;
                    var IS_FILTER = TYPE == 2;
                    var IS_SOME = TYPE == 3;
                    var IS_EVERY = TYPE == 4;
                    var IS_FIND_INDEX = TYPE == 6;
                    var IS_FILTER_OUT = TYPE == 7;
                    var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;
                    return function($this, callbackfn, that, specificCreate) {
                      var O = toObject($this);
                      var self2 = IndexedObject(O);
                      var boundFunction = bind(callbackfn, that, 3);
                      var length = toLength(self2.length);
                      var index = 0;
                      var create = specificCreate || arraySpeciesCreate;
                      var target = IS_MAP ? create($this, length) : IS_FILTER || IS_FILTER_OUT ? create($this, 0) : void 0;
                      var value, result;
                      for (; length > index; index++)
                        if (NO_HOLES || index in self2) {
                          value = self2[index];
                          result = boundFunction(value, index, O);
                          if (TYPE) {
                            if (IS_MAP)
                              target[index] = result;
                            else if (result)
                              switch (TYPE) {
                                case 3:
                                  return true;
                                case 5:
                                  return value;
                                case 6:
                                  return index;
                                case 2:
                                  push.call(target, value);
                              }
                            else
                              switch (TYPE) {
                                case 4:
                                  return false;
                                case 7:
                                  push.call(target, value);
                              }
                          }
                        }
                      return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : target;
                    };
                  };
                  module2.exports = {
                    // `Array.prototype.forEach` method
                    // https://tc39.es/ecma262/#sec-array.prototype.foreach
                    forEach: createMethod(0),
                    // `Array.prototype.map` method
                    // https://tc39.es/ecma262/#sec-array.prototype.map
                    map: createMethod(1),
                    // `Array.prototype.filter` method
                    // https://tc39.es/ecma262/#sec-array.prototype.filter
                    filter: createMethod(2),
                    // `Array.prototype.some` method
                    // https://tc39.es/ecma262/#sec-array.prototype.some
                    some: createMethod(3),
                    // `Array.prototype.every` method
                    // https://tc39.es/ecma262/#sec-array.prototype.every
                    every: createMethod(4),
                    // `Array.prototype.find` method
                    // https://tc39.es/ecma262/#sec-array.prototype.find
                    find: createMethod(5),
                    // `Array.prototype.findIndex` method
                    // https://tc39.es/ecma262/#sec-array.prototype.findIndex
                    findIndex: createMethod(6),
                    // `Array.prototype.filterOut` method
                    // https://github.com/tc39/proposal-array-filtering
                    filterOut: createMethod(7)
                  };
                }
              ),
              /***/
              6583: (
                /***/
                function(module2, __unused_webpack_exports, __webpack_require__2) {
                  "use strict";
                  var toIndexedObject = __webpack_require__2(5656);
                  var toInteger = __webpack_require__2(9958);
                  var toLength = __webpack_require__2(7466);
                  var arrayMethodIsStrict = __webpack_require__2(9341);
                  var min = Math.min;
                  var nativeLastIndexOf = [].lastIndexOf;
                  var NEGATIVE_ZERO = !!nativeLastIndexOf && 1 / [1].lastIndexOf(1, -0) < 0;
                  var STRICT_METHOD = arrayMethodIsStrict("lastIndexOf");
                  var FORCED = NEGATIVE_ZERO || !STRICT_METHOD;
                  module2.exports = FORCED ? function lastIndexOf(searchElement) {
                    if (NEGATIVE_ZERO)
                      return nativeLastIndexOf.apply(this, arguments) || 0;
                    var O = toIndexedObject(this);
                    var length = toLength(O.length);
                    var index = length - 1;
                    if (arguments.length > 1)
                      index = min(index, toInteger(arguments[1]));
                    if (index < 0)
                      index = length + index;
                    for (; index >= 0; index--)
                      if (index in O && O[index] === searchElement)
                        return index || 0;
                    return -1;
                  } : nativeLastIndexOf;
                }
              ),
              /***/
              1194: (
                /***/
                function(module2, __unused_webpack_exports, __webpack_require__2) {
                  var fails = __webpack_require__2(7293);
                  var wellKnownSymbol = __webpack_require__2(5112);
                  var V8_VERSION = __webpack_require__2(7392);
                  var SPECIES = wellKnownSymbol("species");
                  module2.exports = function(METHOD_NAME) {
                    return V8_VERSION >= 51 || !fails(function() {
                      var array = [];
                      var constructor = array.constructor = {};
                      constructor[SPECIES] = function() {
                        return { foo: 1 };
                      };
                      return array[METHOD_NAME](Boolean).foo !== 1;
                    });
                  };
                }
              ),
              /***/
              9341: (
                /***/
                function(module2, __unused_webpack_exports, __webpack_require__2) {
                  "use strict";
                  var fails = __webpack_require__2(7293);
                  module2.exports = function(METHOD_NAME, argument) {
                    var method = [][METHOD_NAME];
                    return !!method && fails(function() {
                      method.call(null, argument || function() {
                        throw 1;
                      }, 1);
                    });
                  };
                }
              ),
              /***/
              3671: (
                /***/
                function(module2, __unused_webpack_exports, __webpack_require__2) {
                  var aFunction = __webpack_require__2(3099);
                  var toObject = __webpack_require__2(7908);
                  var IndexedObject = __webpack_require__2(8361);
                  var toLength = __webpack_require__2(7466);
                  var createMethod = function(IS_RIGHT) {
                    return function(that, callbackfn, argumentsLength, memo) {
                      aFunction(callbackfn);
                      var O = toObject(that);
                      var self2 = IndexedObject(O);
                      var length = toLength(O.length);
                      var index = IS_RIGHT ? length - 1 : 0;
                      var i = IS_RIGHT ? -1 : 1;
                      if (argumentsLength < 2)
                        while (true) {
                          if (index in self2) {
                            memo = self2[index];
                            index += i;
                            break;
                          }
                          index += i;
                          if (IS_RIGHT ? index < 0 : length <= index) {
                            throw TypeError("Reduce of empty array with no initial value");
                          }
                        }
                      for (; IS_RIGHT ? index >= 0 : length > index; index += i)
                        if (index in self2) {
                          memo = callbackfn(memo, self2[index], index, O);
                        }
                      return memo;
                    };
                  };
                  module2.exports = {
                    // `Array.prototype.reduce` method
                    // https://tc39.es/ecma262/#sec-array.prototype.reduce
                    left: createMethod(false),
                    // `Array.prototype.reduceRight` method
                    // https://tc39.es/ecma262/#sec-array.prototype.reduceright
                    right: createMethod(true)
                  };
                }
              ),
              /***/
              5417: (
                /***/
                function(module2, __unused_webpack_exports, __webpack_require__2) {
                  var isObject = __webpack_require__2(111);
                  var isArray = __webpack_require__2(3157);
                  var wellKnownSymbol = __webpack_require__2(5112);
                  var SPECIES = wellKnownSymbol("species");
                  module2.exports = function(originalArray, length) {
                    var C;
                    if (isArray(originalArray)) {
                      C = originalArray.constructor;
                      if (typeof C == "function" && (C === Array || isArray(C.prototype)))
                        C = void 0;
                      else if (isObject(C)) {
                        C = C[SPECIES];
                        if (C === null)
                          C = void 0;
                      }
                    }
                    return new (C === void 0 ? Array : C)(length === 0 ? 0 : length);
                  };
                }
              ),
              /***/
              3411: (
                /***/
                function(module2, __unused_webpack_exports, __webpack_require__2) {
                  var anObject = __webpack_require__2(9670);
                  var iteratorClose = __webpack_require__2(9212);
                  module2.exports = function(iterator, fn, value, ENTRIES) {
                    try {
                      return ENTRIES ? fn(anObject(value)[0], value[1]) : fn(value);
                    } catch (error) {
                      iteratorClose(iterator);
                      throw error;
                    }
                  };
                }
              ),
              /***/
              7072: (
                /***/
                function(module2, __unused_webpack_exports, __webpack_require__2) {
                  var wellKnownSymbol = __webpack_require__2(5112);
                  var ITERATOR = wellKnownSymbol("iterator");
                  var SAFE_CLOSING = false;
                  try {
                    var called = 0;
                    var iteratorWithReturn = {
                      next: function() {
                        return { done: !!called++ };
                      },
                      "return": function() {
                        SAFE_CLOSING = true;
                      }
                    };
                    iteratorWithReturn[ITERATOR] = function() {
                      return this;
                    };
                    Array.from(iteratorWithReturn, function() {
                      throw 2;
                    });
                  } catch (error) {
                  }
                  module2.exports = function(exec, SKIP_CLOSING) {
                    if (!SKIP_CLOSING && !SAFE_CLOSING)
                      return false;
                    var ITERATION_SUPPORT = false;
                    try {
                      var object = {};
                      object[ITERATOR] = function() {
                        return {
                          next: function() {
                            return { done: ITERATION_SUPPORT = true };
                          }
                        };
                      };
                      exec(object);
                    } catch (error) {
                    }
                    return ITERATION_SUPPORT;
                  };
                }
              ),
              /***/
              4326: (
                /***/
                function(module2) {
                  var toString = {}.toString;
                  module2.exports = function(it) {
                    return toString.call(it).slice(8, -1);
                  };
                }
              ),
              /***/
              648: (
                /***/
                function(module2, __unused_webpack_exports, __webpack_require__2) {
                  var TO_STRING_TAG_SUPPORT = __webpack_require__2(1694);
                  var classofRaw = __webpack_require__2(4326);
                  var wellKnownSymbol = __webpack_require__2(5112);
                  var TO_STRING_TAG = wellKnownSymbol("toStringTag");
                  var CORRECT_ARGUMENTS = classofRaw(/* @__PURE__ */ function() {
                    return arguments;
                  }()) == "Arguments";
                  var tryGet = function(it, key) {
                    try {
                      return it[key];
                    } catch (error) {
                    }
                  };
                  module2.exports = TO_STRING_TAG_SUPPORT ? classofRaw : function(it) {
                    var O, tag, result;
                    return it === void 0 ? "Undefined" : it === null ? "Null" : typeof (tag = tryGet(O = Object(it), TO_STRING_TAG)) == "string" ? tag : CORRECT_ARGUMENTS ? classofRaw(O) : (result = classofRaw(O)) == "Object" && typeof O.callee == "function" ? "Arguments" : result;
                  };
                }
              ),
              /***/
              9920: (
                /***/
                function(module2, __unused_webpack_exports, __webpack_require__2) {
                  var has = __webpack_require__2(6656);
                  var ownKeys = __webpack_require__2(3887);
                  var getOwnPropertyDescriptorModule = __webpack_require__2(1236);
                  var definePropertyModule = __webpack_require__2(3070);
                  module2.exports = function(target, source) {
                    var keys = ownKeys(source);
                    var defineProperty = definePropertyModule.f;
                    var getOwnPropertyDescriptor = getOwnPropertyDescriptorModule.f;
                    for (var i = 0; i < keys.length; i++) {
                      var key = keys[i];
                      if (!has(target, key))
                        defineProperty(target, key, getOwnPropertyDescriptor(source, key));
                    }
                  };
                }
              ),
              /***/
              8544: (
                /***/
                function(module2, __unused_webpack_exports, __webpack_require__2) {
                  var fails = __webpack_require__2(7293);
                  module2.exports = !fails(function() {
                    function F() {
                    }
                    F.prototype.constructor = null;
                    return Object.getPrototypeOf(new F()) !== F.prototype;
                  });
                }
              ),
              /***/
              4994: (
                /***/
                function(module2, __unused_webpack_exports, __webpack_require__2) {
                  "use strict";
                  var IteratorPrototype = __webpack_require__2(3383).IteratorPrototype;
                  var create = __webpack_require__2(30);
                  var createPropertyDescriptor = __webpack_require__2(9114);
                  var setToStringTag = __webpack_require__2(8003);
                  var Iterators = __webpack_require__2(7497);
                  var returnThis = function() {
                    return this;
                  };
                  module2.exports = function(IteratorConstructor, NAME, next) {
                    var TO_STRING_TAG = NAME + " Iterator";
                    IteratorConstructor.prototype = create(IteratorPrototype, { next: createPropertyDescriptor(1, next) });
                    setToStringTag(IteratorConstructor, TO_STRING_TAG, false, true);
                    Iterators[TO_STRING_TAG] = returnThis;
                    return IteratorConstructor;
                  };
                }
              ),
              /***/
              8880: (
                /***/
                function(module2, __unused_webpack_exports, __webpack_require__2) {
                  var DESCRIPTORS = __webpack_require__2(9781);
                  var definePropertyModule = __webpack_require__2(3070);
                  var createPropertyDescriptor = __webpack_require__2(9114);
                  module2.exports = DESCRIPTORS ? function(object, key, value) {
                    return definePropertyModule.f(object, key, createPropertyDescriptor(1, value));
                  } : function(object, key, value) {
                    object[key] = value;
                    return object;
                  };
                }
              ),
              /***/
              9114: (
                /***/
                function(module2) {
                  module2.exports = function(bitmap, value) {
                    return {
                      enumerable: !(bitmap & 1),
                      configurable: !(bitmap & 2),
                      writable: !(bitmap & 4),
                      value
                    };
                  };
                }
              ),
              /***/
              6135: (
                /***/
                function(module2, __unused_webpack_exports, __webpack_require__2) {
                  "use strict";
                  var toPrimitive = __webpack_require__2(7593);
                  var definePropertyModule = __webpack_require__2(3070);
                  var createPropertyDescriptor = __webpack_require__2(9114);
                  module2.exports = function(object, key, value) {
                    var propertyKey = toPrimitive(key);
                    if (propertyKey in object)
                      definePropertyModule.f(object, propertyKey, createPropertyDescriptor(0, value));
                    else
                      object[propertyKey] = value;
                  };
                }
              ),
              /***/
              654: (
                /***/
                function(module2, __unused_webpack_exports, __webpack_require__2) {
                  "use strict";
                  var $2 = __webpack_require__2(2109);
                  var createIteratorConstructor = __webpack_require__2(4994);
                  var getPrototypeOf = __webpack_require__2(9518);
                  var setPrototypeOf = __webpack_require__2(7674);
                  var setToStringTag = __webpack_require__2(8003);
                  var createNonEnumerableProperty = __webpack_require__2(8880);
                  var redefine = __webpack_require__2(1320);
                  var wellKnownSymbol = __webpack_require__2(5112);
                  var IS_PURE = __webpack_require__2(1913);
                  var Iterators = __webpack_require__2(7497);
                  var IteratorsCore = __webpack_require__2(3383);
                  var IteratorPrototype = IteratorsCore.IteratorPrototype;
                  var BUGGY_SAFARI_ITERATORS = IteratorsCore.BUGGY_SAFARI_ITERATORS;
                  var ITERATOR = wellKnownSymbol("iterator");
                  var KEYS = "keys";
                  var VALUES = "values";
                  var ENTRIES = "entries";
                  var returnThis = function() {
                    return this;
                  };
                  module2.exports = function(Iterable, NAME, IteratorConstructor, next, DEFAULT, IS_SET, FORCED) {
                    createIteratorConstructor(IteratorConstructor, NAME, next);
                    var getIterationMethod = function(KIND) {
                      if (KIND === DEFAULT && defaultIterator)
                        return defaultIterator;
                      if (!BUGGY_SAFARI_ITERATORS && KIND in IterablePrototype)
                        return IterablePrototype[KIND];
                      switch (KIND) {
                        case KEYS:
                          return function keys() {
                            return new IteratorConstructor(this, KIND);
                          };
                        case VALUES:
                          return function values() {
                            return new IteratorConstructor(this, KIND);
                          };
                        case ENTRIES:
                          return function entries() {
                            return new IteratorConstructor(this, KIND);
                          };
                      }
                      return function() {
                        return new IteratorConstructor(this);
                      };
                    };
                    var TO_STRING_TAG = NAME + " Iterator";
                    var INCORRECT_VALUES_NAME = false;
                    var IterablePrototype = Iterable.prototype;
                    var nativeIterator = IterablePrototype[ITERATOR] || IterablePrototype["@@iterator"] || DEFAULT && IterablePrototype[DEFAULT];
                    var defaultIterator = !BUGGY_SAFARI_ITERATORS && nativeIterator || getIterationMethod(DEFAULT);
                    var anyNativeIterator = NAME == "Array" ? IterablePrototype.entries || nativeIterator : nativeIterator;
                    var CurrentIteratorPrototype, methods, KEY;
                    if (anyNativeIterator) {
                      CurrentIteratorPrototype = getPrototypeOf(anyNativeIterator.call(new Iterable()));
                      if (IteratorPrototype !== Object.prototype && CurrentIteratorPrototype.next) {
                        if (!IS_PURE && getPrototypeOf(CurrentIteratorPrototype) !== IteratorPrototype) {
                          if (setPrototypeOf) {
                            setPrototypeOf(CurrentIteratorPrototype, IteratorPrototype);
                          } else if (typeof CurrentIteratorPrototype[ITERATOR] != "function") {
                            createNonEnumerableProperty(CurrentIteratorPrototype, ITERATOR, returnThis);
                          }
                        }
                        setToStringTag(CurrentIteratorPrototype, TO_STRING_TAG, true, true);
                        if (IS_PURE)
                          Iterators[TO_STRING_TAG] = returnThis;
                      }
                    }
                    if (DEFAULT == VALUES && nativeIterator && nativeIterator.name !== VALUES) {
                      INCORRECT_VALUES_NAME = true;
                      defaultIterator = function values() {
                        return nativeIterator.call(this);
                      };
                    }
                    if ((!IS_PURE || FORCED) && IterablePrototype[ITERATOR] !== defaultIterator) {
                      createNonEnumerableProperty(IterablePrototype, ITERATOR, defaultIterator);
                    }
                    Iterators[NAME] = defaultIterator;
                    if (DEFAULT) {
                      methods = {
                        values: getIterationMethod(VALUES),
                        keys: IS_SET ? defaultIterator : getIterationMethod(KEYS),
                        entries: getIterationMethod(ENTRIES)
                      };
                      if (FORCED)
                        for (KEY in methods) {
                          if (BUGGY_SAFARI_ITERATORS || INCORRECT_VALUES_NAME || !(KEY in IterablePrototype)) {
                            redefine(IterablePrototype, KEY, methods[KEY]);
                          }
                        }
                      else
                        $2({ target: NAME, proto: true, forced: BUGGY_SAFARI_ITERATORS || INCORRECT_VALUES_NAME }, methods);
                    }
                    return methods;
                  };
                }
              ),
              /***/
              9781: (
                /***/
                function(module2, __unused_webpack_exports, __webpack_require__2) {
                  var fails = __webpack_require__2(7293);
                  module2.exports = !fails(function() {
                    return Object.defineProperty({}, 1, { get: function() {
                      return 7;
                    } })[1] != 7;
                  });
                }
              ),
              /***/
              317: (
                /***/
                function(module2, __unused_webpack_exports, __webpack_require__2) {
                  var global2 = __webpack_require__2(7854);
                  var isObject = __webpack_require__2(111);
                  var document2 = global2.document;
                  var EXISTS = isObject(document2) && isObject(document2.createElement);
                  module2.exports = function(it) {
                    return EXISTS ? document2.createElement(it) : {};
                  };
                }
              ),
              /***/
              8324: (
                /***/
                function(module2) {
                  module2.exports = {
                    CSSRuleList: 0,
                    CSSStyleDeclaration: 0,
                    CSSValueList: 0,
                    ClientRectList: 0,
                    DOMRectList: 0,
                    DOMStringList: 0,
                    DOMTokenList: 1,
                    DataTransferItemList: 0,
                    FileList: 0,
                    HTMLAllCollection: 0,
                    HTMLCollection: 0,
                    HTMLFormElement: 0,
                    HTMLSelectElement: 0,
                    MediaList: 0,
                    MimeTypeArray: 0,
                    NamedNodeMap: 0,
                    NodeList: 1,
                    PaintRequestList: 0,
                    Plugin: 0,
                    PluginArray: 0,
                    SVGLengthList: 0,
                    SVGNumberList: 0,
                    SVGPathSegList: 0,
                    SVGPointList: 0,
                    SVGStringList: 0,
                    SVGTransformList: 0,
                    SourceBufferList: 0,
                    StyleSheetList: 0,
                    TextTrackCueList: 0,
                    TextTrackList: 0,
                    TouchList: 0
                  };
                }
              ),
              /***/
              8113: (
                /***/
                function(module2, __unused_webpack_exports, __webpack_require__2) {
                  var getBuiltIn = __webpack_require__2(5005);
                  module2.exports = getBuiltIn("navigator", "userAgent") || "";
                }
              ),
              /***/
              7392: (
                /***/
                function(module2, __unused_webpack_exports, __webpack_require__2) {
                  var global2 = __webpack_require__2(7854);
                  var userAgent = __webpack_require__2(8113);
                  var process = global2.process;
                  var versions = process && process.versions;
                  var v8 = versions && versions.v8;
                  var match, version;
                  if (v8) {
                    match = v8.split(".");
                    version = match[0] + match[1];
                  } else if (userAgent) {
                    match = userAgent.match(/Edge\/(\d+)/);
                    if (!match || match[1] >= 74) {
                      match = userAgent.match(/Chrome\/(\d+)/);
                      if (match)
                        version = match[1];
                    }
                  }
                  module2.exports = version && +version;
                }
              ),
              /***/
              748: (
                /***/
                function(module2) {
                  module2.exports = [
                    "constructor",
                    "hasOwnProperty",
                    "isPrototypeOf",
                    "propertyIsEnumerable",
                    "toLocaleString",
                    "toString",
                    "valueOf"
                  ];
                }
              ),
              /***/
              2109: (
                /***/
                function(module2, __unused_webpack_exports, __webpack_require__2) {
                  var global2 = __webpack_require__2(7854);
                  var getOwnPropertyDescriptor = __webpack_require__2(1236).f;
                  var createNonEnumerableProperty = __webpack_require__2(8880);
                  var redefine = __webpack_require__2(1320);
                  var setGlobal = __webpack_require__2(3505);
                  var copyConstructorProperties = __webpack_require__2(9920);
                  var isForced = __webpack_require__2(4705);
                  module2.exports = function(options, source) {
                    var TARGET = options.target;
                    var GLOBAL = options.global;
                    var STATIC = options.stat;
                    var FORCED, target, key, targetProperty, sourceProperty, descriptor;
                    if (GLOBAL) {
                      target = global2;
                    } else if (STATIC) {
                      target = global2[TARGET] || setGlobal(TARGET, {});
                    } else {
                      target = (global2[TARGET] || {}).prototype;
                    }
                    if (target)
                      for (key in source) {
                        sourceProperty = source[key];
                        if (options.noTargetGet) {
                          descriptor = getOwnPropertyDescriptor(target, key);
                          targetProperty = descriptor && descriptor.value;
                        } else
                          targetProperty = target[key];
                        FORCED = isForced(GLOBAL ? key : TARGET + (STATIC ? "." : "#") + key, options.forced);
                        if (!FORCED && targetProperty !== void 0) {
                          if (typeof sourceProperty === typeof targetProperty)
                            continue;
                          copyConstructorProperties(sourceProperty, targetProperty);
                        }
                        if (options.sham || targetProperty && targetProperty.sham) {
                          createNonEnumerableProperty(sourceProperty, "sham", true);
                        }
                        redefine(target, key, sourceProperty, options);
                      }
                  };
                }
              ),
              /***/
              7293: (
                /***/
                function(module2) {
                  module2.exports = function(exec) {
                    try {
                      return !!exec();
                    } catch (error) {
                      return true;
                    }
                  };
                }
              ),
              /***/
              7007: (
                /***/
                function(module2, __unused_webpack_exports, __webpack_require__2) {
                  "use strict";
                  __webpack_require__2(4916);
                  var redefine = __webpack_require__2(1320);
                  var fails = __webpack_require__2(7293);
                  var wellKnownSymbol = __webpack_require__2(5112);
                  var regexpExec = __webpack_require__2(2261);
                  var createNonEnumerableProperty = __webpack_require__2(8880);
                  var SPECIES = wellKnownSymbol("species");
                  var REPLACE_SUPPORTS_NAMED_GROUPS = !fails(function() {
                    var re = /./;
                    re.exec = function() {
                      var result = [];
                      result.groups = { a: "7" };
                      return result;
                    };
                    return "".replace(re, "$<a>") !== "7";
                  });
                  var REPLACE_KEEPS_$0 = function() {
                    return "a".replace(/./, "$0") === "$0";
                  }();
                  var REPLACE = wellKnownSymbol("replace");
                  var REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE = function() {
                    if (/./[REPLACE]) {
                      return /./[REPLACE]("a", "$0") === "";
                    }
                    return false;
                  }();
                  var SPLIT_WORKS_WITH_OVERWRITTEN_EXEC = !fails(function() {
                    var re = /(?:)/;
                    var originalExec = re.exec;
                    re.exec = function() {
                      return originalExec.apply(this, arguments);
                    };
                    var result = "ab".split(re);
                    return result.length !== 2 || result[0] !== "a" || result[1] !== "b";
                  });
                  module2.exports = function(KEY, length, exec, sham) {
                    var SYMBOL = wellKnownSymbol(KEY);
                    var DELEGATES_TO_SYMBOL = !fails(function() {
                      var O = {};
                      O[SYMBOL] = function() {
                        return 7;
                      };
                      return ""[KEY](O) != 7;
                    });
                    var DELEGATES_TO_EXEC = DELEGATES_TO_SYMBOL && !fails(function() {
                      var execCalled = false;
                      var re = /a/;
                      if (KEY === "split") {
                        re = {};
                        re.constructor = {};
                        re.constructor[SPECIES] = function() {
                          return re;
                        };
                        re.flags = "";
                        re[SYMBOL] = /./[SYMBOL];
                      }
                      re.exec = function() {
                        execCalled = true;
                        return null;
                      };
                      re[SYMBOL]("");
                      return !execCalled;
                    });
                    if (!DELEGATES_TO_SYMBOL || !DELEGATES_TO_EXEC || KEY === "replace" && !(REPLACE_SUPPORTS_NAMED_GROUPS && REPLACE_KEEPS_$0 && !REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE) || KEY === "split" && !SPLIT_WORKS_WITH_OVERWRITTEN_EXEC) {
                      var nativeRegExpMethod = /./[SYMBOL];
                      var methods = exec(SYMBOL, ""[KEY], function(nativeMethod, regexp, str, arg2, forceStringMethod) {
                        if (regexp.exec === regexpExec) {
                          if (DELEGATES_TO_SYMBOL && !forceStringMethod) {
                            return { done: true, value: nativeRegExpMethod.call(regexp, str, arg2) };
                          }
                          return { done: true, value: nativeMethod.call(str, regexp, arg2) };
                        }
                        return { done: false };
                      }, {
                        REPLACE_KEEPS_$0,
                        REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE
                      });
                      var stringMethod = methods[0];
                      var regexMethod = methods[1];
                      redefine(String.prototype, KEY, stringMethod);
                      redefine(
                        RegExp.prototype,
                        SYMBOL,
                        length == 2 ? function(string, arg) {
                          return regexMethod.call(string, this, arg);
                        } : function(string) {
                          return regexMethod.call(string, this);
                        }
                      );
                    }
                    if (sham)
                      createNonEnumerableProperty(RegExp.prototype[SYMBOL], "sham", true);
                  };
                }
              ),
              /***/
              9974: (
                /***/
                function(module2, __unused_webpack_exports, __webpack_require__2) {
                  var aFunction = __webpack_require__2(3099);
                  module2.exports = function(fn, that, length) {
                    aFunction(fn);
                    if (that === void 0)
                      return fn;
                    switch (length) {
                      case 0:
                        return function() {
                          return fn.call(that);
                        };
                      case 1:
                        return function(a) {
                          return fn.call(that, a);
                        };
                      case 2:
                        return function(a, b) {
                          return fn.call(that, a, b);
                        };
                      case 3:
                        return function(a, b, c) {
                          return fn.call(that, a, b, c);
                        };
                    }
                    return function() {
                      return fn.apply(that, arguments);
                    };
                  };
                }
              ),
              /***/
              5005: (
                /***/
                function(module2, __unused_webpack_exports, __webpack_require__2) {
                  var path = __webpack_require__2(857);
                  var global2 = __webpack_require__2(7854);
                  var aFunction = function(variable) {
                    return typeof variable == "function" ? variable : void 0;
                  };
                  module2.exports = function(namespace, method) {
                    return arguments.length < 2 ? aFunction(path[namespace]) || aFunction(global2[namespace]) : path[namespace] && path[namespace][method] || global2[namespace] && global2[namespace][method];
                  };
                }
              ),
              /***/
              1246: (
                /***/
                function(module2, __unused_webpack_exports, __webpack_require__2) {
                  var classof = __webpack_require__2(648);
                  var Iterators = __webpack_require__2(7497);
                  var wellKnownSymbol = __webpack_require__2(5112);
                  var ITERATOR = wellKnownSymbol("iterator");
                  module2.exports = function(it) {
                    if (it != void 0)
                      return it[ITERATOR] || it["@@iterator"] || Iterators[classof(it)];
                  };
                }
              ),
              /***/
              8554: (
                /***/
                function(module2, __unused_webpack_exports, __webpack_require__2) {
                  var anObject = __webpack_require__2(9670);
                  var getIteratorMethod = __webpack_require__2(1246);
                  module2.exports = function(it) {
                    var iteratorMethod = getIteratorMethod(it);
                    if (typeof iteratorMethod != "function") {
                      throw TypeError(String(it) + " is not iterable");
                    }
                    return anObject(iteratorMethod.call(it));
                  };
                }
              ),
              /***/
              647: (
                /***/
                function(module2, __unused_webpack_exports, __webpack_require__2) {
                  var toObject = __webpack_require__2(7908);
                  var floor = Math.floor;
                  var replace = "".replace;
                  var SUBSTITUTION_SYMBOLS = /\$([$&'`]|\d\d?|<[^>]*>)/g;
                  var SUBSTITUTION_SYMBOLS_NO_NAMED = /\$([$&'`]|\d\d?)/g;
                  module2.exports = function(matched, str, position, captures, namedCaptures, replacement) {
                    var tailPos = position + matched.length;
                    var m = captures.length;
                    var symbols = SUBSTITUTION_SYMBOLS_NO_NAMED;
                    if (namedCaptures !== void 0) {
                      namedCaptures = toObject(namedCaptures);
                      symbols = SUBSTITUTION_SYMBOLS;
                    }
                    return replace.call(replacement, symbols, function(match, ch) {
                      var capture;
                      switch (ch.charAt(0)) {
                        case "$":
                          return "$";
                        case "&":
                          return matched;
                        case "`":
                          return str.slice(0, position);
                        case "'":
                          return str.slice(tailPos);
                        case "<":
                          capture = namedCaptures[ch.slice(1, -1)];
                          break;
                        default:
                          var n = +ch;
                          if (n === 0)
                            return match;
                          if (n > m) {
                            var f = floor(n / 10);
                            if (f === 0)
                              return match;
                            if (f <= m)
                              return captures[f - 1] === void 0 ? ch.charAt(1) : captures[f - 1] + ch.charAt(1);
                            return match;
                          }
                          capture = captures[n - 1];
                      }
                      return capture === void 0 ? "" : capture;
                    });
                  };
                }
              ),
              /***/
              7854: (
                /***/
                function(module2, __unused_webpack_exports, __webpack_require__2) {
                  var check = function(it) {
                    return it && it.Math == Math && it;
                  };
                  module2.exports = /* global globalThis -- safe */
                  check(typeof globalThis == "object" && globalThis) || check(typeof window == "object" && window) || check(typeof self == "object" && self) || check(typeof __webpack_require__2.g == "object" && __webpack_require__2.g) || // eslint-disable-next-line no-new-func -- fallback
                  /* @__PURE__ */ function() {
                    return this;
                  }() || Function("return this")();
                }
              ),
              /***/
              6656: (
                /***/
                function(module2) {
                  var hasOwnProperty = {}.hasOwnProperty;
                  module2.exports = function(it, key) {
                    return hasOwnProperty.call(it, key);
                  };
                }
              ),
              /***/
              3501: (
                /***/
                function(module2) {
                  module2.exports = {};
                }
              ),
              /***/
              490: (
                /***/
                function(module2, __unused_webpack_exports, __webpack_require__2) {
                  var getBuiltIn = __webpack_require__2(5005);
                  module2.exports = getBuiltIn("document", "documentElement");
                }
              ),
              /***/
              4664: (
                /***/
                function(module2, __unused_webpack_exports, __webpack_require__2) {
                  var DESCRIPTORS = __webpack_require__2(9781);
                  var fails = __webpack_require__2(7293);
                  var createElement = __webpack_require__2(317);
                  module2.exports = !DESCRIPTORS && !fails(function() {
                    return Object.defineProperty(createElement("div"), "a", {
                      get: function() {
                        return 7;
                      }
                    }).a != 7;
                  });
                }
              ),
              /***/
              1179: (
                /***/
                function(module2) {
                  var abs = Math.abs;
                  var pow = Math.pow;
                  var floor = Math.floor;
                  var log = Math.log;
                  var LN2 = Math.LN2;
                  var pack = function(number, mantissaLength, bytes) {
                    var buffer = new Array(bytes);
                    var exponentLength = bytes * 8 - mantissaLength - 1;
                    var eMax = (1 << exponentLength) - 1;
                    var eBias = eMax >> 1;
                    var rt = mantissaLength === 23 ? pow(2, -24) - pow(2, -77) : 0;
                    var sign = number < 0 || number === 0 && 1 / number < 0 ? 1 : 0;
                    var index = 0;
                    var exponent, mantissa, c;
                    number = abs(number);
                    if (number != number || number === Infinity) {
                      mantissa = number != number ? 1 : 0;
                      exponent = eMax;
                    } else {
                      exponent = floor(log(number) / LN2);
                      if (number * (c = pow(2, -exponent)) < 1) {
                        exponent--;
                        c *= 2;
                      }
                      if (exponent + eBias >= 1) {
                        number += rt / c;
                      } else {
                        number += rt * pow(2, 1 - eBias);
                      }
                      if (number * c >= 2) {
                        exponent++;
                        c /= 2;
                      }
                      if (exponent + eBias >= eMax) {
                        mantissa = 0;
                        exponent = eMax;
                      } else if (exponent + eBias >= 1) {
                        mantissa = (number * c - 1) * pow(2, mantissaLength);
                        exponent = exponent + eBias;
                      } else {
                        mantissa = number * pow(2, eBias - 1) * pow(2, mantissaLength);
                        exponent = 0;
                      }
                    }
                    for (; mantissaLength >= 8; buffer[index++] = mantissa & 255, mantissa /= 256, mantissaLength -= 8)
                      ;
                    exponent = exponent << mantissaLength | mantissa;
                    exponentLength += mantissaLength;
                    for (; exponentLength > 0; buffer[index++] = exponent & 255, exponent /= 256, exponentLength -= 8)
                      ;
                    buffer[--index] |= sign * 128;
                    return buffer;
                  };
                  var unpack = function(buffer, mantissaLength) {
                    var bytes = buffer.length;
                    var exponentLength = bytes * 8 - mantissaLength - 1;
                    var eMax = (1 << exponentLength) - 1;
                    var eBias = eMax >> 1;
                    var nBits = exponentLength - 7;
                    var index = bytes - 1;
                    var sign = buffer[index--];
                    var exponent = sign & 127;
                    var mantissa;
                    sign >>= 7;
                    for (; nBits > 0; exponent = exponent * 256 + buffer[index], index--, nBits -= 8)
                      ;
                    mantissa = exponent & (1 << -nBits) - 1;
                    exponent >>= -nBits;
                    nBits += mantissaLength;
                    for (; nBits > 0; mantissa = mantissa * 256 + buffer[index], index--, nBits -= 8)
                      ;
                    if (exponent === 0) {
                      exponent = 1 - eBias;
                    } else if (exponent === eMax) {
                      return mantissa ? NaN : sign ? -Infinity : Infinity;
                    } else {
                      mantissa = mantissa + pow(2, mantissaLength);
                      exponent = exponent - eBias;
                    }
                    return (sign ? -1 : 1) * mantissa * pow(2, exponent - mantissaLength);
                  };
                  module2.exports = {
                    pack,
                    unpack
                  };
                }
              ),
              /***/
              8361: (
                /***/
                function(module2, __unused_webpack_exports, __webpack_require__2) {
                  var fails = __webpack_require__2(7293);
                  var classof = __webpack_require__2(4326);
                  var split = "".split;
                  module2.exports = fails(function() {
                    return !Object("z").propertyIsEnumerable(0);
                  }) ? function(it) {
                    return classof(it) == "String" ? split.call(it, "") : Object(it);
                  } : Object;
                }
              ),
              /***/
              9587: (
                /***/
                function(module2, __unused_webpack_exports, __webpack_require__2) {
                  var isObject = __webpack_require__2(111);
                  var setPrototypeOf = __webpack_require__2(7674);
                  module2.exports = function($this, dummy, Wrapper) {
                    var NewTarget, NewTargetPrototype;
                    if (
                      // it can work only with native `setPrototypeOf`
                      setPrototypeOf && // we haven't completely correct pre-ES6 way for getting `new.target`, so use this
                      typeof (NewTarget = dummy.constructor) == "function" && NewTarget !== Wrapper && isObject(NewTargetPrototype = NewTarget.prototype) && NewTargetPrototype !== Wrapper.prototype
                    )
                      setPrototypeOf($this, NewTargetPrototype);
                    return $this;
                  };
                }
              ),
              /***/
              2788: (
                /***/
                function(module2, __unused_webpack_exports, __webpack_require__2) {
                  var store = __webpack_require__2(5465);
                  var functionToString = Function.toString;
                  if (typeof store.inspectSource != "function") {
                    store.inspectSource = function(it) {
                      return functionToString.call(it);
                    };
                  }
                  module2.exports = store.inspectSource;
                }
              ),
              /***/
              9909: (
                /***/
                function(module2, __unused_webpack_exports, __webpack_require__2) {
                  var NATIVE_WEAK_MAP = __webpack_require__2(8536);
                  var global2 = __webpack_require__2(7854);
                  var isObject = __webpack_require__2(111);
                  var createNonEnumerableProperty = __webpack_require__2(8880);
                  var objectHas = __webpack_require__2(6656);
                  var shared = __webpack_require__2(5465);
                  var sharedKey = __webpack_require__2(6200);
                  var hiddenKeys = __webpack_require__2(3501);
                  var WeakMap2 = global2.WeakMap;
                  var set, get, has;
                  var enforce = function(it) {
                    return has(it) ? get(it) : set(it, {});
                  };
                  var getterFor = function(TYPE) {
                    return function(it) {
                      var state;
                      if (!isObject(it) || (state = get(it)).type !== TYPE) {
                        throw TypeError("Incompatible receiver, " + TYPE + " required");
                      }
                      return state;
                    };
                  };
                  if (NATIVE_WEAK_MAP) {
                    var store = shared.state || (shared.state = new WeakMap2());
                    var wmget = store.get;
                    var wmhas = store.has;
                    var wmset = store.set;
                    set = function(it, metadata) {
                      metadata.facade = it;
                      wmset.call(store, it, metadata);
                      return metadata;
                    };
                    get = function(it) {
                      return wmget.call(store, it) || {};
                    };
                    has = function(it) {
                      return wmhas.call(store, it);
                    };
                  } else {
                    var STATE = sharedKey("state");
                    hiddenKeys[STATE] = true;
                    set = function(it, metadata) {
                      metadata.facade = it;
                      createNonEnumerableProperty(it, STATE, metadata);
                      return metadata;
                    };
                    get = function(it) {
                      return objectHas(it, STATE) ? it[STATE] : {};
                    };
                    has = function(it) {
                      return objectHas(it, STATE);
                    };
                  }
                  module2.exports = {
                    set,
                    get,
                    has,
                    enforce,
                    getterFor
                  };
                }
              ),
              /***/
              7659: (
                /***/
                function(module2, __unused_webpack_exports, __webpack_require__2) {
                  var wellKnownSymbol = __webpack_require__2(5112);
                  var Iterators = __webpack_require__2(7497);
                  var ITERATOR = wellKnownSymbol("iterator");
                  var ArrayPrototype = Array.prototype;
                  module2.exports = function(it) {
                    return it !== void 0 && (Iterators.Array === it || ArrayPrototype[ITERATOR] === it);
                  };
                }
              ),
              /***/
              3157: (
                /***/
                function(module2, __unused_webpack_exports, __webpack_require__2) {
                  var classof = __webpack_require__2(4326);
                  module2.exports = Array.isArray || function isArray(arg) {
                    return classof(arg) == "Array";
                  };
                }
              ),
              /***/
              4705: (
                /***/
                function(module2, __unused_webpack_exports, __webpack_require__2) {
                  var fails = __webpack_require__2(7293);
                  var replacement = /#|\.prototype\./;
                  var isForced = function(feature, detection) {
                    var value = data[normalize(feature)];
                    return value == POLYFILL ? true : value == NATIVE ? false : typeof detection == "function" ? fails(detection) : !!detection;
                  };
                  var normalize = isForced.normalize = function(string) {
                    return String(string).replace(replacement, ".").toLowerCase();
                  };
                  var data = isForced.data = {};
                  var NATIVE = isForced.NATIVE = "N";
                  var POLYFILL = isForced.POLYFILL = "P";
                  module2.exports = isForced;
                }
              ),
              /***/
              111: (
                /***/
                function(module2) {
                  module2.exports = function(it) {
                    return typeof it === "object" ? it !== null : typeof it === "function";
                  };
                }
              ),
              /***/
              1913: (
                /***/
                function(module2) {
                  module2.exports = false;
                }
              ),
              /***/
              7850: (
                /***/
                function(module2, __unused_webpack_exports, __webpack_require__2) {
                  var isObject = __webpack_require__2(111);
                  var classof = __webpack_require__2(4326);
                  var wellKnownSymbol = __webpack_require__2(5112);
                  var MATCH = wellKnownSymbol("match");
                  module2.exports = function(it) {
                    var isRegExp;
                    return isObject(it) && ((isRegExp = it[MATCH]) !== void 0 ? !!isRegExp : classof(it) == "RegExp");
                  };
                }
              ),
              /***/
              9212: (
                /***/
                function(module2, __unused_webpack_exports, __webpack_require__2) {
                  var anObject = __webpack_require__2(9670);
                  module2.exports = function(iterator) {
                    var returnMethod = iterator["return"];
                    if (returnMethod !== void 0) {
                      return anObject(returnMethod.call(iterator)).value;
                    }
                  };
                }
              ),
              /***/
              3383: (
                /***/
                function(module2, __unused_webpack_exports, __webpack_require__2) {
                  "use strict";
                  var fails = __webpack_require__2(7293);
                  var getPrototypeOf = __webpack_require__2(9518);
                  var createNonEnumerableProperty = __webpack_require__2(8880);
                  var has = __webpack_require__2(6656);
                  var wellKnownSymbol = __webpack_require__2(5112);
                  var IS_PURE = __webpack_require__2(1913);
                  var ITERATOR = wellKnownSymbol("iterator");
                  var BUGGY_SAFARI_ITERATORS = false;
                  var returnThis = function() {
                    return this;
                  };
                  var IteratorPrototype, PrototypeOfArrayIteratorPrototype, arrayIterator;
                  if ([].keys) {
                    arrayIterator = [].keys();
                    if (!("next" in arrayIterator))
                      BUGGY_SAFARI_ITERATORS = true;
                    else {
                      PrototypeOfArrayIteratorPrototype = getPrototypeOf(getPrototypeOf(arrayIterator));
                      if (PrototypeOfArrayIteratorPrototype !== Object.prototype)
                        IteratorPrototype = PrototypeOfArrayIteratorPrototype;
                    }
                  }
                  var NEW_ITERATOR_PROTOTYPE = IteratorPrototype == void 0 || fails(function() {
                    var test = {};
                    return IteratorPrototype[ITERATOR].call(test) !== test;
                  });
                  if (NEW_ITERATOR_PROTOTYPE)
                    IteratorPrototype = {};
                  if ((!IS_PURE || NEW_ITERATOR_PROTOTYPE) && !has(IteratorPrototype, ITERATOR)) {
                    createNonEnumerableProperty(IteratorPrototype, ITERATOR, returnThis);
                  }
                  module2.exports = {
                    IteratorPrototype,
                    BUGGY_SAFARI_ITERATORS
                  };
                }
              ),
              /***/
              7497: (
                /***/
                function(module2) {
                  module2.exports = {};
                }
              ),
              /***/
              133: (
                /***/
                function(module2, __unused_webpack_exports, __webpack_require__2) {
                  var fails = __webpack_require__2(7293);
                  module2.exports = !!Object.getOwnPropertySymbols && !fails(function() {
                    return !String(Symbol());
                  });
                }
              ),
              /***/
              590: (
                /***/
                function(module2, __unused_webpack_exports, __webpack_require__2) {
                  var fails = __webpack_require__2(7293);
                  var wellKnownSymbol = __webpack_require__2(5112);
                  var IS_PURE = __webpack_require__2(1913);
                  var ITERATOR = wellKnownSymbol("iterator");
                  module2.exports = !fails(function() {
                    var url = new URL("b?a=1&b=2&c=3", "http://a");
                    var searchParams = url.searchParams;
                    var result = "";
                    url.pathname = "c%20d";
                    searchParams.forEach(function(value, key) {
                      searchParams["delete"]("b");
                      result += key + value;
                    });
                    return IS_PURE && !url.toJSON || !searchParams.sort || url.href !== "http://a/c%20d?a=1&c=3" || searchParams.get("c") !== "3" || String(new URLSearchParams("?a=1")) !== "a=1" || !searchParams[ITERATOR] || new URL("https://a@b").username !== "a" || new URLSearchParams(new URLSearchParams("a=b")).get("a") !== "b" || new URL("http://\u0442\u0435\u0441\u0442").host !== "xn--e1aybc" || new URL("http://a#\u0431").hash !== "#%D0%B1" || result !== "a1c3" || new URL("http://x", void 0).host !== "x";
                  });
                }
              ),
              /***/
              8536: (
                /***/
                function(module2, __unused_webpack_exports, __webpack_require__2) {
                  var global2 = __webpack_require__2(7854);
                  var inspectSource = __webpack_require__2(2788);
                  var WeakMap2 = global2.WeakMap;
                  module2.exports = typeof WeakMap2 === "function" && /native code/.test(inspectSource(WeakMap2));
                }
              ),
              /***/
              1574: (
                /***/
                function(module2, __unused_webpack_exports, __webpack_require__2) {
                  "use strict";
                  var DESCRIPTORS = __webpack_require__2(9781);
                  var fails = __webpack_require__2(7293);
                  var objectKeys = __webpack_require__2(1956);
                  var getOwnPropertySymbolsModule = __webpack_require__2(5181);
                  var propertyIsEnumerableModule = __webpack_require__2(5296);
                  var toObject = __webpack_require__2(7908);
                  var IndexedObject = __webpack_require__2(8361);
                  var nativeAssign = Object.assign;
                  var defineProperty = Object.defineProperty;
                  module2.exports = !nativeAssign || fails(function() {
                    if (DESCRIPTORS && nativeAssign({ b: 1 }, nativeAssign(defineProperty({}, "a", {
                      enumerable: true,
                      get: function() {
                        defineProperty(this, "b", {
                          value: 3,
                          enumerable: false
                        });
                      }
                    }), { b: 2 })).b !== 1)
                      return true;
                    var A = {};
                    var B = {};
                    var symbol = Symbol();
                    var alphabet = "abcdefghijklmnopqrst";
                    A[symbol] = 7;
                    alphabet.split("").forEach(function(chr) {
                      B[chr] = chr;
                    });
                    return nativeAssign({}, A)[symbol] != 7 || objectKeys(nativeAssign({}, B)).join("") != alphabet;
                  }) ? function assign(target, source) {
                    var T = toObject(target);
                    var argumentsLength = arguments.length;
                    var index = 1;
                    var getOwnPropertySymbols = getOwnPropertySymbolsModule.f;
                    var propertyIsEnumerable = propertyIsEnumerableModule.f;
                    while (argumentsLength > index) {
                      var S = IndexedObject(arguments[index++]);
                      var keys = getOwnPropertySymbols ? objectKeys(S).concat(getOwnPropertySymbols(S)) : objectKeys(S);
                      var length = keys.length;
                      var j = 0;
                      var key;
                      while (length > j) {
                        key = keys[j++];
                        if (!DESCRIPTORS || propertyIsEnumerable.call(S, key))
                          T[key] = S[key];
                      }
                    }
                    return T;
                  } : nativeAssign;
                }
              ),
              /***/
              30: (
                /***/
                function(module2, __unused_webpack_exports, __webpack_require__2) {
                  var anObject = __webpack_require__2(9670);
                  var defineProperties = __webpack_require__2(6048);
                  var enumBugKeys = __webpack_require__2(748);
                  var hiddenKeys = __webpack_require__2(3501);
                  var html = __webpack_require__2(490);
                  var documentCreateElement = __webpack_require__2(317);
                  var sharedKey = __webpack_require__2(6200);
                  var GT = ">";
                  var LT = "<";
                  var PROTOTYPE = "prototype";
                  var SCRIPT = "script";
                  var IE_PROTO = sharedKey("IE_PROTO");
                  var EmptyConstructor = function() {
                  };
                  var scriptTag = function(content) {
                    return LT + SCRIPT + GT + content + LT + "/" + SCRIPT + GT;
                  };
                  var NullProtoObjectViaActiveX = function(activeXDocument2) {
                    activeXDocument2.write(scriptTag(""));
                    activeXDocument2.close();
                    var temp = activeXDocument2.parentWindow.Object;
                    activeXDocument2 = null;
                    return temp;
                  };
                  var NullProtoObjectViaIFrame = function() {
                    var iframe = documentCreateElement("iframe");
                    var JS = "java" + SCRIPT + ":";
                    var iframeDocument;
                    iframe.style.display = "none";
                    html.appendChild(iframe);
                    iframe.src = String(JS);
                    iframeDocument = iframe.contentWindow.document;
                    iframeDocument.open();
                    iframeDocument.write(scriptTag("document.F=Object"));
                    iframeDocument.close();
                    return iframeDocument.F;
                  };
                  var activeXDocument;
                  var NullProtoObject = function() {
                    try {
                      activeXDocument = document.domain && new ActiveXObject("htmlfile");
                    } catch (error) {
                    }
                    NullProtoObject = activeXDocument ? NullProtoObjectViaActiveX(activeXDocument) : NullProtoObjectViaIFrame();
                    var length = enumBugKeys.length;
                    while (length--)
                      delete NullProtoObject[PROTOTYPE][enumBugKeys[length]];
                    return NullProtoObject();
                  };
                  hiddenKeys[IE_PROTO] = true;
                  module2.exports = Object.create || function create(O, Properties) {
                    var result;
                    if (O !== null) {
                      EmptyConstructor[PROTOTYPE] = anObject(O);
                      result = new EmptyConstructor();
                      EmptyConstructor[PROTOTYPE] = null;
                      result[IE_PROTO] = O;
                    } else
                      result = NullProtoObject();
                    return Properties === void 0 ? result : defineProperties(result, Properties);
                  };
                }
              ),
              /***/
              6048: (
                /***/
                function(module2, __unused_webpack_exports, __webpack_require__2) {
                  var DESCRIPTORS = __webpack_require__2(9781);
                  var definePropertyModule = __webpack_require__2(3070);
                  var anObject = __webpack_require__2(9670);
                  var objectKeys = __webpack_require__2(1956);
                  module2.exports = DESCRIPTORS ? Object.defineProperties : function defineProperties(O, Properties) {
                    anObject(O);
                    var keys = objectKeys(Properties);
                    var length = keys.length;
                    var index = 0;
                    var key;
                    while (length > index)
                      definePropertyModule.f(O, key = keys[index++], Properties[key]);
                    return O;
                  };
                }
              ),
              /***/
              3070: (
                /***/
                function(__unused_webpack_module, exports2, __webpack_require__2) {
                  var DESCRIPTORS = __webpack_require__2(9781);
                  var IE8_DOM_DEFINE = __webpack_require__2(4664);
                  var anObject = __webpack_require__2(9670);
                  var toPrimitive = __webpack_require__2(7593);
                  var nativeDefineProperty = Object.defineProperty;
                  exports2.f = DESCRIPTORS ? nativeDefineProperty : function defineProperty(O, P, Attributes) {
                    anObject(O);
                    P = toPrimitive(P, true);
                    anObject(Attributes);
                    if (IE8_DOM_DEFINE)
                      try {
                        return nativeDefineProperty(O, P, Attributes);
                      } catch (error) {
                      }
                    if ("get" in Attributes || "set" in Attributes)
                      throw TypeError("Accessors not supported");
                    if ("value" in Attributes)
                      O[P] = Attributes.value;
                    return O;
                  };
                }
              ),
              /***/
              1236: (
                /***/
                function(__unused_webpack_module, exports2, __webpack_require__2) {
                  var DESCRIPTORS = __webpack_require__2(9781);
                  var propertyIsEnumerableModule = __webpack_require__2(5296);
                  var createPropertyDescriptor = __webpack_require__2(9114);
                  var toIndexedObject = __webpack_require__2(5656);
                  var toPrimitive = __webpack_require__2(7593);
                  var has = __webpack_require__2(6656);
                  var IE8_DOM_DEFINE = __webpack_require__2(4664);
                  var nativeGetOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
                  exports2.f = DESCRIPTORS ? nativeGetOwnPropertyDescriptor : function getOwnPropertyDescriptor(O, P) {
                    O = toIndexedObject(O);
                    P = toPrimitive(P, true);
                    if (IE8_DOM_DEFINE)
                      try {
                        return nativeGetOwnPropertyDescriptor(O, P);
                      } catch (error) {
                      }
                    if (has(O, P))
                      return createPropertyDescriptor(!propertyIsEnumerableModule.f.call(O, P), O[P]);
                  };
                }
              ),
              /***/
              8006: (
                /***/
                function(__unused_webpack_module, exports2, __webpack_require__2) {
                  var internalObjectKeys = __webpack_require__2(6324);
                  var enumBugKeys = __webpack_require__2(748);
                  var hiddenKeys = enumBugKeys.concat("length", "prototype");
                  exports2.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
                    return internalObjectKeys(O, hiddenKeys);
                  };
                }
              ),
              /***/
              5181: (
                /***/
                function(__unused_webpack_module, exports2) {
                  exports2.f = Object.getOwnPropertySymbols;
                }
              ),
              /***/
              9518: (
                /***/
                function(module2, __unused_webpack_exports, __webpack_require__2) {
                  var has = __webpack_require__2(6656);
                  var toObject = __webpack_require__2(7908);
                  var sharedKey = __webpack_require__2(6200);
                  var CORRECT_PROTOTYPE_GETTER = __webpack_require__2(8544);
                  var IE_PROTO = sharedKey("IE_PROTO");
                  var ObjectPrototype = Object.prototype;
                  module2.exports = CORRECT_PROTOTYPE_GETTER ? Object.getPrototypeOf : function(O) {
                    O = toObject(O);
                    if (has(O, IE_PROTO))
                      return O[IE_PROTO];
                    if (typeof O.constructor == "function" && O instanceof O.constructor) {
                      return O.constructor.prototype;
                    }
                    return O instanceof Object ? ObjectPrototype : null;
                  };
                }
              ),
              /***/
              6324: (
                /***/
                function(module2, __unused_webpack_exports, __webpack_require__2) {
                  var has = __webpack_require__2(6656);
                  var toIndexedObject = __webpack_require__2(5656);
                  var indexOf = __webpack_require__2(1318).indexOf;
                  var hiddenKeys = __webpack_require__2(3501);
                  module2.exports = function(object, names) {
                    var O = toIndexedObject(object);
                    var i = 0;
                    var result = [];
                    var key;
                    for (key in O)
                      !has(hiddenKeys, key) && has(O, key) && result.push(key);
                    while (names.length > i)
                      if (has(O, key = names[i++])) {
                        ~indexOf(result, key) || result.push(key);
                      }
                    return result;
                  };
                }
              ),
              /***/
              1956: (
                /***/
                function(module2, __unused_webpack_exports, __webpack_require__2) {
                  var internalObjectKeys = __webpack_require__2(6324);
                  var enumBugKeys = __webpack_require__2(748);
                  module2.exports = Object.keys || function keys(O) {
                    return internalObjectKeys(O, enumBugKeys);
                  };
                }
              ),
              /***/
              5296: (
                /***/
                function(__unused_webpack_module, exports2) {
                  "use strict";
                  var nativePropertyIsEnumerable = {}.propertyIsEnumerable;
                  var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
                  var NASHORN_BUG = getOwnPropertyDescriptor && !nativePropertyIsEnumerable.call({ 1: 2 }, 1);
                  exports2.f = NASHORN_BUG ? function propertyIsEnumerable(V) {
                    var descriptor = getOwnPropertyDescriptor(this, V);
                    return !!descriptor && descriptor.enumerable;
                  } : nativePropertyIsEnumerable;
                }
              ),
              /***/
              7674: (
                /***/
                function(module2, __unused_webpack_exports, __webpack_require__2) {
                  var anObject = __webpack_require__2(9670);
                  var aPossiblePrototype = __webpack_require__2(6077);
                  module2.exports = Object.setPrototypeOf || ("__proto__" in {} ? function() {
                    var CORRECT_SETTER = false;
                    var test = {};
                    var setter;
                    try {
                      setter = Object.getOwnPropertyDescriptor(Object.prototype, "__proto__").set;
                      setter.call(test, []);
                      CORRECT_SETTER = test instanceof Array;
                    } catch (error) {
                    }
                    return function setPrototypeOf(O, proto) {
                      anObject(O);
                      aPossiblePrototype(proto);
                      if (CORRECT_SETTER)
                        setter.call(O, proto);
                      else
                        O.__proto__ = proto;
                      return O;
                    };
                  }() : void 0);
                }
              ),
              /***/
              288: (
                /***/
                function(module2, __unused_webpack_exports, __webpack_require__2) {
                  "use strict";
                  var TO_STRING_TAG_SUPPORT = __webpack_require__2(1694);
                  var classof = __webpack_require__2(648);
                  module2.exports = TO_STRING_TAG_SUPPORT ? {}.toString : function toString() {
                    return "[object " + classof(this) + "]";
                  };
                }
              ),
              /***/
              3887: (
                /***/
                function(module2, __unused_webpack_exports, __webpack_require__2) {
                  var getBuiltIn = __webpack_require__2(5005);
                  var getOwnPropertyNamesModule = __webpack_require__2(8006);
                  var getOwnPropertySymbolsModule = __webpack_require__2(5181);
                  var anObject = __webpack_require__2(9670);
                  module2.exports = getBuiltIn("Reflect", "ownKeys") || function ownKeys(it) {
                    var keys = getOwnPropertyNamesModule.f(anObject(it));
                    var getOwnPropertySymbols = getOwnPropertySymbolsModule.f;
                    return getOwnPropertySymbols ? keys.concat(getOwnPropertySymbols(it)) : keys;
                  };
                }
              ),
              /***/
              857: (
                /***/
                function(module2, __unused_webpack_exports, __webpack_require__2) {
                  var global2 = __webpack_require__2(7854);
                  module2.exports = global2;
                }
              ),
              /***/
              2248: (
                /***/
                function(module2, __unused_webpack_exports, __webpack_require__2) {
                  var redefine = __webpack_require__2(1320);
                  module2.exports = function(target, src, options) {
                    for (var key in src)
                      redefine(target, key, src[key], options);
                    return target;
                  };
                }
              ),
              /***/
              1320: (
                /***/
                function(module2, __unused_webpack_exports, __webpack_require__2) {
                  var global2 = __webpack_require__2(7854);
                  var createNonEnumerableProperty = __webpack_require__2(8880);
                  var has = __webpack_require__2(6656);
                  var setGlobal = __webpack_require__2(3505);
                  var inspectSource = __webpack_require__2(2788);
                  var InternalStateModule = __webpack_require__2(9909);
                  var getInternalState = InternalStateModule.get;
                  var enforceInternalState = InternalStateModule.enforce;
                  var TEMPLATE = String(String).split("String");
                  (module2.exports = function(O, key, value, options) {
                    var unsafe = options ? !!options.unsafe : false;
                    var simple = options ? !!options.enumerable : false;
                    var noTargetGet = options ? !!options.noTargetGet : false;
                    var state;
                    if (typeof value == "function") {
                      if (typeof key == "string" && !has(value, "name")) {
                        createNonEnumerableProperty(value, "name", key);
                      }
                      state = enforceInternalState(value);
                      if (!state.source) {
                        state.source = TEMPLATE.join(typeof key == "string" ? key : "");
                      }
                    }
                    if (O === global2) {
                      if (simple)
                        O[key] = value;
                      else
                        setGlobal(key, value);
                      return;
                    } else if (!unsafe) {
                      delete O[key];
                    } else if (!noTargetGet && O[key]) {
                      simple = true;
                    }
                    if (simple)
                      O[key] = value;
                    else
                      createNonEnumerableProperty(O, key, value);
                  })(Function.prototype, "toString", function toString() {
                    return typeof this == "function" && getInternalState(this).source || inspectSource(this);
                  });
                }
              ),
              /***/
              7651: (
                /***/
                function(module2, __unused_webpack_exports, __webpack_require__2) {
                  var classof = __webpack_require__2(4326);
                  var regexpExec = __webpack_require__2(2261);
                  module2.exports = function(R, S) {
                    var exec = R.exec;
                    if (typeof exec === "function") {
                      var result = exec.call(R, S);
                      if (typeof result !== "object") {
                        throw TypeError("RegExp exec method returned something other than an Object or null");
                      }
                      return result;
                    }
                    if (classof(R) !== "RegExp") {
                      throw TypeError("RegExp#exec called on incompatible receiver");
                    }
                    return regexpExec.call(R, S);
                  };
                }
              ),
              /***/
              2261: (
                /***/
                function(module2, __unused_webpack_exports, __webpack_require__2) {
                  "use strict";
                  var regexpFlags = __webpack_require__2(7066);
                  var stickyHelpers = __webpack_require__2(2999);
                  var nativeExec = RegExp.prototype.exec;
                  var nativeReplace = String.prototype.replace;
                  var patchedExec = nativeExec;
                  var UPDATES_LAST_INDEX_WRONG = function() {
                    var re1 = /a/;
                    var re2 = /b*/g;
                    nativeExec.call(re1, "a");
                    nativeExec.call(re2, "a");
                    return re1.lastIndex !== 0 || re2.lastIndex !== 0;
                  }();
                  var UNSUPPORTED_Y = stickyHelpers.UNSUPPORTED_Y || stickyHelpers.BROKEN_CARET;
                  var NPCG_INCLUDED = /()??/.exec("")[1] !== void 0;
                  var PATCH = UPDATES_LAST_INDEX_WRONG || NPCG_INCLUDED || UNSUPPORTED_Y;
                  if (PATCH) {
                    patchedExec = function exec(str) {
                      var re = this;
                      var lastIndex, reCopy, match, i;
                      var sticky = UNSUPPORTED_Y && re.sticky;
                      var flags = regexpFlags.call(re);
                      var source = re.source;
                      var charsAdded = 0;
                      var strCopy = str;
                      if (sticky) {
                        flags = flags.replace("y", "");
                        if (flags.indexOf("g") === -1) {
                          flags += "g";
                        }
                        strCopy = String(str).slice(re.lastIndex);
                        if (re.lastIndex > 0 && (!re.multiline || re.multiline && str[re.lastIndex - 1] !== "\n")) {
                          source = "(?: " + source + ")";
                          strCopy = " " + strCopy;
                          charsAdded++;
                        }
                        reCopy = new RegExp("^(?:" + source + ")", flags);
                      }
                      if (NPCG_INCLUDED) {
                        reCopy = new RegExp("^" + source + "$(?!\\s)", flags);
                      }
                      if (UPDATES_LAST_INDEX_WRONG)
                        lastIndex = re.lastIndex;
                      match = nativeExec.call(sticky ? reCopy : re, strCopy);
                      if (sticky) {
                        if (match) {
                          match.input = match.input.slice(charsAdded);
                          match[0] = match[0].slice(charsAdded);
                          match.index = re.lastIndex;
                          re.lastIndex += match[0].length;
                        } else
                          re.lastIndex = 0;
                      } else if (UPDATES_LAST_INDEX_WRONG && match) {
                        re.lastIndex = re.global ? match.index + match[0].length : lastIndex;
                      }
                      if (NPCG_INCLUDED && match && match.length > 1) {
                        nativeReplace.call(match[0], reCopy, function() {
                          for (i = 1; i < arguments.length - 2; i++) {
                            if (arguments[i] === void 0)
                              match[i] = void 0;
                          }
                        });
                      }
                      return match;
                    };
                  }
                  module2.exports = patchedExec;
                }
              ),
              /***/
              7066: (
                /***/
                function(module2, __unused_webpack_exports, __webpack_require__2) {
                  "use strict";
                  var anObject = __webpack_require__2(9670);
                  module2.exports = function() {
                    var that = anObject(this);
                    var result = "";
                    if (that.global)
                      result += "g";
                    if (that.ignoreCase)
                      result += "i";
                    if (that.multiline)
                      result += "m";
                    if (that.dotAll)
                      result += "s";
                    if (that.unicode)
                      result += "u";
                    if (that.sticky)
                      result += "y";
                    return result;
                  };
                }
              ),
              /***/
              2999: (
                /***/
                function(__unused_webpack_module, exports2, __webpack_require__2) {
                  "use strict";
                  var fails = __webpack_require__2(7293);
                  function RE(s, f) {
                    return RegExp(s, f);
                  }
                  exports2.UNSUPPORTED_Y = fails(function() {
                    var re = RE("a", "y");
                    re.lastIndex = 2;
                    return re.exec("abcd") != null;
                  });
                  exports2.BROKEN_CARET = fails(function() {
                    var re = RE("^r", "gy");
                    re.lastIndex = 2;
                    return re.exec("str") != null;
                  });
                }
              ),
              /***/
              4488: (
                /***/
                function(module2) {
                  module2.exports = function(it) {
                    if (it == void 0)
                      throw TypeError("Can't call method on " + it);
                    return it;
                  };
                }
              ),
              /***/
              3505: (
                /***/
                function(module2, __unused_webpack_exports, __webpack_require__2) {
                  var global2 = __webpack_require__2(7854);
                  var createNonEnumerableProperty = __webpack_require__2(8880);
                  module2.exports = function(key, value) {
                    try {
                      createNonEnumerableProperty(global2, key, value);
                    } catch (error) {
                      global2[key] = value;
                    }
                    return value;
                  };
                }
              ),
              /***/
              6340: (
                /***/
                function(module2, __unused_webpack_exports, __webpack_require__2) {
                  "use strict";
                  var getBuiltIn = __webpack_require__2(5005);
                  var definePropertyModule = __webpack_require__2(3070);
                  var wellKnownSymbol = __webpack_require__2(5112);
                  var DESCRIPTORS = __webpack_require__2(9781);
                  var SPECIES = wellKnownSymbol("species");
                  module2.exports = function(CONSTRUCTOR_NAME) {
                    var Constructor = getBuiltIn(CONSTRUCTOR_NAME);
                    var defineProperty = definePropertyModule.f;
                    if (DESCRIPTORS && Constructor && !Constructor[SPECIES]) {
                      defineProperty(Constructor, SPECIES, {
                        configurable: true,
                        get: function() {
                          return this;
                        }
                      });
                    }
                  };
                }
              ),
              /***/
              8003: (
                /***/
                function(module2, __unused_webpack_exports, __webpack_require__2) {
                  var defineProperty = __webpack_require__2(3070).f;
                  var has = __webpack_require__2(6656);
                  var wellKnownSymbol = __webpack_require__2(5112);
                  var TO_STRING_TAG = wellKnownSymbol("toStringTag");
                  module2.exports = function(it, TAG, STATIC) {
                    if (it && !has(it = STATIC ? it : it.prototype, TO_STRING_TAG)) {
                      defineProperty(it, TO_STRING_TAG, { configurable: true, value: TAG });
                    }
                  };
                }
              ),
              /***/
              6200: (
                /***/
                function(module2, __unused_webpack_exports, __webpack_require__2) {
                  var shared = __webpack_require__2(2309);
                  var uid = __webpack_require__2(9711);
                  var keys = shared("keys");
                  module2.exports = function(key) {
                    return keys[key] || (keys[key] = uid(key));
                  };
                }
              ),
              /***/
              5465: (
                /***/
                function(module2, __unused_webpack_exports, __webpack_require__2) {
                  var global2 = __webpack_require__2(7854);
                  var setGlobal = __webpack_require__2(3505);
                  var SHARED = "__core-js_shared__";
                  var store = global2[SHARED] || setGlobal(SHARED, {});
                  module2.exports = store;
                }
              ),
              /***/
              2309: (
                /***/
                function(module2, __unused_webpack_exports, __webpack_require__2) {
                  var IS_PURE = __webpack_require__2(1913);
                  var store = __webpack_require__2(5465);
                  (module2.exports = function(key, value) {
                    return store[key] || (store[key] = value !== void 0 ? value : {});
                  })("versions", []).push({
                    version: "3.9.0",
                    mode: IS_PURE ? "pure" : "global",
                    copyright: "\xA9 2021 Denis Pushkarev (zloirock.ru)"
                  });
                }
              ),
              /***/
              6707: (
                /***/
                function(module2, __unused_webpack_exports, __webpack_require__2) {
                  var anObject = __webpack_require__2(9670);
                  var aFunction = __webpack_require__2(3099);
                  var wellKnownSymbol = __webpack_require__2(5112);
                  var SPECIES = wellKnownSymbol("species");
                  module2.exports = function(O, defaultConstructor) {
                    var C = anObject(O).constructor;
                    var S;
                    return C === void 0 || (S = anObject(C)[SPECIES]) == void 0 ? defaultConstructor : aFunction(S);
                  };
                }
              ),
              /***/
              8710: (
                /***/
                function(module2, __unused_webpack_exports, __webpack_require__2) {
                  var toInteger = __webpack_require__2(9958);
                  var requireObjectCoercible = __webpack_require__2(4488);
                  var createMethod = function(CONVERT_TO_STRING) {
                    return function($this, pos) {
                      var S = String(requireObjectCoercible($this));
                      var position = toInteger(pos);
                      var size = S.length;
                      var first, second;
                      if (position < 0 || position >= size)
                        return CONVERT_TO_STRING ? "" : void 0;
                      first = S.charCodeAt(position);
                      return first < 55296 || first > 56319 || position + 1 === size || (second = S.charCodeAt(position + 1)) < 56320 || second > 57343 ? CONVERT_TO_STRING ? S.charAt(position) : first : CONVERT_TO_STRING ? S.slice(position, position + 2) : (first - 55296 << 10) + (second - 56320) + 65536;
                    };
                  };
                  module2.exports = {
                    // `String.prototype.codePointAt` method
                    // https://tc39.es/ecma262/#sec-string.prototype.codepointat
                    codeAt: createMethod(false),
                    // `String.prototype.at` method
                    // https://github.com/mathiasbynens/String.prototype.at
                    charAt: createMethod(true)
                  };
                }
              ),
              /***/
              3197: (
                /***/
                function(module2) {
                  "use strict";
                  var maxInt = 2147483647;
                  var base = 36;
                  var tMin = 1;
                  var tMax = 26;
                  var skew = 38;
                  var damp = 700;
                  var initialBias = 72;
                  var initialN = 128;
                  var delimiter = "-";
                  var regexNonASCII = /[^\0-\u007E]/;
                  var regexSeparators = /[.\u3002\uFF0E\uFF61]/g;
                  var OVERFLOW_ERROR = "Overflow: input needs wider integers to process";
                  var baseMinusTMin = base - tMin;
                  var floor = Math.floor;
                  var stringFromCharCode = String.fromCharCode;
                  var ucs2decode = function(string) {
                    var output = [];
                    var counter = 0;
                    var length = string.length;
                    while (counter < length) {
                      var value = string.charCodeAt(counter++);
                      if (value >= 55296 && value <= 56319 && counter < length) {
                        var extra = string.charCodeAt(counter++);
                        if ((extra & 64512) == 56320) {
                          output.push(((value & 1023) << 10) + (extra & 1023) + 65536);
                        } else {
                          output.push(value);
                          counter--;
                        }
                      } else {
                        output.push(value);
                      }
                    }
                    return output;
                  };
                  var digitToBasic = function(digit) {
                    return digit + 22 + 75 * (digit < 26);
                  };
                  var adapt = function(delta, numPoints, firstTime) {
                    var k = 0;
                    delta = firstTime ? floor(delta / damp) : delta >> 1;
                    delta += floor(delta / numPoints);
                    for (; delta > baseMinusTMin * tMax >> 1; k += base) {
                      delta = floor(delta / baseMinusTMin);
                    }
                    return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
                  };
                  var encode = function(input) {
                    var output = [];
                    input = ucs2decode(input);
                    var inputLength = input.length;
                    var n = initialN;
                    var delta = 0;
                    var bias = initialBias;
                    var i, currentValue;
                    for (i = 0; i < input.length; i++) {
                      currentValue = input[i];
                      if (currentValue < 128) {
                        output.push(stringFromCharCode(currentValue));
                      }
                    }
                    var basicLength = output.length;
                    var handledCPCount = basicLength;
                    if (basicLength) {
                      output.push(delimiter);
                    }
                    while (handledCPCount < inputLength) {
                      var m = maxInt;
                      for (i = 0; i < input.length; i++) {
                        currentValue = input[i];
                        if (currentValue >= n && currentValue < m) {
                          m = currentValue;
                        }
                      }
                      var handledCPCountPlusOne = handledCPCount + 1;
                      if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
                        throw RangeError(OVERFLOW_ERROR);
                      }
                      delta += (m - n) * handledCPCountPlusOne;
                      n = m;
                      for (i = 0; i < input.length; i++) {
                        currentValue = input[i];
                        if (currentValue < n && ++delta > maxInt) {
                          throw RangeError(OVERFLOW_ERROR);
                        }
                        if (currentValue == n) {
                          var q = delta;
                          for (var k = base; ; k += base) {
                            var t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;
                            if (q < t)
                              break;
                            var qMinusT = q - t;
                            var baseMinusT = base - t;
                            output.push(stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT)));
                            q = floor(qMinusT / baseMinusT);
                          }
                          output.push(stringFromCharCode(digitToBasic(q)));
                          bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
                          delta = 0;
                          ++handledCPCount;
                        }
                      }
                      ++delta;
                      ++n;
                    }
                    return output.join("");
                  };
                  module2.exports = function(input) {
                    var encoded = [];
                    var labels = input.toLowerCase().replace(regexSeparators, ".").split(".");
                    var i, label;
                    for (i = 0; i < labels.length; i++) {
                      label = labels[i];
                      encoded.push(regexNonASCII.test(label) ? "xn--" + encode(label) : label);
                    }
                    return encoded.join(".");
                  };
                }
              ),
              /***/
              6091: (
                /***/
                function(module2, __unused_webpack_exports, __webpack_require__2) {
                  var fails = __webpack_require__2(7293);
                  var whitespaces = __webpack_require__2(1361);
                  var non = "\u200B\x85\u180E";
                  module2.exports = function(METHOD_NAME) {
                    return fails(function() {
                      return !!whitespaces[METHOD_NAME]() || non[METHOD_NAME]() != non || whitespaces[METHOD_NAME].name !== METHOD_NAME;
                    });
                  };
                }
              ),
              /***/
              3111: (
                /***/
                function(module2, __unused_webpack_exports, __webpack_require__2) {
                  var requireObjectCoercible = __webpack_require__2(4488);
                  var whitespaces = __webpack_require__2(1361);
                  var whitespace = "[" + whitespaces + "]";
                  var ltrim = RegExp("^" + whitespace + whitespace + "*");
                  var rtrim = RegExp(whitespace + whitespace + "*$");
                  var createMethod = function(TYPE) {
                    return function($this) {
                      var string = String(requireObjectCoercible($this));
                      if (TYPE & 1)
                        string = string.replace(ltrim, "");
                      if (TYPE & 2)
                        string = string.replace(rtrim, "");
                      return string;
                    };
                  };
                  module2.exports = {
                    // `String.prototype.{ trimLeft, trimStart }` methods
                    // https://tc39.es/ecma262/#sec-string.prototype.trimstart
                    start: createMethod(1),
                    // `String.prototype.{ trimRight, trimEnd }` methods
                    // https://tc39.es/ecma262/#sec-string.prototype.trimend
                    end: createMethod(2),
                    // `String.prototype.trim` method
                    // https://tc39.es/ecma262/#sec-string.prototype.trim
                    trim: createMethod(3)
                  };
                }
              ),
              /***/
              1400: (
                /***/
                function(module2, __unused_webpack_exports, __webpack_require__2) {
                  var toInteger = __webpack_require__2(9958);
                  var max = Math.max;
                  var min = Math.min;
                  module2.exports = function(index, length) {
                    var integer = toInteger(index);
                    return integer < 0 ? max(integer + length, 0) : min(integer, length);
                  };
                }
              ),
              /***/
              7067: (
                /***/
                function(module2, __unused_webpack_exports, __webpack_require__2) {
                  var toInteger = __webpack_require__2(9958);
                  var toLength = __webpack_require__2(7466);
                  module2.exports = function(it) {
                    if (it === void 0)
                      return 0;
                    var number = toInteger(it);
                    var length = toLength(number);
                    if (number !== length)
                      throw RangeError("Wrong length or index");
                    return length;
                  };
                }
              ),
              /***/
              5656: (
                /***/
                function(module2, __unused_webpack_exports, __webpack_require__2) {
                  var IndexedObject = __webpack_require__2(8361);
                  var requireObjectCoercible = __webpack_require__2(4488);
                  module2.exports = function(it) {
                    return IndexedObject(requireObjectCoercible(it));
                  };
                }
              ),
              /***/
              9958: (
                /***/
                function(module2) {
                  var ceil = Math.ceil;
                  var floor = Math.floor;
                  module2.exports = function(argument) {
                    return isNaN(argument = +argument) ? 0 : (argument > 0 ? floor : ceil)(argument);
                  };
                }
              ),
              /***/
              7466: (
                /***/
                function(module2, __unused_webpack_exports, __webpack_require__2) {
                  var toInteger = __webpack_require__2(9958);
                  var min = Math.min;
                  module2.exports = function(argument) {
                    return argument > 0 ? min(toInteger(argument), 9007199254740991) : 0;
                  };
                }
              ),
              /***/
              7908: (
                /***/
                function(module2, __unused_webpack_exports, __webpack_require__2) {
                  var requireObjectCoercible = __webpack_require__2(4488);
                  module2.exports = function(argument) {
                    return Object(requireObjectCoercible(argument));
                  };
                }
              ),
              /***/
              4590: (
                /***/
                function(module2, __unused_webpack_exports, __webpack_require__2) {
                  var toPositiveInteger = __webpack_require__2(3002);
                  module2.exports = function(it, BYTES) {
                    var offset = toPositiveInteger(it);
                    if (offset % BYTES)
                      throw RangeError("Wrong offset");
                    return offset;
                  };
                }
              ),
              /***/
              3002: (
                /***/
                function(module2, __unused_webpack_exports, __webpack_require__2) {
                  var toInteger = __webpack_require__2(9958);
                  module2.exports = function(it) {
                    var result = toInteger(it);
                    if (result < 0)
                      throw RangeError("The argument can't be less than 0");
                    return result;
                  };
                }
              ),
              /***/
              7593: (
                /***/
                function(module2, __unused_webpack_exports, __webpack_require__2) {
                  var isObject = __webpack_require__2(111);
                  module2.exports = function(input, PREFERRED_STRING) {
                    if (!isObject(input))
                      return input;
                    var fn, val;
                    if (PREFERRED_STRING && typeof (fn = input.toString) == "function" && !isObject(val = fn.call(input)))
                      return val;
                    if (typeof (fn = input.valueOf) == "function" && !isObject(val = fn.call(input)))
                      return val;
                    if (!PREFERRED_STRING && typeof (fn = input.toString) == "function" && !isObject(val = fn.call(input)))
                      return val;
                    throw TypeError("Can't convert object to primitive value");
                  };
                }
              ),
              /***/
              1694: (
                /***/
                function(module2, __unused_webpack_exports, __webpack_require__2) {
                  var wellKnownSymbol = __webpack_require__2(5112);
                  var TO_STRING_TAG = wellKnownSymbol("toStringTag");
                  var test = {};
                  test[TO_STRING_TAG] = "z";
                  module2.exports = String(test) === "[object z]";
                }
              ),
              /***/
              9843: (
                /***/
                function(module2, __unused_webpack_exports, __webpack_require__2) {
                  "use strict";
                  var $2 = __webpack_require__2(2109);
                  var global2 = __webpack_require__2(7854);
                  var DESCRIPTORS = __webpack_require__2(9781);
                  var TYPED_ARRAYS_CONSTRUCTORS_REQUIRES_WRAPPERS = __webpack_require__2(3832);
                  var ArrayBufferViewCore = __webpack_require__2(260);
                  var ArrayBufferModule = __webpack_require__2(3331);
                  var anInstance = __webpack_require__2(5787);
                  var createPropertyDescriptor = __webpack_require__2(9114);
                  var createNonEnumerableProperty = __webpack_require__2(8880);
                  var toLength = __webpack_require__2(7466);
                  var toIndex = __webpack_require__2(7067);
                  var toOffset = __webpack_require__2(4590);
                  var toPrimitive = __webpack_require__2(7593);
                  var has = __webpack_require__2(6656);
                  var classof = __webpack_require__2(648);
                  var isObject = __webpack_require__2(111);
                  var create = __webpack_require__2(30);
                  var setPrototypeOf = __webpack_require__2(7674);
                  var getOwnPropertyNames = __webpack_require__2(8006).f;
                  var typedArrayFrom = __webpack_require__2(7321);
                  var forEach = __webpack_require__2(2092).forEach;
                  var setSpecies = __webpack_require__2(6340);
                  var definePropertyModule = __webpack_require__2(3070);
                  var getOwnPropertyDescriptorModule = __webpack_require__2(1236);
                  var InternalStateModule = __webpack_require__2(9909);
                  var inheritIfRequired = __webpack_require__2(9587);
                  var getInternalState = InternalStateModule.get;
                  var setInternalState = InternalStateModule.set;
                  var nativeDefineProperty = definePropertyModule.f;
                  var nativeGetOwnPropertyDescriptor = getOwnPropertyDescriptorModule.f;
                  var round = Math.round;
                  var RangeError2 = global2.RangeError;
                  var ArrayBuffer2 = ArrayBufferModule.ArrayBuffer;
                  var DataView2 = ArrayBufferModule.DataView;
                  var NATIVE_ARRAY_BUFFER_VIEWS = ArrayBufferViewCore.NATIVE_ARRAY_BUFFER_VIEWS;
                  var TYPED_ARRAY_TAG = ArrayBufferViewCore.TYPED_ARRAY_TAG;
                  var TypedArray = ArrayBufferViewCore.TypedArray;
                  var TypedArrayPrototype = ArrayBufferViewCore.TypedArrayPrototype;
                  var aTypedArrayConstructor = ArrayBufferViewCore.aTypedArrayConstructor;
                  var isTypedArray = ArrayBufferViewCore.isTypedArray;
                  var BYTES_PER_ELEMENT = "BYTES_PER_ELEMENT";
                  var WRONG_LENGTH = "Wrong length";
                  var fromList = function(C, list) {
                    var index = 0;
                    var length = list.length;
                    var result = new (aTypedArrayConstructor(C))(length);
                    while (length > index)
                      result[index] = list[index++];
                    return result;
                  };
                  var addGetter = function(it, key) {
                    nativeDefineProperty(it, key, { get: function() {
                      return getInternalState(this)[key];
                    } });
                  };
                  var isArrayBuffer = function(it) {
                    var klass;
                    return it instanceof ArrayBuffer2 || (klass = classof(it)) == "ArrayBuffer" || klass == "SharedArrayBuffer";
                  };
                  var isTypedArrayIndex = function(target, key) {
                    return isTypedArray(target) && typeof key != "symbol" && key in target && String(+key) == String(key);
                  };
                  var wrappedGetOwnPropertyDescriptor = function getOwnPropertyDescriptor(target, key) {
                    return isTypedArrayIndex(target, key = toPrimitive(key, true)) ? createPropertyDescriptor(2, target[key]) : nativeGetOwnPropertyDescriptor(target, key);
                  };
                  var wrappedDefineProperty = function defineProperty(target, key, descriptor) {
                    if (isTypedArrayIndex(target, key = toPrimitive(key, true)) && isObject(descriptor) && has(descriptor, "value") && !has(descriptor, "get") && !has(descriptor, "set") && !descriptor.configurable && (!has(descriptor, "writable") || descriptor.writable) && (!has(descriptor, "enumerable") || descriptor.enumerable)) {
                      target[key] = descriptor.value;
                      return target;
                    }
                    return nativeDefineProperty(target, key, descriptor);
                  };
                  if (DESCRIPTORS) {
                    if (!NATIVE_ARRAY_BUFFER_VIEWS) {
                      getOwnPropertyDescriptorModule.f = wrappedGetOwnPropertyDescriptor;
                      definePropertyModule.f = wrappedDefineProperty;
                      addGetter(TypedArrayPrototype, "buffer");
                      addGetter(TypedArrayPrototype, "byteOffset");
                      addGetter(TypedArrayPrototype, "byteLength");
                      addGetter(TypedArrayPrototype, "length");
                    }
                    $2({ target: "Object", stat: true, forced: !NATIVE_ARRAY_BUFFER_VIEWS }, {
                      getOwnPropertyDescriptor: wrappedGetOwnPropertyDescriptor,
                      defineProperty: wrappedDefineProperty
                    });
                    module2.exports = function(TYPE, wrapper, CLAMPED) {
                      var BYTES = TYPE.match(/\d+$/)[0] / 8;
                      var CONSTRUCTOR_NAME = TYPE + (CLAMPED ? "Clamped" : "") + "Array";
                      var GETTER = "get" + TYPE;
                      var SETTER = "set" + TYPE;
                      var NativeTypedArrayConstructor = global2[CONSTRUCTOR_NAME];
                      var TypedArrayConstructor = NativeTypedArrayConstructor;
                      var TypedArrayConstructorPrototype = TypedArrayConstructor && TypedArrayConstructor.prototype;
                      var exported = {};
                      var getter = function(that, index) {
                        var data = getInternalState(that);
                        return data.view[GETTER](index * BYTES + data.byteOffset, true);
                      };
                      var setter = function(that, index, value) {
                        var data = getInternalState(that);
                        if (CLAMPED)
                          value = (value = round(value)) < 0 ? 0 : value > 255 ? 255 : value & 255;
                        data.view[SETTER](index * BYTES + data.byteOffset, value, true);
                      };
                      var addElement = function(that, index) {
                        nativeDefineProperty(that, index, {
                          get: function() {
                            return getter(this, index);
                          },
                          set: function(value) {
                            return setter(this, index, value);
                          },
                          enumerable: true
                        });
                      };
                      if (!NATIVE_ARRAY_BUFFER_VIEWS) {
                        TypedArrayConstructor = wrapper(function(that, data, offset, $length) {
                          anInstance(that, TypedArrayConstructor, CONSTRUCTOR_NAME);
                          var index = 0;
                          var byteOffset = 0;
                          var buffer, byteLength, length;
                          if (!isObject(data)) {
                            length = toIndex(data);
                            byteLength = length * BYTES;
                            buffer = new ArrayBuffer2(byteLength);
                          } else if (isArrayBuffer(data)) {
                            buffer = data;
                            byteOffset = toOffset(offset, BYTES);
                            var $len = data.byteLength;
                            if ($length === void 0) {
                              if ($len % BYTES)
                                throw RangeError2(WRONG_LENGTH);
                              byteLength = $len - byteOffset;
                              if (byteLength < 0)
                                throw RangeError2(WRONG_LENGTH);
                            } else {
                              byteLength = toLength($length) * BYTES;
                              if (byteLength + byteOffset > $len)
                                throw RangeError2(WRONG_LENGTH);
                            }
                            length = byteLength / BYTES;
                          } else if (isTypedArray(data)) {
                            return fromList(TypedArrayConstructor, data);
                          } else {
                            return typedArrayFrom.call(TypedArrayConstructor, data);
                          }
                          setInternalState(that, {
                            buffer,
                            byteOffset,
                            byteLength,
                            length,
                            view: new DataView2(buffer)
                          });
                          while (index < length)
                            addElement(that, index++);
                        });
                        if (setPrototypeOf)
                          setPrototypeOf(TypedArrayConstructor, TypedArray);
                        TypedArrayConstructorPrototype = TypedArrayConstructor.prototype = create(TypedArrayPrototype);
                      } else if (TYPED_ARRAYS_CONSTRUCTORS_REQUIRES_WRAPPERS) {
                        TypedArrayConstructor = wrapper(function(dummy, data, typedArrayOffset, $length) {
                          anInstance(dummy, TypedArrayConstructor, CONSTRUCTOR_NAME);
                          return inheritIfRequired(function() {
                            if (!isObject(data))
                              return new NativeTypedArrayConstructor(toIndex(data));
                            if (isArrayBuffer(data))
                              return $length !== void 0 ? new NativeTypedArrayConstructor(data, toOffset(typedArrayOffset, BYTES), $length) : typedArrayOffset !== void 0 ? new NativeTypedArrayConstructor(data, toOffset(typedArrayOffset, BYTES)) : new NativeTypedArrayConstructor(data);
                            if (isTypedArray(data))
                              return fromList(TypedArrayConstructor, data);
                            return typedArrayFrom.call(TypedArrayConstructor, data);
                          }(), dummy, TypedArrayConstructor);
                        });
                        if (setPrototypeOf)
                          setPrototypeOf(TypedArrayConstructor, TypedArray);
                        forEach(getOwnPropertyNames(NativeTypedArrayConstructor), function(key) {
                          if (!(key in TypedArrayConstructor)) {
                            createNonEnumerableProperty(TypedArrayConstructor, key, NativeTypedArrayConstructor[key]);
                          }
                        });
                        TypedArrayConstructor.prototype = TypedArrayConstructorPrototype;
                      }
                      if (TypedArrayConstructorPrototype.constructor !== TypedArrayConstructor) {
                        createNonEnumerableProperty(TypedArrayConstructorPrototype, "constructor", TypedArrayConstructor);
                      }
                      if (TYPED_ARRAY_TAG) {
                        createNonEnumerableProperty(TypedArrayConstructorPrototype, TYPED_ARRAY_TAG, CONSTRUCTOR_NAME);
                      }
                      exported[CONSTRUCTOR_NAME] = TypedArrayConstructor;
                      $2({
                        global: true,
                        forced: TypedArrayConstructor != NativeTypedArrayConstructor,
                        sham: !NATIVE_ARRAY_BUFFER_VIEWS
                      }, exported);
                      if (!(BYTES_PER_ELEMENT in TypedArrayConstructor)) {
                        createNonEnumerableProperty(TypedArrayConstructor, BYTES_PER_ELEMENT, BYTES);
                      }
                      if (!(BYTES_PER_ELEMENT in TypedArrayConstructorPrototype)) {
                        createNonEnumerableProperty(TypedArrayConstructorPrototype, BYTES_PER_ELEMENT, BYTES);
                      }
                      setSpecies(CONSTRUCTOR_NAME);
                    };
                  } else
                    module2.exports = function() {
                    };
                }
              ),
              /***/
              3832: (
                /***/
                function(module2, __unused_webpack_exports, __webpack_require__2) {
                  var global2 = __webpack_require__2(7854);
                  var fails = __webpack_require__2(7293);
                  var checkCorrectnessOfIteration = __webpack_require__2(7072);
                  var NATIVE_ARRAY_BUFFER_VIEWS = __webpack_require__2(260).NATIVE_ARRAY_BUFFER_VIEWS;
                  var ArrayBuffer2 = global2.ArrayBuffer;
                  var Int8Array2 = global2.Int8Array;
                  module2.exports = !NATIVE_ARRAY_BUFFER_VIEWS || !fails(function() {
                    Int8Array2(1);
                  }) || !fails(function() {
                    new Int8Array2(-1);
                  }) || !checkCorrectnessOfIteration(function(iterable) {
                    new Int8Array2();
                    new Int8Array2(null);
                    new Int8Array2(1.5);
                    new Int8Array2(iterable);
                  }, true) || fails(function() {
                    return new Int8Array2(new ArrayBuffer2(2), 1, void 0).length !== 1;
                  });
                }
              ),
              /***/
              3074: (
                /***/
                function(module2, __unused_webpack_exports, __webpack_require__2) {
                  var aTypedArrayConstructor = __webpack_require__2(260).aTypedArrayConstructor;
                  var speciesConstructor = __webpack_require__2(6707);
                  module2.exports = function(instance, list) {
                    var C = speciesConstructor(instance, instance.constructor);
                    var index = 0;
                    var length = list.length;
                    var result = new (aTypedArrayConstructor(C))(length);
                    while (length > index)
                      result[index] = list[index++];
                    return result;
                  };
                }
              ),
              /***/
              7321: (
                /***/
                function(module2, __unused_webpack_exports, __webpack_require__2) {
                  var toObject = __webpack_require__2(7908);
                  var toLength = __webpack_require__2(7466);
                  var getIteratorMethod = __webpack_require__2(1246);
                  var isArrayIteratorMethod = __webpack_require__2(7659);
                  var bind = __webpack_require__2(9974);
                  var aTypedArrayConstructor = __webpack_require__2(260).aTypedArrayConstructor;
                  module2.exports = function from(source) {
                    var O = toObject(source);
                    var argumentsLength = arguments.length;
                    var mapfn = argumentsLength > 1 ? arguments[1] : void 0;
                    var mapping = mapfn !== void 0;
                    var iteratorMethod = getIteratorMethod(O);
                    var i, length, result, step, iterator, next;
                    if (iteratorMethod != void 0 && !isArrayIteratorMethod(iteratorMethod)) {
                      iterator = iteratorMethod.call(O);
                      next = iterator.next;
                      O = [];
                      while (!(step = next.call(iterator)).done) {
                        O.push(step.value);
                      }
                    }
                    if (mapping && argumentsLength > 2) {
                      mapfn = bind(mapfn, arguments[2], 2);
                    }
                    length = toLength(O.length);
                    result = new (aTypedArrayConstructor(this))(length);
                    for (i = 0; length > i; i++) {
                      result[i] = mapping ? mapfn(O[i], i) : O[i];
                    }
                    return result;
                  };
                }
              ),
              /***/
              9711: (
                /***/
                function(module2) {
                  var id = 0;
                  var postfix = Math.random();
                  module2.exports = function(key) {
                    return "Symbol(" + String(key === void 0 ? "" : key) + ")_" + (++id + postfix).toString(36);
                  };
                }
              ),
              /***/
              3307: (
                /***/
                function(module2, __unused_webpack_exports, __webpack_require__2) {
                  var NATIVE_SYMBOL = __webpack_require__2(133);
                  module2.exports = NATIVE_SYMBOL && !Symbol.sham && typeof Symbol.iterator == "symbol";
                }
              ),
              /***/
              5112: (
                /***/
                function(module2, __unused_webpack_exports, __webpack_require__2) {
                  var global2 = __webpack_require__2(7854);
                  var shared = __webpack_require__2(2309);
                  var has = __webpack_require__2(6656);
                  var uid = __webpack_require__2(9711);
                  var NATIVE_SYMBOL = __webpack_require__2(133);
                  var USE_SYMBOL_AS_UID = __webpack_require__2(3307);
                  var WellKnownSymbolsStore = shared("wks");
                  var Symbol2 = global2.Symbol;
                  var createWellKnownSymbol = USE_SYMBOL_AS_UID ? Symbol2 : Symbol2 && Symbol2.withoutSetter || uid;
                  module2.exports = function(name) {
                    if (!has(WellKnownSymbolsStore, name)) {
                      if (NATIVE_SYMBOL && has(Symbol2, name))
                        WellKnownSymbolsStore[name] = Symbol2[name];
                      else
                        WellKnownSymbolsStore[name] = createWellKnownSymbol("Symbol." + name);
                    }
                    return WellKnownSymbolsStore[name];
                  };
                }
              ),
              /***/
              1361: (
                /***/
                function(module2) {
                  module2.exports = "	\n\v\f\r \xA0\u1680\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF";
                }
              ),
              /***/
              8264: (
                /***/
                function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__2) {
                  "use strict";
                  var $2 = __webpack_require__2(2109);
                  var global2 = __webpack_require__2(7854);
                  var arrayBufferModule = __webpack_require__2(3331);
                  var setSpecies = __webpack_require__2(6340);
                  var ARRAY_BUFFER = "ArrayBuffer";
                  var ArrayBuffer2 = arrayBufferModule[ARRAY_BUFFER];
                  var NativeArrayBuffer = global2[ARRAY_BUFFER];
                  $2({ global: true, forced: NativeArrayBuffer !== ArrayBuffer2 }, {
                    ArrayBuffer: ArrayBuffer2
                  });
                  setSpecies(ARRAY_BUFFER);
                }
              ),
              /***/
              2222: (
                /***/
                function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__2) {
                  "use strict";
                  var $2 = __webpack_require__2(2109);
                  var fails = __webpack_require__2(7293);
                  var isArray = __webpack_require__2(3157);
                  var isObject = __webpack_require__2(111);
                  var toObject = __webpack_require__2(7908);
                  var toLength = __webpack_require__2(7466);
                  var createProperty = __webpack_require__2(6135);
                  var arraySpeciesCreate = __webpack_require__2(5417);
                  var arrayMethodHasSpeciesSupport = __webpack_require__2(1194);
                  var wellKnownSymbol = __webpack_require__2(5112);
                  var V8_VERSION = __webpack_require__2(7392);
                  var IS_CONCAT_SPREADABLE = wellKnownSymbol("isConcatSpreadable");
                  var MAX_SAFE_INTEGER = 9007199254740991;
                  var MAXIMUM_ALLOWED_INDEX_EXCEEDED = "Maximum allowed index exceeded";
                  var IS_CONCAT_SPREADABLE_SUPPORT = V8_VERSION >= 51 || !fails(function() {
                    var array = [];
                    array[IS_CONCAT_SPREADABLE] = false;
                    return array.concat()[0] !== array;
                  });
                  var SPECIES_SUPPORT = arrayMethodHasSpeciesSupport("concat");
                  var isConcatSpreadable = function(O) {
                    if (!isObject(O))
                      return false;
                    var spreadable = O[IS_CONCAT_SPREADABLE];
                    return spreadable !== void 0 ? !!spreadable : isArray(O);
                  };
                  var FORCED = !IS_CONCAT_SPREADABLE_SUPPORT || !SPECIES_SUPPORT;
                  $2({ target: "Array", proto: true, forced: FORCED }, {
                    // eslint-disable-next-line no-unused-vars -- required for `.length`
                    concat: function concat(arg) {
                      var O = toObject(this);
                      var A = arraySpeciesCreate(O, 0);
                      var n = 0;
                      var i, k, length, len, E;
                      for (i = -1, length = arguments.length; i < length; i++) {
                        E = i === -1 ? O : arguments[i];
                        if (isConcatSpreadable(E)) {
                          len = toLength(E.length);
                          if (n + len > MAX_SAFE_INTEGER)
                            throw TypeError(MAXIMUM_ALLOWED_INDEX_EXCEEDED);
                          for (k = 0; k < len; k++, n++)
                            if (k in E)
                              createProperty(A, n, E[k]);
                        } else {
                          if (n >= MAX_SAFE_INTEGER)
                            throw TypeError(MAXIMUM_ALLOWED_INDEX_EXCEEDED);
                          createProperty(A, n++, E);
                        }
                      }
                      A.length = n;
                      return A;
                    }
                  });
                }
              ),
              /***/
              7327: (
                /***/
                function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__2) {
                  "use strict";
                  var $2 = __webpack_require__2(2109);
                  var $filter = __webpack_require__2(2092).filter;
                  var arrayMethodHasSpeciesSupport = __webpack_require__2(1194);
                  var HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport("filter");
                  $2({ target: "Array", proto: true, forced: !HAS_SPECIES_SUPPORT }, {
                    filter: function filter(callbackfn) {
                      return $filter(this, callbackfn, arguments.length > 1 ? arguments[1] : void 0);
                    }
                  });
                }
              ),
              /***/
              2772: (
                /***/
                function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__2) {
                  "use strict";
                  var $2 = __webpack_require__2(2109);
                  var $indexOf = __webpack_require__2(1318).indexOf;
                  var arrayMethodIsStrict = __webpack_require__2(9341);
                  var nativeIndexOf = [].indexOf;
                  var NEGATIVE_ZERO = !!nativeIndexOf && 1 / [1].indexOf(1, -0) < 0;
                  var STRICT_METHOD = arrayMethodIsStrict("indexOf");
                  $2({ target: "Array", proto: true, forced: NEGATIVE_ZERO || !STRICT_METHOD }, {
                    indexOf: function indexOf(searchElement) {
                      return NEGATIVE_ZERO ? nativeIndexOf.apply(this, arguments) || 0 : $indexOf(this, searchElement, arguments.length > 1 ? arguments[1] : void 0);
                    }
                  });
                }
              ),
              /***/
              6992: (
                /***/
                function(module2, __unused_webpack_exports, __webpack_require__2) {
                  "use strict";
                  var toIndexedObject = __webpack_require__2(5656);
                  var addToUnscopables = __webpack_require__2(1223);
                  var Iterators = __webpack_require__2(7497);
                  var InternalStateModule = __webpack_require__2(9909);
                  var defineIterator = __webpack_require__2(654);
                  var ARRAY_ITERATOR = "Array Iterator";
                  var setInternalState = InternalStateModule.set;
                  var getInternalState = InternalStateModule.getterFor(ARRAY_ITERATOR);
                  module2.exports = defineIterator(Array, "Array", function(iterated, kind) {
                    setInternalState(this, {
                      type: ARRAY_ITERATOR,
                      target: toIndexedObject(iterated),
                      // target
                      index: 0,
                      // next index
                      kind
                      // kind
                    });
                  }, function() {
                    var state = getInternalState(this);
                    var target = state.target;
                    var kind = state.kind;
                    var index = state.index++;
                    if (!target || index >= target.length) {
                      state.target = void 0;
                      return { value: void 0, done: true };
                    }
                    if (kind == "keys")
                      return { value: index, done: false };
                    if (kind == "values")
                      return { value: target[index], done: false };
                    return { value: [index, target[index]], done: false };
                  }, "values");
                  Iterators.Arguments = Iterators.Array;
                  addToUnscopables("keys");
                  addToUnscopables("values");
                  addToUnscopables("entries");
                }
              ),
              /***/
              1249: (
                /***/
                function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__2) {
                  "use strict";
                  var $2 = __webpack_require__2(2109);
                  var $map = __webpack_require__2(2092).map;
                  var arrayMethodHasSpeciesSupport = __webpack_require__2(1194);
                  var HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport("map");
                  $2({ target: "Array", proto: true, forced: !HAS_SPECIES_SUPPORT }, {
                    map: function map(callbackfn) {
                      return $map(this, callbackfn, arguments.length > 1 ? arguments[1] : void 0);
                    }
                  });
                }
              ),
              /***/
              7042: (
                /***/
                function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__2) {
                  "use strict";
                  var $2 = __webpack_require__2(2109);
                  var isObject = __webpack_require__2(111);
                  var isArray = __webpack_require__2(3157);
                  var toAbsoluteIndex = __webpack_require__2(1400);
                  var toLength = __webpack_require__2(7466);
                  var toIndexedObject = __webpack_require__2(5656);
                  var createProperty = __webpack_require__2(6135);
                  var wellKnownSymbol = __webpack_require__2(5112);
                  var arrayMethodHasSpeciesSupport = __webpack_require__2(1194);
                  var HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport("slice");
                  var SPECIES = wellKnownSymbol("species");
                  var nativeSlice = [].slice;
                  var max = Math.max;
                  $2({ target: "Array", proto: true, forced: !HAS_SPECIES_SUPPORT }, {
                    slice: function slice(start2, end) {
                      var O = toIndexedObject(this);
                      var length = toLength(O.length);
                      var k = toAbsoluteIndex(start2, length);
                      var fin = toAbsoluteIndex(end === void 0 ? length : end, length);
                      var Constructor, result, n;
                      if (isArray(O)) {
                        Constructor = O.constructor;
                        if (typeof Constructor == "function" && (Constructor === Array || isArray(Constructor.prototype))) {
                          Constructor = void 0;
                        } else if (isObject(Constructor)) {
                          Constructor = Constructor[SPECIES];
                          if (Constructor === null)
                            Constructor = void 0;
                        }
                        if (Constructor === Array || Constructor === void 0) {
                          return nativeSlice.call(O, k, fin);
                        }
                      }
                      result = new (Constructor === void 0 ? Array : Constructor)(max(fin - k, 0));
                      for (n = 0; k < fin; k++, n++)
                        if (k in O)
                          createProperty(result, n, O[k]);
                      result.length = n;
                      return result;
                    }
                  });
                }
              ),
              /***/
              561: (
                /***/
                function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__2) {
                  "use strict";
                  var $2 = __webpack_require__2(2109);
                  var toAbsoluteIndex = __webpack_require__2(1400);
                  var toInteger = __webpack_require__2(9958);
                  var toLength = __webpack_require__2(7466);
                  var toObject = __webpack_require__2(7908);
                  var arraySpeciesCreate = __webpack_require__2(5417);
                  var createProperty = __webpack_require__2(6135);
                  var arrayMethodHasSpeciesSupport = __webpack_require__2(1194);
                  var HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport("splice");
                  var max = Math.max;
                  var min = Math.min;
                  var MAX_SAFE_INTEGER = 9007199254740991;
                  var MAXIMUM_ALLOWED_LENGTH_EXCEEDED = "Maximum allowed length exceeded";
                  $2({ target: "Array", proto: true, forced: !HAS_SPECIES_SUPPORT }, {
                    splice: function splice(start2, deleteCount) {
                      var O = toObject(this);
                      var len = toLength(O.length);
                      var actualStart = toAbsoluteIndex(start2, len);
                      var argumentsLength = arguments.length;
                      var insertCount, actualDeleteCount, A, k, from, to;
                      if (argumentsLength === 0) {
                        insertCount = actualDeleteCount = 0;
                      } else if (argumentsLength === 1) {
                        insertCount = 0;
                        actualDeleteCount = len - actualStart;
                      } else {
                        insertCount = argumentsLength - 2;
                        actualDeleteCount = min(max(toInteger(deleteCount), 0), len - actualStart);
                      }
                      if (len + insertCount - actualDeleteCount > MAX_SAFE_INTEGER) {
                        throw TypeError(MAXIMUM_ALLOWED_LENGTH_EXCEEDED);
                      }
                      A = arraySpeciesCreate(O, actualDeleteCount);
                      for (k = 0; k < actualDeleteCount; k++) {
                        from = actualStart + k;
                        if (from in O)
                          createProperty(A, k, O[from]);
                      }
                      A.length = actualDeleteCount;
                      if (insertCount < actualDeleteCount) {
                        for (k = actualStart; k < len - actualDeleteCount; k++) {
                          from = k + actualDeleteCount;
                          to = k + insertCount;
                          if (from in O)
                            O[to] = O[from];
                          else
                            delete O[to];
                        }
                        for (k = len; k > len - actualDeleteCount + insertCount; k--)
                          delete O[k - 1];
                      } else if (insertCount > actualDeleteCount) {
                        for (k = len - actualDeleteCount; k > actualStart; k--) {
                          from = k + actualDeleteCount - 1;
                          to = k + insertCount - 1;
                          if (from in O)
                            O[to] = O[from];
                          else
                            delete O[to];
                        }
                      }
                      for (k = 0; k < insertCount; k++) {
                        O[k + actualStart] = arguments[k + 2];
                      }
                      O.length = len - actualDeleteCount + insertCount;
                      return A;
                    }
                  });
                }
              ),
              /***/
              8309: (
                /***/
                function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__2) {
                  var DESCRIPTORS = __webpack_require__2(9781);
                  var defineProperty = __webpack_require__2(3070).f;
                  var FunctionPrototype = Function.prototype;
                  var FunctionPrototypeToString = FunctionPrototype.toString;
                  var nameRE = /^\s*function ([^ (]*)/;
                  var NAME = "name";
                  if (DESCRIPTORS && !(NAME in FunctionPrototype)) {
                    defineProperty(FunctionPrototype, NAME, {
                      configurable: true,
                      get: function() {
                        try {
                          return FunctionPrototypeToString.call(this).match(nameRE)[1];
                        } catch (error) {
                          return "";
                        }
                      }
                    });
                  }
                }
              ),
              /***/
              489: (
                /***/
                function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__2) {
                  var $2 = __webpack_require__2(2109);
                  var fails = __webpack_require__2(7293);
                  var toObject = __webpack_require__2(7908);
                  var nativeGetPrototypeOf = __webpack_require__2(9518);
                  var CORRECT_PROTOTYPE_GETTER = __webpack_require__2(8544);
                  var FAILS_ON_PRIMITIVES = fails(function() {
                    nativeGetPrototypeOf(1);
                  });
                  $2({ target: "Object", stat: true, forced: FAILS_ON_PRIMITIVES, sham: !CORRECT_PROTOTYPE_GETTER }, {
                    getPrototypeOf: function getPrototypeOf(it) {
                      return nativeGetPrototypeOf(toObject(it));
                    }
                  });
                }
              ),
              /***/
              1539: (
                /***/
                function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__2) {
                  var TO_STRING_TAG_SUPPORT = __webpack_require__2(1694);
                  var redefine = __webpack_require__2(1320);
                  var toString = __webpack_require__2(288);
                  if (!TO_STRING_TAG_SUPPORT) {
                    redefine(Object.prototype, "toString", toString, { unsafe: true });
                  }
                }
              ),
              /***/
              4916: (
                /***/
                function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__2) {
                  "use strict";
                  var $2 = __webpack_require__2(2109);
                  var exec = __webpack_require__2(2261);
                  $2({ target: "RegExp", proto: true, forced: /./.exec !== exec }, {
                    exec
                  });
                }
              ),
              /***/
              9714: (
                /***/
                function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__2) {
                  "use strict";
                  var redefine = __webpack_require__2(1320);
                  var anObject = __webpack_require__2(9670);
                  var fails = __webpack_require__2(7293);
                  var flags = __webpack_require__2(7066);
                  var TO_STRING = "toString";
                  var RegExpPrototype = RegExp.prototype;
                  var nativeToString = RegExpPrototype[TO_STRING];
                  var NOT_GENERIC = fails(function() {
                    return nativeToString.call({ source: "a", flags: "b" }) != "/a/b";
                  });
                  var INCORRECT_NAME = nativeToString.name != TO_STRING;
                  if (NOT_GENERIC || INCORRECT_NAME) {
                    redefine(RegExp.prototype, TO_STRING, function toString() {
                      var R = anObject(this);
                      var p = String(R.source);
                      var rf = R.flags;
                      var f = String(rf === void 0 && R instanceof RegExp && !("flags" in RegExpPrototype) ? flags.call(R) : rf);
                      return "/" + p + "/" + f;
                    }, { unsafe: true });
                  }
                }
              ),
              /***/
              8783: (
                /***/
                function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__2) {
                  "use strict";
                  var charAt = __webpack_require__2(8710).charAt;
                  var InternalStateModule = __webpack_require__2(9909);
                  var defineIterator = __webpack_require__2(654);
                  var STRING_ITERATOR = "String Iterator";
                  var setInternalState = InternalStateModule.set;
                  var getInternalState = InternalStateModule.getterFor(STRING_ITERATOR);
                  defineIterator(String, "String", function(iterated) {
                    setInternalState(this, {
                      type: STRING_ITERATOR,
                      string: String(iterated),
                      index: 0
                    });
                  }, function next() {
                    var state = getInternalState(this);
                    var string = state.string;
                    var index = state.index;
                    var point;
                    if (index >= string.length)
                      return { value: void 0, done: true };
                    point = charAt(string, index);
                    state.index += point.length;
                    return { value: point, done: false };
                  });
                }
              ),
              /***/
              4723: (
                /***/
                function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__2) {
                  "use strict";
                  var fixRegExpWellKnownSymbolLogic = __webpack_require__2(7007);
                  var anObject = __webpack_require__2(9670);
                  var toLength = __webpack_require__2(7466);
                  var requireObjectCoercible = __webpack_require__2(4488);
                  var advanceStringIndex = __webpack_require__2(1530);
                  var regExpExec = __webpack_require__2(7651);
                  fixRegExpWellKnownSymbolLogic("match", 1, function(MATCH, nativeMatch, maybeCallNative) {
                    return [
                      // `String.prototype.match` method
                      // https://tc39.es/ecma262/#sec-string.prototype.match
                      function match(regexp) {
                        var O = requireObjectCoercible(this);
                        var matcher = regexp == void 0 ? void 0 : regexp[MATCH];
                        return matcher !== void 0 ? matcher.call(regexp, O) : new RegExp(regexp)[MATCH](String(O));
                      },
                      // `RegExp.prototype[@@match]` method
                      // https://tc39.es/ecma262/#sec-regexp.prototype-@@match
                      function(regexp) {
                        var res = maybeCallNative(nativeMatch, regexp, this);
                        if (res.done)
                          return res.value;
                        var rx = anObject(regexp);
                        var S = String(this);
                        if (!rx.global)
                          return regExpExec(rx, S);
                        var fullUnicode = rx.unicode;
                        rx.lastIndex = 0;
                        var A = [];
                        var n = 0;
                        var result;
                        while ((result = regExpExec(rx, S)) !== null) {
                          var matchStr = String(result[0]);
                          A[n] = matchStr;
                          if (matchStr === "")
                            rx.lastIndex = advanceStringIndex(S, toLength(rx.lastIndex), fullUnicode);
                          n++;
                        }
                        return n === 0 ? null : A;
                      }
                    ];
                  });
                }
              ),
              /***/
              5306: (
                /***/
                function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__2) {
                  "use strict";
                  var fixRegExpWellKnownSymbolLogic = __webpack_require__2(7007);
                  var anObject = __webpack_require__2(9670);
                  var toLength = __webpack_require__2(7466);
                  var toInteger = __webpack_require__2(9958);
                  var requireObjectCoercible = __webpack_require__2(4488);
                  var advanceStringIndex = __webpack_require__2(1530);
                  var getSubstitution = __webpack_require__2(647);
                  var regExpExec = __webpack_require__2(7651);
                  var max = Math.max;
                  var min = Math.min;
                  var maybeToString = function(it) {
                    return it === void 0 ? it : String(it);
                  };
                  fixRegExpWellKnownSymbolLogic("replace", 2, function(REPLACE, nativeReplace, maybeCallNative, reason) {
                    var REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE = reason.REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE;
                    var REPLACE_KEEPS_$0 = reason.REPLACE_KEEPS_$0;
                    var UNSAFE_SUBSTITUTE = REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE ? "$" : "$0";
                    return [
                      // `String.prototype.replace` method
                      // https://tc39.es/ecma262/#sec-string.prototype.replace
                      function replace(searchValue, replaceValue) {
                        var O = requireObjectCoercible(this);
                        var replacer = searchValue == void 0 ? void 0 : searchValue[REPLACE];
                        return replacer !== void 0 ? replacer.call(searchValue, O, replaceValue) : nativeReplace.call(String(O), searchValue, replaceValue);
                      },
                      // `RegExp.prototype[@@replace]` method
                      // https://tc39.es/ecma262/#sec-regexp.prototype-@@replace
                      function(regexp, replaceValue) {
                        if (!REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE && REPLACE_KEEPS_$0 || typeof replaceValue === "string" && replaceValue.indexOf(UNSAFE_SUBSTITUTE) === -1) {
                          var res = maybeCallNative(nativeReplace, regexp, this, replaceValue);
                          if (res.done)
                            return res.value;
                        }
                        var rx = anObject(regexp);
                        var S = String(this);
                        var functionalReplace = typeof replaceValue === "function";
                        if (!functionalReplace)
                          replaceValue = String(replaceValue);
                        var global2 = rx.global;
                        if (global2) {
                          var fullUnicode = rx.unicode;
                          rx.lastIndex = 0;
                        }
                        var results = [];
                        while (true) {
                          var result = regExpExec(rx, S);
                          if (result === null)
                            break;
                          results.push(result);
                          if (!global2)
                            break;
                          var matchStr = String(result[0]);
                          if (matchStr === "")
                            rx.lastIndex = advanceStringIndex(S, toLength(rx.lastIndex), fullUnicode);
                        }
                        var accumulatedResult = "";
                        var nextSourcePosition = 0;
                        for (var i = 0; i < results.length; i++) {
                          result = results[i];
                          var matched = String(result[0]);
                          var position = max(min(toInteger(result.index), S.length), 0);
                          var captures = [];
                          for (var j = 1; j < result.length; j++)
                            captures.push(maybeToString(result[j]));
                          var namedCaptures = result.groups;
                          if (functionalReplace) {
                            var replacerArgs = [matched].concat(captures, position, S);
                            if (namedCaptures !== void 0)
                              replacerArgs.push(namedCaptures);
                            var replacement = String(replaceValue.apply(void 0, replacerArgs));
                          } else {
                            replacement = getSubstitution(matched, S, position, captures, namedCaptures, replaceValue);
                          }
                          if (position >= nextSourcePosition) {
                            accumulatedResult += S.slice(nextSourcePosition, position) + replacement;
                            nextSourcePosition = position + matched.length;
                          }
                        }
                        return accumulatedResult + S.slice(nextSourcePosition);
                      }
                    ];
                  });
                }
              ),
              /***/
              3123: (
                /***/
                function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__2) {
                  "use strict";
                  var fixRegExpWellKnownSymbolLogic = __webpack_require__2(7007);
                  var isRegExp = __webpack_require__2(7850);
                  var anObject = __webpack_require__2(9670);
                  var requireObjectCoercible = __webpack_require__2(4488);
                  var speciesConstructor = __webpack_require__2(6707);
                  var advanceStringIndex = __webpack_require__2(1530);
                  var toLength = __webpack_require__2(7466);
                  var callRegExpExec = __webpack_require__2(7651);
                  var regexpExec = __webpack_require__2(2261);
                  var fails = __webpack_require__2(7293);
                  var arrayPush = [].push;
                  var min = Math.min;
                  var MAX_UINT32 = 4294967295;
                  var SUPPORTS_Y = !fails(function() {
                    return !RegExp(MAX_UINT32, "y");
                  });
                  fixRegExpWellKnownSymbolLogic("split", 2, function(SPLIT, nativeSplit, maybeCallNative) {
                    var internalSplit;
                    if ("abbc".split(/(b)*/)[1] == "c" || // eslint-disable-next-line regexp/no-empty-group -- required for testing
                    "test".split(/(?:)/, -1).length != 4 || "ab".split(/(?:ab)*/).length != 2 || ".".split(/(.?)(.?)/).length != 4 || // eslint-disable-next-line regexp/no-assertion-capturing-group, regexp/no-empty-group -- required for testing
                    ".".split(/()()/).length > 1 || "".split(/.?/).length) {
                      internalSplit = function(separator, limit) {
                        var string = String(requireObjectCoercible(this));
                        var lim = limit === void 0 ? MAX_UINT32 : limit >>> 0;
                        if (lim === 0)
                          return [];
                        if (separator === void 0)
                          return [string];
                        if (!isRegExp(separator)) {
                          return nativeSplit.call(string, separator, lim);
                        }
                        var output = [];
                        var flags = (separator.ignoreCase ? "i" : "") + (separator.multiline ? "m" : "") + (separator.unicode ? "u" : "") + (separator.sticky ? "y" : "");
                        var lastLastIndex = 0;
                        var separatorCopy = new RegExp(separator.source, flags + "g");
                        var match, lastIndex, lastLength;
                        while (match = regexpExec.call(separatorCopy, string)) {
                          lastIndex = separatorCopy.lastIndex;
                          if (lastIndex > lastLastIndex) {
                            output.push(string.slice(lastLastIndex, match.index));
                            if (match.length > 1 && match.index < string.length)
                              arrayPush.apply(output, match.slice(1));
                            lastLength = match[0].length;
                            lastLastIndex = lastIndex;
                            if (output.length >= lim)
                              break;
                          }
                          if (separatorCopy.lastIndex === match.index)
                            separatorCopy.lastIndex++;
                        }
                        if (lastLastIndex === string.length) {
                          if (lastLength || !separatorCopy.test(""))
                            output.push("");
                        } else
                          output.push(string.slice(lastLastIndex));
                        return output.length > lim ? output.slice(0, lim) : output;
                      };
                    } else if ("0".split(void 0, 0).length) {
                      internalSplit = function(separator, limit) {
                        return separator === void 0 && limit === 0 ? [] : nativeSplit.call(this, separator, limit);
                      };
                    } else
                      internalSplit = nativeSplit;
                    return [
                      // `String.prototype.split` method
                      // https://tc39.es/ecma262/#sec-string.prototype.split
                      function split(separator, limit) {
                        var O = requireObjectCoercible(this);
                        var splitter = separator == void 0 ? void 0 : separator[SPLIT];
                        return splitter !== void 0 ? splitter.call(separator, O, limit) : internalSplit.call(String(O), separator, limit);
                      },
                      // `RegExp.prototype[@@split]` method
                      // https://tc39.es/ecma262/#sec-regexp.prototype-@@split
                      //
                      // NOTE: This cannot be properly polyfilled in engines that don't support
                      // the 'y' flag.
                      function(regexp, limit) {
                        var res = maybeCallNative(internalSplit, regexp, this, limit, internalSplit !== nativeSplit);
                        if (res.done)
                          return res.value;
                        var rx = anObject(regexp);
                        var S = String(this);
                        var C = speciesConstructor(rx, RegExp);
                        var unicodeMatching = rx.unicode;
                        var flags = (rx.ignoreCase ? "i" : "") + (rx.multiline ? "m" : "") + (rx.unicode ? "u" : "") + (SUPPORTS_Y ? "y" : "g");
                        var splitter = new C(SUPPORTS_Y ? rx : "^(?:" + rx.source + ")", flags);
                        var lim = limit === void 0 ? MAX_UINT32 : limit >>> 0;
                        if (lim === 0)
                          return [];
                        if (S.length === 0)
                          return callRegExpExec(splitter, S) === null ? [S] : [];
                        var p = 0;
                        var q = 0;
                        var A = [];
                        while (q < S.length) {
                          splitter.lastIndex = SUPPORTS_Y ? q : 0;
                          var z = callRegExpExec(splitter, SUPPORTS_Y ? S : S.slice(q));
                          var e;
                          if (z === null || (e = min(toLength(splitter.lastIndex + (SUPPORTS_Y ? 0 : q)), S.length)) === p) {
                            q = advanceStringIndex(S, q, unicodeMatching);
                          } else {
                            A.push(S.slice(p, q));
                            if (A.length === lim)
                              return A;
                            for (var i = 1; i <= z.length - 1; i++) {
                              A.push(z[i]);
                              if (A.length === lim)
                                return A;
                            }
                            q = p = e;
                          }
                        }
                        A.push(S.slice(p));
                        return A;
                      }
                    ];
                  }, !SUPPORTS_Y);
                }
              ),
              /***/
              3210: (
                /***/
                function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__2) {
                  "use strict";
                  var $2 = __webpack_require__2(2109);
                  var $trim = __webpack_require__2(3111).trim;
                  var forcedStringTrimMethod = __webpack_require__2(6091);
                  $2({ target: "String", proto: true, forced: forcedStringTrimMethod("trim") }, {
                    trim: function trim() {
                      return $trim(this);
                    }
                  });
                }
              ),
              /***/
              2990: (
                /***/
                function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__2) {
                  "use strict";
                  var ArrayBufferViewCore = __webpack_require__2(260);
                  var $copyWithin = __webpack_require__2(1048);
                  var aTypedArray = ArrayBufferViewCore.aTypedArray;
                  var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;
                  exportTypedArrayMethod("copyWithin", function copyWithin(target, start2) {
                    return $copyWithin.call(aTypedArray(this), target, start2, arguments.length > 2 ? arguments[2] : void 0);
                  });
                }
              ),
              /***/
              8927: (
                /***/
                function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__2) {
                  "use strict";
                  var ArrayBufferViewCore = __webpack_require__2(260);
                  var $every = __webpack_require__2(2092).every;
                  var aTypedArray = ArrayBufferViewCore.aTypedArray;
                  var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;
                  exportTypedArrayMethod("every", function every(callbackfn) {
                    return $every(aTypedArray(this), callbackfn, arguments.length > 1 ? arguments[1] : void 0);
                  });
                }
              ),
              /***/
              3105: (
                /***/
                function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__2) {
                  "use strict";
                  var ArrayBufferViewCore = __webpack_require__2(260);
                  var $fill = __webpack_require__2(1285);
                  var aTypedArray = ArrayBufferViewCore.aTypedArray;
                  var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;
                  exportTypedArrayMethod("fill", function fill(value) {
                    return $fill.apply(aTypedArray(this), arguments);
                  });
                }
              ),
              /***/
              5035: (
                /***/
                function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__2) {
                  "use strict";
                  var ArrayBufferViewCore = __webpack_require__2(260);
                  var $filter = __webpack_require__2(2092).filter;
                  var fromSpeciesAndList = __webpack_require__2(3074);
                  var aTypedArray = ArrayBufferViewCore.aTypedArray;
                  var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;
                  exportTypedArrayMethod("filter", function filter(callbackfn) {
                    var list = $filter(aTypedArray(this), callbackfn, arguments.length > 1 ? arguments[1] : void 0);
                    return fromSpeciesAndList(this, list);
                  });
                }
              ),
              /***/
              7174: (
                /***/
                function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__2) {
                  "use strict";
                  var ArrayBufferViewCore = __webpack_require__2(260);
                  var $findIndex = __webpack_require__2(2092).findIndex;
                  var aTypedArray = ArrayBufferViewCore.aTypedArray;
                  var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;
                  exportTypedArrayMethod("findIndex", function findIndex(predicate) {
                    return $findIndex(aTypedArray(this), predicate, arguments.length > 1 ? arguments[1] : void 0);
                  });
                }
              ),
              /***/
              4345: (
                /***/
                function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__2) {
                  "use strict";
                  var ArrayBufferViewCore = __webpack_require__2(260);
                  var $find = __webpack_require__2(2092).find;
                  var aTypedArray = ArrayBufferViewCore.aTypedArray;
                  var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;
                  exportTypedArrayMethod("find", function find(predicate) {
                    return $find(aTypedArray(this), predicate, arguments.length > 1 ? arguments[1] : void 0);
                  });
                }
              ),
              /***/
              2846: (
                /***/
                function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__2) {
                  "use strict";
                  var ArrayBufferViewCore = __webpack_require__2(260);
                  var $forEach = __webpack_require__2(2092).forEach;
                  var aTypedArray = ArrayBufferViewCore.aTypedArray;
                  var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;
                  exportTypedArrayMethod("forEach", function forEach(callbackfn) {
                    $forEach(aTypedArray(this), callbackfn, arguments.length > 1 ? arguments[1] : void 0);
                  });
                }
              ),
              /***/
              4731: (
                /***/
                function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__2) {
                  "use strict";
                  var ArrayBufferViewCore = __webpack_require__2(260);
                  var $includes = __webpack_require__2(1318).includes;
                  var aTypedArray = ArrayBufferViewCore.aTypedArray;
                  var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;
                  exportTypedArrayMethod("includes", function includes(searchElement) {
                    return $includes(aTypedArray(this), searchElement, arguments.length > 1 ? arguments[1] : void 0);
                  });
                }
              ),
              /***/
              7209: (
                /***/
                function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__2) {
                  "use strict";
                  var ArrayBufferViewCore = __webpack_require__2(260);
                  var $indexOf = __webpack_require__2(1318).indexOf;
                  var aTypedArray = ArrayBufferViewCore.aTypedArray;
                  var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;
                  exportTypedArrayMethod("indexOf", function indexOf(searchElement) {
                    return $indexOf(aTypedArray(this), searchElement, arguments.length > 1 ? arguments[1] : void 0);
                  });
                }
              ),
              /***/
              6319: (
                /***/
                function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__2) {
                  "use strict";
                  var global2 = __webpack_require__2(7854);
                  var ArrayBufferViewCore = __webpack_require__2(260);
                  var ArrayIterators = __webpack_require__2(6992);
                  var wellKnownSymbol = __webpack_require__2(5112);
                  var ITERATOR = wellKnownSymbol("iterator");
                  var Uint8Array2 = global2.Uint8Array;
                  var arrayValues = ArrayIterators.values;
                  var arrayKeys = ArrayIterators.keys;
                  var arrayEntries = ArrayIterators.entries;
                  var aTypedArray = ArrayBufferViewCore.aTypedArray;
                  var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;
                  var nativeTypedArrayIterator = Uint8Array2 && Uint8Array2.prototype[ITERATOR];
                  var CORRECT_ITER_NAME = !!nativeTypedArrayIterator && (nativeTypedArrayIterator.name == "values" || nativeTypedArrayIterator.name == void 0);
                  var typedArrayValues = function values() {
                    return arrayValues.call(aTypedArray(this));
                  };
                  exportTypedArrayMethod("entries", function entries() {
                    return arrayEntries.call(aTypedArray(this));
                  });
                  exportTypedArrayMethod("keys", function keys() {
                    return arrayKeys.call(aTypedArray(this));
                  });
                  exportTypedArrayMethod("values", typedArrayValues, !CORRECT_ITER_NAME);
                  exportTypedArrayMethod(ITERATOR, typedArrayValues, !CORRECT_ITER_NAME);
                }
              ),
              /***/
              8867: (
                /***/
                function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__2) {
                  "use strict";
                  var ArrayBufferViewCore = __webpack_require__2(260);
                  var aTypedArray = ArrayBufferViewCore.aTypedArray;
                  var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;
                  var $join = [].join;
                  exportTypedArrayMethod("join", function join(separator) {
                    return $join.apply(aTypedArray(this), arguments);
                  });
                }
              ),
              /***/
              7789: (
                /***/
                function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__2) {
                  "use strict";
                  var ArrayBufferViewCore = __webpack_require__2(260);
                  var $lastIndexOf = __webpack_require__2(6583);
                  var aTypedArray = ArrayBufferViewCore.aTypedArray;
                  var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;
                  exportTypedArrayMethod("lastIndexOf", function lastIndexOf(searchElement) {
                    return $lastIndexOf.apply(aTypedArray(this), arguments);
                  });
                }
              ),
              /***/
              3739: (
                /***/
                function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__2) {
                  "use strict";
                  var ArrayBufferViewCore = __webpack_require__2(260);
                  var $map = __webpack_require__2(2092).map;
                  var speciesConstructor = __webpack_require__2(6707);
                  var aTypedArray = ArrayBufferViewCore.aTypedArray;
                  var aTypedArrayConstructor = ArrayBufferViewCore.aTypedArrayConstructor;
                  var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;
                  exportTypedArrayMethod("map", function map(mapfn) {
                    return $map(aTypedArray(this), mapfn, arguments.length > 1 ? arguments[1] : void 0, function(O, length) {
                      return new (aTypedArrayConstructor(speciesConstructor(O, O.constructor)))(length);
                    });
                  });
                }
              ),
              /***/
              4483: (
                /***/
                function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__2) {
                  "use strict";
                  var ArrayBufferViewCore = __webpack_require__2(260);
                  var $reduceRight = __webpack_require__2(3671).right;
                  var aTypedArray = ArrayBufferViewCore.aTypedArray;
                  var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;
                  exportTypedArrayMethod("reduceRight", function reduceRight(callbackfn) {
                    return $reduceRight(aTypedArray(this), callbackfn, arguments.length, arguments.length > 1 ? arguments[1] : void 0);
                  });
                }
              ),
              /***/
              9368: (
                /***/
                function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__2) {
                  "use strict";
                  var ArrayBufferViewCore = __webpack_require__2(260);
                  var $reduce = __webpack_require__2(3671).left;
                  var aTypedArray = ArrayBufferViewCore.aTypedArray;
                  var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;
                  exportTypedArrayMethod("reduce", function reduce(callbackfn) {
                    return $reduce(aTypedArray(this), callbackfn, arguments.length, arguments.length > 1 ? arguments[1] : void 0);
                  });
                }
              ),
              /***/
              2056: (
                /***/
                function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__2) {
                  "use strict";
                  var ArrayBufferViewCore = __webpack_require__2(260);
                  var aTypedArray = ArrayBufferViewCore.aTypedArray;
                  var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;
                  var floor = Math.floor;
                  exportTypedArrayMethod("reverse", function reverse() {
                    var that = this;
                    var length = aTypedArray(that).length;
                    var middle = floor(length / 2);
                    var index = 0;
                    var value;
                    while (index < middle) {
                      value = that[index];
                      that[index++] = that[--length];
                      that[length] = value;
                    }
                    return that;
                  });
                }
              ),
              /***/
              3462: (
                /***/
                function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__2) {
                  "use strict";
                  var ArrayBufferViewCore = __webpack_require__2(260);
                  var toLength = __webpack_require__2(7466);
                  var toOffset = __webpack_require__2(4590);
                  var toObject = __webpack_require__2(7908);
                  var fails = __webpack_require__2(7293);
                  var aTypedArray = ArrayBufferViewCore.aTypedArray;
                  var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;
                  var FORCED = fails(function() {
                    new Int8Array(1).set({});
                  });
                  exportTypedArrayMethod("set", function set(arrayLike) {
                    aTypedArray(this);
                    var offset = toOffset(arguments.length > 1 ? arguments[1] : void 0, 1);
                    var length = this.length;
                    var src = toObject(arrayLike);
                    var len = toLength(src.length);
                    var index = 0;
                    if (len + offset > length)
                      throw RangeError("Wrong length");
                    while (index < len)
                      this[offset + index] = src[index++];
                  }, FORCED);
                }
              ),
              /***/
              678: (
                /***/
                function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__2) {
                  "use strict";
                  var ArrayBufferViewCore = __webpack_require__2(260);
                  var speciesConstructor = __webpack_require__2(6707);
                  var fails = __webpack_require__2(7293);
                  var aTypedArray = ArrayBufferViewCore.aTypedArray;
                  var aTypedArrayConstructor = ArrayBufferViewCore.aTypedArrayConstructor;
                  var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;
                  var $slice = [].slice;
                  var FORCED = fails(function() {
                    new Int8Array(1).slice();
                  });
                  exportTypedArrayMethod("slice", function slice(start2, end) {
                    var list = $slice.call(aTypedArray(this), start2, end);
                    var C = speciesConstructor(this, this.constructor);
                    var index = 0;
                    var length = list.length;
                    var result = new (aTypedArrayConstructor(C))(length);
                    while (length > index)
                      result[index] = list[index++];
                    return result;
                  }, FORCED);
                }
              ),
              /***/
              7462: (
                /***/
                function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__2) {
                  "use strict";
                  var ArrayBufferViewCore = __webpack_require__2(260);
                  var $some = __webpack_require__2(2092).some;
                  var aTypedArray = ArrayBufferViewCore.aTypedArray;
                  var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;
                  exportTypedArrayMethod("some", function some(callbackfn) {
                    return $some(aTypedArray(this), callbackfn, arguments.length > 1 ? arguments[1] : void 0);
                  });
                }
              ),
              /***/
              3824: (
                /***/
                function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__2) {
                  "use strict";
                  var ArrayBufferViewCore = __webpack_require__2(260);
                  var aTypedArray = ArrayBufferViewCore.aTypedArray;
                  var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;
                  var $sort = [].sort;
                  exportTypedArrayMethod("sort", function sort(comparefn) {
                    return $sort.call(aTypedArray(this), comparefn);
                  });
                }
              ),
              /***/
              5021: (
                /***/
                function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__2) {
                  "use strict";
                  var ArrayBufferViewCore = __webpack_require__2(260);
                  var toLength = __webpack_require__2(7466);
                  var toAbsoluteIndex = __webpack_require__2(1400);
                  var speciesConstructor = __webpack_require__2(6707);
                  var aTypedArray = ArrayBufferViewCore.aTypedArray;
                  var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;
                  exportTypedArrayMethod("subarray", function subarray(begin, end) {
                    var O = aTypedArray(this);
                    var length = O.length;
                    var beginIndex = toAbsoluteIndex(begin, length);
                    return new (speciesConstructor(O, O.constructor))(
                      O.buffer,
                      O.byteOffset + beginIndex * O.BYTES_PER_ELEMENT,
                      toLength((end === void 0 ? length : toAbsoluteIndex(end, length)) - beginIndex)
                    );
                  });
                }
              ),
              /***/
              2974: (
                /***/
                function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__2) {
                  "use strict";
                  var global2 = __webpack_require__2(7854);
                  var ArrayBufferViewCore = __webpack_require__2(260);
                  var fails = __webpack_require__2(7293);
                  var Int8Array2 = global2.Int8Array;
                  var aTypedArray = ArrayBufferViewCore.aTypedArray;
                  var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;
                  var $toLocaleString = [].toLocaleString;
                  var $slice = [].slice;
                  var TO_LOCALE_STRING_BUG = !!Int8Array2 && fails(function() {
                    $toLocaleString.call(new Int8Array2(1));
                  });
                  var FORCED = fails(function() {
                    return [1, 2].toLocaleString() != new Int8Array2([1, 2]).toLocaleString();
                  }) || !fails(function() {
                    Int8Array2.prototype.toLocaleString.call([1, 2]);
                  });
                  exportTypedArrayMethod("toLocaleString", function toLocaleString() {
                    return $toLocaleString.apply(TO_LOCALE_STRING_BUG ? $slice.call(aTypedArray(this)) : aTypedArray(this), arguments);
                  }, FORCED);
                }
              ),
              /***/
              5016: (
                /***/
                function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__2) {
                  "use strict";
                  var exportTypedArrayMethod = __webpack_require__2(260).exportTypedArrayMethod;
                  var fails = __webpack_require__2(7293);
                  var global2 = __webpack_require__2(7854);
                  var Uint8Array2 = global2.Uint8Array;
                  var Uint8ArrayPrototype = Uint8Array2 && Uint8Array2.prototype || {};
                  var arrayToString = [].toString;
                  var arrayJoin = [].join;
                  if (fails(function() {
                    arrayToString.call({});
                  })) {
                    arrayToString = function toString() {
                      return arrayJoin.call(this);
                    };
                  }
                  var IS_NOT_ARRAY_METHOD = Uint8ArrayPrototype.toString != arrayToString;
                  exportTypedArrayMethod("toString", arrayToString, IS_NOT_ARRAY_METHOD);
                }
              ),
              /***/
              2472: (
                /***/
                function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__2) {
                  var createTypedArrayConstructor = __webpack_require__2(9843);
                  createTypedArrayConstructor("Uint8", function(init) {
                    return function Uint8Array2(data, byteOffset, length) {
                      return init(this, data, byteOffset, length);
                    };
                  });
                }
              ),
              /***/
              4747: (
                /***/
                function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__2) {
                  var global2 = __webpack_require__2(7854);
                  var DOMIterables = __webpack_require__2(8324);
                  var forEach = __webpack_require__2(8533);
                  var createNonEnumerableProperty = __webpack_require__2(8880);
                  for (var COLLECTION_NAME in DOMIterables) {
                    var Collection = global2[COLLECTION_NAME];
                    var CollectionPrototype = Collection && Collection.prototype;
                    if (CollectionPrototype && CollectionPrototype.forEach !== forEach)
                      try {
                        createNonEnumerableProperty(CollectionPrototype, "forEach", forEach);
                      } catch (error) {
                        CollectionPrototype.forEach = forEach;
                      }
                  }
                }
              ),
              /***/
              3948: (
                /***/
                function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__2) {
                  var global2 = __webpack_require__2(7854);
                  var DOMIterables = __webpack_require__2(8324);
                  var ArrayIteratorMethods = __webpack_require__2(6992);
                  var createNonEnumerableProperty = __webpack_require__2(8880);
                  var wellKnownSymbol = __webpack_require__2(5112);
                  var ITERATOR = wellKnownSymbol("iterator");
                  var TO_STRING_TAG = wellKnownSymbol("toStringTag");
                  var ArrayValues = ArrayIteratorMethods.values;
                  for (var COLLECTION_NAME in DOMIterables) {
                    var Collection = global2[COLLECTION_NAME];
                    var CollectionPrototype = Collection && Collection.prototype;
                    if (CollectionPrototype) {
                      if (CollectionPrototype[ITERATOR] !== ArrayValues)
                        try {
                          createNonEnumerableProperty(CollectionPrototype, ITERATOR, ArrayValues);
                        } catch (error) {
                          CollectionPrototype[ITERATOR] = ArrayValues;
                        }
                      if (!CollectionPrototype[TO_STRING_TAG]) {
                        createNonEnumerableProperty(CollectionPrototype, TO_STRING_TAG, COLLECTION_NAME);
                      }
                      if (DOMIterables[COLLECTION_NAME])
                        for (var METHOD_NAME in ArrayIteratorMethods) {
                          if (CollectionPrototype[METHOD_NAME] !== ArrayIteratorMethods[METHOD_NAME])
                            try {
                              createNonEnumerableProperty(CollectionPrototype, METHOD_NAME, ArrayIteratorMethods[METHOD_NAME]);
                            } catch (error) {
                              CollectionPrototype[METHOD_NAME] = ArrayIteratorMethods[METHOD_NAME];
                            }
                        }
                    }
                  }
                }
              ),
              /***/
              1637: (
                /***/
                function(module2, __unused_webpack_exports, __webpack_require__2) {
                  "use strict";
                  __webpack_require__2(6992);
                  var $2 = __webpack_require__2(2109);
                  var getBuiltIn = __webpack_require__2(5005);
                  var USE_NATIVE_URL = __webpack_require__2(590);
                  var redefine = __webpack_require__2(1320);
                  var redefineAll = __webpack_require__2(2248);
                  var setToStringTag = __webpack_require__2(8003);
                  var createIteratorConstructor = __webpack_require__2(4994);
                  var InternalStateModule = __webpack_require__2(9909);
                  var anInstance = __webpack_require__2(5787);
                  var hasOwn = __webpack_require__2(6656);
                  var bind = __webpack_require__2(9974);
                  var classof = __webpack_require__2(648);
                  var anObject = __webpack_require__2(9670);
                  var isObject = __webpack_require__2(111);
                  var create = __webpack_require__2(30);
                  var createPropertyDescriptor = __webpack_require__2(9114);
                  var getIterator = __webpack_require__2(8554);
                  var getIteratorMethod = __webpack_require__2(1246);
                  var wellKnownSymbol = __webpack_require__2(5112);
                  var $fetch = getBuiltIn("fetch");
                  var Headers = getBuiltIn("Headers");
                  var ITERATOR = wellKnownSymbol("iterator");
                  var URL_SEARCH_PARAMS = "URLSearchParams";
                  var URL_SEARCH_PARAMS_ITERATOR = URL_SEARCH_PARAMS + "Iterator";
                  var setInternalState = InternalStateModule.set;
                  var getInternalParamsState = InternalStateModule.getterFor(URL_SEARCH_PARAMS);
                  var getInternalIteratorState = InternalStateModule.getterFor(URL_SEARCH_PARAMS_ITERATOR);
                  var plus = /\+/g;
                  var sequences = Array(4);
                  var percentSequence = function(bytes) {
                    return sequences[bytes - 1] || (sequences[bytes - 1] = RegExp("((?:%[\\da-f]{2}){" + bytes + "})", "gi"));
                  };
                  var percentDecode = function(sequence) {
                    try {
                      return decodeURIComponent(sequence);
                    } catch (error) {
                      return sequence;
                    }
                  };
                  var deserialize = function(it) {
                    var result = it.replace(plus, " ");
                    var bytes = 4;
                    try {
                      return decodeURIComponent(result);
                    } catch (error) {
                      while (bytes) {
                        result = result.replace(percentSequence(bytes--), percentDecode);
                      }
                      return result;
                    }
                  };
                  var find = /[!'()~]|%20/g;
                  var replace = {
                    "!": "%21",
                    "'": "%27",
                    "(": "%28",
                    ")": "%29",
                    "~": "%7E",
                    "%20": "+"
                  };
                  var replacer = function(match) {
                    return replace[match];
                  };
                  var serialize = function(it) {
                    return encodeURIComponent(it).replace(find, replacer);
                  };
                  var parseSearchParams = function(result, query) {
                    if (query) {
                      var attributes = query.split("&");
                      var index = 0;
                      var attribute, entry;
                      while (index < attributes.length) {
                        attribute = attributes[index++];
                        if (attribute.length) {
                          entry = attribute.split("=");
                          result.push({
                            key: deserialize(entry.shift()),
                            value: deserialize(entry.join("="))
                          });
                        }
                      }
                    }
                  };
                  var updateSearchParams = function(query) {
                    this.entries.length = 0;
                    parseSearchParams(this.entries, query);
                  };
                  var validateArgumentsLength = function(passed, required) {
                    if (passed < required)
                      throw TypeError("Not enough arguments");
                  };
                  var URLSearchParamsIterator = createIteratorConstructor(function Iterator(params, kind) {
                    setInternalState(this, {
                      type: URL_SEARCH_PARAMS_ITERATOR,
                      iterator: getIterator(getInternalParamsState(params).entries),
                      kind
                    });
                  }, "Iterator", function next() {
                    var state = getInternalIteratorState(this);
                    var kind = state.kind;
                    var step = state.iterator.next();
                    var entry = step.value;
                    if (!step.done) {
                      step.value = kind === "keys" ? entry.key : kind === "values" ? entry.value : [entry.key, entry.value];
                    }
                    return step;
                  });
                  var URLSearchParamsConstructor = function URLSearchParams2() {
                    anInstance(this, URLSearchParamsConstructor, URL_SEARCH_PARAMS);
                    var init = arguments.length > 0 ? arguments[0] : void 0;
                    var that = this;
                    var entries = [];
                    var iteratorMethod, iterator, next, step, entryIterator, entryNext, first, second, key;
                    setInternalState(that, {
                      type: URL_SEARCH_PARAMS,
                      entries,
                      updateURL: function() {
                      },
                      updateSearchParams
                    });
                    if (init !== void 0) {
                      if (isObject(init)) {
                        iteratorMethod = getIteratorMethod(init);
                        if (typeof iteratorMethod === "function") {
                          iterator = iteratorMethod.call(init);
                          next = iterator.next;
                          while (!(step = next.call(iterator)).done) {
                            entryIterator = getIterator(anObject(step.value));
                            entryNext = entryIterator.next;
                            if ((first = entryNext.call(entryIterator)).done || (second = entryNext.call(entryIterator)).done || !entryNext.call(entryIterator).done)
                              throw TypeError("Expected sequence with length 2");
                            entries.push({ key: first.value + "", value: second.value + "" });
                          }
                        } else
                          for (key in init)
                            if (hasOwn(init, key))
                              entries.push({ key, value: init[key] + "" });
                      } else {
                        parseSearchParams(entries, typeof init === "string" ? init.charAt(0) === "?" ? init.slice(1) : init : init + "");
                      }
                    }
                  };
                  var URLSearchParamsPrototype = URLSearchParamsConstructor.prototype;
                  redefineAll(URLSearchParamsPrototype, {
                    // `URLSearchParams.prototype.append` method
                    // https://url.spec.whatwg.org/#dom-urlsearchparams-append
                    append: function append(name, value) {
                      validateArgumentsLength(arguments.length, 2);
                      var state = getInternalParamsState(this);
                      state.entries.push({ key: name + "", value: value + "" });
                      state.updateURL();
                    },
                    // `URLSearchParams.prototype.delete` method
                    // https://url.spec.whatwg.org/#dom-urlsearchparams-delete
                    "delete": function(name) {
                      validateArgumentsLength(arguments.length, 1);
                      var state = getInternalParamsState(this);
                      var entries = state.entries;
                      var key = name + "";
                      var index = 0;
                      while (index < entries.length) {
                        if (entries[index].key === key)
                          entries.splice(index, 1);
                        else
                          index++;
                      }
                      state.updateURL();
                    },
                    // `URLSearchParams.prototype.get` method
                    // https://url.spec.whatwg.org/#dom-urlsearchparams-get
                    get: function get(name) {
                      validateArgumentsLength(arguments.length, 1);
                      var entries = getInternalParamsState(this).entries;
                      var key = name + "";
                      var index = 0;
                      for (; index < entries.length; index++) {
                        if (entries[index].key === key)
                          return entries[index].value;
                      }
                      return null;
                    },
                    // `URLSearchParams.prototype.getAll` method
                    // https://url.spec.whatwg.org/#dom-urlsearchparams-getall
                    getAll: function getAll(name) {
                      validateArgumentsLength(arguments.length, 1);
                      var entries = getInternalParamsState(this).entries;
                      var key = name + "";
                      var result = [];
                      var index = 0;
                      for (; index < entries.length; index++) {
                        if (entries[index].key === key)
                          result.push(entries[index].value);
                      }
                      return result;
                    },
                    // `URLSearchParams.prototype.has` method
                    // https://url.spec.whatwg.org/#dom-urlsearchparams-has
                    has: function has(name) {
                      validateArgumentsLength(arguments.length, 1);
                      var entries = getInternalParamsState(this).entries;
                      var key = name + "";
                      var index = 0;
                      while (index < entries.length) {
                        if (entries[index++].key === key)
                          return true;
                      }
                      return false;
                    },
                    // `URLSearchParams.prototype.set` method
                    // https://url.spec.whatwg.org/#dom-urlsearchparams-set
                    set: function set(name, value) {
                      validateArgumentsLength(arguments.length, 1);
                      var state = getInternalParamsState(this);
                      var entries = state.entries;
                      var found = false;
                      var key = name + "";
                      var val = value + "";
                      var index = 0;
                      var entry;
                      for (; index < entries.length; index++) {
                        entry = entries[index];
                        if (entry.key === key) {
                          if (found)
                            entries.splice(index--, 1);
                          else {
                            found = true;
                            entry.value = val;
                          }
                        }
                      }
                      if (!found)
                        entries.push({ key, value: val });
                      state.updateURL();
                    },
                    // `URLSearchParams.prototype.sort` method
                    // https://url.spec.whatwg.org/#dom-urlsearchparams-sort
                    sort: function sort() {
                      var state = getInternalParamsState(this);
                      var entries = state.entries;
                      var slice = entries.slice();
                      var entry, entriesIndex, sliceIndex;
                      entries.length = 0;
                      for (sliceIndex = 0; sliceIndex < slice.length; sliceIndex++) {
                        entry = slice[sliceIndex];
                        for (entriesIndex = 0; entriesIndex < sliceIndex; entriesIndex++) {
                          if (entries[entriesIndex].key > entry.key) {
                            entries.splice(entriesIndex, 0, entry);
                            break;
                          }
                        }
                        if (entriesIndex === sliceIndex)
                          entries.push(entry);
                      }
                      state.updateURL();
                    },
                    // `URLSearchParams.prototype.forEach` method
                    forEach: function forEach(callback) {
                      var entries = getInternalParamsState(this).entries;
                      var boundFunction = bind(callback, arguments.length > 1 ? arguments[1] : void 0, 3);
                      var index = 0;
                      var entry;
                      while (index < entries.length) {
                        entry = entries[index++];
                        boundFunction(entry.value, entry.key, this);
                      }
                    },
                    // `URLSearchParams.prototype.keys` method
                    keys: function keys() {
                      return new URLSearchParamsIterator(this, "keys");
                    },
                    // `URLSearchParams.prototype.values` method
                    values: function values() {
                      return new URLSearchParamsIterator(this, "values");
                    },
                    // `URLSearchParams.prototype.entries` method
                    entries: function entries() {
                      return new URLSearchParamsIterator(this, "entries");
                    }
                  }, { enumerable: true });
                  redefine(URLSearchParamsPrototype, ITERATOR, URLSearchParamsPrototype.entries);
                  redefine(URLSearchParamsPrototype, "toString", function toString() {
                    var entries = getInternalParamsState(this).entries;
                    var result = [];
                    var index = 0;
                    var entry;
                    while (index < entries.length) {
                      entry = entries[index++];
                      result.push(serialize(entry.key) + "=" + serialize(entry.value));
                    }
                    return result.join("&");
                  }, { enumerable: true });
                  setToStringTag(URLSearchParamsConstructor, URL_SEARCH_PARAMS);
                  $2({ global: true, forced: !USE_NATIVE_URL }, {
                    URLSearchParams: URLSearchParamsConstructor
                  });
                  if (!USE_NATIVE_URL && typeof $fetch == "function" && typeof Headers == "function") {
                    $2({ global: true, enumerable: true, forced: true }, {
                      fetch: function fetch(input) {
                        var args = [input];
                        var init, body, headers;
                        if (arguments.length > 1) {
                          init = arguments[1];
                          if (isObject(init)) {
                            body = init.body;
                            if (classof(body) === URL_SEARCH_PARAMS) {
                              headers = init.headers ? new Headers(init.headers) : new Headers();
                              if (!headers.has("content-type")) {
                                headers.set("content-type", "application/x-www-form-urlencoded;charset=UTF-8");
                              }
                              init = create(init, {
                                body: createPropertyDescriptor(0, String(body)),
                                headers: createPropertyDescriptor(0, headers)
                              });
                            }
                          }
                          args.push(init);
                        }
                        return $fetch.apply(this, args);
                      }
                    });
                  }
                  module2.exports = {
                    URLSearchParams: URLSearchParamsConstructor,
                    getState: getInternalParamsState
                  };
                }
              ),
              /***/
              285: (
                /***/
                function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__2) {
                  "use strict";
                  __webpack_require__2(8783);
                  var $2 = __webpack_require__2(2109);
                  var DESCRIPTORS = __webpack_require__2(9781);
                  var USE_NATIVE_URL = __webpack_require__2(590);
                  var global2 = __webpack_require__2(7854);
                  var defineProperties = __webpack_require__2(6048);
                  var redefine = __webpack_require__2(1320);
                  var anInstance = __webpack_require__2(5787);
                  var has = __webpack_require__2(6656);
                  var assign = __webpack_require__2(1574);
                  var arrayFrom = __webpack_require__2(8457);
                  var codeAt = __webpack_require__2(8710).codeAt;
                  var toASCII = __webpack_require__2(3197);
                  var setToStringTag = __webpack_require__2(8003);
                  var URLSearchParamsModule = __webpack_require__2(1637);
                  var InternalStateModule = __webpack_require__2(9909);
                  var NativeURL = global2.URL;
                  var URLSearchParams2 = URLSearchParamsModule.URLSearchParams;
                  var getInternalSearchParamsState = URLSearchParamsModule.getState;
                  var setInternalState = InternalStateModule.set;
                  var getInternalURLState = InternalStateModule.getterFor("URL");
                  var floor = Math.floor;
                  var pow = Math.pow;
                  var INVALID_AUTHORITY = "Invalid authority";
                  var INVALID_SCHEME = "Invalid scheme";
                  var INVALID_HOST = "Invalid host";
                  var INVALID_PORT = "Invalid port";
                  var ALPHA = /[A-Za-z]/;
                  var ALPHANUMERIC = /[\d+-.A-Za-z]/;
                  var DIGIT = /\d/;
                  var HEX_START = /^(0x|0X)/;
                  var OCT = /^[0-7]+$/;
                  var DEC = /^\d+$/;
                  var HEX = /^[\dA-Fa-f]+$/;
                  var FORBIDDEN_HOST_CODE_POINT = /[\u0000\t\u000A\u000D #%/:?@[\\]]/;
                  var FORBIDDEN_HOST_CODE_POINT_EXCLUDING_PERCENT = /[\u0000\t\u000A\u000D #/:?@[\\]]/;
                  var LEADING_AND_TRAILING_C0_CONTROL_OR_SPACE = /^[\u0000-\u001F ]+|[\u0000-\u001F ]+$/g;
                  var TAB_AND_NEW_LINE = /[\t\u000A\u000D]/g;
                  var EOF;
                  var parseHost = function(url, input) {
                    var result, codePoints, index;
                    if (input.charAt(0) == "[") {
                      if (input.charAt(input.length - 1) != "]")
                        return INVALID_HOST;
                      result = parseIPv6(input.slice(1, -1));
                      if (!result)
                        return INVALID_HOST;
                      url.host = result;
                    } else if (!isSpecial(url)) {
                      if (FORBIDDEN_HOST_CODE_POINT_EXCLUDING_PERCENT.test(input))
                        return INVALID_HOST;
                      result = "";
                      codePoints = arrayFrom(input);
                      for (index = 0; index < codePoints.length; index++) {
                        result += percentEncode(codePoints[index], C0ControlPercentEncodeSet);
                      }
                      url.host = result;
                    } else {
                      input = toASCII(input);
                      if (FORBIDDEN_HOST_CODE_POINT.test(input))
                        return INVALID_HOST;
                      result = parseIPv4(input);
                      if (result === null)
                        return INVALID_HOST;
                      url.host = result;
                    }
                  };
                  var parseIPv4 = function(input) {
                    var parts = input.split(".");
                    var partsLength, numbers, index, part, radix, number, ipv4;
                    if (parts.length && parts[parts.length - 1] == "") {
                      parts.pop();
                    }
                    partsLength = parts.length;
                    if (partsLength > 4)
                      return input;
                    numbers = [];
                    for (index = 0; index < partsLength; index++) {
                      part = parts[index];
                      if (part == "")
                        return input;
                      radix = 10;
                      if (part.length > 1 && part.charAt(0) == "0") {
                        radix = HEX_START.test(part) ? 16 : 8;
                        part = part.slice(radix == 8 ? 1 : 2);
                      }
                      if (part === "") {
                        number = 0;
                      } else {
                        if (!(radix == 10 ? DEC : radix == 8 ? OCT : HEX).test(part))
                          return input;
                        number = parseInt(part, radix);
                      }
                      numbers.push(number);
                    }
                    for (index = 0; index < partsLength; index++) {
                      number = numbers[index];
                      if (index == partsLength - 1) {
                        if (number >= pow(256, 5 - partsLength))
                          return null;
                      } else if (number > 255)
                        return null;
                    }
                    ipv4 = numbers.pop();
                    for (index = 0; index < numbers.length; index++) {
                      ipv4 += numbers[index] * pow(256, 3 - index);
                    }
                    return ipv4;
                  };
                  var parseIPv6 = function(input) {
                    var address = [0, 0, 0, 0, 0, 0, 0, 0];
                    var pieceIndex = 0;
                    var compress = null;
                    var pointer = 0;
                    var value, length, numbersSeen, ipv4Piece, number, swaps, swap;
                    var char = function() {
                      return input.charAt(pointer);
                    };
                    if (char() == ":") {
                      if (input.charAt(1) != ":")
                        return;
                      pointer += 2;
                      pieceIndex++;
                      compress = pieceIndex;
                    }
                    while (char()) {
                      if (pieceIndex == 8)
                        return;
                      if (char() == ":") {
                        if (compress !== null)
                          return;
                        pointer++;
                        pieceIndex++;
                        compress = pieceIndex;
                        continue;
                      }
                      value = length = 0;
                      while (length < 4 && HEX.test(char())) {
                        value = value * 16 + parseInt(char(), 16);
                        pointer++;
                        length++;
                      }
                      if (char() == ".") {
                        if (length == 0)
                          return;
                        pointer -= length;
                        if (pieceIndex > 6)
                          return;
                        numbersSeen = 0;
                        while (char()) {
                          ipv4Piece = null;
                          if (numbersSeen > 0) {
                            if (char() == "." && numbersSeen < 4)
                              pointer++;
                            else
                              return;
                          }
                          if (!DIGIT.test(char()))
                            return;
                          while (DIGIT.test(char())) {
                            number = parseInt(char(), 10);
                            if (ipv4Piece === null)
                              ipv4Piece = number;
                            else if (ipv4Piece == 0)
                              return;
                            else
                              ipv4Piece = ipv4Piece * 10 + number;
                            if (ipv4Piece > 255)
                              return;
                            pointer++;
                          }
                          address[pieceIndex] = address[pieceIndex] * 256 + ipv4Piece;
                          numbersSeen++;
                          if (numbersSeen == 2 || numbersSeen == 4)
                            pieceIndex++;
                        }
                        if (numbersSeen != 4)
                          return;
                        break;
                      } else if (char() == ":") {
                        pointer++;
                        if (!char())
                          return;
                      } else if (char())
                        return;
                      address[pieceIndex++] = value;
                    }
                    if (compress !== null) {
                      swaps = pieceIndex - compress;
                      pieceIndex = 7;
                      while (pieceIndex != 0 && swaps > 0) {
                        swap = address[pieceIndex];
                        address[pieceIndex--] = address[compress + swaps - 1];
                        address[compress + --swaps] = swap;
                      }
                    } else if (pieceIndex != 8)
                      return;
                    return address;
                  };
                  var findLongestZeroSequence = function(ipv6) {
                    var maxIndex = null;
                    var maxLength = 1;
                    var currStart = null;
                    var currLength = 0;
                    var index = 0;
                    for (; index < 8; index++) {
                      if (ipv6[index] !== 0) {
                        if (currLength > maxLength) {
                          maxIndex = currStart;
                          maxLength = currLength;
                        }
                        currStart = null;
                        currLength = 0;
                      } else {
                        if (currStart === null)
                          currStart = index;
                        ++currLength;
                      }
                    }
                    if (currLength > maxLength) {
                      maxIndex = currStart;
                      maxLength = currLength;
                    }
                    return maxIndex;
                  };
                  var serializeHost = function(host) {
                    var result, index, compress, ignore0;
                    if (typeof host == "number") {
                      result = [];
                      for (index = 0; index < 4; index++) {
                        result.unshift(host % 256);
                        host = floor(host / 256);
                      }
                      return result.join(".");
                    } else if (typeof host == "object") {
                      result = "";
                      compress = findLongestZeroSequence(host);
                      for (index = 0; index < 8; index++) {
                        if (ignore0 && host[index] === 0)
                          continue;
                        if (ignore0)
                          ignore0 = false;
                        if (compress === index) {
                          result += index ? ":" : "::";
                          ignore0 = true;
                        } else {
                          result += host[index].toString(16);
                          if (index < 7)
                            result += ":";
                        }
                      }
                      return "[" + result + "]";
                    }
                    return host;
                  };
                  var C0ControlPercentEncodeSet = {};
                  var fragmentPercentEncodeSet = assign({}, C0ControlPercentEncodeSet, {
                    " ": 1,
                    '"': 1,
                    "<": 1,
                    ">": 1,
                    "`": 1
                  });
                  var pathPercentEncodeSet = assign({}, fragmentPercentEncodeSet, {
                    "#": 1,
                    "?": 1,
                    "{": 1,
                    "}": 1
                  });
                  var userinfoPercentEncodeSet = assign({}, pathPercentEncodeSet, {
                    "/": 1,
                    ":": 1,
                    ";": 1,
                    "=": 1,
                    "@": 1,
                    "[": 1,
                    "\\": 1,
                    "]": 1,
                    "^": 1,
                    "|": 1
                  });
                  var percentEncode = function(char, set) {
                    var code = codeAt(char, 0);
                    return code > 32 && code < 127 && !has(set, char) ? char : encodeURIComponent(char);
                  };
                  var specialSchemes = {
                    ftp: 21,
                    file: null,
                    http: 80,
                    https: 443,
                    ws: 80,
                    wss: 443
                  };
                  var isSpecial = function(url) {
                    return has(specialSchemes, url.scheme);
                  };
                  var includesCredentials = function(url) {
                    return url.username != "" || url.password != "";
                  };
                  var cannotHaveUsernamePasswordPort = function(url) {
                    return !url.host || url.cannotBeABaseURL || url.scheme == "file";
                  };
                  var isWindowsDriveLetter = function(string, normalized) {
                    var second;
                    return string.length == 2 && ALPHA.test(string.charAt(0)) && ((second = string.charAt(1)) == ":" || !normalized && second == "|");
                  };
                  var startsWithWindowsDriveLetter = function(string) {
                    var third;
                    return string.length > 1 && isWindowsDriveLetter(string.slice(0, 2)) && (string.length == 2 || ((third = string.charAt(2)) === "/" || third === "\\" || third === "?" || third === "#"));
                  };
                  var shortenURLsPath = function(url) {
                    var path = url.path;
                    var pathSize = path.length;
                    if (pathSize && (url.scheme != "file" || pathSize != 1 || !isWindowsDriveLetter(path[0], true))) {
                      path.pop();
                    }
                  };
                  var isSingleDot = function(segment) {
                    return segment === "." || segment.toLowerCase() === "%2e";
                  };
                  var isDoubleDot = function(segment) {
                    segment = segment.toLowerCase();
                    return segment === ".." || segment === "%2e." || segment === ".%2e" || segment === "%2e%2e";
                  };
                  var SCHEME_START = {};
                  var SCHEME = {};
                  var NO_SCHEME = {};
                  var SPECIAL_RELATIVE_OR_AUTHORITY = {};
                  var PATH_OR_AUTHORITY = {};
                  var RELATIVE = {};
                  var RELATIVE_SLASH = {};
                  var SPECIAL_AUTHORITY_SLASHES = {};
                  var SPECIAL_AUTHORITY_IGNORE_SLASHES = {};
                  var AUTHORITY = {};
                  var HOST = {};
                  var HOSTNAME = {};
                  var PORT = {};
                  var FILE = {};
                  var FILE_SLASH = {};
                  var FILE_HOST = {};
                  var PATH_START = {};
                  var PATH = {};
                  var CANNOT_BE_A_BASE_URL_PATH = {};
                  var QUERY = {};
                  var FRAGMENT = {};
                  var parseURL = function(url, input, stateOverride, base) {
                    var state = stateOverride || SCHEME_START;
                    var pointer = 0;
                    var buffer = "";
                    var seenAt = false;
                    var seenBracket = false;
                    var seenPasswordToken = false;
                    var codePoints, char, bufferCodePoints, failure;
                    if (!stateOverride) {
                      url.scheme = "";
                      url.username = "";
                      url.password = "";
                      url.host = null;
                      url.port = null;
                      url.path = [];
                      url.query = null;
                      url.fragment = null;
                      url.cannotBeABaseURL = false;
                      input = input.replace(LEADING_AND_TRAILING_C0_CONTROL_OR_SPACE, "");
                    }
                    input = input.replace(TAB_AND_NEW_LINE, "");
                    codePoints = arrayFrom(input);
                    while (pointer <= codePoints.length) {
                      char = codePoints[pointer];
                      switch (state) {
                        case SCHEME_START:
                          if (char && ALPHA.test(char)) {
                            buffer += char.toLowerCase();
                            state = SCHEME;
                          } else if (!stateOverride) {
                            state = NO_SCHEME;
                            continue;
                          } else
                            return INVALID_SCHEME;
                          break;
                        case SCHEME:
                          if (char && (ALPHANUMERIC.test(char) || char == "+" || char == "-" || char == ".")) {
                            buffer += char.toLowerCase();
                          } else if (char == ":") {
                            if (stateOverride && (isSpecial(url) != has(specialSchemes, buffer) || buffer == "file" && (includesCredentials(url) || url.port !== null) || url.scheme == "file" && !url.host))
                              return;
                            url.scheme = buffer;
                            if (stateOverride) {
                              if (isSpecial(url) && specialSchemes[url.scheme] == url.port)
                                url.port = null;
                              return;
                            }
                            buffer = "";
                            if (url.scheme == "file") {
                              state = FILE;
                            } else if (isSpecial(url) && base && base.scheme == url.scheme) {
                              state = SPECIAL_RELATIVE_OR_AUTHORITY;
                            } else if (isSpecial(url)) {
                              state = SPECIAL_AUTHORITY_SLASHES;
                            } else if (codePoints[pointer + 1] == "/") {
                              state = PATH_OR_AUTHORITY;
                              pointer++;
                            } else {
                              url.cannotBeABaseURL = true;
                              url.path.push("");
                              state = CANNOT_BE_A_BASE_URL_PATH;
                            }
                          } else if (!stateOverride) {
                            buffer = "";
                            state = NO_SCHEME;
                            pointer = 0;
                            continue;
                          } else
                            return INVALID_SCHEME;
                          break;
                        case NO_SCHEME:
                          if (!base || base.cannotBeABaseURL && char != "#")
                            return INVALID_SCHEME;
                          if (base.cannotBeABaseURL && char == "#") {
                            url.scheme = base.scheme;
                            url.path = base.path.slice();
                            url.query = base.query;
                            url.fragment = "";
                            url.cannotBeABaseURL = true;
                            state = FRAGMENT;
                            break;
                          }
                          state = base.scheme == "file" ? FILE : RELATIVE;
                          continue;
                        case SPECIAL_RELATIVE_OR_AUTHORITY:
                          if (char == "/" && codePoints[pointer + 1] == "/") {
                            state = SPECIAL_AUTHORITY_IGNORE_SLASHES;
                            pointer++;
                          } else {
                            state = RELATIVE;
                            continue;
                          }
                          break;
                        case PATH_OR_AUTHORITY:
                          if (char == "/") {
                            state = AUTHORITY;
                            break;
                          } else {
                            state = PATH;
                            continue;
                          }
                        case RELATIVE:
                          url.scheme = base.scheme;
                          if (char == EOF) {
                            url.username = base.username;
                            url.password = base.password;
                            url.host = base.host;
                            url.port = base.port;
                            url.path = base.path.slice();
                            url.query = base.query;
                          } else if (char == "/" || char == "\\" && isSpecial(url)) {
                            state = RELATIVE_SLASH;
                          } else if (char == "?") {
                            url.username = base.username;
                            url.password = base.password;
                            url.host = base.host;
                            url.port = base.port;
                            url.path = base.path.slice();
                            url.query = "";
                            state = QUERY;
                          } else if (char == "#") {
                            url.username = base.username;
                            url.password = base.password;
                            url.host = base.host;
                            url.port = base.port;
                            url.path = base.path.slice();
                            url.query = base.query;
                            url.fragment = "";
                            state = FRAGMENT;
                          } else {
                            url.username = base.username;
                            url.password = base.password;
                            url.host = base.host;
                            url.port = base.port;
                            url.path = base.path.slice();
                            url.path.pop();
                            state = PATH;
                            continue;
                          }
                          break;
                        case RELATIVE_SLASH:
                          if (isSpecial(url) && (char == "/" || char == "\\")) {
                            state = SPECIAL_AUTHORITY_IGNORE_SLASHES;
                          } else if (char == "/") {
                            state = AUTHORITY;
                          } else {
                            url.username = base.username;
                            url.password = base.password;
                            url.host = base.host;
                            url.port = base.port;
                            state = PATH;
                            continue;
                          }
                          break;
                        case SPECIAL_AUTHORITY_SLASHES:
                          state = SPECIAL_AUTHORITY_IGNORE_SLASHES;
                          if (char != "/" || buffer.charAt(pointer + 1) != "/")
                            continue;
                          pointer++;
                          break;
                        case SPECIAL_AUTHORITY_IGNORE_SLASHES:
                          if (char != "/" && char != "\\") {
                            state = AUTHORITY;
                            continue;
                          }
                          break;
                        case AUTHORITY:
                          if (char == "@") {
                            if (seenAt)
                              buffer = "%40" + buffer;
                            seenAt = true;
                            bufferCodePoints = arrayFrom(buffer);
                            for (var i = 0; i < bufferCodePoints.length; i++) {
                              var codePoint = bufferCodePoints[i];
                              if (codePoint == ":" && !seenPasswordToken) {
                                seenPasswordToken = true;
                                continue;
                              }
                              var encodedCodePoints = percentEncode(codePoint, userinfoPercentEncodeSet);
                              if (seenPasswordToken)
                                url.password += encodedCodePoints;
                              else
                                url.username += encodedCodePoints;
                            }
                            buffer = "";
                          } else if (char == EOF || char == "/" || char == "?" || char == "#" || char == "\\" && isSpecial(url)) {
                            if (seenAt && buffer == "")
                              return INVALID_AUTHORITY;
                            pointer -= arrayFrom(buffer).length + 1;
                            buffer = "";
                            state = HOST;
                          } else
                            buffer += char;
                          break;
                        case HOST:
                        case HOSTNAME:
                          if (stateOverride && url.scheme == "file") {
                            state = FILE_HOST;
                            continue;
                          } else if (char == ":" && !seenBracket) {
                            if (buffer == "")
                              return INVALID_HOST;
                            failure = parseHost(url, buffer);
                            if (failure)
                              return failure;
                            buffer = "";
                            state = PORT;
                            if (stateOverride == HOSTNAME)
                              return;
                          } else if (char == EOF || char == "/" || char == "?" || char == "#" || char == "\\" && isSpecial(url)) {
                            if (isSpecial(url) && buffer == "")
                              return INVALID_HOST;
                            if (stateOverride && buffer == "" && (includesCredentials(url) || url.port !== null))
                              return;
                            failure = parseHost(url, buffer);
                            if (failure)
                              return failure;
                            buffer = "";
                            state = PATH_START;
                            if (stateOverride)
                              return;
                            continue;
                          } else {
                            if (char == "[")
                              seenBracket = true;
                            else if (char == "]")
                              seenBracket = false;
                            buffer += char;
                          }
                          break;
                        case PORT:
                          if (DIGIT.test(char)) {
                            buffer += char;
                          } else if (char == EOF || char == "/" || char == "?" || char == "#" || char == "\\" && isSpecial(url) || stateOverride) {
                            if (buffer != "") {
                              var port = parseInt(buffer, 10);
                              if (port > 65535)
                                return INVALID_PORT;
                              url.port = isSpecial(url) && port === specialSchemes[url.scheme] ? null : port;
                              buffer = "";
                            }
                            if (stateOverride)
                              return;
                            state = PATH_START;
                            continue;
                          } else
                            return INVALID_PORT;
                          break;
                        case FILE:
                          url.scheme = "file";
                          if (char == "/" || char == "\\")
                            state = FILE_SLASH;
                          else if (base && base.scheme == "file") {
                            if (char == EOF) {
                              url.host = base.host;
                              url.path = base.path.slice();
                              url.query = base.query;
                            } else if (char == "?") {
                              url.host = base.host;
                              url.path = base.path.slice();
                              url.query = "";
                              state = QUERY;
                            } else if (char == "#") {
                              url.host = base.host;
                              url.path = base.path.slice();
                              url.query = base.query;
                              url.fragment = "";
                              state = FRAGMENT;
                            } else {
                              if (!startsWithWindowsDriveLetter(codePoints.slice(pointer).join(""))) {
                                url.host = base.host;
                                url.path = base.path.slice();
                                shortenURLsPath(url);
                              }
                              state = PATH;
                              continue;
                            }
                          } else {
                            state = PATH;
                            continue;
                          }
                          break;
                        case FILE_SLASH:
                          if (char == "/" || char == "\\") {
                            state = FILE_HOST;
                            break;
                          }
                          if (base && base.scheme == "file" && !startsWithWindowsDriveLetter(codePoints.slice(pointer).join(""))) {
                            if (isWindowsDriveLetter(base.path[0], true))
                              url.path.push(base.path[0]);
                            else
                              url.host = base.host;
                          }
                          state = PATH;
                          continue;
                        case FILE_HOST:
                          if (char == EOF || char == "/" || char == "\\" || char == "?" || char == "#") {
                            if (!stateOverride && isWindowsDriveLetter(buffer)) {
                              state = PATH;
                            } else if (buffer == "") {
                              url.host = "";
                              if (stateOverride)
                                return;
                              state = PATH_START;
                            } else {
                              failure = parseHost(url, buffer);
                              if (failure)
                                return failure;
                              if (url.host == "localhost")
                                url.host = "";
                              if (stateOverride)
                                return;
                              buffer = "";
                              state = PATH_START;
                            }
                            continue;
                          } else
                            buffer += char;
                          break;
                        case PATH_START:
                          if (isSpecial(url)) {
                            state = PATH;
                            if (char != "/" && char != "\\")
                              continue;
                          } else if (!stateOverride && char == "?") {
                            url.query = "";
                            state = QUERY;
                          } else if (!stateOverride && char == "#") {
                            url.fragment = "";
                            state = FRAGMENT;
                          } else if (char != EOF) {
                            state = PATH;
                            if (char != "/")
                              continue;
                          }
                          break;
                        case PATH:
                          if (char == EOF || char == "/" || char == "\\" && isSpecial(url) || !stateOverride && (char == "?" || char == "#")) {
                            if (isDoubleDot(buffer)) {
                              shortenURLsPath(url);
                              if (char != "/" && !(char == "\\" && isSpecial(url))) {
                                url.path.push("");
                              }
                            } else if (isSingleDot(buffer)) {
                              if (char != "/" && !(char == "\\" && isSpecial(url))) {
                                url.path.push("");
                              }
                            } else {
                              if (url.scheme == "file" && !url.path.length && isWindowsDriveLetter(buffer)) {
                                if (url.host)
                                  url.host = "";
                                buffer = buffer.charAt(0) + ":";
                              }
                              url.path.push(buffer);
                            }
                            buffer = "";
                            if (url.scheme == "file" && (char == EOF || char == "?" || char == "#")) {
                              while (url.path.length > 1 && url.path[0] === "") {
                                url.path.shift();
                              }
                            }
                            if (char == "?") {
                              url.query = "";
                              state = QUERY;
                            } else if (char == "#") {
                              url.fragment = "";
                              state = FRAGMENT;
                            }
                          } else {
                            buffer += percentEncode(char, pathPercentEncodeSet);
                          }
                          break;
                        case CANNOT_BE_A_BASE_URL_PATH:
                          if (char == "?") {
                            url.query = "";
                            state = QUERY;
                          } else if (char == "#") {
                            url.fragment = "";
                            state = FRAGMENT;
                          } else if (char != EOF) {
                            url.path[0] += percentEncode(char, C0ControlPercentEncodeSet);
                          }
                          break;
                        case QUERY:
                          if (!stateOverride && char == "#") {
                            url.fragment = "";
                            state = FRAGMENT;
                          } else if (char != EOF) {
                            if (char == "'" && isSpecial(url))
                              url.query += "%27";
                            else if (char == "#")
                              url.query += "%23";
                            else
                              url.query += percentEncode(char, C0ControlPercentEncodeSet);
                          }
                          break;
                        case FRAGMENT:
                          if (char != EOF)
                            url.fragment += percentEncode(char, fragmentPercentEncodeSet);
                          break;
                      }
                      pointer++;
                    }
                  };
                  var URLConstructor = function URL2(url) {
                    var that = anInstance(this, URLConstructor, "URL");
                    var base = arguments.length > 1 ? arguments[1] : void 0;
                    var urlString = String(url);
                    var state = setInternalState(that, { type: "URL" });
                    var baseState, failure;
                    if (base !== void 0) {
                      if (base instanceof URLConstructor)
                        baseState = getInternalURLState(base);
                      else {
                        failure = parseURL(baseState = {}, String(base));
                        if (failure)
                          throw TypeError(failure);
                      }
                    }
                    failure = parseURL(state, urlString, null, baseState);
                    if (failure)
                      throw TypeError(failure);
                    var searchParams = state.searchParams = new URLSearchParams2();
                    var searchParamsState = getInternalSearchParamsState(searchParams);
                    searchParamsState.updateSearchParams(state.query);
                    searchParamsState.updateURL = function() {
                      state.query = String(searchParams) || null;
                    };
                    if (!DESCRIPTORS) {
                      that.href = serializeURL.call(that);
                      that.origin = getOrigin.call(that);
                      that.protocol = getProtocol.call(that);
                      that.username = getUsername.call(that);
                      that.password = getPassword.call(that);
                      that.host = getHost.call(that);
                      that.hostname = getHostname.call(that);
                      that.port = getPort.call(that);
                      that.pathname = getPathname.call(that);
                      that.search = getSearch.call(that);
                      that.searchParams = getSearchParams.call(that);
                      that.hash = getHash.call(that);
                    }
                  };
                  var URLPrototype = URLConstructor.prototype;
                  var serializeURL = function() {
                    var url = getInternalURLState(this);
                    var scheme = url.scheme;
                    var username = url.username;
                    var password = url.password;
                    var host = url.host;
                    var port = url.port;
                    var path = url.path;
                    var query = url.query;
                    var fragment = url.fragment;
                    var output = scheme + ":";
                    if (host !== null) {
                      output += "//";
                      if (includesCredentials(url)) {
                        output += username + (password ? ":" + password : "") + "@";
                      }
                      output += serializeHost(host);
                      if (port !== null)
                        output += ":" + port;
                    } else if (scheme == "file")
                      output += "//";
                    output += url.cannotBeABaseURL ? path[0] : path.length ? "/" + path.join("/") : "";
                    if (query !== null)
                      output += "?" + query;
                    if (fragment !== null)
                      output += "#" + fragment;
                    return output;
                  };
                  var getOrigin = function() {
                    var url = getInternalURLState(this);
                    var scheme = url.scheme;
                    var port = url.port;
                    if (scheme == "blob")
                      try {
                        return new URL(scheme.path[0]).origin;
                      } catch (error) {
                        return "null";
                      }
                    if (scheme == "file" || !isSpecial(url))
                      return "null";
                    return scheme + "://" + serializeHost(url.host) + (port !== null ? ":" + port : "");
                  };
                  var getProtocol = function() {
                    return getInternalURLState(this).scheme + ":";
                  };
                  var getUsername = function() {
                    return getInternalURLState(this).username;
                  };
                  var getPassword = function() {
                    return getInternalURLState(this).password;
                  };
                  var getHost = function() {
                    var url = getInternalURLState(this);
                    var host = url.host;
                    var port = url.port;
                    return host === null ? "" : port === null ? serializeHost(host) : serializeHost(host) + ":" + port;
                  };
                  var getHostname = function() {
                    var host = getInternalURLState(this).host;
                    return host === null ? "" : serializeHost(host);
                  };
                  var getPort = function() {
                    var port = getInternalURLState(this).port;
                    return port === null ? "" : String(port);
                  };
                  var getPathname = function() {
                    var url = getInternalURLState(this);
                    var path = url.path;
                    return url.cannotBeABaseURL ? path[0] : path.length ? "/" + path.join("/") : "";
                  };
                  var getSearch = function() {
                    var query = getInternalURLState(this).query;
                    return query ? "?" + query : "";
                  };
                  var getSearchParams = function() {
                    return getInternalURLState(this).searchParams;
                  };
                  var getHash = function() {
                    var fragment = getInternalURLState(this).fragment;
                    return fragment ? "#" + fragment : "";
                  };
                  var accessorDescriptor = function(getter, setter) {
                    return { get: getter, set: setter, configurable: true, enumerable: true };
                  };
                  if (DESCRIPTORS) {
                    defineProperties(URLPrototype, {
                      // `URL.prototype.href` accessors pair
                      // https://url.spec.whatwg.org/#dom-url-href
                      href: accessorDescriptor(serializeURL, function(href) {
                        var url = getInternalURLState(this);
                        var urlString = String(href);
                        var failure = parseURL(url, urlString);
                        if (failure)
                          throw TypeError(failure);
                        getInternalSearchParamsState(url.searchParams).updateSearchParams(url.query);
                      }),
                      // `URL.prototype.origin` getter
                      // https://url.spec.whatwg.org/#dom-url-origin
                      origin: accessorDescriptor(getOrigin),
                      // `URL.prototype.protocol` accessors pair
                      // https://url.spec.whatwg.org/#dom-url-protocol
                      protocol: accessorDescriptor(getProtocol, function(protocol) {
                        var url = getInternalURLState(this);
                        parseURL(url, String(protocol) + ":", SCHEME_START);
                      }),
                      // `URL.prototype.username` accessors pair
                      // https://url.spec.whatwg.org/#dom-url-username
                      username: accessorDescriptor(getUsername, function(username) {
                        var url = getInternalURLState(this);
                        var codePoints = arrayFrom(String(username));
                        if (cannotHaveUsernamePasswordPort(url))
                          return;
                        url.username = "";
                        for (var i = 0; i < codePoints.length; i++) {
                          url.username += percentEncode(codePoints[i], userinfoPercentEncodeSet);
                        }
                      }),
                      // `URL.prototype.password` accessors pair
                      // https://url.spec.whatwg.org/#dom-url-password
                      password: accessorDescriptor(getPassword, function(password) {
                        var url = getInternalURLState(this);
                        var codePoints = arrayFrom(String(password));
                        if (cannotHaveUsernamePasswordPort(url))
                          return;
                        url.password = "";
                        for (var i = 0; i < codePoints.length; i++) {
                          url.password += percentEncode(codePoints[i], userinfoPercentEncodeSet);
                        }
                      }),
                      // `URL.prototype.host` accessors pair
                      // https://url.spec.whatwg.org/#dom-url-host
                      host: accessorDescriptor(getHost, function(host) {
                        var url = getInternalURLState(this);
                        if (url.cannotBeABaseURL)
                          return;
                        parseURL(url, String(host), HOST);
                      }),
                      // `URL.prototype.hostname` accessors pair
                      // https://url.spec.whatwg.org/#dom-url-hostname
                      hostname: accessorDescriptor(getHostname, function(hostname) {
                        var url = getInternalURLState(this);
                        if (url.cannotBeABaseURL)
                          return;
                        parseURL(url, String(hostname), HOSTNAME);
                      }),
                      // `URL.prototype.port` accessors pair
                      // https://url.spec.whatwg.org/#dom-url-port
                      port: accessorDescriptor(getPort, function(port) {
                        var url = getInternalURLState(this);
                        if (cannotHaveUsernamePasswordPort(url))
                          return;
                        port = String(port);
                        if (port == "")
                          url.port = null;
                        else
                          parseURL(url, port, PORT);
                      }),
                      // `URL.prototype.pathname` accessors pair
                      // https://url.spec.whatwg.org/#dom-url-pathname
                      pathname: accessorDescriptor(getPathname, function(pathname) {
                        var url = getInternalURLState(this);
                        if (url.cannotBeABaseURL)
                          return;
                        url.path = [];
                        parseURL(url, pathname + "", PATH_START);
                      }),
                      // `URL.prototype.search` accessors pair
                      // https://url.spec.whatwg.org/#dom-url-search
                      search: accessorDescriptor(getSearch, function(search) {
                        var url = getInternalURLState(this);
                        search = String(search);
                        if (search == "") {
                          url.query = null;
                        } else {
                          if ("?" == search.charAt(0))
                            search = search.slice(1);
                          url.query = "";
                          parseURL(url, search, QUERY);
                        }
                        getInternalSearchParamsState(url.searchParams).updateSearchParams(url.query);
                      }),
                      // `URL.prototype.searchParams` getter
                      // https://url.spec.whatwg.org/#dom-url-searchparams
                      searchParams: accessorDescriptor(getSearchParams),
                      // `URL.prototype.hash` accessors pair
                      // https://url.spec.whatwg.org/#dom-url-hash
                      hash: accessorDescriptor(getHash, function(hash) {
                        var url = getInternalURLState(this);
                        hash = String(hash);
                        if (hash == "") {
                          url.fragment = null;
                          return;
                        }
                        if ("#" == hash.charAt(0))
                          hash = hash.slice(1);
                        url.fragment = "";
                        parseURL(url, hash, FRAGMENT);
                      })
                    });
                  }
                  redefine(URLPrototype, "toJSON", function toJSON() {
                    return serializeURL.call(this);
                  }, { enumerable: true });
                  redefine(URLPrototype, "toString", function toString() {
                    return serializeURL.call(this);
                  }, { enumerable: true });
                  if (NativeURL) {
                    var nativeCreateObjectURL = NativeURL.createObjectURL;
                    var nativeRevokeObjectURL = NativeURL.revokeObjectURL;
                    if (nativeCreateObjectURL)
                      redefine(URLConstructor, "createObjectURL", function createObjectURL(blob) {
                        return nativeCreateObjectURL.apply(NativeURL, arguments);
                      });
                    if (nativeRevokeObjectURL)
                      redefine(URLConstructor, "revokeObjectURL", function revokeObjectURL(url) {
                        return nativeRevokeObjectURL.apply(NativeURL, arguments);
                      });
                  }
                  setToStringTag(URLConstructor, "URL");
                  $2({ global: true, forced: !USE_NATIVE_URL, sham: !DESCRIPTORS }, {
                    URL: URLConstructor
                  });
                }
              )
              /******/
            };
            var __webpack_module_cache__ = {};
            function __webpack_require__(moduleId) {
              if (__webpack_module_cache__[moduleId]) {
                return __webpack_module_cache__[moduleId].exports;
              }
              var module2 = __webpack_module_cache__[moduleId] = {
                /******/
                // no module.id needed
                /******/
                // no module.loaded needed
                /******/
                exports: {}
                /******/
              };
              __webpack_modules__[moduleId](module2, module2.exports, __webpack_require__);
              return module2.exports;
            }
            !function() {
              __webpack_require__.d = function(exports2, definition) {
                for (var key in definition) {
                  if (__webpack_require__.o(definition, key) && !__webpack_require__.o(exports2, key)) {
                    Object.defineProperty(exports2, key, { enumerable: true, get: definition[key] });
                  }
                }
              };
            }();
            !function() {
              __webpack_require__.g = function() {
                if (typeof globalThis === "object")
                  return globalThis;
                try {
                  return this || new Function("return this")();
                } catch (e) {
                  if (typeof window === "object")
                    return window;
                }
              }();
            }();
            !function() {
              __webpack_require__.o = function(obj, prop) {
                return Object.prototype.hasOwnProperty.call(obj, prop);
              };
            }();
            !function() {
              __webpack_require__.r = function(exports2) {
                if (typeof Symbol !== "undefined" && Symbol.toStringTag) {
                  Object.defineProperty(exports2, Symbol.toStringTag, { value: "Module" });
                }
                Object.defineProperty(exports2, "__esModule", { value: true });
              };
            }();
            var __webpack_exports__ = {};
            !function() {
              "use strict";
              __webpack_require__.r(__webpack_exports__);
              __webpack_require__.d(__webpack_exports__, {
                "Dropzone": function() {
                  return (
                    /* reexport */
                    Dropzone2
                  );
                },
                "default": function() {
                  return (
                    /* binding */
                    dropzone_dist
                  );
                }
              });
              var es_array_concat = __webpack_require__(2222);
              var es_array_filter = __webpack_require__(7327);
              var es_array_index_of = __webpack_require__(2772);
              var es_array_iterator = __webpack_require__(6992);
              var es_array_map = __webpack_require__(1249);
              var es_array_slice = __webpack_require__(7042);
              var es_array_splice = __webpack_require__(561);
              var es_array_buffer_constructor = __webpack_require__(8264);
              var es_function_name = __webpack_require__(8309);
              var es_object_get_prototype_of = __webpack_require__(489);
              var es_object_to_string = __webpack_require__(1539);
              var es_regexp_exec = __webpack_require__(4916);
              var es_regexp_to_string = __webpack_require__(9714);
              var es_string_iterator = __webpack_require__(8783);
              var es_string_match = __webpack_require__(4723);
              var es_string_replace = __webpack_require__(5306);
              var es_string_split = __webpack_require__(3123);
              var es_string_trim = __webpack_require__(3210);
              var es_typed_array_uint8_array = __webpack_require__(2472);
              var es_typed_array_copy_within = __webpack_require__(2990);
              var es_typed_array_every = __webpack_require__(8927);
              var es_typed_array_fill = __webpack_require__(3105);
              var es_typed_array_filter = __webpack_require__(5035);
              var es_typed_array_find = __webpack_require__(4345);
              var es_typed_array_find_index = __webpack_require__(7174);
              var es_typed_array_for_each = __webpack_require__(2846);
              var es_typed_array_includes = __webpack_require__(4731);
              var es_typed_array_index_of = __webpack_require__(7209);
              var es_typed_array_iterator = __webpack_require__(6319);
              var es_typed_array_join = __webpack_require__(8867);
              var es_typed_array_last_index_of = __webpack_require__(7789);
              var es_typed_array_map = __webpack_require__(3739);
              var es_typed_array_reduce = __webpack_require__(9368);
              var es_typed_array_reduce_right = __webpack_require__(4483);
              var es_typed_array_reverse = __webpack_require__(2056);
              var es_typed_array_set = __webpack_require__(3462);
              var es_typed_array_slice = __webpack_require__(678);
              var es_typed_array_some = __webpack_require__(7462);
              var es_typed_array_sort = __webpack_require__(3824);
              var es_typed_array_subarray = __webpack_require__(5021);
              var es_typed_array_to_locale_string = __webpack_require__(2974);
              var es_typed_array_to_string = __webpack_require__(5016);
              var web_dom_collections_for_each = __webpack_require__(4747);
              var web_dom_collections_iterator = __webpack_require__(3948);
              var web_url = __webpack_require__(285);
              ;
              function _createForOfIteratorHelper(o, allowArrayLike) {
                var it;
                if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) {
                  if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
                    if (it)
                      o = it;
                    var i = 0;
                    var F = function F2() {
                    };
                    return { s: F, n: function n() {
                      if (i >= o.length)
                        return { done: true };
                      return { done: false, value: o[i++] };
                    }, e: function e(_e) {
                      throw _e;
                    }, f: F };
                  }
                  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
                }
                var normalCompletion = true, didErr = false, err;
                return { s: function s() {
                  it = o[Symbol.iterator]();
                }, n: function n() {
                  var step = it.next();
                  normalCompletion = step.done;
                  return step;
                }, e: function e(_e2) {
                  didErr = true;
                  err = _e2;
                }, f: function f() {
                  try {
                    if (!normalCompletion && it.return != null)
                      it.return();
                  } finally {
                    if (didErr)
                      throw err;
                  }
                } };
              }
              function _unsupportedIterableToArray(o, minLen) {
                if (!o)
                  return;
                if (typeof o === "string")
                  return _arrayLikeToArray(o, minLen);
                var n = Object.prototype.toString.call(o).slice(8, -1);
                if (n === "Object" && o.constructor)
                  n = o.constructor.name;
                if (n === "Map" || n === "Set")
                  return Array.from(o);
                if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
                  return _arrayLikeToArray(o, minLen);
              }
              function _arrayLikeToArray(arr, len) {
                if (len == null || len > arr.length)
                  len = arr.length;
                for (var i = 0, arr2 = new Array(len); i < len; i++) {
                  arr2[i] = arr[i];
                }
                return arr2;
              }
              function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                  throw new TypeError("Cannot call a class as a function");
                }
              }
              function _defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                  var descriptor = props[i];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor)
                    descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }
              function _createClass(Constructor, protoProps, staticProps) {
                if (protoProps)
                  _defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                  _defineProperties(Constructor, staticProps);
                return Constructor;
              }
              var Emitter = /* @__PURE__ */ function() {
                function Emitter2() {
                  _classCallCheck(this, Emitter2);
                }
                _createClass(Emitter2, [{
                  key: "on",
                  value: (
                    // Add an event listener for given event
                    function on(event, fn) {
                      this._callbacks = this._callbacks || {};
                      if (!this._callbacks[event]) {
                        this._callbacks[event] = [];
                      }
                      this._callbacks[event].push(fn);
                      return this;
                    }
                  )
                }, {
                  key: "emit",
                  value: function emit(event) {
                    this._callbacks = this._callbacks || {};
                    var callbacks = this._callbacks[event];
                    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                      args[_key - 1] = arguments[_key];
                    }
                    if (callbacks) {
                      var _iterator = _createForOfIteratorHelper(callbacks, true), _step;
                      try {
                        for (_iterator.s(); !(_step = _iterator.n()).done; ) {
                          var callback = _step.value;
                          callback.apply(this, args);
                        }
                      } catch (err) {
                        _iterator.e(err);
                      } finally {
                        _iterator.f();
                      }
                    }
                    if (this.element) {
                      this.element.dispatchEvent(this.makeEvent("dropzone:" + event, {
                        args
                      }));
                    }
                    return this;
                  }
                }, {
                  key: "makeEvent",
                  value: function makeEvent(eventName, detail) {
                    var params = {
                      bubbles: true,
                      cancelable: true,
                      detail
                    };
                    if (typeof window.CustomEvent === "function") {
                      return new CustomEvent(eventName, params);
                    } else {
                      var evt = document.createEvent("CustomEvent");
                      evt.initCustomEvent(eventName, params.bubbles, params.cancelable, params.detail);
                      return evt;
                    }
                  }
                  // Remove event listener for given event. If fn is not provided, all event
                  // listeners for that event will be removed. If neither is provided, all
                  // event listeners will be removed.
                }, {
                  key: "off",
                  value: function off(event, fn) {
                    if (!this._callbacks || arguments.length === 0) {
                      this._callbacks = {};
                      return this;
                    }
                    var callbacks = this._callbacks[event];
                    if (!callbacks) {
                      return this;
                    }
                    if (arguments.length === 1) {
                      delete this._callbacks[event];
                      return this;
                    }
                    for (var i = 0; i < callbacks.length; i++) {
                      var callback = callbacks[i];
                      if (callback === fn) {
                        callbacks.splice(i, 1);
                        break;
                      }
                    }
                    return this;
                  }
                }]);
                return Emitter2;
              }();
              ;
              var code = '<div class="dz-preview dz-file-preview"> <div class="dz-image"><img data-dz-thumbnail/></div> <div class="dz-details"> <div class="dz-size"><span data-dz-size></span></div> <div class="dz-filename"><span data-dz-name></span></div> </div> <div class="dz-progress"> <span class="dz-upload" data-dz-uploadprogress></span> </div> <div class="dz-error-message"><span data-dz-errormessage></span></div> <div class="dz-success-mark"> <svg width="54px" height="54px" viewBox="0 0 54 54" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"> <title>Check</title> <g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd"> <path d="M23.5,31.8431458 L17.5852419,25.9283877 C16.0248253,24.3679711 13.4910294,24.366835 11.9289322,25.9289322 C10.3700136,27.4878508 10.3665912,30.0234455 11.9283877,31.5852419 L20.4147581,40.0716123 C20.5133999,40.1702541 20.6159315,40.2626649 20.7218615,40.3488435 C22.2835669,41.8725651 24.794234,41.8626202 26.3461564,40.3106978 L43.3106978,23.3461564 C44.8771021,21.7797521 44.8758057,19.2483887 43.3137085,17.6862915 C41.7547899,16.1273729 39.2176035,16.1255422 37.6538436,17.6893022 L23.5,31.8431458 Z M27,53 C41.3594035,53 53,41.3594035 53,27 C53,12.6405965 41.3594035,1 27,1 C12.6405965,1 1,12.6405965 1,27 C1,41.3594035 12.6405965,53 27,53 Z" stroke-opacity="0.198794158" stroke="#747474" fill-opacity="0.816519475" fill="#FFFFFF"></path> </g> </svg> </div> <div class="dz-error-mark"> <svg width="54px" height="54px" viewBox="0 0 54 54" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"> <title>Error</title> <g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd"> <g stroke="#747474" stroke-opacity="0.198794158" fill="#FFFFFF" fill-opacity="0.816519475"> <path d="M32.6568542,29 L38.3106978,23.3461564 C39.8771021,21.7797521 39.8758057,19.2483887 38.3137085,17.6862915 C36.7547899,16.1273729 34.2176035,16.1255422 32.6538436,17.6893022 L27,23.3431458 L21.3461564,17.6893022 C19.7823965,16.1255422 17.2452101,16.1273729 15.6862915,17.6862915 C14.1241943,19.2483887 14.1228979,21.7797521 15.6893022,23.3461564 L21.3431458,29 L15.6893022,34.6538436 C14.1228979,36.2202479 14.1241943,38.7516113 15.6862915,40.3137085 C17.2452101,41.8726271 19.7823965,41.8744578 21.3461564,40.3106978 L27,34.6568542 L32.6538436,40.3106978 C34.2176035,41.8744578 36.7547899,41.8726271 38.3137085,40.3137085 C39.8758057,38.7516113 39.8771021,36.2202479 38.3106978,34.6538436 L32.6568542,29 Z M27,53 C41.3594035,53 53,41.3594035 53,27 C53,12.6405965 41.3594035,1 27,1 C12.6405965,1 1,12.6405965 1,27 C1,41.3594035 12.6405965,53 27,53 Z"></path> </g> </g> </svg> </div> </div> ';
              var preview_template = code;
              ;
              function options_createForOfIteratorHelper(o, allowArrayLike) {
                var it;
                if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) {
                  if (Array.isArray(o) || (it = options_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
                    if (it)
                      o = it;
                    var i = 0;
                    var F = function F2() {
                    };
                    return { s: F, n: function n() {
                      if (i >= o.length)
                        return { done: true };
                      return { done: false, value: o[i++] };
                    }, e: function e(_e) {
                      throw _e;
                    }, f: F };
                  }
                  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
                }
                var normalCompletion = true, didErr = false, err;
                return { s: function s() {
                  it = o[Symbol.iterator]();
                }, n: function n() {
                  var step = it.next();
                  normalCompletion = step.done;
                  return step;
                }, e: function e(_e2) {
                  didErr = true;
                  err = _e2;
                }, f: function f() {
                  try {
                    if (!normalCompletion && it.return != null)
                      it.return();
                  } finally {
                    if (didErr)
                      throw err;
                  }
                } };
              }
              function options_unsupportedIterableToArray(o, minLen) {
                if (!o)
                  return;
                if (typeof o === "string")
                  return options_arrayLikeToArray(o, minLen);
                var n = Object.prototype.toString.call(o).slice(8, -1);
                if (n === "Object" && o.constructor)
                  n = o.constructor.name;
                if (n === "Map" || n === "Set")
                  return Array.from(o);
                if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
                  return options_arrayLikeToArray(o, minLen);
              }
              function options_arrayLikeToArray(arr, len) {
                if (len == null || len > arr.length)
                  len = arr.length;
                for (var i = 0, arr2 = new Array(len); i < len; i++) {
                  arr2[i] = arr[i];
                }
                return arr2;
              }
              var defaultOptions = {
                /**
                 * Has to be specified on elements other than form (or when the form
                 * doesn't have an `action` attribute). You can also
                 * provide a function that will be called with `files` and
                 * must return the url (since `v3.12.0`)
                 */
                url: null,
                /**
                 * Can be changed to `"put"` if necessary. You can also provide a function
                 * that will be called with `files` and must return the method (since `v3.12.0`).
                 */
                method: "post",
                /**
                 * Will be set on the XHRequest.
                 */
                withCredentials: false,
                /**
                 * The timeout for the XHR requests in milliseconds (since `v4.4.0`).
                 * If set to null or 0, no timeout is going to be set.
                 */
                timeout: null,
                /**
                 * How many file uploads to process in parallel (See the
                 * Enqueuing file uploads documentation section for more info)
                 */
                parallelUploads: 2,
                /**
                 * Whether to send multiple files in one request. If
                 * this it set to true, then the fallback file input element will
                 * have the `multiple` attribute as well. This option will
                 * also trigger additional events (like `processingmultiple`). See the events
                 * documentation section for more information.
                 */
                uploadMultiple: false,
                /**
                 * Whether you want files to be uploaded in chunks to your server. This can't be
                 * used in combination with `uploadMultiple`.
                 *
                 * See [chunksUploaded](#config-chunksUploaded) for the callback to finalise an upload.
                 */
                chunking: false,
                /**
                 * If `chunking` is enabled, this defines whether **every** file should be chunked,
                 * even if the file size is below chunkSize. This means, that the additional chunk
                 * form data will be submitted and the `chunksUploaded` callback will be invoked.
                 */
                forceChunking: false,
                /**
                 * If `chunking` is `true`, then this defines the chunk size in bytes.
                 */
                chunkSize: 2e6,
                /**
                 * If `true`, the individual chunks of a file are being uploaded simultaneously.
                 */
                parallelChunkUploads: false,
                /**
                 * Whether a chunk should be retried if it fails.
                 */
                retryChunks: false,
                /**
                 * If `retryChunks` is true, how many times should it be retried.
                 */
                retryChunksLimit: 3,
                /**
                 * The maximum filesize (in bytes) that is allowed to be uploaded.
                 */
                maxFilesize: 256,
                /**
                 * The name of the file param that gets transferred.
                 * **NOTE**: If you have the option  `uploadMultiple` set to `true`, then
                 * Dropzone will append `[]` to the name.
                 */
                paramName: "file",
                /**
                 * Whether thumbnails for images should be generated
                 */
                createImageThumbnails: true,
                /**
                 * In MB. When the filename exceeds this limit, the thumbnail will not be generated.
                 */
                maxThumbnailFilesize: 10,
                /**
                 * If `null`, the ratio of the image will be used to calculate it.
                 */
                thumbnailWidth: 120,
                /**
                 * The same as `thumbnailWidth`. If both are null, images will not be resized.
                 */
                thumbnailHeight: 120,
                /**
                 * How the images should be scaled down in case both, `thumbnailWidth` and `thumbnailHeight` are provided.
                 * Can be either `contain` or `crop`.
                 */
                thumbnailMethod: "crop",
                /**
                 * If set, images will be resized to these dimensions before being **uploaded**.
                 * If only one, `resizeWidth` **or** `resizeHeight` is provided, the original aspect
                 * ratio of the file will be preserved.
                 *
                 * The `options.transformFile` function uses these options, so if the `transformFile` function
                 * is overridden, these options don't do anything.
                 */
                resizeWidth: null,
                /**
                 * See `resizeWidth`.
                 */
                resizeHeight: null,
                /**
                 * The mime type of the resized image (before it gets uploaded to the server).
                 * If `null` the original mime type will be used. To force jpeg, for example, use `image/jpeg`.
                 * See `resizeWidth` for more information.
                 */
                resizeMimeType: null,
                /**
                 * The quality of the resized images. See `resizeWidth`.
                 */
                resizeQuality: 0.8,
                /**
                 * How the images should be scaled down in case both, `resizeWidth` and `resizeHeight` are provided.
                 * Can be either `contain` or `crop`.
                 */
                resizeMethod: "contain",
                /**
                 * The base that is used to calculate the **displayed** filesize. You can
                 * change this to 1024 if you would rather display kibibytes, mebibytes,
                 * etc... 1024 is technically incorrect, because `1024 bytes` are `1 kibibyte`
                 * not `1 kilobyte`. You can change this to `1024` if you don't care about
                 * validity.
                 */
                filesizeBase: 1e3,
                /**
                 * If not `null` defines how many files this Dropzone handles. If it exceeds,
                 * the event `maxfilesexceeded` will be called. The dropzone element gets the
                 * class `dz-max-files-reached` accordingly so you can provide visual
                 * feedback.
                 */
                maxFiles: null,
                /**
                 * An optional object to send additional headers to the server. Eg:
                 * `{ "My-Awesome-Header": "header value" }`
                 */
                headers: null,
                /**
                 * If `true`, the dropzone element itself will be clickable, if `false`
                 * nothing will be clickable.
                 *
                 * You can also pass an HTML element, a CSS selector (for multiple elements)
                 * or an array of those. In that case, all of those elements will trigger an
                 * upload when clicked.
                 */
                clickable: true,
                /**
                 * Whether hidden files in directories should be ignored.
                 */
                ignoreHiddenFiles: true,
                /**
                 * The default implementation of `accept` checks the file's mime type or
                 * extension against this list. This is a comma separated list of mime
                 * types or file extensions.
                 *
                 * Eg.: `image/*,application/pdf,.psd`
                 *
                 * If the Dropzone is `clickable` this option will also be used as
                 * [`accept`](https://developer.mozilla.org/en-US/docs/HTML/Element/input#attr-accept)
                 * parameter on the hidden file input as well.
                 */
                acceptedFiles: null,
                /**
                 * **Deprecated!**
                 * Use acceptedFiles instead.
                 */
                acceptedMimeTypes: null,
                /**
                 * If false, files will be added to the queue but the queue will not be
                 * processed automatically.
                 * This can be useful if you need some additional user input before sending
                 * files (or if you want want all files sent at once).
                 * If you're ready to send the file simply call `myDropzone.processQueue()`.
                 *
                 * See the [enqueuing file uploads](#enqueuing-file-uploads) documentation
                 * section for more information.
                 */
                autoProcessQueue: true,
                /**
                 * If false, files added to the dropzone will not be queued by default.
                 * You'll have to call `enqueueFile(file)` manually.
                 */
                autoQueue: true,
                /**
                 * If `true`, this will add a link to every file preview to remove or cancel (if
                 * already uploading) the file. The `dictCancelUpload`, `dictCancelUploadConfirmation`
                 * and `dictRemoveFile` options are used for the wording.
                 */
                addRemoveLinks: false,
                /**
                 * Defines where to display the file previews – if `null` the
                 * Dropzone element itself is used. Can be a plain `HTMLElement` or a CSS
                 * selector. The element should have the `dropzone-previews` class so
                 * the previews are displayed properly.
                 */
                previewsContainer: null,
                /**
                 * Set this to `true` if you don't want previews to be shown.
                 */
                disablePreviews: false,
                /**
                 * This is the element the hidden input field (which is used when clicking on the
                 * dropzone to trigger file selection) will be appended to. This might
                 * be important in case you use frameworks to switch the content of your page.
                 *
                 * Can be a selector string, or an element directly.
                 */
                hiddenInputContainer: "body",
                /**
                 * If null, no capture type will be specified
                 * If camera, mobile devices will skip the file selection and choose camera
                 * If microphone, mobile devices will skip the file selection and choose the microphone
                 * If camcorder, mobile devices will skip the file selection and choose the camera in video mode
                 * On apple devices multiple must be set to false.  AcceptedFiles may need to
                 * be set to an appropriate mime type (e.g. "image/*", "audio/*", or "video/*").
                 */
                capture: null,
                /**
                 * **Deprecated**. Use `renameFile` instead.
                 */
                renameFilename: null,
                /**
                 * A function that is invoked before the file is uploaded to the server and renames the file.
                 * This function gets the `File` as argument and can use the `file.name`. The actual name of the
                 * file that gets used during the upload can be accessed through `file.upload.filename`.
                 */
                renameFile: null,
                /**
                 * If `true` the fallback will be forced. This is very useful to test your server
                 * implementations first and make sure that everything works as
                 * expected without dropzone if you experience problems, and to test
                 * how your fallbacks will look.
                 */
                forceFallback: false,
                /**
                 * The text used before any files are dropped.
                 */
                dictDefaultMessage: "Drop files here to upload",
                /**
                 * The text that replaces the default message text it the browser is not supported.
                 */
                dictFallbackMessage: "Your browser does not support drag'n'drop file uploads.",
                /**
                 * The text that will be added before the fallback form.
                 * If you provide a  fallback element yourself, or if this option is `null` this will
                 * be ignored.
                 */
                dictFallbackText: "Please use the fallback form below to upload your files like in the olden days.",
                /**
                 * If the filesize is too big.
                 * `{{filesize}}` and `{{maxFilesize}}` will be replaced with the respective configuration values.
                 */
                dictFileTooBig: "File is too big ({{filesize}}MiB). Max filesize: {{maxFilesize}}MiB.",
                /**
                 * If the file doesn't match the file type.
                 */
                dictInvalidFileType: "You can't upload files of this type.",
                /**
                 * If the server response was invalid.
                 * `{{statusCode}}` will be replaced with the servers status code.
                 */
                dictResponseError: "Server responded with {{statusCode}} code.",
                /**
                 * If `addRemoveLinks` is true, the text to be used for the cancel upload link.
                 */
                dictCancelUpload: "Cancel upload",
                /**
                 * The text that is displayed if an upload was manually canceled
                 */
                dictUploadCanceled: "Upload canceled.",
                /**
                 * If `addRemoveLinks` is true, the text to be used for confirmation when cancelling upload.
                 */
                dictCancelUploadConfirmation: "Are you sure you want to cancel this upload?",
                /**
                 * If `addRemoveLinks` is true, the text to be used to remove a file.
                 */
                dictRemoveFile: "Remove file",
                /**
                 * If this is not null, then the user will be prompted before removing a file.
                 */
                dictRemoveFileConfirmation: null,
                /**
                 * Displayed if `maxFiles` is st and exceeded.
                 * The string `{{maxFiles}}` will be replaced by the configuration value.
                 */
                dictMaxFilesExceeded: "You can not upload any more files.",
                /**
                 * Allows you to translate the different units. Starting with `tb` for terabytes and going down to
                 * `b` for bytes.
                 */
                dictFileSizeUnits: {
                  tb: "TB",
                  gb: "GB",
                  mb: "MB",
                  kb: "KB",
                  b: "b"
                },
                /**
                 * Called when dropzone initialized
                 * You can add event listeners here
                 */
                init: function init() {
                },
                /**
                 * Can be an **object** of additional parameters to transfer to the server, **or** a `Function`
                 * that gets invoked with the `files`, `xhr` and, if it's a chunked upload, `chunk` arguments. In case
                 * of a function, this needs to return a map.
                 *
                 * The default implementation does nothing for normal uploads, but adds relevant information for
                 * chunked uploads.
                 *
                 * This is the same as adding hidden input fields in the form element.
                 */
                params: function params(files, xhr, chunk) {
                  if (chunk) {
                    return {
                      dzuuid: chunk.file.upload.uuid,
                      dzchunkindex: chunk.index,
                      dztotalfilesize: chunk.file.size,
                      dzchunksize: this.options.chunkSize,
                      dztotalchunkcount: chunk.file.upload.totalChunkCount,
                      dzchunkbyteoffset: chunk.index * this.options.chunkSize
                    };
                  }
                },
                /**
                 * A function that gets a [file](https://developer.mozilla.org/en-US/docs/DOM/File)
                 * and a `done` function as parameters.
                 *
                 * If the done function is invoked without arguments, the file is "accepted" and will
                 * be processed. If you pass an error message, the file is rejected, and the error
                 * message will be displayed.
                 * This function will not be called if the file is too big or doesn't match the mime types.
                 */
                accept: function accept(file, done) {
                  return done();
                },
                /**
                 * The callback that will be invoked when all chunks have been uploaded for a file.
                 * It gets the file for which the chunks have been uploaded as the first parameter,
                 * and the `done` function as second. `done()` needs to be invoked when everything
                 * needed to finish the upload process is done.
                 */
                chunksUploaded: function chunksUploaded(file, done) {
                  done();
                },
                /**
                 * Gets called when the browser is not supported.
                 * The default implementation shows the fallback input field and adds
                 * a text.
                 */
                fallback: function fallback() {
                  var messageElement;
                  this.element.className = "".concat(this.element.className, " dz-browser-not-supported");
                  var _iterator = options_createForOfIteratorHelper(this.element.getElementsByTagName("div"), true), _step;
                  try {
                    for (_iterator.s(); !(_step = _iterator.n()).done; ) {
                      var child = _step.value;
                      if (/(^| )dz-message($| )/.test(child.className)) {
                        messageElement = child;
                        child.className = "dz-message";
                        break;
                      }
                    }
                  } catch (err) {
                    _iterator.e(err);
                  } finally {
                    _iterator.f();
                  }
                  if (!messageElement) {
                    messageElement = Dropzone2.createElement('<div class="dz-message"><span></span></div>');
                    this.element.appendChild(messageElement);
                  }
                  var span = messageElement.getElementsByTagName("span")[0];
                  if (span) {
                    if (span.textContent != null) {
                      span.textContent = this.options.dictFallbackMessage;
                    } else if (span.innerText != null) {
                      span.innerText = this.options.dictFallbackMessage;
                    }
                  }
                  return this.element.appendChild(this.getFallbackForm());
                },
                /**
                 * Gets called to calculate the thumbnail dimensions.
                 *
                 * It gets `file`, `width` and `height` (both may be `null`) as parameters and must return an object containing:
                 *
                 *  - `srcWidth` & `srcHeight` (required)
                 *  - `trgWidth` & `trgHeight` (required)
                 *  - `srcX` & `srcY` (optional, default `0`)
                 *  - `trgX` & `trgY` (optional, default `0`)
                 *
                 * Those values are going to be used by `ctx.drawImage()`.
                 */
                resize: function resize(file, width, height, resizeMethod) {
                  var info = {
                    srcX: 0,
                    srcY: 0,
                    srcWidth: file.width,
                    srcHeight: file.height
                  };
                  var srcRatio = file.width / file.height;
                  if (width == null && height == null) {
                    width = info.srcWidth;
                    height = info.srcHeight;
                  } else if (width == null) {
                    width = height * srcRatio;
                  } else if (height == null) {
                    height = width / srcRatio;
                  }
                  width = Math.min(width, info.srcWidth);
                  height = Math.min(height, info.srcHeight);
                  var trgRatio = width / height;
                  if (info.srcWidth > width || info.srcHeight > height) {
                    if (resizeMethod === "crop") {
                      if (srcRatio > trgRatio) {
                        info.srcHeight = file.height;
                        info.srcWidth = info.srcHeight * trgRatio;
                      } else {
                        info.srcWidth = file.width;
                        info.srcHeight = info.srcWidth / trgRatio;
                      }
                    } else if (resizeMethod === "contain") {
                      if (srcRatio > trgRatio) {
                        height = width / srcRatio;
                      } else {
                        width = height * srcRatio;
                      }
                    } else {
                      throw new Error("Unknown resizeMethod '".concat(resizeMethod, "'"));
                    }
                  }
                  info.srcX = (file.width - info.srcWidth) / 2;
                  info.srcY = (file.height - info.srcHeight) / 2;
                  info.trgWidth = width;
                  info.trgHeight = height;
                  return info;
                },
                /**
                 * Can be used to transform the file (for example, resize an image if necessary).
                 *
                 * The default implementation uses `resizeWidth` and `resizeHeight` (if provided) and resizes
                 * images according to those dimensions.
                 *
                 * Gets the `file` as the first parameter, and a `done()` function as the second, that needs
                 * to be invoked with the file when the transformation is done.
                 */
                transformFile: function transformFile(file, done) {
                  if ((this.options.resizeWidth || this.options.resizeHeight) && file.type.match(/image.*/)) {
                    return this.resizeImage(file, this.options.resizeWidth, this.options.resizeHeight, this.options.resizeMethod, done);
                  } else {
                    return done(file);
                  }
                },
                /**
                 * A string that contains the template used for each dropped
                 * file. Change it to fulfill your needs but make sure to properly
                 * provide all elements.
                 *
                 * If you want to use an actual HTML element instead of providing a String
                 * as a config option, you could create a div with the id `tpl`,
                 * put the template inside it and provide the element like this:
                 *
                 *     document
                 *       .querySelector('#tpl')
                 *       .innerHTML
                 *
                 */
                previewTemplate: preview_template,
                /*
                 Those functions register themselves to the events on init and handle all
                 the user interface specific stuff. Overwriting them won't break the upload
                 but can break the way it's displayed.
                 You can overwrite them if you don't like the default behavior. If you just
                 want to add an additional event handler, register it on the dropzone object
                 and don't overwrite those options.
                 */
                // Those are self explanatory and simply concern the DragnDrop.
                drop: function drop(e) {
                  return this.element.classList.remove("dz-drag-hover");
                },
                dragstart: function dragstart(e) {
                },
                dragend: function dragend(e) {
                  return this.element.classList.remove("dz-drag-hover");
                },
                dragenter: function dragenter(e) {
                  return this.element.classList.add("dz-drag-hover");
                },
                dragover: function dragover(e) {
                  return this.element.classList.add("dz-drag-hover");
                },
                dragleave: function dragleave(e) {
                  return this.element.classList.remove("dz-drag-hover");
                },
                paste: function paste(e) {
                },
                // Called whenever there are no files left in the dropzone anymore, and the
                // dropzone should be displayed as if in the initial state.
                reset: function reset() {
                  return this.element.classList.remove("dz-started");
                },
                // Called when a file is added to the queue
                // Receives `file`
                addedfile: function addedfile(file) {
                  var _this = this;
                  if (this.element === this.previewsContainer) {
                    this.element.classList.add("dz-started");
                  }
                  if (this.previewsContainer && !this.options.disablePreviews) {
                    file.previewElement = Dropzone2.createElement(this.options.previewTemplate.trim());
                    file.previewTemplate = file.previewElement;
                    this.previewsContainer.appendChild(file.previewElement);
                    var _iterator2 = options_createForOfIteratorHelper(file.previewElement.querySelectorAll("[data-dz-name]"), true), _step2;
                    try {
                      for (_iterator2.s(); !(_step2 = _iterator2.n()).done; ) {
                        var node = _step2.value;
                        node.textContent = file.name;
                      }
                    } catch (err) {
                      _iterator2.e(err);
                    } finally {
                      _iterator2.f();
                    }
                    var _iterator3 = options_createForOfIteratorHelper(file.previewElement.querySelectorAll("[data-dz-size]"), true), _step3;
                    try {
                      for (_iterator3.s(); !(_step3 = _iterator3.n()).done; ) {
                        node = _step3.value;
                        node.innerHTML = this.filesize(file.size);
                      }
                    } catch (err) {
                      _iterator3.e(err);
                    } finally {
                      _iterator3.f();
                    }
                    if (this.options.addRemoveLinks) {
                      file._removeLink = Dropzone2.createElement('<a class="dz-remove" href="javascript:undefined;" data-dz-remove>'.concat(this.options.dictRemoveFile, "</a>"));
                      file.previewElement.appendChild(file._removeLink);
                    }
                    var removeFileEvent = function removeFileEvent2(e) {
                      e.preventDefault();
                      e.stopPropagation();
                      if (file.status === Dropzone2.UPLOADING) {
                        return Dropzone2.confirm(_this.options.dictCancelUploadConfirmation, function() {
                          return _this.removeFile(file);
                        });
                      } else {
                        if (_this.options.dictRemoveFileConfirmation) {
                          return Dropzone2.confirm(_this.options.dictRemoveFileConfirmation, function() {
                            return _this.removeFile(file);
                          });
                        } else {
                          return _this.removeFile(file);
                        }
                      }
                    };
                    var _iterator4 = options_createForOfIteratorHelper(file.previewElement.querySelectorAll("[data-dz-remove]"), true), _step4;
                    try {
                      for (_iterator4.s(); !(_step4 = _iterator4.n()).done; ) {
                        var removeLink = _step4.value;
                        removeLink.addEventListener("click", removeFileEvent);
                      }
                    } catch (err) {
                      _iterator4.e(err);
                    } finally {
                      _iterator4.f();
                    }
                  }
                },
                // Called whenever a file is removed.
                removedfile: function removedfile(file) {
                  if (file.previewElement != null && file.previewElement.parentNode != null) {
                    file.previewElement.parentNode.removeChild(file.previewElement);
                  }
                  return this._updateMaxFilesReachedClass();
                },
                // Called when a thumbnail has been generated
                // Receives `file` and `dataUrl`
                thumbnail: function thumbnail(file, dataUrl) {
                  if (file.previewElement) {
                    file.previewElement.classList.remove("dz-file-preview");
                    var _iterator5 = options_createForOfIteratorHelper(file.previewElement.querySelectorAll("[data-dz-thumbnail]"), true), _step5;
                    try {
                      for (_iterator5.s(); !(_step5 = _iterator5.n()).done; ) {
                        var thumbnailElement = _step5.value;
                        thumbnailElement.alt = file.name;
                        thumbnailElement.src = dataUrl;
                      }
                    } catch (err) {
                      _iterator5.e(err);
                    } finally {
                      _iterator5.f();
                    }
                    return setTimeout(function() {
                      return file.previewElement.classList.add("dz-image-preview");
                    }, 1);
                  }
                },
                // Called whenever an error occurs
                // Receives `file` and `message`
                error: function error(file, message) {
                  if (file.previewElement) {
                    file.previewElement.classList.add("dz-error");
                    if (typeof message !== "string" && message.error) {
                      message = message.error;
                    }
                    var _iterator6 = options_createForOfIteratorHelper(file.previewElement.querySelectorAll("[data-dz-errormessage]"), true), _step6;
                    try {
                      for (_iterator6.s(); !(_step6 = _iterator6.n()).done; ) {
                        var node = _step6.value;
                        node.textContent = message;
                      }
                    } catch (err) {
                      _iterator6.e(err);
                    } finally {
                      _iterator6.f();
                    }
                  }
                },
                errormultiple: function errormultiple() {
                },
                // Called when a file gets processed. Since there is a cue, not all added
                // files are processed immediately.
                // Receives `file`
                processing: function processing(file) {
                  if (file.previewElement) {
                    file.previewElement.classList.add("dz-processing");
                    if (file._removeLink) {
                      return file._removeLink.innerHTML = this.options.dictCancelUpload;
                    }
                  }
                },
                processingmultiple: function processingmultiple() {
                },
                // Called whenever the upload progress gets updated.
                // Receives `file`, `progress` (percentage 0-100) and `bytesSent`.
                // To get the total number of bytes of the file, use `file.size`
                uploadprogress: function uploadprogress(file, progress, bytesSent) {
                  if (file.previewElement) {
                    var _iterator7 = options_createForOfIteratorHelper(file.previewElement.querySelectorAll("[data-dz-uploadprogress]"), true), _step7;
                    try {
                      for (_iterator7.s(); !(_step7 = _iterator7.n()).done; ) {
                        var node = _step7.value;
                        node.nodeName === "PROGRESS" ? node.value = progress : node.style.width = "".concat(progress, "%");
                      }
                    } catch (err) {
                      _iterator7.e(err);
                    } finally {
                      _iterator7.f();
                    }
                  }
                },
                // Called whenever the total upload progress gets updated.
                // Called with totalUploadProgress (0-100), totalBytes and totalBytesSent
                totaluploadprogress: function totaluploadprogress() {
                },
                // Called just before the file is sent. Gets the `xhr` object as second
                // parameter, so you can modify it (for example to add a CSRF token) and a
                // `formData` object to add additional information.
                sending: function sending() {
                },
                sendingmultiple: function sendingmultiple() {
                },
                // When the complete upload is finished and successful
                // Receives `file`
                success: function success(file) {
                  if (file.previewElement) {
                    return file.previewElement.classList.add("dz-success");
                  }
                },
                successmultiple: function successmultiple() {
                },
                // When the upload is canceled.
                canceled: function canceled(file) {
                  return this.emit("error", file, this.options.dictUploadCanceled);
                },
                canceledmultiple: function canceledmultiple() {
                },
                // When the upload is finished, either with success or an error.
                // Receives `file`
                complete: function complete(file) {
                  if (file._removeLink) {
                    file._removeLink.innerHTML = this.options.dictRemoveFile;
                  }
                  if (file.previewElement) {
                    return file.previewElement.classList.add("dz-complete");
                  }
                },
                completemultiple: function completemultiple() {
                },
                maxfilesexceeded: function maxfilesexceeded() {
                },
                maxfilesreached: function maxfilesreached() {
                },
                queuecomplete: function queuecomplete() {
                },
                addedfiles: function addedfiles() {
                }
              };
              var src_options = defaultOptions;
              ;
              function _typeof(obj) {
                "@babel/helpers - typeof";
                if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                  _typeof = function _typeof2(obj2) {
                    return typeof obj2;
                  };
                } else {
                  _typeof = function _typeof2(obj2) {
                    return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
                  };
                }
                return _typeof(obj);
              }
              function dropzone_createForOfIteratorHelper(o, allowArrayLike) {
                var it;
                if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) {
                  if (Array.isArray(o) || (it = dropzone_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
                    if (it)
                      o = it;
                    var i = 0;
                    var F = function F2() {
                    };
                    return { s: F, n: function n() {
                      if (i >= o.length)
                        return { done: true };
                      return { done: false, value: o[i++] };
                    }, e: function e(_e) {
                      throw _e;
                    }, f: F };
                  }
                  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
                }
                var normalCompletion = true, didErr = false, err;
                return { s: function s() {
                  it = o[Symbol.iterator]();
                }, n: function n() {
                  var step = it.next();
                  normalCompletion = step.done;
                  return step;
                }, e: function e(_e2) {
                  didErr = true;
                  err = _e2;
                }, f: function f() {
                  try {
                    if (!normalCompletion && it.return != null)
                      it.return();
                  } finally {
                    if (didErr)
                      throw err;
                  }
                } };
              }
              function dropzone_unsupportedIterableToArray(o, minLen) {
                if (!o)
                  return;
                if (typeof o === "string")
                  return dropzone_arrayLikeToArray(o, minLen);
                var n = Object.prototype.toString.call(o).slice(8, -1);
                if (n === "Object" && o.constructor)
                  n = o.constructor.name;
                if (n === "Map" || n === "Set")
                  return Array.from(o);
                if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
                  return dropzone_arrayLikeToArray(o, minLen);
              }
              function dropzone_arrayLikeToArray(arr, len) {
                if (len == null || len > arr.length)
                  len = arr.length;
                for (var i = 0, arr2 = new Array(len); i < len; i++) {
                  arr2[i] = arr[i];
                }
                return arr2;
              }
              function dropzone_classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                  throw new TypeError("Cannot call a class as a function");
                }
              }
              function dropzone_defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                  var descriptor = props[i];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor)
                    descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }
              function dropzone_createClass(Constructor, protoProps, staticProps) {
                if (protoProps)
                  dropzone_defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                  dropzone_defineProperties(Constructor, staticProps);
                return Constructor;
              }
              function _inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                  throw new TypeError("Super expression must either be null or a function");
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
                if (superClass)
                  _setPrototypeOf(subClass, superClass);
              }
              function _setPrototypeOf(o, p) {
                _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
                  o2.__proto__ = p2;
                  return o2;
                };
                return _setPrototypeOf(o, p);
              }
              function _createSuper(Derived) {
                var hasNativeReflectConstruct = _isNativeReflectConstruct();
                return function _createSuperInternal() {
                  var Super = _getPrototypeOf(Derived), result;
                  if (hasNativeReflectConstruct) {
                    var NewTarget = _getPrototypeOf(this).constructor;
                    result = Reflect.construct(Super, arguments, NewTarget);
                  } else {
                    result = Super.apply(this, arguments);
                  }
                  return _possibleConstructorReturn(this, result);
                };
              }
              function _possibleConstructorReturn(self2, call) {
                if (call && (_typeof(call) === "object" || typeof call === "function")) {
                  return call;
                }
                return _assertThisInitialized(self2);
              }
              function _assertThisInitialized(self2) {
                if (self2 === void 0) {
                  throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                }
                return self2;
              }
              function _isNativeReflectConstruct() {
                if (typeof Reflect === "undefined" || !Reflect.construct)
                  return false;
                if (Reflect.construct.sham)
                  return false;
                if (typeof Proxy === "function")
                  return true;
                try {
                  Date.prototype.toString.call(Reflect.construct(Date, [], function() {
                  }));
                  return true;
                } catch (e) {
                  return false;
                }
              }
              function _getPrototypeOf(o) {
                _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o2) {
                  return o2.__proto__ || Object.getPrototypeOf(o2);
                };
                return _getPrototypeOf(o);
              }
              var Dropzone2 = /* @__PURE__ */ function(_Emitter) {
                _inherits(Dropzone3, _Emitter);
                var _super = _createSuper(Dropzone3);
                function Dropzone3(el, options) {
                  var _this;
                  dropzone_classCallCheck(this, Dropzone3);
                  _this = _super.call(this);
                  var fallback, left;
                  _this.element = el;
                  _this.version = Dropzone3.version;
                  _this.clickableElements = [];
                  _this.listeners = [];
                  _this.files = [];
                  if (typeof _this.element === "string") {
                    _this.element = document.querySelector(_this.element);
                  }
                  if (!_this.element || _this.element.nodeType == null) {
                    throw new Error("Invalid dropzone element.");
                  }
                  if (_this.element.dropzone) {
                    throw new Error("Dropzone already attached.");
                  }
                  Dropzone3.instances.push(_assertThisInitialized(_this));
                  _this.element.dropzone = _assertThisInitialized(_this);
                  var elementOptions = (left = Dropzone3.optionsForElement(_this.element)) != null ? left : {};
                  _this.options = Dropzone3.extend({}, src_options, elementOptions, options != null ? options : {});
                  _this.options.previewTemplate = _this.options.previewTemplate.replace(/\n*/g, "");
                  if (_this.options.forceFallback || !Dropzone3.isBrowserSupported()) {
                    return _possibleConstructorReturn(_this, _this.options.fallback.call(_assertThisInitialized(_this)));
                  }
                  if (_this.options.url == null) {
                    _this.options.url = _this.element.getAttribute("action");
                  }
                  if (!_this.options.url) {
                    throw new Error("No URL provided.");
                  }
                  if (_this.options.acceptedFiles && _this.options.acceptedMimeTypes) {
                    throw new Error("You can't provide both 'acceptedFiles' and 'acceptedMimeTypes'. 'acceptedMimeTypes' is deprecated.");
                  }
                  if (_this.options.uploadMultiple && _this.options.chunking) {
                    throw new Error("You cannot set both: uploadMultiple and chunking.");
                  }
                  if (_this.options.acceptedMimeTypes) {
                    _this.options.acceptedFiles = _this.options.acceptedMimeTypes;
                    delete _this.options.acceptedMimeTypes;
                  }
                  if (_this.options.renameFilename != null) {
                    _this.options.renameFile = function(file) {
                      return _this.options.renameFilename.call(_assertThisInitialized(_this), file.name, file);
                    };
                  }
                  if (typeof _this.options.method === "string") {
                    _this.options.method = _this.options.method.toUpperCase();
                  }
                  if ((fallback = _this.getExistingFallback()) && fallback.parentNode) {
                    fallback.parentNode.removeChild(fallback);
                  }
                  if (_this.options.previewsContainer !== false) {
                    if (_this.options.previewsContainer) {
                      _this.previewsContainer = Dropzone3.getElement(_this.options.previewsContainer, "previewsContainer");
                    } else {
                      _this.previewsContainer = _this.element;
                    }
                  }
                  if (_this.options.clickable) {
                    if (_this.options.clickable === true) {
                      _this.clickableElements = [_this.element];
                    } else {
                      _this.clickableElements = Dropzone3.getElements(_this.options.clickable, "clickable");
                    }
                  }
                  _this.init();
                  return _this;
                }
                dropzone_createClass(Dropzone3, [{
                  key: "getAcceptedFiles",
                  value: function getAcceptedFiles() {
                    return this.files.filter(function(file) {
                      return file.accepted;
                    }).map(function(file) {
                      return file;
                    });
                  }
                  // Returns all files that have been rejected
                  // Not sure when that's going to be useful, but added for completeness.
                }, {
                  key: "getRejectedFiles",
                  value: function getRejectedFiles() {
                    return this.files.filter(function(file) {
                      return !file.accepted;
                    }).map(function(file) {
                      return file;
                    });
                  }
                }, {
                  key: "getFilesWithStatus",
                  value: function getFilesWithStatus(status) {
                    return this.files.filter(function(file) {
                      return file.status === status;
                    }).map(function(file) {
                      return file;
                    });
                  }
                  // Returns all files that are in the queue
                }, {
                  key: "getQueuedFiles",
                  value: function getQueuedFiles() {
                    return this.getFilesWithStatus(Dropzone3.QUEUED);
                  }
                }, {
                  key: "getUploadingFiles",
                  value: function getUploadingFiles() {
                    return this.getFilesWithStatus(Dropzone3.UPLOADING);
                  }
                }, {
                  key: "getAddedFiles",
                  value: function getAddedFiles() {
                    return this.getFilesWithStatus(Dropzone3.ADDED);
                  }
                  // Files that are either queued or uploading
                }, {
                  key: "getActiveFiles",
                  value: function getActiveFiles() {
                    return this.files.filter(function(file) {
                      return file.status === Dropzone3.UPLOADING || file.status === Dropzone3.QUEUED;
                    }).map(function(file) {
                      return file;
                    });
                  }
                  // The function that gets called when Dropzone is initialized. You
                  // can (and should) setup event listeners inside this function.
                }, {
                  key: "init",
                  value: function init() {
                    var _this2 = this;
                    if (this.element.tagName === "form") {
                      this.element.setAttribute("enctype", "multipart/form-data");
                    }
                    if (this.element.classList.contains("dropzone") && !this.element.querySelector(".dz-message")) {
                      this.element.appendChild(Dropzone3.createElement('<div class="dz-default dz-message"><button class="dz-button" type="button">'.concat(this.options.dictDefaultMessage, "</button></div>")));
                    }
                    if (this.clickableElements.length) {
                      var setupHiddenFileInput = function setupHiddenFileInput2() {
                        if (_this2.hiddenFileInput) {
                          _this2.hiddenFileInput.parentNode.removeChild(_this2.hiddenFileInput);
                        }
                        _this2.hiddenFileInput = document.createElement("input");
                        _this2.hiddenFileInput.setAttribute("type", "file");
                        if (_this2.options.maxFiles === null || _this2.options.maxFiles > 1) {
                          _this2.hiddenFileInput.setAttribute("multiple", "multiple");
                        }
                        _this2.hiddenFileInput.className = "dz-hidden-input";
                        if (_this2.options.acceptedFiles !== null) {
                          _this2.hiddenFileInput.setAttribute("accept", _this2.options.acceptedFiles);
                        }
                        if (_this2.options.capture !== null) {
                          _this2.hiddenFileInput.setAttribute("capture", _this2.options.capture);
                        }
                        _this2.hiddenFileInput.setAttribute("tabindex", "-1");
                        _this2.hiddenFileInput.style.visibility = "hidden";
                        _this2.hiddenFileInput.style.position = "absolute";
                        _this2.hiddenFileInput.style.top = "0";
                        _this2.hiddenFileInput.style.left = "0";
                        _this2.hiddenFileInput.style.height = "0";
                        _this2.hiddenFileInput.style.width = "0";
                        Dropzone3.getElement(_this2.options.hiddenInputContainer, "hiddenInputContainer").appendChild(_this2.hiddenFileInput);
                        _this2.hiddenFileInput.addEventListener("change", function() {
                          var files = _this2.hiddenFileInput.files;
                          if (files.length) {
                            var _iterator = dropzone_createForOfIteratorHelper(files, true), _step;
                            try {
                              for (_iterator.s(); !(_step = _iterator.n()).done; ) {
                                var file = _step.value;
                                _this2.addFile(file);
                              }
                            } catch (err) {
                              _iterator.e(err);
                            } finally {
                              _iterator.f();
                            }
                          }
                          _this2.emit("addedfiles", files);
                          setupHiddenFileInput2();
                        });
                      };
                      setupHiddenFileInput();
                    }
                    this.URL = window.URL !== null ? window.URL : window.webkitURL;
                    var _iterator2 = dropzone_createForOfIteratorHelper(this.events, true), _step2;
                    try {
                      for (_iterator2.s(); !(_step2 = _iterator2.n()).done; ) {
                        var eventName = _step2.value;
                        this.on(eventName, this.options[eventName]);
                      }
                    } catch (err) {
                      _iterator2.e(err);
                    } finally {
                      _iterator2.f();
                    }
                    this.on("uploadprogress", function() {
                      return _this2.updateTotalUploadProgress();
                    });
                    this.on("removedfile", function() {
                      return _this2.updateTotalUploadProgress();
                    });
                    this.on("canceled", function(file) {
                      return _this2.emit("complete", file);
                    });
                    this.on("complete", function(file) {
                      if (_this2.getAddedFiles().length === 0 && _this2.getUploadingFiles().length === 0 && _this2.getQueuedFiles().length === 0) {
                        return setTimeout(function() {
                          return _this2.emit("queuecomplete");
                        }, 0);
                      }
                    });
                    var containsFiles = function containsFiles2(e) {
                      if (e.dataTransfer.types) {
                        for (var i = 0; i < e.dataTransfer.types.length; i++) {
                          if (e.dataTransfer.types[i] === "Files")
                            return true;
                        }
                      }
                      return false;
                    };
                    var noPropagation = function noPropagation2(e) {
                      if (!containsFiles(e))
                        return;
                      e.stopPropagation();
                      if (e.preventDefault) {
                        return e.preventDefault();
                      } else {
                        return e.returnValue = false;
                      }
                    };
                    this.listeners = [{
                      element: this.element,
                      events: {
                        dragstart: function dragstart(e) {
                          return _this2.emit("dragstart", e);
                        },
                        dragenter: function dragenter(e) {
                          noPropagation(e);
                          return _this2.emit("dragenter", e);
                        },
                        dragover: function dragover(e) {
                          var efct;
                          try {
                            efct = e.dataTransfer.effectAllowed;
                          } catch (error) {
                          }
                          e.dataTransfer.dropEffect = "move" === efct || "linkMove" === efct ? "move" : "copy";
                          noPropagation(e);
                          return _this2.emit("dragover", e);
                        },
                        dragleave: function dragleave(e) {
                          return _this2.emit("dragleave", e);
                        },
                        drop: function drop(e) {
                          noPropagation(e);
                          return _this2.drop(e);
                        },
                        dragend: function dragend(e) {
                          return _this2.emit("dragend", e);
                        }
                      }
                      // This is disabled right now, because the browsers don't implement it properly.
                      // "paste": (e) =>
                      //   noPropagation e
                      //   @paste e
                    }];
                    this.clickableElements.forEach(function(clickableElement) {
                      return _this2.listeners.push({
                        element: clickableElement,
                        events: {
                          click: function click(evt) {
                            if (clickableElement !== _this2.element || evt.target === _this2.element || Dropzone3.elementInside(evt.target, _this2.element.querySelector(".dz-message"))) {
                              _this2.hiddenFileInput.click();
                            }
                            return true;
                          }
                        }
                      });
                    });
                    this.enable();
                    return this.options.init.call(this);
                  }
                  // Not fully tested yet
                }, {
                  key: "destroy",
                  value: function destroy() {
                    this.disable();
                    this.removeAllFiles(true);
                    if (this.hiddenFileInput != null ? this.hiddenFileInput.parentNode : void 0) {
                      this.hiddenFileInput.parentNode.removeChild(this.hiddenFileInput);
                      this.hiddenFileInput = null;
                    }
                    delete this.element.dropzone;
                    return Dropzone3.instances.splice(Dropzone3.instances.indexOf(this), 1);
                  }
                }, {
                  key: "updateTotalUploadProgress",
                  value: function updateTotalUploadProgress() {
                    var totalUploadProgress;
                    var totalBytesSent = 0;
                    var totalBytes = 0;
                    var activeFiles = this.getActiveFiles();
                    if (activeFiles.length) {
                      var _iterator3 = dropzone_createForOfIteratorHelper(this.getActiveFiles(), true), _step3;
                      try {
                        for (_iterator3.s(); !(_step3 = _iterator3.n()).done; ) {
                          var file = _step3.value;
                          totalBytesSent += file.upload.bytesSent;
                          totalBytes += file.upload.total;
                        }
                      } catch (err) {
                        _iterator3.e(err);
                      } finally {
                        _iterator3.f();
                      }
                      totalUploadProgress = 100 * totalBytesSent / totalBytes;
                    } else {
                      totalUploadProgress = 100;
                    }
                    return this.emit("totaluploadprogress", totalUploadProgress, totalBytes, totalBytesSent);
                  }
                  // @options.paramName can be a function taking one parameter rather than a string.
                  // A parameter name for a file is obtained simply by calling this with an index number.
                }, {
                  key: "_getParamName",
                  value: function _getParamName(n) {
                    if (typeof this.options.paramName === "function") {
                      return this.options.paramName(n);
                    } else {
                      return "".concat(this.options.paramName).concat(this.options.uploadMultiple ? "[".concat(n, "]") : "");
                    }
                  }
                  // If @options.renameFile is a function,
                  // the function will be used to rename the file.name before appending it to the formData
                }, {
                  key: "_renameFile",
                  value: function _renameFile(file) {
                    if (typeof this.options.renameFile !== "function") {
                      return file.name;
                    }
                    return this.options.renameFile(file);
                  }
                  // Returns a form that can be used as fallback if the browser does not support DragnDrop
                  //
                  // If the dropzone is already a form, only the input field and button are returned. Otherwise a complete form element is provided.
                  // This code has to pass in IE7 :(
                }, {
                  key: "getFallbackForm",
                  value: function getFallbackForm() {
                    var existingFallback, form;
                    if (existingFallback = this.getExistingFallback()) {
                      return existingFallback;
                    }
                    var fieldsString = '<div class="dz-fallback">';
                    if (this.options.dictFallbackText) {
                      fieldsString += "<p>".concat(this.options.dictFallbackText, "</p>");
                    }
                    fieldsString += '<input type="file" name="'.concat(this._getParamName(0), '" ').concat(this.options.uploadMultiple ? 'multiple="multiple"' : void 0, ' /><input type="submit" value="Upload!"></div>');
                    var fields = Dropzone3.createElement(fieldsString);
                    if (this.element.tagName !== "FORM") {
                      form = Dropzone3.createElement('<form action="'.concat(this.options.url, '" enctype="multipart/form-data" method="').concat(this.options.method, '"></form>'));
                      form.appendChild(fields);
                    } else {
                      this.element.setAttribute("enctype", "multipart/form-data");
                      this.element.setAttribute("method", this.options.method);
                    }
                    return form != null ? form : fields;
                  }
                  // Returns the fallback elements if they exist already
                  //
                  // This code has to pass in IE7 :(
                }, {
                  key: "getExistingFallback",
                  value: function getExistingFallback() {
                    var getFallback = function getFallback2(elements) {
                      var _iterator4 = dropzone_createForOfIteratorHelper(elements, true), _step4;
                      try {
                        for (_iterator4.s(); !(_step4 = _iterator4.n()).done; ) {
                          var el = _step4.value;
                          if (/(^| )fallback($| )/.test(el.className)) {
                            return el;
                          }
                        }
                      } catch (err) {
                        _iterator4.e(err);
                      } finally {
                        _iterator4.f();
                      }
                    };
                    for (var _i = 0, _arr = ["div", "form"]; _i < _arr.length; _i++) {
                      var tagName = _arr[_i];
                      var fallback;
                      if (fallback = getFallback(this.element.getElementsByTagName(tagName))) {
                        return fallback;
                      }
                    }
                  }
                  // Activates all listeners stored in @listeners
                }, {
                  key: "setupEventListeners",
                  value: function setupEventListeners() {
                    return this.listeners.map(function(elementListeners) {
                      return function() {
                        var result = [];
                        for (var event in elementListeners.events) {
                          var listener = elementListeners.events[event];
                          result.push(elementListeners.element.addEventListener(event, listener, false));
                        }
                        return result;
                      }();
                    });
                  }
                  // Deactivates all listeners stored in @listeners
                }, {
                  key: "removeEventListeners",
                  value: function removeEventListeners() {
                    return this.listeners.map(function(elementListeners) {
                      return function() {
                        var result = [];
                        for (var event in elementListeners.events) {
                          var listener = elementListeners.events[event];
                          result.push(elementListeners.element.removeEventListener(event, listener, false));
                        }
                        return result;
                      }();
                    });
                  }
                  // Removes all event listeners and cancels all files in the queue or being processed.
                }, {
                  key: "disable",
                  value: function disable() {
                    var _this3 = this;
                    this.clickableElements.forEach(function(element) {
                      return element.classList.remove("dz-clickable");
                    });
                    this.removeEventListeners();
                    this.disabled = true;
                    return this.files.map(function(file) {
                      return _this3.cancelUpload(file);
                    });
                  }
                }, {
                  key: "enable",
                  value: function enable() {
                    delete this.disabled;
                    this.clickableElements.forEach(function(element) {
                      return element.classList.add("dz-clickable");
                    });
                    return this.setupEventListeners();
                  }
                  // Returns a nicely formatted filesize
                }, {
                  key: "filesize",
                  value: function filesize(size) {
                    var selectedSize = 0;
                    var selectedUnit = "b";
                    if (size > 0) {
                      var units = ["tb", "gb", "mb", "kb", "b"];
                      for (var i = 0; i < units.length; i++) {
                        var unit = units[i];
                        var cutoff = Math.pow(this.options.filesizeBase, 4 - i) / 10;
                        if (size >= cutoff) {
                          selectedSize = size / Math.pow(this.options.filesizeBase, 4 - i);
                          selectedUnit = unit;
                          break;
                        }
                      }
                      selectedSize = Math.round(10 * selectedSize) / 10;
                    }
                    return "<strong>".concat(selectedSize, "</strong> ").concat(this.options.dictFileSizeUnits[selectedUnit]);
                  }
                  // Adds or removes the `dz-max-files-reached` class from the form.
                }, {
                  key: "_updateMaxFilesReachedClass",
                  value: function _updateMaxFilesReachedClass() {
                    if (this.options.maxFiles != null && this.getAcceptedFiles().length >= this.options.maxFiles) {
                      if (this.getAcceptedFiles().length === this.options.maxFiles) {
                        this.emit("maxfilesreached", this.files);
                      }
                      return this.element.classList.add("dz-max-files-reached");
                    } else {
                      return this.element.classList.remove("dz-max-files-reached");
                    }
                  }
                }, {
                  key: "drop",
                  value: function drop(e) {
                    if (!e.dataTransfer) {
                      return;
                    }
                    this.emit("drop", e);
                    var files = [];
                    for (var i = 0; i < e.dataTransfer.files.length; i++) {
                      files[i] = e.dataTransfer.files[i];
                    }
                    if (files.length) {
                      var items = e.dataTransfer.items;
                      if (items && items.length && items[0].webkitGetAsEntry != null) {
                        this._addFilesFromItems(items);
                      } else {
                        this.handleFiles(files);
                      }
                    }
                    this.emit("addedfiles", files);
                  }
                }, {
                  key: "paste",
                  value: function paste(e) {
                    if (__guard__(e != null ? e.clipboardData : void 0, function(x) {
                      return x.items;
                    }) == null) {
                      return;
                    }
                    this.emit("paste", e);
                    var items = e.clipboardData.items;
                    if (items.length) {
                      return this._addFilesFromItems(items);
                    }
                  }
                }, {
                  key: "handleFiles",
                  value: function handleFiles(files) {
                    var _iterator5 = dropzone_createForOfIteratorHelper(files, true), _step5;
                    try {
                      for (_iterator5.s(); !(_step5 = _iterator5.n()).done; ) {
                        var file = _step5.value;
                        this.addFile(file);
                      }
                    } catch (err) {
                      _iterator5.e(err);
                    } finally {
                      _iterator5.f();
                    }
                  }
                  // When a folder is dropped (or files are pasted), items must be handled
                  // instead of files.
                }, {
                  key: "_addFilesFromItems",
                  value: function _addFilesFromItems(items) {
                    var _this4 = this;
                    return function() {
                      var result = [];
                      var _iterator6 = dropzone_createForOfIteratorHelper(items, true), _step6;
                      try {
                        for (_iterator6.s(); !(_step6 = _iterator6.n()).done; ) {
                          var item = _step6.value;
                          var entry;
                          if (item.webkitGetAsEntry != null && (entry = item.webkitGetAsEntry())) {
                            if (entry.isFile) {
                              result.push(_this4.addFile(item.getAsFile()));
                            } else if (entry.isDirectory) {
                              result.push(_this4._addFilesFromDirectory(entry, entry.name));
                            } else {
                              result.push(void 0);
                            }
                          } else if (item.getAsFile != null) {
                            if (item.kind == null || item.kind === "file") {
                              result.push(_this4.addFile(item.getAsFile()));
                            } else {
                              result.push(void 0);
                            }
                          } else {
                            result.push(void 0);
                          }
                        }
                      } catch (err) {
                        _iterator6.e(err);
                      } finally {
                        _iterator6.f();
                      }
                      return result;
                    }();
                  }
                  // Goes through the directory, and adds each file it finds recursively
                }, {
                  key: "_addFilesFromDirectory",
                  value: function _addFilesFromDirectory(directory, path) {
                    var _this5 = this;
                    var dirReader = directory.createReader();
                    var errorHandler = function errorHandler2(error) {
                      return __guardMethod__(console, "log", function(o) {
                        return o.log(error);
                      });
                    };
                    var readEntries = function readEntries2() {
                      return dirReader.readEntries(function(entries) {
                        if (entries.length > 0) {
                          var _iterator7 = dropzone_createForOfIteratorHelper(entries, true), _step7;
                          try {
                            for (_iterator7.s(); !(_step7 = _iterator7.n()).done; ) {
                              var entry = _step7.value;
                              if (entry.isFile) {
                                entry.file(function(file) {
                                  if (_this5.options.ignoreHiddenFiles && file.name.substring(0, 1) === ".") {
                                    return;
                                  }
                                  file.fullPath = "".concat(path, "/").concat(file.name);
                                  return _this5.addFile(file);
                                });
                              } else if (entry.isDirectory) {
                                _this5._addFilesFromDirectory(entry, "".concat(path, "/").concat(entry.name));
                              }
                            }
                          } catch (err) {
                            _iterator7.e(err);
                          } finally {
                            _iterator7.f();
                          }
                          readEntries2();
                        }
                        return null;
                      }, errorHandler);
                    };
                    return readEntries();
                  }
                  // If `done()` is called without argument the file is accepted
                  // If you call it with an error message, the file is rejected
                  // (This allows for asynchronous validation)
                  //
                  // This function checks the filesize, and if the file.type passes the
                  // `acceptedFiles` check.
                }, {
                  key: "accept",
                  value: function accept(file, done) {
                    if (this.options.maxFilesize && file.size > this.options.maxFilesize * 1024 * 1024) {
                      done(this.options.dictFileTooBig.replace("{{filesize}}", Math.round(file.size / 1024 / 10.24) / 100).replace("{{maxFilesize}}", this.options.maxFilesize));
                    } else if (!Dropzone3.isValidFile(file, this.options.acceptedFiles)) {
                      done(this.options.dictInvalidFileType);
                    } else if (this.options.maxFiles != null && this.getAcceptedFiles().length >= this.options.maxFiles) {
                      done(this.options.dictMaxFilesExceeded.replace("{{maxFiles}}", this.options.maxFiles));
                      this.emit("maxfilesexceeded", file);
                    } else {
                      this.options.accept.call(this, file, done);
                    }
                  }
                }, {
                  key: "addFile",
                  value: function addFile(file) {
                    var _this6 = this;
                    file.upload = {
                      uuid: Dropzone3.uuidv4(),
                      progress: 0,
                      // Setting the total upload size to file.size for the beginning
                      // It's actual different than the size to be transmitted.
                      total: file.size,
                      bytesSent: 0,
                      filename: this._renameFile(file)
                      // Not setting chunking information here, because the acutal data — and
                      // thus the chunks — might change if `options.transformFile` is set
                      // and does something to the data.
                    };
                    this.files.push(file);
                    file.status = Dropzone3.ADDED;
                    this.emit("addedfile", file);
                    this._enqueueThumbnail(file);
                    this.accept(file, function(error) {
                      if (error) {
                        file.accepted = false;
                        _this6._errorProcessing([file], error);
                      } else {
                        file.accepted = true;
                        if (_this6.options.autoQueue) {
                          _this6.enqueueFile(file);
                        }
                      }
                      _this6._updateMaxFilesReachedClass();
                    });
                  }
                  // Wrapper for enqueueFile
                }, {
                  key: "enqueueFiles",
                  value: function enqueueFiles(files) {
                    var _iterator8 = dropzone_createForOfIteratorHelper(files, true), _step8;
                    try {
                      for (_iterator8.s(); !(_step8 = _iterator8.n()).done; ) {
                        var file = _step8.value;
                        this.enqueueFile(file);
                      }
                    } catch (err) {
                      _iterator8.e(err);
                    } finally {
                      _iterator8.f();
                    }
                    return null;
                  }
                }, {
                  key: "enqueueFile",
                  value: function enqueueFile(file) {
                    var _this7 = this;
                    if (file.status === Dropzone3.ADDED && file.accepted === true) {
                      file.status = Dropzone3.QUEUED;
                      if (this.options.autoProcessQueue) {
                        return setTimeout(function() {
                          return _this7.processQueue();
                        }, 0);
                      }
                    } else {
                      throw new Error("This file can't be queued because it has already been processed or was rejected.");
                    }
                  }
                }, {
                  key: "_enqueueThumbnail",
                  value: function _enqueueThumbnail(file) {
                    var _this8 = this;
                    if (this.options.createImageThumbnails && file.type.match(/image.*/) && file.size <= this.options.maxThumbnailFilesize * 1024 * 1024) {
                      this._thumbnailQueue.push(file);
                      return setTimeout(function() {
                        return _this8._processThumbnailQueue();
                      }, 0);
                    }
                  }
                }, {
                  key: "_processThumbnailQueue",
                  value: function _processThumbnailQueue() {
                    var _this9 = this;
                    if (this._processingThumbnail || this._thumbnailQueue.length === 0) {
                      return;
                    }
                    this._processingThumbnail = true;
                    var file = this._thumbnailQueue.shift();
                    return this.createThumbnail(file, this.options.thumbnailWidth, this.options.thumbnailHeight, this.options.thumbnailMethod, true, function(dataUrl) {
                      _this9.emit("thumbnail", file, dataUrl);
                      _this9._processingThumbnail = false;
                      return _this9._processThumbnailQueue();
                    });
                  }
                  // Can be called by the user to remove a file
                }, {
                  key: "removeFile",
                  value: function removeFile(file) {
                    if (file.status === Dropzone3.UPLOADING) {
                      this.cancelUpload(file);
                    }
                    this.files = without(this.files, file);
                    this.emit("removedfile", file);
                    if (this.files.length === 0) {
                      return this.emit("reset");
                    }
                  }
                  // Removes all files that aren't currently processed from the list
                }, {
                  key: "removeAllFiles",
                  value: function removeAllFiles(cancelIfNecessary) {
                    if (cancelIfNecessary == null) {
                      cancelIfNecessary = false;
                    }
                    var _iterator9 = dropzone_createForOfIteratorHelper(this.files.slice(), true), _step9;
                    try {
                      for (_iterator9.s(); !(_step9 = _iterator9.n()).done; ) {
                        var file = _step9.value;
                        if (file.status !== Dropzone3.UPLOADING || cancelIfNecessary) {
                          this.removeFile(file);
                        }
                      }
                    } catch (err) {
                      _iterator9.e(err);
                    } finally {
                      _iterator9.f();
                    }
                    return null;
                  }
                  // Resizes an image before it gets sent to the server. This function is the default behavior of
                  // `options.transformFile` if `resizeWidth` or `resizeHeight` are set. The callback is invoked with
                  // the resized blob.
                }, {
                  key: "resizeImage",
                  value: function resizeImage(file, width, height, resizeMethod, callback) {
                    var _this10 = this;
                    return this.createThumbnail(file, width, height, resizeMethod, true, function(dataUrl, canvas) {
                      if (canvas == null) {
                        return callback(file);
                      } else {
                        var resizeMimeType = _this10.options.resizeMimeType;
                        if (resizeMimeType == null) {
                          resizeMimeType = file.type;
                        }
                        var resizedDataURL = canvas.toDataURL(resizeMimeType, _this10.options.resizeQuality);
                        if (resizeMimeType === "image/jpeg" || resizeMimeType === "image/jpg") {
                          resizedDataURL = ExifRestore.restore(file.dataURL, resizedDataURL);
                        }
                        return callback(Dropzone3.dataURItoBlob(resizedDataURL));
                      }
                    });
                  }
                }, {
                  key: "createThumbnail",
                  value: function createThumbnail(file, width, height, resizeMethod, fixOrientation, callback) {
                    var _this11 = this;
                    var fileReader = new FileReader();
                    fileReader.onload = function() {
                      file.dataURL = fileReader.result;
                      if (file.type === "image/svg+xml") {
                        if (callback != null) {
                          callback(fileReader.result);
                        }
                        return;
                      }
                      _this11.createThumbnailFromUrl(file, width, height, resizeMethod, fixOrientation, callback);
                    };
                    fileReader.readAsDataURL(file);
                  }
                  // `mockFile` needs to have these attributes:
                  //
                  //     { name: 'name', size: 12345, imageUrl: '' }
                  //
                  // `callback` will be invoked when the image has been downloaded and displayed.
                  // `crossOrigin` will be added to the `img` tag when accessing the file.
                }, {
                  key: "displayExistingFile",
                  value: function displayExistingFile(mockFile, imageUrl, callback, crossOrigin) {
                    var _this12 = this;
                    var resizeThumbnail = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : true;
                    this.emit("addedfile", mockFile);
                    this.emit("complete", mockFile);
                    if (!resizeThumbnail) {
                      this.emit("thumbnail", mockFile, imageUrl);
                      if (callback)
                        callback();
                    } else {
                      var onDone = function onDone2(thumbnail) {
                        _this12.emit("thumbnail", mockFile, thumbnail);
                        if (callback)
                          callback();
                      };
                      mockFile.dataURL = imageUrl;
                      this.createThumbnailFromUrl(mockFile, this.options.thumbnailWidth, this.options.thumbnailHeight, this.options.thumbnailMethod, this.options.fixOrientation, onDone, crossOrigin);
                    }
                  }
                }, {
                  key: "createThumbnailFromUrl",
                  value: function createThumbnailFromUrl(file, width, height, resizeMethod, fixOrientation, callback, crossOrigin) {
                    var _this13 = this;
                    var img = document.createElement("img");
                    if (crossOrigin) {
                      img.crossOrigin = crossOrigin;
                    }
                    fixOrientation = getComputedStyle(document.body)["imageOrientation"] == "from-image" ? false : fixOrientation;
                    img.onload = function() {
                      var loadExif = function loadExif2(callback2) {
                        return callback2(1);
                      };
                      if (typeof EXIF !== "undefined" && EXIF !== null && fixOrientation) {
                        loadExif = function loadExif2(callback2) {
                          return EXIF.getData(img, function() {
                            return callback2(EXIF.getTag(this, "Orientation"));
                          });
                        };
                      }
                      return loadExif(function(orientation) {
                        file.width = img.width;
                        file.height = img.height;
                        var resizeInfo = _this13.options.resize.call(_this13, file, width, height, resizeMethod);
                        var canvas = document.createElement("canvas");
                        var ctx = canvas.getContext("2d");
                        canvas.width = resizeInfo.trgWidth;
                        canvas.height = resizeInfo.trgHeight;
                        if (orientation > 4) {
                          canvas.width = resizeInfo.trgHeight;
                          canvas.height = resizeInfo.trgWidth;
                        }
                        switch (orientation) {
                          case 2:
                            ctx.translate(canvas.width, 0);
                            ctx.scale(-1, 1);
                            break;
                          case 3:
                            ctx.translate(canvas.width, canvas.height);
                            ctx.rotate(Math.PI);
                            break;
                          case 4:
                            ctx.translate(0, canvas.height);
                            ctx.scale(1, -1);
                            break;
                          case 5:
                            ctx.rotate(0.5 * Math.PI);
                            ctx.scale(1, -1);
                            break;
                          case 6:
                            ctx.rotate(0.5 * Math.PI);
                            ctx.translate(0, -canvas.width);
                            break;
                          case 7:
                            ctx.rotate(0.5 * Math.PI);
                            ctx.translate(canvas.height, -canvas.width);
                            ctx.scale(-1, 1);
                            break;
                          case 8:
                            ctx.rotate(-0.5 * Math.PI);
                            ctx.translate(-canvas.height, 0);
                            break;
                        }
                        drawImageIOSFix(ctx, img, resizeInfo.srcX != null ? resizeInfo.srcX : 0, resizeInfo.srcY != null ? resizeInfo.srcY : 0, resizeInfo.srcWidth, resizeInfo.srcHeight, resizeInfo.trgX != null ? resizeInfo.trgX : 0, resizeInfo.trgY != null ? resizeInfo.trgY : 0, resizeInfo.trgWidth, resizeInfo.trgHeight);
                        var thumbnail = canvas.toDataURL("image/png");
                        if (callback != null) {
                          return callback(thumbnail, canvas);
                        }
                      });
                    };
                    if (callback != null) {
                      img.onerror = callback;
                    }
                    return img.src = file.dataURL;
                  }
                  // Goes through the queue and processes files if there aren't too many already.
                }, {
                  key: "processQueue",
                  value: function processQueue() {
                    var parallelUploads = this.options.parallelUploads;
                    var processingLength = this.getUploadingFiles().length;
                    var i = processingLength;
                    if (processingLength >= parallelUploads) {
                      return;
                    }
                    var queuedFiles = this.getQueuedFiles();
                    if (!(queuedFiles.length > 0)) {
                      return;
                    }
                    if (this.options.uploadMultiple) {
                      return this.processFiles(queuedFiles.slice(0, parallelUploads - processingLength));
                    } else {
                      while (i < parallelUploads) {
                        if (!queuedFiles.length) {
                          return;
                        }
                        this.processFile(queuedFiles.shift());
                        i++;
                      }
                    }
                  }
                  // Wrapper for `processFiles`
                }, {
                  key: "processFile",
                  value: function processFile(file) {
                    return this.processFiles([file]);
                  }
                  // Loads the file, then calls finishedLoading()
                }, {
                  key: "processFiles",
                  value: function processFiles(files) {
                    var _iterator10 = dropzone_createForOfIteratorHelper(files, true), _step10;
                    try {
                      for (_iterator10.s(); !(_step10 = _iterator10.n()).done; ) {
                        var file = _step10.value;
                        file.processing = true;
                        file.status = Dropzone3.UPLOADING;
                        this.emit("processing", file);
                      }
                    } catch (err) {
                      _iterator10.e(err);
                    } finally {
                      _iterator10.f();
                    }
                    if (this.options.uploadMultiple) {
                      this.emit("processingmultiple", files);
                    }
                    return this.uploadFiles(files);
                  }
                }, {
                  key: "_getFilesWithXhr",
                  value: function _getFilesWithXhr(xhr) {
                    var files;
                    return files = this.files.filter(function(file) {
                      return file.xhr === xhr;
                    }).map(function(file) {
                      return file;
                    });
                  }
                  // Cancels the file upload and sets the status to CANCELED
                  // **if** the file is actually being uploaded.
                  // If it's still in the queue, the file is being removed from it and the status
                  // set to CANCELED.
                }, {
                  key: "cancelUpload",
                  value: function cancelUpload(file) {
                    if (file.status === Dropzone3.UPLOADING) {
                      var groupedFiles = this._getFilesWithXhr(file.xhr);
                      var _iterator11 = dropzone_createForOfIteratorHelper(groupedFiles, true), _step11;
                      try {
                        for (_iterator11.s(); !(_step11 = _iterator11.n()).done; ) {
                          var groupedFile = _step11.value;
                          groupedFile.status = Dropzone3.CANCELED;
                        }
                      } catch (err) {
                        _iterator11.e(err);
                      } finally {
                        _iterator11.f();
                      }
                      if (typeof file.xhr !== "undefined") {
                        file.xhr.abort();
                      }
                      var _iterator12 = dropzone_createForOfIteratorHelper(groupedFiles, true), _step12;
                      try {
                        for (_iterator12.s(); !(_step12 = _iterator12.n()).done; ) {
                          var _groupedFile = _step12.value;
                          this.emit("canceled", _groupedFile);
                        }
                      } catch (err) {
                        _iterator12.e(err);
                      } finally {
                        _iterator12.f();
                      }
                      if (this.options.uploadMultiple) {
                        this.emit("canceledmultiple", groupedFiles);
                      }
                    } else if (file.status === Dropzone3.ADDED || file.status === Dropzone3.QUEUED) {
                      file.status = Dropzone3.CANCELED;
                      this.emit("canceled", file);
                      if (this.options.uploadMultiple) {
                        this.emit("canceledmultiple", [file]);
                      }
                    }
                    if (this.options.autoProcessQueue) {
                      return this.processQueue();
                    }
                  }
                }, {
                  key: "resolveOption",
                  value: function resolveOption(option) {
                    if (typeof option === "function") {
                      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                        args[_key - 1] = arguments[_key];
                      }
                      return option.apply(this, args);
                    }
                    return option;
                  }
                }, {
                  key: "uploadFile",
                  value: function uploadFile(file) {
                    return this.uploadFiles([file]);
                  }
                }, {
                  key: "uploadFiles",
                  value: function uploadFiles(files) {
                    var _this14 = this;
                    this._transformFiles(files, function(transformedFiles) {
                      if (_this14.options.chunking) {
                        var transformedFile = transformedFiles[0];
                        files[0].upload.chunked = _this14.options.chunking && (_this14.options.forceChunking || transformedFile.size > _this14.options.chunkSize);
                        files[0].upload.totalChunkCount = Math.ceil(transformedFile.size / _this14.options.chunkSize);
                      }
                      if (files[0].upload.chunked) {
                        var file = files[0];
                        var _transformedFile = transformedFiles[0];
                        var startedChunkCount = 0;
                        file.upload.chunks = [];
                        var handleNextChunk = function handleNextChunk2() {
                          var chunkIndex = 0;
                          while (file.upload.chunks[chunkIndex] !== void 0) {
                            chunkIndex++;
                          }
                          if (chunkIndex >= file.upload.totalChunkCount)
                            return;
                          startedChunkCount++;
                          var start2 = chunkIndex * _this14.options.chunkSize;
                          var end = Math.min(start2 + _this14.options.chunkSize, _transformedFile.size);
                          var dataBlock = {
                            name: _this14._getParamName(0),
                            data: _transformedFile.webkitSlice ? _transformedFile.webkitSlice(start2, end) : _transformedFile.slice(start2, end),
                            filename: file.upload.filename,
                            chunkIndex
                          };
                          file.upload.chunks[chunkIndex] = {
                            file,
                            index: chunkIndex,
                            dataBlock,
                            // In case we want to retry.
                            status: Dropzone3.UPLOADING,
                            progress: 0,
                            retries: 0
                            // The number of times this block has been retried.
                          };
                          _this14._uploadData(files, [dataBlock]);
                        };
                        file.upload.finishedChunkUpload = function(chunk, response) {
                          var allFinished = true;
                          chunk.status = Dropzone3.SUCCESS;
                          chunk.dataBlock = null;
                          chunk.xhr = null;
                          for (var i2 = 0; i2 < file.upload.totalChunkCount; i2++) {
                            if (file.upload.chunks[i2] === void 0) {
                              return handleNextChunk();
                            }
                            if (file.upload.chunks[i2].status !== Dropzone3.SUCCESS) {
                              allFinished = false;
                            }
                          }
                          if (allFinished) {
                            _this14.options.chunksUploaded(file, function() {
                              _this14._finished(files, response, null);
                            });
                          }
                        };
                        if (_this14.options.parallelChunkUploads) {
                          for (var i = 0; i < file.upload.totalChunkCount; i++) {
                            handleNextChunk();
                          }
                        } else {
                          handleNextChunk();
                        }
                      } else {
                        var dataBlocks = [];
                        for (var _i2 = 0; _i2 < files.length; _i2++) {
                          dataBlocks[_i2] = {
                            name: _this14._getParamName(_i2),
                            data: transformedFiles[_i2],
                            filename: files[_i2].upload.filename
                          };
                        }
                        _this14._uploadData(files, dataBlocks);
                      }
                    });
                  }
                  /// Returns the right chunk for given file and xhr
                }, {
                  key: "_getChunk",
                  value: function _getChunk(file, xhr) {
                    for (var i = 0; i < file.upload.totalChunkCount; i++) {
                      if (file.upload.chunks[i] !== void 0 && file.upload.chunks[i].xhr === xhr) {
                        return file.upload.chunks[i];
                      }
                    }
                  }
                  // This function actually uploads the file(s) to the server.
                  // If dataBlocks contains the actual data to upload (meaning, that this could either be transformed
                  // files, or individual chunks for chunked upload).
                }, {
                  key: "_uploadData",
                  value: function _uploadData(files, dataBlocks) {
                    var _this15 = this;
                    var xhr = new XMLHttpRequest();
                    var _iterator13 = dropzone_createForOfIteratorHelper(files, true), _step13;
                    try {
                      for (_iterator13.s(); !(_step13 = _iterator13.n()).done; ) {
                        var file = _step13.value;
                        file.xhr = xhr;
                      }
                    } catch (err) {
                      _iterator13.e(err);
                    } finally {
                      _iterator13.f();
                    }
                    if (files[0].upload.chunked) {
                      files[0].upload.chunks[dataBlocks[0].chunkIndex].xhr = xhr;
                    }
                    var method = this.resolveOption(this.options.method, files);
                    var url = this.resolveOption(this.options.url, files);
                    xhr.open(method, url, true);
                    var timeout = this.resolveOption(this.options.timeout, files);
                    if (timeout)
                      xhr.timeout = this.resolveOption(this.options.timeout, files);
                    xhr.withCredentials = !!this.options.withCredentials;
                    xhr.onload = function(e) {
                      _this15._finishedUploading(files, xhr, e);
                    };
                    xhr.ontimeout = function() {
                      _this15._handleUploadError(files, xhr, "Request timedout after ".concat(_this15.options.timeout / 1e3, " seconds"));
                    };
                    xhr.onerror = function() {
                      _this15._handleUploadError(files, xhr);
                    };
                    var progressObj = xhr.upload != null ? xhr.upload : xhr;
                    progressObj.onprogress = function(e) {
                      return _this15._updateFilesUploadProgress(files, xhr, e);
                    };
                    var headers = {
                      Accept: "application/json",
                      "Cache-Control": "no-cache",
                      "X-Requested-With": "XMLHttpRequest"
                    };
                    if (this.options.headers) {
                      Dropzone3.extend(headers, this.options.headers);
                    }
                    for (var headerName in headers) {
                      var headerValue = headers[headerName];
                      if (headerValue) {
                        xhr.setRequestHeader(headerName, headerValue);
                      }
                    }
                    var formData = new FormData();
                    if (this.options.params) {
                      var additionalParams = this.options.params;
                      if (typeof additionalParams === "function") {
                        additionalParams = additionalParams.call(this, files, xhr, files[0].upload.chunked ? this._getChunk(files[0], xhr) : null);
                      }
                      for (var key in additionalParams) {
                        var value = additionalParams[key];
                        if (Array.isArray(value)) {
                          for (var i = 0; i < value.length; i++) {
                            formData.append(key, value[i]);
                          }
                        } else {
                          formData.append(key, value);
                        }
                      }
                    }
                    var _iterator14 = dropzone_createForOfIteratorHelper(files, true), _step14;
                    try {
                      for (_iterator14.s(); !(_step14 = _iterator14.n()).done; ) {
                        var _file = _step14.value;
                        this.emit("sending", _file, xhr, formData);
                      }
                    } catch (err) {
                      _iterator14.e(err);
                    } finally {
                      _iterator14.f();
                    }
                    if (this.options.uploadMultiple) {
                      this.emit("sendingmultiple", files, xhr, formData);
                    }
                    this._addFormElementData(formData);
                    for (var _i3 = 0; _i3 < dataBlocks.length; _i3++) {
                      var dataBlock = dataBlocks[_i3];
                      formData.append(dataBlock.name, dataBlock.data, dataBlock.filename);
                    }
                    this.submitRequest(xhr, formData, files);
                  }
                  // Transforms all files with this.options.transformFile and invokes done with the transformed files when done.
                }, {
                  key: "_transformFiles",
                  value: function _transformFiles(files, done) {
                    var _this16 = this;
                    var transformedFiles = [];
                    var doneCounter = 0;
                    var _loop = function _loop2(i2) {
                      _this16.options.transformFile.call(_this16, files[i2], function(transformedFile) {
                        transformedFiles[i2] = transformedFile;
                        if (++doneCounter === files.length) {
                          done(transformedFiles);
                        }
                      });
                    };
                    for (var i = 0; i < files.length; i++) {
                      _loop(i);
                    }
                  }
                  // Takes care of adding other input elements of the form to the AJAX request
                }, {
                  key: "_addFormElementData",
                  value: function _addFormElementData(formData) {
                    if (this.element.tagName === "FORM") {
                      var _iterator15 = dropzone_createForOfIteratorHelper(this.element.querySelectorAll("input, textarea, select, button"), true), _step15;
                      try {
                        for (_iterator15.s(); !(_step15 = _iterator15.n()).done; ) {
                          var input = _step15.value;
                          var inputName = input.getAttribute("name");
                          var inputType = input.getAttribute("type");
                          if (inputType)
                            inputType = inputType.toLowerCase();
                          if (typeof inputName === "undefined" || inputName === null)
                            continue;
                          if (input.tagName === "SELECT" && input.hasAttribute("multiple")) {
                            var _iterator16 = dropzone_createForOfIteratorHelper(input.options, true), _step16;
                            try {
                              for (_iterator16.s(); !(_step16 = _iterator16.n()).done; ) {
                                var option = _step16.value;
                                if (option.selected) {
                                  formData.append(inputName, option.value);
                                }
                              }
                            } catch (err) {
                              _iterator16.e(err);
                            } finally {
                              _iterator16.f();
                            }
                          } else if (!inputType || inputType !== "checkbox" && inputType !== "radio" || input.checked) {
                            formData.append(inputName, input.value);
                          }
                        }
                      } catch (err) {
                        _iterator15.e(err);
                      } finally {
                        _iterator15.f();
                      }
                    }
                  }
                  // Invoked when there is new progress information about given files.
                  // If e is not provided, it is assumed that the upload is finished.
                }, {
                  key: "_updateFilesUploadProgress",
                  value: function _updateFilesUploadProgress(files, xhr, e) {
                    if (!files[0].upload.chunked) {
                      var _iterator17 = dropzone_createForOfIteratorHelper(files, true), _step17;
                      try {
                        for (_iterator17.s(); !(_step17 = _iterator17.n()).done; ) {
                          var file = _step17.value;
                          if (file.upload.total && file.upload.bytesSent && file.upload.bytesSent == file.upload.total) {
                            continue;
                          }
                          if (e) {
                            file.upload.progress = 100 * e.loaded / e.total;
                            file.upload.total = e.total;
                            file.upload.bytesSent = e.loaded;
                          } else {
                            file.upload.progress = 100;
                            file.upload.bytesSent = file.upload.total;
                          }
                          this.emit("uploadprogress", file, file.upload.progress, file.upload.bytesSent);
                        }
                      } catch (err) {
                        _iterator17.e(err);
                      } finally {
                        _iterator17.f();
                      }
                    } else {
                      var _file2 = files[0];
                      var chunk = this._getChunk(_file2, xhr);
                      if (e) {
                        chunk.progress = 100 * e.loaded / e.total;
                        chunk.total = e.total;
                        chunk.bytesSent = e.loaded;
                      } else {
                        chunk.progress = 100;
                        chunk.bytesSent = chunk.total;
                      }
                      _file2.upload.progress = 0;
                      _file2.upload.total = 0;
                      _file2.upload.bytesSent = 0;
                      for (var i = 0; i < _file2.upload.totalChunkCount; i++) {
                        if (_file2.upload.chunks[i] && typeof _file2.upload.chunks[i].progress !== "undefined") {
                          _file2.upload.progress += _file2.upload.chunks[i].progress;
                          _file2.upload.total += _file2.upload.chunks[i].total;
                          _file2.upload.bytesSent += _file2.upload.chunks[i].bytesSent;
                        }
                      }
                      _file2.upload.progress = _file2.upload.progress / _file2.upload.totalChunkCount;
                      this.emit("uploadprogress", _file2, _file2.upload.progress, _file2.upload.bytesSent);
                    }
                  }
                }, {
                  key: "_finishedUploading",
                  value: function _finishedUploading(files, xhr, e) {
                    var response;
                    if (files[0].status === Dropzone3.CANCELED) {
                      return;
                    }
                    if (xhr.readyState !== 4) {
                      return;
                    }
                    if (xhr.responseType !== "arraybuffer" && xhr.responseType !== "blob") {
                      response = xhr.responseText;
                      if (xhr.getResponseHeader("content-type") && ~xhr.getResponseHeader("content-type").indexOf("application/json")) {
                        try {
                          response = JSON.parse(response);
                        } catch (error) {
                          e = error;
                          response = "Invalid JSON response from server.";
                        }
                      }
                    }
                    this._updateFilesUploadProgress(files, xhr);
                    if (!(200 <= xhr.status && xhr.status < 300)) {
                      this._handleUploadError(files, xhr, response);
                    } else {
                      if (files[0].upload.chunked) {
                        files[0].upload.finishedChunkUpload(this._getChunk(files[0], xhr), response);
                      } else {
                        this._finished(files, response, e);
                      }
                    }
                  }
                }, {
                  key: "_handleUploadError",
                  value: function _handleUploadError(files, xhr, response) {
                    if (files[0].status === Dropzone3.CANCELED) {
                      return;
                    }
                    if (files[0].upload.chunked && this.options.retryChunks) {
                      var chunk = this._getChunk(files[0], xhr);
                      if (chunk.retries++ < this.options.retryChunksLimit) {
                        this._uploadData(files, [chunk.dataBlock]);
                        return;
                      } else {
                        console.warn("Retried this chunk too often. Giving up.");
                      }
                    }
                    this._errorProcessing(files, response || this.options.dictResponseError.replace("{{statusCode}}", xhr.status), xhr);
                  }
                }, {
                  key: "submitRequest",
                  value: function submitRequest(xhr, formData, files) {
                    if (xhr.readyState != 1) {
                      console.warn("Cannot send this request because the XMLHttpRequest.readyState is not OPENED.");
                      return;
                    }
                    xhr.send(formData);
                  }
                  // Called internally when processing is finished.
                  // Individual callbacks have to be called in the appropriate sections.
                }, {
                  key: "_finished",
                  value: function _finished(files, responseText, e) {
                    var _iterator18 = dropzone_createForOfIteratorHelper(files, true), _step18;
                    try {
                      for (_iterator18.s(); !(_step18 = _iterator18.n()).done; ) {
                        var file = _step18.value;
                        file.status = Dropzone3.SUCCESS;
                        this.emit("success", file, responseText, e);
                        this.emit("complete", file);
                      }
                    } catch (err) {
                      _iterator18.e(err);
                    } finally {
                      _iterator18.f();
                    }
                    if (this.options.uploadMultiple) {
                      this.emit("successmultiple", files, responseText, e);
                      this.emit("completemultiple", files);
                    }
                    if (this.options.autoProcessQueue) {
                      return this.processQueue();
                    }
                  }
                  // Called internally when processing is finished.
                  // Individual callbacks have to be called in the appropriate sections.
                }, {
                  key: "_errorProcessing",
                  value: function _errorProcessing(files, message, xhr) {
                    var _iterator19 = dropzone_createForOfIteratorHelper(files, true), _step19;
                    try {
                      for (_iterator19.s(); !(_step19 = _iterator19.n()).done; ) {
                        var file = _step19.value;
                        file.status = Dropzone3.ERROR;
                        this.emit("error", file, message, xhr);
                        this.emit("complete", file);
                      }
                    } catch (err) {
                      _iterator19.e(err);
                    } finally {
                      _iterator19.f();
                    }
                    if (this.options.uploadMultiple) {
                      this.emit("errormultiple", files, message, xhr);
                      this.emit("completemultiple", files);
                    }
                    if (this.options.autoProcessQueue) {
                      return this.processQueue();
                    }
                  }
                }], [{
                  key: "initClass",
                  value: function initClass() {
                    this.prototype.Emitter = Emitter;
                    this.prototype.events = ["drop", "dragstart", "dragend", "dragenter", "dragover", "dragleave", "addedfile", "addedfiles", "removedfile", "thumbnail", "error", "errormultiple", "processing", "processingmultiple", "uploadprogress", "totaluploadprogress", "sending", "sendingmultiple", "success", "successmultiple", "canceled", "canceledmultiple", "complete", "completemultiple", "reset", "maxfilesexceeded", "maxfilesreached", "queuecomplete"];
                    this.prototype._thumbnailQueue = [];
                    this.prototype._processingThumbnail = false;
                  }
                  // global utility
                }, {
                  key: "extend",
                  value: function extend(target) {
                    for (var _len2 = arguments.length, objects = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                      objects[_key2 - 1] = arguments[_key2];
                    }
                    for (var _i4 = 0, _objects = objects; _i4 < _objects.length; _i4++) {
                      var object = _objects[_i4];
                      for (var key in object) {
                        var val = object[key];
                        target[key] = val;
                      }
                    }
                    return target;
                  }
                }, {
                  key: "uuidv4",
                  value: function uuidv4() {
                    return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, function(c) {
                      var r = Math.random() * 16 | 0, v = c === "x" ? r : r & 3 | 8;
                      return v.toString(16);
                    });
                  }
                }]);
                return Dropzone3;
              }(Emitter);
              Dropzone2.initClass();
              Dropzone2.version = "5.9.3";
              Dropzone2.options = {};
              Dropzone2.optionsForElement = function(element) {
                if (element.getAttribute("id")) {
                  return Dropzone2.options[camelize(element.getAttribute("id"))];
                } else {
                  return void 0;
                }
              };
              Dropzone2.instances = [];
              Dropzone2.forElement = function(element) {
                if (typeof element === "string") {
                  element = document.querySelector(element);
                }
                if ((element != null ? element.dropzone : void 0) == null) {
                  throw new Error("No Dropzone found for given element. This is probably because you're trying to access it before Dropzone had the time to initialize. Use the `init` option to setup any additional observers on your Dropzone.");
                }
                return element.dropzone;
              };
              Dropzone2.autoDiscover = true;
              Dropzone2.discover = function() {
                var dropzones;
                if (document.querySelectorAll) {
                  dropzones = document.querySelectorAll(".dropzone");
                } else {
                  dropzones = [];
                  var checkElements = function checkElements2(elements) {
                    return function() {
                      var result = [];
                      var _iterator20 = dropzone_createForOfIteratorHelper(elements, true), _step20;
                      try {
                        for (_iterator20.s(); !(_step20 = _iterator20.n()).done; ) {
                          var el = _step20.value;
                          if (/(^| )dropzone($| )/.test(el.className)) {
                            result.push(dropzones.push(el));
                          } else {
                            result.push(void 0);
                          }
                        }
                      } catch (err) {
                        _iterator20.e(err);
                      } finally {
                        _iterator20.f();
                      }
                      return result;
                    }();
                  };
                  checkElements(document.getElementsByTagName("div"));
                  checkElements(document.getElementsByTagName("form"));
                }
                return function() {
                  var result = [];
                  var _iterator21 = dropzone_createForOfIteratorHelper(dropzones, true), _step21;
                  try {
                    for (_iterator21.s(); !(_step21 = _iterator21.n()).done; ) {
                      var dropzone = _step21.value;
                      if (Dropzone2.optionsForElement(dropzone) !== false) {
                        result.push(new Dropzone2(dropzone));
                      } else {
                        result.push(void 0);
                      }
                    }
                  } catch (err) {
                    _iterator21.e(err);
                  } finally {
                    _iterator21.f();
                  }
                  return result;
                }();
              };
              Dropzone2.blockedBrowsers = [
                // The mac os and windows phone version of opera 12 seems to have a problem with the File drag'n'drop API.
                /opera.*(Macintosh|Windows Phone).*version\/12/i
              ];
              Dropzone2.isBrowserSupported = function() {
                var capableBrowser = true;
                if (window.File && window.FileReader && window.FileList && window.Blob && window.FormData && document.querySelector) {
                  if (!("classList" in document.createElement("a"))) {
                    capableBrowser = false;
                  } else {
                    if (Dropzone2.blacklistedBrowsers !== void 0) {
                      Dropzone2.blockedBrowsers = Dropzone2.blacklistedBrowsers;
                    }
                    var _iterator22 = dropzone_createForOfIteratorHelper(Dropzone2.blockedBrowsers, true), _step22;
                    try {
                      for (_iterator22.s(); !(_step22 = _iterator22.n()).done; ) {
                        var regex = _step22.value;
                        if (regex.test(navigator.userAgent)) {
                          capableBrowser = false;
                          continue;
                        }
                      }
                    } catch (err) {
                      _iterator22.e(err);
                    } finally {
                      _iterator22.f();
                    }
                  }
                } else {
                  capableBrowser = false;
                }
                return capableBrowser;
              };
              Dropzone2.dataURItoBlob = function(dataURI) {
                var byteString = atob(dataURI.split(",")[1]);
                var mimeString = dataURI.split(",")[0].split(":")[1].split(";")[0];
                var ab = new ArrayBuffer(byteString.length);
                var ia = new Uint8Array(ab);
                for (var i = 0, end = byteString.length, asc = 0 <= end; asc ? i <= end : i >= end; asc ? i++ : i--) {
                  ia[i] = byteString.charCodeAt(i);
                }
                return new Blob([ab], {
                  type: mimeString
                });
              };
              var without = function without2(list, rejectedItem) {
                return list.filter(function(item) {
                  return item !== rejectedItem;
                }).map(function(item) {
                  return item;
                });
              };
              var camelize = function camelize2(str) {
                return str.replace(/[\-_](\w)/g, function(match) {
                  return match.charAt(1).toUpperCase();
                });
              };
              Dropzone2.createElement = function(string) {
                var div = document.createElement("div");
                div.innerHTML = string;
                return div.childNodes[0];
              };
              Dropzone2.elementInside = function(element, container) {
                if (element === container) {
                  return true;
                }
                while (element = element.parentNode) {
                  if (element === container) {
                    return true;
                  }
                }
                return false;
              };
              Dropzone2.getElement = function(el, name) {
                var element;
                if (typeof el === "string") {
                  element = document.querySelector(el);
                } else if (el.nodeType != null) {
                  element = el;
                }
                if (element == null) {
                  throw new Error("Invalid `".concat(name, "` option provided. Please provide a CSS selector or a plain HTML element."));
                }
                return element;
              };
              Dropzone2.getElements = function(els, name) {
                var el, elements;
                if (els instanceof Array) {
                  elements = [];
                  try {
                    var _iterator23 = dropzone_createForOfIteratorHelper(els, true), _step23;
                    try {
                      for (_iterator23.s(); !(_step23 = _iterator23.n()).done; ) {
                        el = _step23.value;
                        elements.push(this.getElement(el, name));
                      }
                    } catch (err) {
                      _iterator23.e(err);
                    } finally {
                      _iterator23.f();
                    }
                  } catch (e) {
                    elements = null;
                  }
                } else if (typeof els === "string") {
                  elements = [];
                  var _iterator24 = dropzone_createForOfIteratorHelper(document.querySelectorAll(els), true), _step24;
                  try {
                    for (_iterator24.s(); !(_step24 = _iterator24.n()).done; ) {
                      el = _step24.value;
                      elements.push(el);
                    }
                  } catch (err) {
                    _iterator24.e(err);
                  } finally {
                    _iterator24.f();
                  }
                } else if (els.nodeType != null) {
                  elements = [els];
                }
                if (elements == null || !elements.length) {
                  throw new Error("Invalid `".concat(name, "` option provided. Please provide a CSS selector, a plain HTML element or a list of those."));
                }
                return elements;
              };
              Dropzone2.confirm = function(question, accepted, rejected) {
                if (window.confirm(question)) {
                  return accepted();
                } else if (rejected != null) {
                  return rejected();
                }
              };
              Dropzone2.isValidFile = function(file, acceptedFiles) {
                if (!acceptedFiles) {
                  return true;
                }
                acceptedFiles = acceptedFiles.split(",");
                var mimeType = file.type;
                var baseMimeType = mimeType.replace(/\/.*$/, "");
                var _iterator25 = dropzone_createForOfIteratorHelper(acceptedFiles, true), _step25;
                try {
                  for (_iterator25.s(); !(_step25 = _iterator25.n()).done; ) {
                    var validType = _step25.value;
                    validType = validType.trim();
                    if (validType.charAt(0) === ".") {
                      if (file.name.toLowerCase().indexOf(validType.toLowerCase(), file.name.length - validType.length) !== -1) {
                        return true;
                      }
                    } else if (/\/\*$/.test(validType)) {
                      if (baseMimeType === validType.replace(/\/.*$/, "")) {
                        return true;
                      }
                    } else {
                      if (mimeType === validType) {
                        return true;
                      }
                    }
                  }
                } catch (err) {
                  _iterator25.e(err);
                } finally {
                  _iterator25.f();
                }
                return false;
              };
              if (typeof jQuery !== "undefined" && jQuery !== null) {
                jQuery.fn.dropzone = function(options) {
                  return this.each(function() {
                    return new Dropzone2(this, options);
                  });
                };
              }
              Dropzone2.ADDED = "added";
              Dropzone2.QUEUED = "queued";
              Dropzone2.ACCEPTED = Dropzone2.QUEUED;
              Dropzone2.UPLOADING = "uploading";
              Dropzone2.PROCESSING = Dropzone2.UPLOADING;
              Dropzone2.CANCELED = "canceled";
              Dropzone2.ERROR = "error";
              Dropzone2.SUCCESS = "success";
              var detectVerticalSquash = function detectVerticalSquash2(img) {
                var iw = img.naturalWidth;
                var ih = img.naturalHeight;
                var canvas = document.createElement("canvas");
                canvas.width = 1;
                canvas.height = ih;
                var ctx = canvas.getContext("2d");
                ctx.drawImage(img, 0, 0);
                var _ctx$getImageData = ctx.getImageData(1, 0, 1, ih), data = _ctx$getImageData.data;
                var sy = 0;
                var ey = ih;
                var py = ih;
                while (py > sy) {
                  var alpha = data[(py - 1) * 4 + 3];
                  if (alpha === 0) {
                    ey = py;
                  } else {
                    sy = py;
                  }
                  py = ey + sy >> 1;
                }
                var ratio = py / ih;
                if (ratio === 0) {
                  return 1;
                } else {
                  return ratio;
                }
              };
              var drawImageIOSFix = function drawImageIOSFix2(ctx, img, sx, sy, sw, sh, dx, dy, dw, dh) {
                var vertSquashRatio = detectVerticalSquash(img);
                return ctx.drawImage(img, sx, sy, sw, sh, dx, dy, dw, dh / vertSquashRatio);
              };
              var ExifRestore = /* @__PURE__ */ function() {
                function ExifRestore2() {
                  dropzone_classCallCheck(this, ExifRestore2);
                }
                dropzone_createClass(ExifRestore2, null, [{
                  key: "initClass",
                  value: function initClass() {
                    this.KEY_STR = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
                  }
                }, {
                  key: "encode64",
                  value: function encode64(input) {
                    var output = "";
                    var chr1 = void 0;
                    var chr2 = void 0;
                    var chr3 = "";
                    var enc1 = void 0;
                    var enc2 = void 0;
                    var enc3 = void 0;
                    var enc4 = "";
                    var i = 0;
                    while (true) {
                      chr1 = input[i++];
                      chr2 = input[i++];
                      chr3 = input[i++];
                      enc1 = chr1 >> 2;
                      enc2 = (chr1 & 3) << 4 | chr2 >> 4;
                      enc3 = (chr2 & 15) << 2 | chr3 >> 6;
                      enc4 = chr3 & 63;
                      if (isNaN(chr2)) {
                        enc3 = enc4 = 64;
                      } else if (isNaN(chr3)) {
                        enc4 = 64;
                      }
                      output = output + this.KEY_STR.charAt(enc1) + this.KEY_STR.charAt(enc2) + this.KEY_STR.charAt(enc3) + this.KEY_STR.charAt(enc4);
                      chr1 = chr2 = chr3 = "";
                      enc1 = enc2 = enc3 = enc4 = "";
                      if (!(i < input.length)) {
                        break;
                      }
                    }
                    return output;
                  }
                }, {
                  key: "restore",
                  value: function restore(origFileBase64, resizedFileBase64) {
                    if (!origFileBase64.match("data:image/jpeg;base64,")) {
                      return resizedFileBase64;
                    }
                    var rawImage = this.decode64(origFileBase64.replace("data:image/jpeg;base64,", ""));
                    var segments = this.slice2Segments(rawImage);
                    var image = this.exifManipulation(resizedFileBase64, segments);
                    return "data:image/jpeg;base64,".concat(this.encode64(image));
                  }
                }, {
                  key: "exifManipulation",
                  value: function exifManipulation(resizedFileBase64, segments) {
                    var exifArray = this.getExifArray(segments);
                    var newImageArray = this.insertExif(resizedFileBase64, exifArray);
                    var aBuffer = new Uint8Array(newImageArray);
                    return aBuffer;
                  }
                }, {
                  key: "getExifArray",
                  value: function getExifArray(segments) {
                    var seg = void 0;
                    var x = 0;
                    while (x < segments.length) {
                      seg = segments[x];
                      if (seg[0] === 255 & seg[1] === 225) {
                        return seg;
                      }
                      x++;
                    }
                    return [];
                  }
                }, {
                  key: "insertExif",
                  value: function insertExif(resizedFileBase64, exifArray) {
                    var imageData = resizedFileBase64.replace("data:image/jpeg;base64,", "");
                    var buf = this.decode64(imageData);
                    var separatePoint = buf.indexOf(255, 3);
                    var mae = buf.slice(0, separatePoint);
                    var ato = buf.slice(separatePoint);
                    var array = mae;
                    array = array.concat(exifArray);
                    array = array.concat(ato);
                    return array;
                  }
                }, {
                  key: "slice2Segments",
                  value: function slice2Segments(rawImageArray) {
                    var head = 0;
                    var segments = [];
                    while (true) {
                      var length;
                      if (rawImageArray[head] === 255 & rawImageArray[head + 1] === 218) {
                        break;
                      }
                      if (rawImageArray[head] === 255 & rawImageArray[head + 1] === 216) {
                        head += 2;
                      } else {
                        length = rawImageArray[head + 2] * 256 + rawImageArray[head + 3];
                        var endPoint = head + length + 2;
                        var seg = rawImageArray.slice(head, endPoint);
                        segments.push(seg);
                        head = endPoint;
                      }
                      if (head > rawImageArray.length) {
                        break;
                      }
                    }
                    return segments;
                  }
                }, {
                  key: "decode64",
                  value: function decode64(input) {
                    var output = "";
                    var chr1 = void 0;
                    var chr2 = void 0;
                    var chr3 = "";
                    var enc1 = void 0;
                    var enc2 = void 0;
                    var enc3 = void 0;
                    var enc4 = "";
                    var i = 0;
                    var buf = [];
                    var base64test = /[^A-Za-z0-9\+\/\=]/g;
                    if (base64test.exec(input)) {
                      console.warn("There were invalid base64 characters in the input text.\nValid base64 characters are A-Z, a-z, 0-9, '+', '/',and '='\nExpect errors in decoding.");
                    }
                    input = input.replace(/[^A-Za-z0-9\+\/\=]/g, "");
                    while (true) {
                      enc1 = this.KEY_STR.indexOf(input.charAt(i++));
                      enc2 = this.KEY_STR.indexOf(input.charAt(i++));
                      enc3 = this.KEY_STR.indexOf(input.charAt(i++));
                      enc4 = this.KEY_STR.indexOf(input.charAt(i++));
                      chr1 = enc1 << 2 | enc2 >> 4;
                      chr2 = (enc2 & 15) << 4 | enc3 >> 2;
                      chr3 = (enc3 & 3) << 6 | enc4;
                      buf.push(chr1);
                      if (enc3 !== 64) {
                        buf.push(chr2);
                      }
                      if (enc4 !== 64) {
                        buf.push(chr3);
                      }
                      chr1 = chr2 = chr3 = "";
                      enc1 = enc2 = enc3 = enc4 = "";
                      if (!(i < input.length)) {
                        break;
                      }
                    }
                    return buf;
                  }
                }]);
                return ExifRestore2;
              }();
              ExifRestore.initClass();
              var contentLoaded = function contentLoaded2(win, fn) {
                var done = false;
                var top = true;
                var doc = win.document;
                var root = doc.documentElement;
                var add = doc.addEventListener ? "addEventListener" : "attachEvent";
                var rem = doc.addEventListener ? "removeEventListener" : "detachEvent";
                var pre = doc.addEventListener ? "" : "on";
                var init = function init2(e) {
                  if (e.type === "readystatechange" && doc.readyState !== "complete") {
                    return;
                  }
                  (e.type === "load" ? win : doc)[rem](pre + e.type, init2, false);
                  if (!done && (done = true)) {
                    return fn.call(win, e.type || e);
                  }
                };
                var poll = function poll2() {
                  try {
                    root.doScroll("left");
                  } catch (e) {
                    setTimeout(poll2, 50);
                    return;
                  }
                  return init("poll");
                };
                if (doc.readyState !== "complete") {
                  if (doc.createEventObject && root.doScroll) {
                    try {
                      top = !win.frameElement;
                    } catch (error) {
                    }
                    if (top) {
                      poll();
                    }
                  }
                  doc[add](pre + "DOMContentLoaded", init, false);
                  doc[add](pre + "readystatechange", init, false);
                  return win[add](pre + "load", init, false);
                }
              };
              Dropzone2._autoDiscoverFunction = function() {
                if (Dropzone2.autoDiscover) {
                  return Dropzone2.discover();
                }
              };
              contentLoaded(window, Dropzone2._autoDiscoverFunction);
              function __guard__(value, transform) {
                return typeof value !== "undefined" && value !== null ? transform(value) : void 0;
              }
              function __guardMethod__(obj, methodName, transform) {
                if (typeof obj !== "undefined" && obj !== null && typeof obj[methodName] === "function") {
                  return transform(obj, methodName);
                } else {
                  return void 0;
                }
              }
              ;
              window.Dropzone = Dropzone2;
              var dropzone_dist = Dropzone2;
            }();
            return __webpack_exports__;
          }()
        );
      });
    }
  });

  // app/javascript/src/add_jquery.js
  var import_jquery = __toESM(require_jquery());
  window.jQuery = import_jquery.default;
  window.$ = import_jquery.default;

  // app/javascript/application.js
  var import_ujs = __toESM(require_rails_ujs());
  var import_turbolinks2 = __toESM(require_turbolinks());
  var ActiveStorage = __toESM(require_activestorage());
  var import_trix = __toESM(require_trix());

  // node_modules/@rails/actiontext/app/javascript/actiontext/attachment_upload.js
  var import_activestorage = __toESM(require_activestorage());
  var AttachmentUpload = class {
    constructor(attachment, element) {
      this.attachment = attachment;
      this.element = element;
      this.directUpload = new import_activestorage.DirectUpload(attachment.file, this.directUploadUrl, this);
    }
    start() {
      this.directUpload.create(this.directUploadDidComplete.bind(this));
    }
    directUploadWillStoreFileWithXHR(xhr) {
      xhr.upload.addEventListener("progress", (event) => {
        const progress = event.loaded / event.total * 100;
        this.attachment.setUploadProgress(progress);
      });
    }
    directUploadDidComplete(error, attributes) {
      if (error) {
        throw new Error(`Direct upload failed: ${error}`);
      }
      this.attachment.setAttributes({
        sgid: attributes.attachable_sgid,
        url: this.createBlobUrl(attributes.signed_id, attributes.filename)
      });
    }
    createBlobUrl(signedId, filename) {
      return this.blobUrlTemplate.replace(":signed_id", signedId).replace(":filename", encodeURIComponent(filename));
    }
    get directUploadUrl() {
      return this.element.dataset.directUploadUrl;
    }
    get blobUrlTemplate() {
      return this.element.dataset.blobUrlTemplate;
    }
  };

  // node_modules/@rails/actiontext/app/javascript/actiontext/index.js
  addEventListener("trix-attachment-add", (event) => {
    const { attachment, target } = event;
    if (attachment.file) {
      const upload = new AttachmentUpload(attachment, target);
      upload.start();
    }
  });

  // app/javascript/application.js
  var import_bootstrap = __toESM(require_bootstrap());
  var import_selectize = __toESM(require_selectize());

  // node_modules/easy-autocomplete/dist/jquery.easy-autocomplete.js
  var EasyAutocomplete = function(scope) {
    scope.Configuration = function Configuration(options) {
      var defaults = {
        data: "list-required",
        url: "list-required",
        dataType: "json",
        listLocation: function(data) {
          return data;
        },
        xmlElementName: "",
        getValue: function(element) {
          return element;
        },
        autocompleteOff: true,
        placeholder: false,
        ajaxCallback: function() {
        },
        matchResponseProperty: false,
        list: {
          sort: {
            enabled: false,
            method: function(a, b) {
              a = defaults.getValue(a);
              b = defaults.getValue(b);
              if (a < b) {
                return -1;
              }
              if (a > b) {
                return 1;
              }
              return 0;
            }
          },
          maxNumberOfElements: 6,
          hideOnEmptyPhrase: true,
          match: {
            enabled: false,
            caseSensitive: false,
            method: function(element, phrase) {
              if (element.search(phrase) > -1) {
                return true;
              } else {
                return false;
              }
            }
          },
          showAnimation: {
            type: "normal",
            //normal|slide|fade
            time: 400,
            callback: function() {
            }
          },
          hideAnimation: {
            type: "normal",
            time: 400,
            callback: function() {
            }
          },
          /* Events */
          onClickEvent: function() {
          },
          onSelectItemEvent: function() {
          },
          onLoadEvent: function() {
          },
          onChooseEvent: function() {
          },
          onKeyEnterEvent: function() {
          },
          onMouseOverEvent: function() {
          },
          onMouseOutEvent: function() {
          },
          onShowListEvent: function() {
          },
          onHideListEvent: function() {
          }
        },
        highlightPhrase: true,
        theme: "",
        cssClasses: "",
        minCharNumber: 0,
        requestDelay: 0,
        adjustWidth: true,
        ajaxSettings: {},
        preparePostData: function(data, inputPhrase) {
          return data;
        },
        loggerEnabled: true,
        template: "",
        categoriesAssigned: false,
        categories: [{
          maxNumberOfElements: 4
        }]
      };
      var externalObjects = ["ajaxSettings", "template"];
      this.get = function(propertyName) {
        return defaults[propertyName];
      };
      this.equals = function(name, value) {
        if (isAssigned(name)) {
          if (defaults[name] === value) {
            return true;
          }
        }
        return false;
      };
      this.checkDataUrlProperties = function() {
        if (defaults.url === "list-required" && defaults.data === "list-required") {
          return false;
        }
        return true;
      };
      this.checkRequiredProperties = function() {
        for (var propertyName in defaults) {
          if (defaults[propertyName] === "required") {
            logger.error("Option " + propertyName + " must be defined");
            return false;
          }
        }
        return true;
      };
      this.printPropertiesThatDoesntExist = function(consol, optionsToCheck) {
        printPropertiesThatDoesntExist(consol, optionsToCheck);
      };
      prepareDefaults();
      mergeOptions();
      if (defaults.loggerEnabled === true) {
        printPropertiesThatDoesntExist(console, options);
      }
      addAjaxSettings();
      processAfterMerge();
      function prepareDefaults() {
        if (options.dataType === "xml") {
          if (!options.getValue) {
            options.getValue = function(element) {
              return $(element).text();
            };
          }
          if (!options.list) {
            options.list = {};
          }
          if (!options.list.sort) {
            options.list.sort = {};
          }
          options.list.sort.method = function(a, b) {
            a = options.getValue(a);
            b = options.getValue(b);
            if (a < b) {
              return -1;
            }
            if (a > b) {
              return 1;
            }
            return 0;
          };
          if (!options.list.match) {
            options.list.match = {};
          }
          options.list.match.method = function(element, phrase) {
            if (element.search(phrase) > -1) {
              return true;
            } else {
              return false;
            }
          };
        }
        if (options.categories !== void 0 && options.categories instanceof Array) {
          var categories = [];
          for (var i = 0, length = options.categories.length; i < length; i += 1) {
            var category = options.categories[i];
            for (var property in defaults.categories[0]) {
              if (category[property] === void 0) {
                category[property] = defaults.categories[0][property];
              }
            }
            categories.push(category);
          }
          options.categories = categories;
        }
      }
      function mergeOptions() {
        defaults = mergeObjects(defaults, options);
        function mergeObjects(source, target) {
          var mergedObject = source || {};
          for (var propertyName in source) {
            if (target[propertyName] !== void 0 && target[propertyName] !== null) {
              if (typeof target[propertyName] !== "object" || target[propertyName] instanceof Array) {
                mergedObject[propertyName] = target[propertyName];
              } else {
                mergeObjects(source[propertyName], target[propertyName]);
              }
            }
          }
          if (target.data !== void 0 && target.data !== null && typeof target.data === "object") {
            mergedObject.data = target.data;
          }
          return mergedObject;
        }
      }
      function processAfterMerge() {
        if (defaults.url !== "list-required" && typeof defaults.url !== "function") {
          var defaultUrl = defaults.url;
          defaults.url = function() {
            return defaultUrl;
          };
        }
        if (defaults.ajaxSettings.url !== void 0 && typeof defaults.ajaxSettings.url !== "function") {
          var defaultUrl = defaults.ajaxSettings.url;
          defaults.ajaxSettings.url = function() {
            return defaultUrl;
          };
        }
        if (typeof defaults.listLocation === "string") {
          var defaultlistLocation = defaults.listLocation;
          if (defaults.dataType.toUpperCase() === "XML") {
            defaults.listLocation = function(data) {
              return $(data).find(defaultlistLocation);
            };
          } else {
            defaults.listLocation = function(data) {
              return data[defaultlistLocation];
            };
          }
        }
        if (typeof defaults.getValue === "string") {
          var defaultsGetValue = defaults.getValue;
          defaults.getValue = function(element) {
            return element[defaultsGetValue];
          };
        }
        if (options.categories !== void 0) {
          defaults.categoriesAssigned = true;
        }
      }
      function addAjaxSettings() {
        if (options.ajaxSettings !== void 0 && typeof options.ajaxSettings === "object") {
          defaults.ajaxSettings = options.ajaxSettings;
        } else {
          defaults.ajaxSettings = {};
        }
      }
      function isAssigned(name) {
        if (defaults[name] !== void 0 && defaults[name] !== null) {
          return true;
        } else {
          return false;
        }
      }
      function printPropertiesThatDoesntExist(consol, optionsToCheck) {
        checkPropertiesIfExist(defaults, optionsToCheck);
        function checkPropertiesIfExist(source, target) {
          for (var property in target) {
            if (source[property] === void 0) {
              consol.log("Property '" + property + "' does not exist in EasyAutocomplete options API.");
            }
            if (typeof source[property] === "object" && $.inArray(property, externalObjects) === -1) {
              checkPropertiesIfExist(source[property], target[property]);
            }
          }
        }
      }
    };
    return scope;
  }(EasyAutocomplete || {});
  var EasyAutocomplete = function(scope) {
    scope.Logger = function Logger() {
      this.error = function(message) {
        console.log("ERROR: " + message);
      };
      this.warning = function(message) {
        console.log("WARNING: " + message);
      };
    };
    return scope;
  }(EasyAutocomplete || {});
  var EasyAutocomplete = function(scope) {
    scope.Constans = function Constans() {
      var constants = {
        CONTAINER_CLASS: "easy-autocomplete-container",
        CONTAINER_ID: "eac-container-",
        WRAPPER_CSS_CLASS: "easy-autocomplete"
      };
      this.getValue = function(propertyName) {
        return constants[propertyName];
      };
    };
    return scope;
  }(EasyAutocomplete || {});
  var EasyAutocomplete = function(scope) {
    scope.ListBuilderService = function ListBuilderService(configuration, proccessResponseData) {
      this.init = function(data) {
        var listBuilder = [], builder = {};
        builder.data = configuration.get("listLocation")(data);
        builder.getValue = configuration.get("getValue");
        builder.maxListSize = configuration.get("list").maxNumberOfElements;
        listBuilder.push(builder);
        return listBuilder;
      };
      this.updateCategories = function(listBuilder, data) {
        if (configuration.get("categoriesAssigned")) {
          listBuilder = [];
          for (var i = 0; i < configuration.get("categories").length; i += 1) {
            var builder = convertToListBuilder(configuration.get("categories")[i], data);
            listBuilder.push(builder);
          }
        }
        return listBuilder;
      };
      this.convertXml = function(listBuilder) {
        if (configuration.get("dataType").toUpperCase() === "XML") {
          for (var i = 0; i < listBuilder.length; i += 1) {
            listBuilder[i].data = convertXmlToList(listBuilder[i]);
          }
        }
        return listBuilder;
      };
      this.processData = function(listBuilder, inputPhrase) {
        for (var i = 0, length = listBuilder.length; i < length; i += 1) {
          listBuilder[i].data = proccessResponseData(configuration, listBuilder[i], inputPhrase);
        }
        return listBuilder;
      };
      this.checkIfDataExists = function(listBuilders) {
        for (var i = 0, length = listBuilders.length; i < length; i += 1) {
          if (listBuilders[i].data !== void 0 && listBuilders[i].data instanceof Array) {
            if (listBuilders[i].data.length > 0) {
              return true;
            }
          }
        }
        return false;
      };
      function convertToListBuilder(category, data) {
        var builder = {};
        if (configuration.get("dataType").toUpperCase() === "XML") {
          builder = convertXmlToListBuilder();
        } else {
          builder = convertDataToListBuilder();
        }
        if (category.header !== void 0) {
          builder.header = category.header;
        }
        if (category.maxNumberOfElements !== void 0) {
          builder.maxNumberOfElements = category.maxNumberOfElements;
        }
        if (configuration.get("list").maxNumberOfElements !== void 0) {
          builder.maxListSize = configuration.get("list").maxNumberOfElements;
        }
        if (category.getValue !== void 0) {
          if (typeof category.getValue === "string") {
            var defaultsGetValue = category.getValue;
            builder.getValue = function(element) {
              return element[defaultsGetValue];
            };
          } else if (typeof category.getValue === "function") {
            builder.getValue = category.getValue;
          }
        } else {
          builder.getValue = configuration.get("getValue");
        }
        return builder;
        function convertXmlToListBuilder() {
          var builder2 = {}, listLocation;
          if (category.xmlElementName !== void 0) {
            builder2.xmlElementName = category.xmlElementName;
          }
          if (category.listLocation !== void 0) {
            listLocation = category.listLocation;
          } else if (configuration.get("listLocation") !== void 0) {
            listLocation = configuration.get("listLocation");
          }
          if (listLocation !== void 0) {
            if (typeof listLocation === "string") {
              builder2.data = $(data).find(listLocation);
            } else if (typeof listLocation === "function") {
              builder2.data = listLocation(data);
            }
          } else {
            builder2.data = data;
          }
          return builder2;
        }
        function convertDataToListBuilder() {
          var builder2 = {};
          if (category.listLocation !== void 0) {
            if (typeof category.listLocation === "string") {
              builder2.data = data[category.listLocation];
            } else if (typeof category.listLocation === "function") {
              builder2.data = category.listLocation(data);
            }
          } else {
            builder2.data = data;
          }
          return builder2;
        }
      }
      function convertXmlToList(builder) {
        var simpleList = [];
        if (builder.xmlElementName === void 0) {
          builder.xmlElementName = configuration.get("xmlElementName");
        }
        $(builder.data).find(builder.xmlElementName).each(function() {
          simpleList.push(this);
        });
        return simpleList;
      }
    };
    return scope;
  }(EasyAutocomplete || {});
  var EasyAutocomplete = function(scope) {
    scope.proccess = function proccessData(config, listBuilder, phrase) {
      scope.proccess.match = match;
      var list = listBuilder.data, inputPhrase = phrase;
      list = findMatch(list, inputPhrase);
      list = reduceElementsInList(list);
      list = sort(list);
      return list;
      function findMatch(list2, phrase2) {
        var preparedList = [], value = "";
        if (config.get("list").match.enabled) {
          for (var i = 0, length = list2.length; i < length; i += 1) {
            value = config.get("getValue")(list2[i]);
            if (match(value, phrase2)) {
              preparedList.push(list2[i]);
            }
          }
        } else {
          preparedList = list2;
        }
        return preparedList;
      }
      function match(value, phrase2) {
        if (!config.get("list").match.caseSensitive) {
          if (typeof value === "string") {
            value = value.toLowerCase();
          }
          phrase2 = phrase2.toLowerCase();
        }
        if (config.get("list").match.method(value, phrase2)) {
          return true;
        } else {
          return false;
        }
      }
      function reduceElementsInList(list2) {
        if (listBuilder.maxNumberOfElements !== void 0 && list2.length > listBuilder.maxNumberOfElements) {
          list2 = list2.slice(0, listBuilder.maxNumberOfElements);
        }
        return list2;
      }
      function sort(list2) {
        if (config.get("list").sort.enabled) {
          list2.sort(config.get("list").sort.method);
        }
        return list2;
      }
    };
    return scope;
  }(EasyAutocomplete || {});
  var EasyAutocomplete = function(scope) {
    scope.Template = function Template(options) {
      var genericTemplates = {
        basic: {
          type: "basic",
          method: function(element) {
            return element;
          },
          cssClass: ""
        },
        description: {
          type: "description",
          fields: {
            description: "description"
          },
          method: function(element) {
            return element + " - description";
          },
          cssClass: "eac-description"
        },
        iconLeft: {
          type: "iconLeft",
          fields: {
            icon: ""
          },
          method: function(element) {
            return element;
          },
          cssClass: "eac-icon-left"
        },
        iconRight: {
          type: "iconRight",
          fields: {
            iconSrc: ""
          },
          method: function(element) {
            return element;
          },
          cssClass: "eac-icon-right"
        },
        links: {
          type: "links",
          fields: {
            link: ""
          },
          method: function(element) {
            return element;
          },
          cssClass: ""
        },
        custom: {
          type: "custom",
          method: function() {
          },
          cssClass: ""
        }
      }, convertTemplateToMethod = function(template) {
        var _fields = template.fields, buildMethod;
        if (template.type === "description") {
          buildMethod = genericTemplates.description.method;
          if (typeof _fields.description === "string") {
            buildMethod = function(elementValue, element) {
              return elementValue + " - <span>" + element[_fields.description] + "</span>";
            };
          } else if (typeof _fields.description === "function") {
            buildMethod = function(elementValue, element) {
              return elementValue + " - <span>" + _fields.description(element) + "</span>";
            };
          }
          return buildMethod;
        }
        if (template.type === "iconRight") {
          if (typeof _fields.iconSrc === "string") {
            buildMethod = function(elementValue, element) {
              return elementValue + "<img class='eac-icon' src='" + element[_fields.iconSrc] + "' />";
            };
          } else if (typeof _fields.iconSrc === "function") {
            buildMethod = function(elementValue, element) {
              return elementValue + "<img class='eac-icon' src='" + _fields.iconSrc(element) + "' />";
            };
          }
          return buildMethod;
        }
        if (template.type === "iconLeft") {
          if (typeof _fields.iconSrc === "string") {
            buildMethod = function(elementValue, element) {
              return "<img class='eac-icon' src='" + element[_fields.iconSrc] + "' />" + elementValue;
            };
          } else if (typeof _fields.iconSrc === "function") {
            buildMethod = function(elementValue, element) {
              return "<img class='eac-icon' src='" + _fields.iconSrc(element) + "' />" + elementValue;
            };
          }
          return buildMethod;
        }
        if (template.type === "links") {
          if (typeof _fields.link === "string") {
            buildMethod = function(elementValue, element) {
              return "<a href='" + element[_fields.link] + "' >" + elementValue + "</a>";
            };
          } else if (typeof _fields.link === "function") {
            buildMethod = function(elementValue, element) {
              return "<a href='" + _fields.link(element) + "' >" + elementValue + "</a>";
            };
          }
          return buildMethod;
        }
        if (template.type === "custom") {
          return template.method;
        }
        return genericTemplates.basic.method;
      }, prepareBuildMethod = function(options2) {
        if (!options2 || !options2.type) {
          return genericTemplates.basic.method;
        }
        if (options2.type && genericTemplates[options2.type]) {
          return convertTemplateToMethod(options2);
        } else {
          return genericTemplates.basic.method;
        }
      }, templateClass = function(options2) {
        var emptyStringFunction = function() {
          return "";
        };
        if (!options2 || !options2.type) {
          return emptyStringFunction;
        }
        if (options2.type && genericTemplates[options2.type]) {
          return function() {
            var _cssClass = genericTemplates[options2.type].cssClass;
            return function() {
              return _cssClass;
            };
          }();
        } else {
          return emptyStringFunction;
        }
      };
      this.getTemplateClass = templateClass(options);
      this.build = prepareBuildMethod(options);
    };
    return scope;
  }(EasyAutocomplete || {});
  var EasyAutocomplete = function(scope) {
    scope.main = function Core($input, options) {
      var module = {
        name: "EasyAutocomplete",
        shortcut: "eac"
      };
      var consts = new scope.Constans(), config = new scope.Configuration(options), logger2 = new scope.Logger(), template = new scope.Template(options.template), listBuilderService = new scope.ListBuilderService(config, scope.proccess), checkParam = config.equals, $field = $input, $container = "", elementsList = [], selectedElement = -1, requestDelayTimeoutId;
      scope.consts = consts;
      this.getConstants = function() {
        return consts;
      };
      this.getConfiguration = function() {
        return config;
      };
      this.getContainer = function() {
        return $container;
      };
      this.getSelectedItemIndex = function() {
        return selectedElement;
      };
      this.getItems = function() {
        return elementsList;
      };
      this.getItemData = function(index) {
        if (elementsList.length < index || elementsList[index] === void 0) {
          return -1;
        } else {
          return elementsList[index];
        }
      };
      this.getSelectedItemData = function() {
        return this.getItemData(selectedElement);
      };
      this.build = function() {
        prepareField();
      };
      this.init = function() {
        init();
      };
      function init() {
        if ($field.length === 0) {
          logger2.error("Input field doesn't exist.");
          return;
        }
        if (!config.checkDataUrlProperties()) {
          logger2.error("One of options variables 'data' or 'url' must be defined.");
          return;
        }
        if (!config.checkRequiredProperties()) {
          logger2.error("Will not work without mentioned properties.");
          return;
        }
        prepareField();
        bindEvents();
      }
      function prepareField() {
        if ($field.parent().hasClass(consts.getValue("WRAPPER_CSS_CLASS"))) {
          removeContainer();
          removeWrapper();
        }
        createWrapper();
        createContainer();
        $container = $("#" + getContainerId());
        if (config.get("placeholder")) {
          $field.attr("placeholder", config.get("placeholder"));
        }
        function createWrapper() {
          var $wrapper = $("<div>"), classes = consts.getValue("WRAPPER_CSS_CLASS");
          if (config.get("theme") && config.get("theme") !== "") {
            classes += " eac-" + config.get("theme");
          }
          if (config.get("cssClasses") && config.get("cssClasses") !== "") {
            classes += " " + config.get("cssClasses");
          }
          if (template.getTemplateClass() !== "") {
            classes += " " + template.getTemplateClass();
          }
          $wrapper.addClass(classes);
          $field.wrap($wrapper);
          if (config.get("adjustWidth") === true) {
            adjustWrapperWidth();
          }
        }
        function adjustWrapperWidth() {
          var fieldWidth = $field.outerWidth();
          $field.parent().css("width", fieldWidth);
        }
        function removeWrapper() {
          $field.unwrap();
        }
        function createContainer() {
          var $elements_container = $("<div>").addClass(consts.getValue("CONTAINER_CLASS"));
          $elements_container.attr("id", getContainerId()).prepend($("<ul>"));
          (function() {
            $elements_container.on("show.eac", function() {
              switch (config.get("list").showAnimation.type) {
                case "slide":
                  var animationTime = config.get("list").showAnimation.time, callback = config.get("list").showAnimation.callback;
                  $elements_container.find("ul").slideDown(animationTime, callback);
                  break;
                case "fade":
                  var animationTime = config.get("list").showAnimation.time, callback = config.get("list").showAnimation.callback;
                  $elements_container.find("ul").fadeIn(animationTime), callback;
                  break;
                default:
                  $elements_container.find("ul").show();
                  break;
              }
              config.get("list").onShowListEvent();
            }).on("hide.eac", function() {
              switch (config.get("list").hideAnimation.type) {
                case "slide":
                  var animationTime = config.get("list").hideAnimation.time, callback = config.get("list").hideAnimation.callback;
                  $elements_container.find("ul").slideUp(animationTime, callback);
                  break;
                case "fade":
                  var animationTime = config.get("list").hideAnimation.time, callback = config.get("list").hideAnimation.callback;
                  $elements_container.find("ul").fadeOut(animationTime, callback);
                  break;
                default:
                  $elements_container.find("ul").hide();
                  break;
              }
              config.get("list").onHideListEvent();
            }).on("selectElement.eac", function() {
              $elements_container.find("ul li").removeClass("selected");
              $elements_container.find("ul li").eq(selectedElement).addClass("selected");
              config.get("list").onSelectItemEvent();
            }).on("loadElements.eac", function(event, listBuilders, phrase) {
              var $item = "", $listContainer = $elements_container.find("ul");
              $listContainer.empty().detach();
              elementsList = [];
              var counter = 0;
              for (var builderIndex = 0, listBuildersLength = listBuilders.length; builderIndex < listBuildersLength; builderIndex += 1) {
                var listData = listBuilders[builderIndex].data;
                if (listData.length === 0) {
                  continue;
                }
                if (listBuilders[builderIndex].header !== void 0 && listBuilders[builderIndex].header.length > 0) {
                  $listContainer.append("<div class='eac-category' >" + listBuilders[builderIndex].header + "</div>");
                }
                for (var i = 0, listDataLength = listData.length; i < listDataLength && counter < listBuilders[builderIndex].maxListSize; i += 1) {
                  $item = $("<li><div class='eac-item'></div></li>");
                  (function() {
                    var j = i, itemCounter = counter, elementsValue = listBuilders[builderIndex].getValue(listData[j]);
                    $item.find(" > div").on("click", function() {
                      $field.val(elementsValue).trigger("change");
                      selectedElement = itemCounter;
                      selectElement(itemCounter);
                      config.get("list").onClickEvent();
                      config.get("list").onChooseEvent();
                    }).mouseover(function() {
                      selectedElement = itemCounter;
                      selectElement(itemCounter);
                      config.get("list").onMouseOverEvent();
                    }).mouseout(function() {
                      config.get("list").onMouseOutEvent();
                    }).html(template.build(highlight(elementsValue, phrase), listData[j]));
                  })();
                  $listContainer.append($item);
                  elementsList.push(listData[i]);
                  counter += 1;
                }
              }
              $elements_container.append($listContainer);
              config.get("list").onLoadEvent();
            });
          })();
          $field.after($elements_container);
        }
        function removeContainer() {
          $field.next("." + consts.getValue("CONTAINER_CLASS")).remove();
        }
        function highlight(string, phrase) {
          if (config.get("highlightPhrase") && phrase !== "") {
            return highlightPhrase(string, phrase);
          } else {
            return string;
          }
        }
        function escapeRegExp(str) {
          return str.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, "\\$&");
        }
        function highlightPhrase(string, phrase) {
          var escapedPhrase = escapeRegExp(phrase);
          return (string + "").replace(new RegExp("(" + escapedPhrase + ")", "gi"), "<b>$1</b>");
        }
      }
      function getContainerId() {
        var elementId2 = $field.attr("id");
        elementId2 = consts.getValue("CONTAINER_ID") + elementId2;
        return elementId2;
      }
      function bindEvents() {
        bindAllEvents();
        function bindAllEvents() {
          if (checkParam("autocompleteOff", true)) {
            removeAutocomplete();
          }
          bindFocusOut();
          bindKeyup();
          bindKeydown();
          bindKeypress();
          bindFocus();
          bindBlur();
        }
        function bindFocusOut() {
          $field.focusout(function() {
            var fieldValue = $field.val(), phrase;
            if (!config.get("list").match.caseSensitive) {
              fieldValue = fieldValue.toLowerCase();
            }
            for (var i = 0, length = elementsList.length; i < length; i += 1) {
              phrase = config.get("getValue")(elementsList[i]);
              if (!config.get("list").match.caseSensitive) {
                phrase = phrase.toLowerCase();
              }
              if (phrase === fieldValue) {
                selectedElement = i;
                selectElement(selectedElement);
                return;
              }
            }
          });
        }
        function bindKeyup() {
          $field.off("keyup").keyup(function(event) {
            switch (event.keyCode) {
              case 27:
                hideContainer();
                loseFieldFocus();
                break;
              case 38:
                event.preventDefault();
                if (elementsList.length > 0 && selectedElement > 0) {
                  selectedElement -= 1;
                  $field.val(config.get("getValue")(elementsList[selectedElement]));
                  selectElement(selectedElement);
                }
                break;
              case 40:
                event.preventDefault();
                if (elementsList.length > 0 && selectedElement < elementsList.length - 1) {
                  selectedElement += 1;
                  $field.val(config.get("getValue")(elementsList[selectedElement]));
                  selectElement(selectedElement);
                }
                break;
              default:
                if (event.keyCode > 40 || event.keyCode === 8) {
                  var inputPhrase = $field.val();
                  if (!(config.get("list").hideOnEmptyPhrase === true && event.keyCode === 8 && inputPhrase === "")) {
                    if (config.get("requestDelay") > 0) {
                      if (requestDelayTimeoutId !== void 0) {
                        clearTimeout(requestDelayTimeoutId);
                      }
                      requestDelayTimeoutId = setTimeout(function() {
                        loadData(inputPhrase);
                      }, config.get("requestDelay"));
                    } else {
                      loadData(inputPhrase);
                    }
                  } else {
                    hideContainer();
                  }
                }
                break;
            }
            function loadData(inputPhrase2) {
              if (inputPhrase2.length < config.get("minCharNumber")) {
                return;
              }
              if (config.get("data") !== "list-required") {
                var data = config.get("data");
                var listBuilders = listBuilderService.init(data);
                listBuilders = listBuilderService.updateCategories(listBuilders, data);
                listBuilders = listBuilderService.processData(listBuilders, inputPhrase2);
                loadElements(listBuilders, inputPhrase2);
                if ($field.parent().find("li").length > 0) {
                  showContainer();
                } else {
                  hideContainer();
                }
              }
              var settings = createAjaxSettings();
              if (settings.url === void 0 || settings.url === "") {
                settings.url = config.get("url");
              }
              if (settings.dataType === void 0 || settings.dataType === "") {
                settings.dataType = config.get("dataType");
              }
              if (settings.url !== void 0 && settings.url !== "list-required") {
                settings.url = settings.url(inputPhrase2);
                settings.data = config.get("preparePostData")(settings.data, inputPhrase2);
                $.ajax(settings).done(function(data2) {
                  var listBuilders2 = listBuilderService.init(data2);
                  listBuilders2 = listBuilderService.updateCategories(listBuilders2, data2);
                  listBuilders2 = listBuilderService.convertXml(listBuilders2);
                  if (checkInputPhraseMatchResponse(inputPhrase2, data2)) {
                    listBuilders2 = listBuilderService.processData(listBuilders2, inputPhrase2);
                    loadElements(listBuilders2, inputPhrase2);
                  }
                  if (listBuilderService.checkIfDataExists(listBuilders2) && $field.parent().find("li").length > 0) {
                    showContainer();
                  } else {
                    hideContainer();
                  }
                  config.get("ajaxCallback")();
                }).fail(function() {
                  logger2.warning("Fail to load response data");
                }).always(function() {
                });
              }
              function createAjaxSettings() {
                var settings2 = {}, ajaxSettings = config.get("ajaxSettings") || {};
                for (var set in ajaxSettings) {
                  settings2[set] = ajaxSettings[set];
                }
                return settings2;
              }
              function checkInputPhraseMatchResponse(inputPhrase3, data2) {
                if (config.get("matchResponseProperty") !== false) {
                  if (typeof config.get("matchResponseProperty") === "string") {
                    return data2[config.get("matchResponseProperty")] === inputPhrase3;
                  }
                  if (typeof config.get("matchResponseProperty") === "function") {
                    return config.get("matchResponseProperty")(data2) === inputPhrase3;
                  }
                  return true;
                } else {
                  return true;
                }
              }
            }
          });
        }
        function bindKeydown() {
          $field.on("keydown", function(evt) {
            evt = evt || window.event;
            var keyCode = evt.keyCode;
            if (keyCode === 38) {
              suppressKeypress = true;
              return false;
            }
          }).keydown(function(event) {
            if (event.keyCode === 13 && selectedElement > -1) {
              $field.val(config.get("getValue")(elementsList[selectedElement]));
              config.get("list").onKeyEnterEvent();
              config.get("list").onChooseEvent();
              selectedElement = -1;
              hideContainer();
              event.preventDefault();
            }
          });
        }
        function bindKeypress() {
          $field.off("keypress");
        }
        function bindFocus() {
          $field.focus(function() {
            if ($field.val() !== "" && elementsList.length > 0) {
              selectedElement = -1;
              showContainer();
            }
          });
        }
        function bindBlur() {
          $field.blur(function() {
            setTimeout(function() {
              selectedElement = -1;
              hideContainer();
            }, 250);
          });
        }
        function removeAutocomplete() {
          $field.attr("autocomplete", "off");
        }
      }
      function showContainer() {
        $container.trigger("show.eac");
      }
      function hideContainer() {
        $container.trigger("hide.eac");
      }
      function selectElement(index) {
        $container.trigger("selectElement.eac", index);
      }
      function loadElements(list, phrase) {
        $container.trigger("loadElements.eac", [list, phrase]);
      }
      function loseFieldFocus() {
        $field.trigger("blur");
      }
    };
    scope.eacHandles = [];
    scope.getHandle = function(id) {
      return scope.eacHandles[id];
    };
    scope.inputHasId = function(input) {
      if ($(input).attr("id") !== void 0 && $(input).attr("id").length > 0) {
        return true;
      } else {
        return false;
      }
    };
    scope.assignRandomId = function(input) {
      var fieldId = "";
      do {
        fieldId = "eac-" + Math.floor(Math.random() * 1e4);
      } while ($("#" + fieldId).length !== 0);
      elementId = scope.consts.getValue("CONTAINER_ID") + fieldId;
      $(input).attr("id", fieldId);
    };
    scope.setHandle = function(handle, id) {
      scope.eacHandles[id] = handle;
    };
    return scope;
  }(EasyAutocomplete || {});
  (function($2) {
    $2.fn.easyAutocomplete = function(options) {
      return this.each(function() {
        var $this = $2(this), eacHandle = new EasyAutocomplete.main($this, options);
        if (!EasyAutocomplete.inputHasId($this)) {
          EasyAutocomplete.assignRandomId($this);
        }
        eacHandle.init();
        EasyAutocomplete.setHandle(eacHandle, $this.attr("id"));
      });
    };
    $2.fn.getSelectedItemIndex = function() {
      var inputId = $2(this).attr("id");
      if (inputId !== void 0) {
        return EasyAutocomplete.getHandle(inputId).getSelectedItemIndex();
      }
      return -1;
    };
    $2.fn.getItems = function() {
      var inputId = $2(this).attr("id");
      if (inputId !== void 0) {
        return EasyAutocomplete.getHandle(inputId).getItems();
      }
      return -1;
    };
    $2.fn.getItemData = function(index) {
      var inputId = $2(this).attr("id");
      if (inputId !== void 0 && index > -1) {
        return EasyAutocomplete.getHandle(inputId).getItemData(index);
      }
      return -1;
    };
    $2.fn.getSelectedItemData = function() {
      var inputId = $2(this).attr("id");
      if (inputId !== void 0) {
        return EasyAutocomplete.getHandle(inputId).getSelectedItemData();
      }
      return -1;
    };
  })(jQuery);

  // node_modules/jquery-multidownload/jquery-multidownload.js
  (function($2, window2, document2, undefined2) {
    "use strict";
    var download = function(options) {
      var triggerDelay = options && options.delay || 100;
      var cleaningDelay = options && options.cleaningDelay || 1e3;
      this.each(function(index, item) {
        createIFrame(item, index * triggerDelay, cleaningDelay);
      });
      return this;
    };
    var createIFrame = function(item, triggerDelay, cleaningDelay) {
      setTimeout(function() {
        var frame = $2('<iframe style="display: none;" class="multi-download-frame"></iframe>');
        frame.attr("src", $2(item).attr("href") || $2(item).attr("src"));
        $2(item).after(frame);
        setTimeout(function() {
          frame.remove();
        }, cleaningDelay);
      }, triggerDelay);
    };
    $2.fn.multiDownload = function(options) {
      return download.call(this, options);
    };
  })(jQuery, window, document);

  // app/javascript/src/application/communities_collections_searchbox.js
  var import_turbolinks = __toESM(require_turbolinks());
  document.addEventListener("turbolinks:load", () => {
    const $input = $(".js-communities-collections-searchbox");
    if ($input.length > 0) {
      const maxItems = $input.data("max-items") || 5;
      const options = {
        adjustWidth: false,
        getValue: "name",
        url(phrase) {
          return `communities.json?search=${phrase}`;
        },
        categories: [
          {
            maxNumberOfElements: maxItems,
            listLocation: "communities",
            header: "<strong>Communities</strong>"
          },
          {
            maxNumberOfElements: maxItems,
            listLocation: "collections",
            header: "<strong>Collections</strong>"
          }
        ],
        list: {
          onChooseEvent() {
            const { url } = $input.getSelectedItemData();
            $input.val("");
            import_turbolinks.default.visit(url);
          }
        }
      };
      $input.easyAutocomplete(options);
    }
  });

  // app/javascript/src/application/item_draft.js
  var unsavedChanges = false;
  function collectionSelect($element) {
    const $root = $element.hasClass(".js-community-collection") ? $element : $element.closest(".js-community-collection");
    return $root.find(".js-collection-select");
  }
  function toggleRemoveVisibility() {
    if ($("div.js-community-collection").length > 1) {
      $(".js-remove-community-collection").show();
    } else {
      $(".js-remove-community-collection").hide();
    }
  }
  function addCommunityCollectionInput() {
    const $newInput = $("div.js-community-collection").first().clone();
    $newInput.find(".js-community-select").val(null);
    collectionSelect($newInput).attr("disabled", true).val(null);
    $newInput.appendTo(".js-communities-collections-list");
    toggleRemoveVisibility();
  }
  function removeCommunityCollectionInput($link) {
    if ($("div.js-community-collection").length > 1) {
      $link.closest("div.js-community-collection").remove();
      toggleRemoveVisibility();
    }
  }
  function toggleIcon(e) {
    $(e.target).prev(".card-header").find(".js-more-less").toggleClass("fa-chevron-down fa-chevron-up");
  }
  function fetchCollections() {
    const $collectionSelect = collectionSelect($(this));
    const id = $(this).find("option:selected").val();
    if (!id) {
      $collectionSelect.prop("disabled", true).empty();
    } else {
      $.getJSON(`/communities/${id}.json`).done((data) => {
        let items = `<option value>${$collectionSelect.data("placeholder")}</option>`;
        $.each(data.collections, (idx, item) => {
          items += `<option value="${item.id}">${item.title}</option>`;
        });
        $collectionSelect.prop("disabled", false).empty().append(items);
      });
    }
  }
  document.addEventListener("turbolinks:load", () => {
    unsavedChanges = false;
    toggleRemoveVisibility();
    $("#js-license-accordion .card").on("hidden.bs.collapse", toggleIcon);
    $("#js-license-accordion .card").on("shown.bs.collapse", toggleIcon);
    $("#js-additional-fields-accordion .card").on("hidden.bs.collapse", toggleIcon);
    $("#js-additional-fields-accordion .card").on("shown.bs.collapse", toggleIcon);
    $("form.js-deposit-item").on("change", "input, select, textarea", () => {
      unsavedChanges = true;
    });
    $("form.js-deposit-item").submit(() => {
      unsavedChanges = false;
    });
    $(".nav-item .disabled").click((e) => {
      e.preventDefault();
    });
    $("form.js-deposit-item .js-add-community-collection").click((e) => {
      e.preventDefault();
      addCommunityCollectionInput();
    });
    $("form.js-deposit-item").on("click", ".js-remove-community-collection", function removeCommunityCollection(e) {
      e.preventDefault();
      removeCommunityCollectionInput($(this));
    });
    $("form.js-deposit-item").on("change", ".js-community-select", fetchCollections);
    $(".js-selectize").selectize({
      selectOnTab: true,
      closeAfterSelect: true
    });
    $(".js-selectize-create").selectize({
      delimiter: "|",
      // We want | to seperate items (Authors names for example, `Doe, Jane B. | Deer, John A.' )
      persist: false,
      createOnBlur: true,
      create(input) {
        return {
          value: input,
          text: input
        };
      }
    });
  });
  $(document).on("turbolinks:before-visit", () => {
    if (unsavedChanges) {
      return window.confirm("Any changes you have made will NOT be saved. Are you sure you want to leave?");
    }
    return void 0;
  });
  $(window).bind("beforeunload", (event) => {
    if (unsavedChanges) {
      const msg = "Any changes you have made will NOT be saved. Are you sure you want to leave?";
      event.returnValue = msg;
      return msg;
    }
    return void 0;
  });

  // app/javascript/src/application/item_show.js
  document.addEventListener("turbolinks:load", () => {
    $(".js-download-all").click((event) => {
      event.preventDefault();
      $(".js-download").multiDownload();
    });
    $("#more-information-hidden").on("hidden.bs.collapse shown.bs.collapse", () => {
      $(".js-more-information-shown").toggleClass("d-none");
      $(".js-more-information-hidden").toggleClass("d-none");
    });
    $("#edit-history-hidden").on("hidden.bs.collapse shown.bs.collapse", () => {
      $(".js-edit-history-shown").toggleClass("d-none");
      $(".js-edit-history-hidden").toggleClass("d-none");
    });
  });

  // app/javascript/src/application/search.js
  document.addEventListener("turbolinks:load", () => {
    $(".js-hideshow-control").on("click", function toggleHideShow() {
      const $hideshow = $(this).closest(".js-hideshow");
      $hideshow.find(".js-hideshow-control").toggleClass("d-none");
    });
    $(".js-filters-open").on("click", (event) => {
      event.preventDefault();
      $(".filters-overlay").fadeIn();
      $(".jupiter-filters").toggleClass("d-none");
    });
    $(".js-filters-close, .overlay").on("click", (event) => {
      event.preventDefault();
      $(".jupiter-filters").toggleClass("d-none");
      $(".filters-overlay").fadeOut();
    });
  });

  // app/javascript/src/application/skip_content.js
  document.addEventListener("turbolinks:load", () => {
    $(".js-skip-to-content").click(function skipToContent(event) {
      $($(this).attr("href")).attr("tabIndex", -1).focus();
      event.preventDefault();
    });
  });

  // app/javascript/src/application/toggle_collections.js
  function hideCollections(event) {
    const communityId = $(this).data("communityId");
    $(this).hide();
    $(`.js-collection-btn[data-community-id='${communityId}']`).show();
    $(`ul#${communityId}`).hide();
    event.preventDefault();
  }
  document.addEventListener("turbolinks:load", () => {
    $("button.js-close-btn").click(hideCollections);
  });

  // app/javascript/src/application/upload_files.js
  var import_dropzone = __toESM(require_dropzone());
  document.addEventListener("turbolinks:load", () => {
    import_dropzone.default.autoDiscover = false;
    if (document.querySelector("form.js-files-dropzone") !== null) {
      const filesDropzone = new import_dropzone.default("form.js-files-dropzone", {
        paramName: "file",
        maxFilesize: 1024,
        // default is 256 MB, lets bump to 1 GB
        timeout: 36e5,
        // default is 30 seconds, lets bump to 5 minutes
        createImageThumbnails: false,
        previewTemplate: $("#js-dropzone-preview-template").html(),
        previewsContainer: "#js-previews-list",
        // Define the container to display the previews
        clickable: ".js-add-files",
        // Define the element that should be used as click trigger to select files.
        init() {
          this.on("success", (file, response) => {
            $("#js-files-list").hide();
            $("#js-files-list").html(response.files_list_html).fadeIn(500);
            setTimeout(() => {
              filesDropzone.removeFile(file);
            }, 1e3);
          });
        }
      });
    }
  });

  // app/javascript/application.js
  ActiveStorage.start();
  import_ujs.default.start();
  import_turbolinks2.default.start();
})();
/*! Bundled license information:

jquery/dist/jquery.js:
  (*!
   * jQuery JavaScript Library v3.7.1
   * https://jquery.com/
   *
   * Copyright OpenJS Foundation and other contributors
   * Released under the MIT license
   * https://jquery.org/license
   *
   * Date: 2023-08-28T13:37Z
   *)

popper.js/dist/umd/popper.js:
  (**!
   * @fileOverview Kickass library to create and place poppers near their reference elements.
   * @version 1.16.1
   * @license
   * Copyright (c) 2016 Federico Zivolo and contributors
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in all
   * copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
   * SOFTWARE.
   *)

bootstrap/dist/js/bootstrap.js:
  (*!
    * Bootstrap v4.6.2 (https://getbootstrap.com/)
    * Copyright 2011-2022 The Bootstrap Authors (https://github.com/twbs/bootstrap/graphs/contributors)
    * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
    *)
*/
//# sourceMappingURL=/assets/application.js.map
